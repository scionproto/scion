# This build file is layered onto the openwrt_<target>_SDK tree which is
# imported as an external dependency. It takes care of:
# * Wrapping SCION binaries from the SCION build, into ipk packages.
# * Exporting the musl-gcc compiler suite as a bazel toolchain.

load("@@//dist/openwrt:ipk.bzl", "ipk_pkg")
load("@@//dist/openwrt:musl_toolchain.bzl", "musl_cc_toolchain")

package(default_visibility = ["//visibility:public"])

# Wrap scion binaries into ipk. See rule in ipk.bzl
ipk_pkg(
    name = "router_ipk",
    pkg = "router",
    target_arch = "x86_64",
    executables = ["@@//router/cmd/router:router"],
    initds = ["@@//dist/openwrt:initds/router"],
    configsroot = "@@//dist/openwrt:configs",
    configs = [
        "@@//dist/openwrt:configs/router.toml",
        "@@//dist/openwrt:configs/topology.json",
        "@@//dist/openwrt:configs/keys/master0.key",
        "@@//dist/openwrt:configs/keys/master1.key",
    ],
    visibility = ["//visibility:public"],
)

ipk_pkg(
    name = "gateway_ipk",
    pkg = "gateway",
    target_arch = "x86_64",
    executables = ["@@//gateway/cmd/gateway:gateway"],
    initds = ["@@//dist/openwrt:initds/gateway"],
    configsroot = "@@//dist/openwrt:configs",
    configs = [
        "@@//dist/openwrt:configs/sig.toml",
        "@@//dist/openwrt:configs/sig.json",
    ],
    visibility = ["//visibility:public"],
)

# Assemble a bazel toolchain out of the openwrt sdk binaries.
musl_cc_toolchain(target_arch = "x86_64")
