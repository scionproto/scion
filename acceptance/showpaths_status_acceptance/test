#!/usr/bin/env python3

# Copyright 2019 Anapaya Systems
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import logging

from plumbum import local


from acceptance.common.log import LogExec, init_log
from acceptance.common.base import CmdBase, TestBase, set_name
from lib.util import load_yaml_file

set_name(__file__)
logger = logging.getLogger(__name__)


class Test(TestBase):
    """
    Test that showpaths with the -p option works as intended.
    """


class Base(CmdBase):
    pass


@Test.subcommand('setup')
class TestSetup(Base):

    @LogExec(logger, 'setup')
    def main(self):
        self.scion.topology('topology/Tiny.topo')
        self.scion.run()
        if not self.no_docker:
            self.tools_dc('start', 'tester*')
            self.docker_status()


@Test.subcommand("run")
class TestRun(Base):
    showpaths = local['./bin/showpaths']

    @LogExec(logger, "run")
    def main(self):
        if self.no_docker:
            out = self.showpaths('-srcIA', '1-ff00:0:112', '-sciondFromIA',
                                 '-dstIA', '1-ff00:0:110', '-p', '-local',
                                 '1-ff00:0:112,[127.0.0.1]')
        else:
            dcFile = load_yaml_file('gen/scion-dc.yml')
            networks = dcFile['services']['scion_disp_1-ff00_0_112']['networks']
            local_disp = next(iter(networks.items()))[1]['ipv4_address']
            out = self.tools_dc('exec_tester', '1-ff00_0_112', './bin/showpaths',
                                '-srcIA', '1-ff00:0:112', '-sciondFromIA',
                                '-dstIA', '1-ff00:0:110', '-p', '-local',
                                '1-ff00:0:112,[%s]' % local_disp)

        if 'Alive' not in out:
            logger.error("Alive not found in output, output=%s", out)
            return 1
        logger.info("successful")


if __name__ == '__main__':
    init_log()
    Test.run()
