// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/ca/renewal/grpc (interfaces: ChainBuilder,RenewalRequestVerifier,CMSSigner,CMSRequestHandler,LegacyRequestHandler,CAServiceClient)

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	x509 "crypto/x509"
	gomock "github.com/golang/mock/gomock"
	api "github.com/scionproto/scion/go/pkg/ca/api"
	control_plane "github.com/scionproto/scion/go/pkg/proto/control_plane"
	crypto "github.com/scionproto/scion/go/pkg/proto/crypto"
	http "net/http"
	reflect "reflect"
)

// MockChainBuilder is a mock of ChainBuilder interface
type MockChainBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockChainBuilderMockRecorder
}

// MockChainBuilderMockRecorder is the mock recorder for MockChainBuilder
type MockChainBuilderMockRecorder struct {
	mock *MockChainBuilder
}

// NewMockChainBuilder creates a new mock instance
func NewMockChainBuilder(ctrl *gomock.Controller) *MockChainBuilder {
	mock := &MockChainBuilder{ctrl: ctrl}
	mock.recorder = &MockChainBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainBuilder) EXPECT() *MockChainBuilderMockRecorder {
	return m.recorder
}

// CreateChain mocks base method
func (m *MockChainBuilder) CreateChain(arg0 context.Context, arg1 *x509.CertificateRequest) ([]*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChain", arg0, arg1)
	ret0, _ := ret[0].([]*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChain indicates an expected call of CreateChain
func (mr *MockChainBuilderMockRecorder) CreateChain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChain", reflect.TypeOf((*MockChainBuilder)(nil).CreateChain), arg0, arg1)
}

// MockRenewalRequestVerifier is a mock of RenewalRequestVerifier interface
type MockRenewalRequestVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockRenewalRequestVerifierMockRecorder
}

// MockRenewalRequestVerifierMockRecorder is the mock recorder for MockRenewalRequestVerifier
type MockRenewalRequestVerifierMockRecorder struct {
	mock *MockRenewalRequestVerifier
}

// NewMockRenewalRequestVerifier creates a new mock instance
func NewMockRenewalRequestVerifier(ctrl *gomock.Controller) *MockRenewalRequestVerifier {
	mock := &MockRenewalRequestVerifier{ctrl: ctrl}
	mock.recorder = &MockRenewalRequestVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRenewalRequestVerifier) EXPECT() *MockRenewalRequestVerifierMockRecorder {
	return m.recorder
}

// VerifyCMSSignedRenewalRequest mocks base method
func (m *MockRenewalRequestVerifier) VerifyCMSSignedRenewalRequest(arg0 context.Context, arg1 []byte) (*x509.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCMSSignedRenewalRequest", arg0, arg1)
	ret0, _ := ret[0].(*x509.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCMSSignedRenewalRequest indicates an expected call of VerifyCMSSignedRenewalRequest
func (mr *MockRenewalRequestVerifierMockRecorder) VerifyCMSSignedRenewalRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCMSSignedRenewalRequest", reflect.TypeOf((*MockRenewalRequestVerifier)(nil).VerifyCMSSignedRenewalRequest), arg0, arg1)
}

// VerifyPbSignedRenewalRequest mocks base method
func (m *MockRenewalRequestVerifier) VerifyPbSignedRenewalRequest(arg0 context.Context, arg1 *crypto.SignedMessage, arg2 [][]*x509.Certificate) (*x509.CertificateRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPbSignedRenewalRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*x509.CertificateRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPbSignedRenewalRequest indicates an expected call of VerifyPbSignedRenewalRequest
func (mr *MockRenewalRequestVerifierMockRecorder) VerifyPbSignedRenewalRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPbSignedRenewalRequest", reflect.TypeOf((*MockRenewalRequestVerifier)(nil).VerifyPbSignedRenewalRequest), arg0, arg1, arg2)
}

// MockCMSSigner is a mock of CMSSigner interface
type MockCMSSigner struct {
	ctrl     *gomock.Controller
	recorder *MockCMSSignerMockRecorder
}

// MockCMSSignerMockRecorder is the mock recorder for MockCMSSigner
type MockCMSSignerMockRecorder struct {
	mock *MockCMSSigner
}

// NewMockCMSSigner creates a new mock instance
func NewMockCMSSigner(ctrl *gomock.Controller) *MockCMSSigner {
	mock := &MockCMSSigner{ctrl: ctrl}
	mock.recorder = &MockCMSSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCMSSigner) EXPECT() *MockCMSSignerMockRecorder {
	return m.recorder
}

// SignCMS mocks base method
func (m *MockCMSSigner) SignCMS(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignCMS", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignCMS indicates an expected call of SignCMS
func (mr *MockCMSSignerMockRecorder) SignCMS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignCMS", reflect.TypeOf((*MockCMSSigner)(nil).SignCMS), arg0, arg1)
}

// MockCMSRequestHandler is a mock of CMSRequestHandler interface
type MockCMSRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCMSRequestHandlerMockRecorder
}

// MockCMSRequestHandlerMockRecorder is the mock recorder for MockCMSRequestHandler
type MockCMSRequestHandlerMockRecorder struct {
	mock *MockCMSRequestHandler
}

// NewMockCMSRequestHandler creates a new mock instance
func NewMockCMSRequestHandler(ctrl *gomock.Controller) *MockCMSRequestHandler {
	mock := &MockCMSRequestHandler{ctrl: ctrl}
	mock.recorder = &MockCMSRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCMSRequestHandler) EXPECT() *MockCMSRequestHandlerMockRecorder {
	return m.recorder
}

// HandleCMSRequest mocks base method
func (m *MockCMSRequestHandler) HandleCMSRequest(arg0 context.Context, arg1 *control_plane.ChainRenewalRequest) ([]*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCMSRequest", arg0, arg1)
	ret0, _ := ret[0].([]*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCMSRequest indicates an expected call of HandleCMSRequest
func (mr *MockCMSRequestHandlerMockRecorder) HandleCMSRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCMSRequest", reflect.TypeOf((*MockCMSRequestHandler)(nil).HandleCMSRequest), arg0, arg1)
}

// MockLegacyRequestHandler is a mock of LegacyRequestHandler interface
type MockLegacyRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockLegacyRequestHandlerMockRecorder
}

// MockLegacyRequestHandlerMockRecorder is the mock recorder for MockLegacyRequestHandler
type MockLegacyRequestHandlerMockRecorder struct {
	mock *MockLegacyRequestHandler
}

// NewMockLegacyRequestHandler creates a new mock instance
func NewMockLegacyRequestHandler(ctrl *gomock.Controller) *MockLegacyRequestHandler {
	mock := &MockLegacyRequestHandler{ctrl: ctrl}
	mock.recorder = &MockLegacyRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLegacyRequestHandler) EXPECT() *MockLegacyRequestHandlerMockRecorder {
	return m.recorder
}

// HandleLegacyRequest mocks base method
func (m *MockLegacyRequestHandler) HandleLegacyRequest(arg0 context.Context, arg1 *control_plane.ChainRenewalRequest) (*control_plane.ChainRenewalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleLegacyRequest", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.ChainRenewalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleLegacyRequest indicates an expected call of HandleLegacyRequest
func (mr *MockLegacyRequestHandlerMockRecorder) HandleLegacyRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleLegacyRequest", reflect.TypeOf((*MockLegacyRequestHandler)(nil).HandleLegacyRequest), arg0, arg1)
}

// MockCAServiceClient is a mock of CAServiceClient interface
type MockCAServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCAServiceClientMockRecorder
}

// MockCAServiceClientMockRecorder is the mock recorder for MockCAServiceClient
type MockCAServiceClientMockRecorder struct {
	mock *MockCAServiceClient
}

// NewMockCAServiceClient creates a new mock instance
func NewMockCAServiceClient(ctrl *gomock.Controller) *MockCAServiceClient {
	mock := &MockCAServiceClient{ctrl: ctrl}
	mock.recorder = &MockCAServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCAServiceClient) EXPECT() *MockCAServiceClientMockRecorder {
	return m.recorder
}

// PostCertificateRenewal mocks base method
func (m *MockCAServiceClient) PostCertificateRenewal(arg0 context.Context, arg1 int, arg2 api.AS, arg3 api.PostCertificateRenewalJSONRequestBody, arg4 ...api.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostCertificateRenewal", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCertificateRenewal indicates an expected call of PostCertificateRenewal
func (mr *MockCAServiceClientMockRecorder) PostCertificateRenewal(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCertificateRenewal", reflect.TypeOf((*MockCAServiceClient)(nil).PostCertificateRenewal), varargs...)
}
