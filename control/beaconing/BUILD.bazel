load("@rules_go//go:def.bzl", "go_library")
load("//tools:go.bzl", "go_test")
load("//tools/lint:write_source_files.bzl", "write_source_files")

go_library(
    name = "go_default_library",
    srcs = [
        "doc.go",
        "extender.go",
        "handler.go",
        "originator.go",
        "propagator.go",
        "staticinfo_config.go",
        "tick.go",
        "util.go",
        "writer.go",
    ],
    importpath = "github.com/scionproto/scion/control/beaconing",
    visibility = ["//visibility:public"],
    deps = [
        "//control/beacon:go_default_library",
        "//control/ifstate:go_default_library",
        "//pkg/addr:go_default_library",
        "//pkg/log:go_default_library",
        "//pkg/metrics:go_default_library",
        "//pkg/private/prom:go_default_library",
        "//pkg/private/serrors:go_default_library",
        "//pkg/private/util:go_default_library",
        "//pkg/proto/crypto:go_default_library",
        "//pkg/scrypto/cppki:go_default_library",
        "//pkg/segment:go_default_library",
        "//pkg/segment/extensions/digest:go_default_library",
        "//pkg/segment/extensions/epic:go_default_library",
        "//pkg/segment/extensions/staticinfo:go_default_library",
        "//pkg/segment/iface:go_default_library",
        "//pkg/slayers/path:go_default_library",
        "//pkg/snet:go_default_library",
        "//private/periodic:go_default_library",
        "//private/segment/seghandler:go_default_library",
        "//private/segment/segverifier:go_default_library",
        "//private/segment/verifier:go_default_library",
        "//private/topology:go_default_library",
        "//private/tracing:go_default_library",
        "//private/trust:go_default_library",
        "@com_github_opentracing_opentracing_go//:go_default_library",
    ],
)

go_test(
    name = "go_default_test",
    srcs = [
        "export_test.go",
        "extender_test.go",
        "handler_test.go",
        "originator_test.go",
        "propagator_test.go",
        "staticinfo_config_test.go",
        "writer_test.go",
    ],
    data = glob(["testdata/**"]),
    embed = [":go_default_library"],
    deps = [
        "//control/beacon:go_default_library",
        "//control/beaconing/mock_beaconing:go_default_library",
        "//control/ifstate:go_default_library",
        "//pkg/addr:go_default_library",
        "//pkg/private/serrors:go_default_library",
        "//pkg/private/util:go_default_library",
        "//pkg/private/xtest/graph:go_default_library",
        "//pkg/proto/crypto:go_default_library",
        "//pkg/scrypto:go_default_library",
        "//pkg/scrypto/cppki:go_default_library",
        "//pkg/scrypto/signed:go_default_library",
        "//pkg/segment:go_default_library",
        "//pkg/segment/extensions/staticinfo:go_default_library",
        "//pkg/segment/iface:go_default_library",
        "//pkg/slayers/path:go_default_library",
        "//pkg/slayers/path/scion:go_default_library",
        "//pkg/snet:go_default_library",
        "//pkg/snet/addrutil:go_default_library",
        "//pkg/snet/path:go_default_library",
        "//private/segment/seghandler:go_default_library",
        "//private/segment/verifier/mock_verifier:go_default_library",
        "//private/topology:go_default_library",
        "//private/trust:go_default_library",
        "@com_github_golang_mock//gomock:go_default_library",
        "@com_github_stretchr_testify//assert:go_default_library",
        "@com_github_stretchr_testify//require:go_default_library",
    ],
)

genrule(
    name = "generate_correct_ifids",
    srcs = ["//topology:big"],
    outs = ["ifids.gen.yaml"],
    cmd = """
        $(location //pkg/private/xtest/graphupdater:graphupdater) \
        -topoFile=$(location //topology:big) -ifidsFile=$@
    """,
    tools = ["//pkg/private/xtest/graphupdater"],
)

genrule(
    name = "run_topogen_topology_big",
    srcs = [
        "//topology:big",
        "//pkg/private/xtest/graph:generate_ifids_yaml"],
    outs = ["big.zip",],
    cmd = """
        mkdir -p $(@D)/gen
        $(location //tools:topogen) -c=$(location //topology:big) -t -o $(@D)/gen

        for dir in $(@D)/gen/*; do
          if [ -f "$$dir/topology.json" ]; then
            DIR_NAME=$$(basename $$dir)
            mv "$$dir/topology.json" "$(@D)/$${DIR_NAME}.json"
          fi
        done

        CORRECT_YAML=$(location //pkg/private/xtest/graph:generate_ifids_yaml)
        WRONG_YAML="$(@D)/gen/ifids.yml"

        MAPPING_FILE=$$(mktemp)

        exec 3< "$$WRONG_YAML"

        while read -r line && read -r wrong_line <&3; do
          IFS=' ' read -r br1 num1 br2 num2 <<< "$$line"
          IFS=' ' read -r br1_wrong num1_wrong br2_wrong num2_wrong <<< "$$wrong_line"

          if [[ -n "$$br1" && -n "$$num1" && -n "$$br2" && -n "$$num2" ]]; then
            # no need to add num1 since it'll create a duplicate (with a colon after the number)
            echo "$$num2_wrong $$num2" >> "$$MAPPING_FILE"
          fi
        done < "$$CORRECT_YAML"

        exec 3<&-

        for json_file in $(@D)/*.json; do
          while read -r wrong correct; do
            sed -i "s/\\b$$wrong\\b/$$correct/g" "$$json_file"
          done < "$$MAPPING_FILE"
        done

        zip -j $@ $(@D)/*.json
    """,
    tools = ["//tools:topogen",],
)


write_source_files(
    name = "write_files",
    files = {
        "testdata/big/big.zip": ":run_topogen_topology_big",
    },
)
