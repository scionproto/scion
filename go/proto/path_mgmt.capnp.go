// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SegReq struct{ capnp.Struct }
type SegReq_flags SegReq

// SegReq_TypeID is the unique identifier for the type SegReq.
const SegReq_TypeID = 0x9d0135027d04861e

func NewSegReq(s *capnp.Segment) (SegReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return SegReq{st}, err
}

func NewRootSegReq(s *capnp.Segment) (SegReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return SegReq{st}, err
}

func ReadRootSegReq(msg *capnp.Message) (SegReq, error) {
	root, err := msg.RootPtr()
	return SegReq{root.Struct()}, err
}

func (s SegReq) String() string {
	str, _ := text.Marshal(0x9d0135027d04861e, s.Struct)
	return str
}

func (s SegReq) SrcIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s SegReq) SetSrcIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SegReq) DstIA() uint64 {
	return s.Struct.Uint64(8)
}

func (s SegReq) SetDstIA(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s SegReq) Flags() SegReq_flags { return SegReq_flags(s) }

func (s SegReq_flags) Sibra() bool {
	return s.Struct.Bit(128)
}

func (s SegReq_flags) SetSibra(v bool) {
	s.Struct.SetBit(128, v)
}

func (s SegReq_flags) CacheOnly() bool {
	return s.Struct.Bit(129)
}

func (s SegReq_flags) SetCacheOnly(v bool) {
	s.Struct.SetBit(129, v)
}

// SegReq_List is a list of SegReq.
type SegReq_List struct{ capnp.List }

// NewSegReq creates a new list of SegReq.
func NewSegReq_List(s *capnp.Segment, sz int32) (SegReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return SegReq_List{l}, err
}

func (s SegReq_List) At(i int) SegReq { return SegReq{s.List.Struct(i)} }

func (s SegReq_List) Set(i int, v SegReq) error { return s.List.SetStruct(i, v.Struct) }

func (s SegReq_List) String() string {
	str, _ := text.MarshalList(0x9d0135027d04861e, s.List)
	return str
}

// SegReq_Promise is a wrapper for a SegReq promised by a client call.
type SegReq_Promise struct{ *capnp.Pipeline }

func (p SegReq_Promise) Struct() (SegReq, error) {
	s, err := p.Pipeline.Struct()
	return SegReq{s}, err
}

func (p SegReq_Promise) Flags() SegReq_flags_Promise { return SegReq_flags_Promise{p.Pipeline} }

// SegReq_flags_Promise is a wrapper for a SegReq_flags promised by a client call.
type SegReq_flags_Promise struct{ *capnp.Pipeline }

func (p SegReq_flags_Promise) Struct() (SegReq_flags, error) {
	s, err := p.Pipeline.Struct()
	return SegReq_flags{s}, err
}

type SegRecs struct{ capnp.Struct }

// SegRecs_TypeID is the unique identifier for the type SegRecs.
const SegRecs_TypeID = 0x934ba70bfd144ebd

func NewSegRecs(s *capnp.Segment) (SegRecs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegRecs{st}, err
}

func NewRootSegRecs(s *capnp.Segment) (SegRecs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegRecs{st}, err
}

func ReadRootSegRecs(msg *capnp.Message) (SegRecs, error) {
	root, err := msg.RootPtr()
	return SegRecs{root.Struct()}, err
}

func (s SegRecs) String() string {
	str, _ := text.Marshal(0x934ba70bfd144ebd, s.Struct)
	return str
}

func (s SegRecs) Recs() (PathSegMeta_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegMeta_List{List: p.List()}, err
}

func (s SegRecs) HasRecs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegRecs) SetRecs(v PathSegMeta_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated PathSegMeta_List, preferring placement in s's segment.
func (s SegRecs) NewRecs(n int32) (PathSegMeta_List, error) {
	l, err := NewPathSegMeta_List(s.Struct.Segment(), n)
	if err != nil {
		return PathSegMeta_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SegRecs) SRevInfos() (SignedBlob_List, error) {
	p, err := s.Struct.Ptr(1)
	return SignedBlob_List{List: p.List()}, err
}

func (s SegRecs) HasSRevInfos() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegRecs) SetSRevInfos(v SignedBlob_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSRevInfos sets the sRevInfos field to a newly
// allocated SignedBlob_List, preferring placement in s's segment.
func (s SegRecs) NewSRevInfos(n int32) (SignedBlob_List, error) {
	l, err := NewSignedBlob_List(s.Struct.Segment(), n)
	if err != nil {
		return SignedBlob_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// SegRecs_List is a list of SegRecs.
type SegRecs_List struct{ capnp.List }

// NewSegRecs creates a new list of SegRecs.
func NewSegRecs_List(s *capnp.Segment, sz int32) (SegRecs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegRecs_List{l}, err
}

func (s SegRecs_List) At(i int) SegRecs { return SegRecs{s.List.Struct(i)} }

func (s SegRecs_List) Set(i int, v SegRecs) error { return s.List.SetStruct(i, v.Struct) }

func (s SegRecs_List) String() string {
	str, _ := text.MarshalList(0x934ba70bfd144ebd, s.List)
	return str
}

// SegRecs_Promise is a wrapper for a SegRecs promised by a client call.
type SegRecs_Promise struct{ *capnp.Pipeline }

func (p SegRecs_Promise) Struct() (SegRecs, error) {
	s, err := p.Pipeline.Struct()
	return SegRecs{s}, err
}

type SegReply struct{ capnp.Struct }

// SegReply_TypeID is the unique identifier for the type SegReply.
const SegReply_TypeID = 0x9359e1b2db37dbbb

func NewSegReply(s *capnp.Segment) (SegReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegReply{st}, err
}

func NewRootSegReply(s *capnp.Segment) (SegReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegReply{st}, err
}

func ReadRootSegReply(msg *capnp.Message) (SegReply, error) {
	root, err := msg.RootPtr()
	return SegReply{root.Struct()}, err
}

func (s SegReply) String() string {
	str, _ := text.Marshal(0x9359e1b2db37dbbb, s.Struct)
	return str
}

func (s SegReply) Req() (SegReq, error) {
	p, err := s.Struct.Ptr(0)
	return SegReq{Struct: p.Struct()}, err
}

func (s SegReply) HasReq() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegReply) SetReq(v SegReq) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewReq sets the req field to a newly
// allocated SegReq struct, preferring placement in s's segment.
func (s SegReply) NewReq() (SegReq, error) {
	ss, err := NewSegReq(s.Struct.Segment())
	if err != nil {
		return SegReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegReply) Recs() (SegRecs, error) {
	p, err := s.Struct.Ptr(1)
	return SegRecs{Struct: p.Struct()}, err
}

func (s SegReply) HasRecs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegReply) SetRecs(v SegRecs) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated SegRecs struct, preferring placement in s's segment.
func (s SegReply) NewRecs() (SegRecs, error) {
	ss, err := NewSegRecs(s.Struct.Segment())
	if err != nil {
		return SegRecs{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SegReply_List is a list of SegReply.
type SegReply_List struct{ capnp.List }

// NewSegReply creates a new list of SegReply.
func NewSegReply_List(s *capnp.Segment, sz int32) (SegReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegReply_List{l}, err
}

func (s SegReply_List) At(i int) SegReply { return SegReply{s.List.Struct(i)} }

func (s SegReply_List) Set(i int, v SegReply) error { return s.List.SetStruct(i, v.Struct) }

func (s SegReply_List) String() string {
	str, _ := text.MarshalList(0x9359e1b2db37dbbb, s.List)
	return str
}

// SegReply_Promise is a wrapper for a SegReply promised by a client call.
type SegReply_Promise struct{ *capnp.Pipeline }

func (p SegReply_Promise) Struct() (SegReply, error) {
	s, err := p.Pipeline.Struct()
	return SegReply{s}, err
}

func (p SegReply_Promise) Req() SegReq_Promise {
	return SegReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegReply_Promise) Recs() SegRecs_Promise {
	return SegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type SegChangesIdReq struct{ capnp.Struct }

// SegChangesIdReq_TypeID is the unique identifier for the type SegChangesIdReq.
const SegChangesIdReq_TypeID = 0xc88dfa6be7a1d091

func NewSegChangesIdReq(s *capnp.Segment) (SegChangesIdReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegChangesIdReq{st}, err
}

func NewRootSegChangesIdReq(s *capnp.Segment) (SegChangesIdReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegChangesIdReq{st}, err
}

func ReadRootSegChangesIdReq(msg *capnp.Message) (SegChangesIdReq, error) {
	root, err := msg.RootPtr()
	return SegChangesIdReq{root.Struct()}, err
}

func (s SegChangesIdReq) String() string {
	str, _ := text.Marshal(0xc88dfa6be7a1d091, s.Struct)
	return str
}

func (s SegChangesIdReq) LastCheck() uint32 {
	return s.Struct.Uint32(0)
}

func (s SegChangesIdReq) SetLastCheck(v uint32) {
	s.Struct.SetUint32(0, v)
}

// SegChangesIdReq_List is a list of SegChangesIdReq.
type SegChangesIdReq_List struct{ capnp.List }

// NewSegChangesIdReq creates a new list of SegChangesIdReq.
func NewSegChangesIdReq_List(s *capnp.Segment, sz int32) (SegChangesIdReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return SegChangesIdReq_List{l}, err
}

func (s SegChangesIdReq_List) At(i int) SegChangesIdReq { return SegChangesIdReq{s.List.Struct(i)} }

func (s SegChangesIdReq_List) Set(i int, v SegChangesIdReq) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegChangesIdReq_List) String() string {
	str, _ := text.MarshalList(0xc88dfa6be7a1d091, s.List)
	return str
}

// SegChangesIdReq_Promise is a wrapper for a SegChangesIdReq promised by a client call.
type SegChangesIdReq_Promise struct{ *capnp.Pipeline }

func (p SegChangesIdReq_Promise) Struct() (SegChangesIdReq, error) {
	s, err := p.Pipeline.Struct()
	return SegChangesIdReq{s}, err
}

type SegIds struct{ capnp.Struct }

// SegIds_TypeID is the unique identifier for the type SegIds.
const SegIds_TypeID = 0xabf979c3f68dae4b

func NewSegIds(s *capnp.Segment) (SegIds, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegIds{st}, err
}

func NewRootSegIds(s *capnp.Segment) (SegIds, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegIds{st}, err
}

func ReadRootSegIds(msg *capnp.Message) (SegIds, error) {
	root, err := msg.RootPtr()
	return SegIds{root.Struct()}, err
}

func (s SegIds) String() string {
	str, _ := text.Marshal(0xabf979c3f68dae4b, s.Struct)
	return str
}

func (s SegIds) SegId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SegIds) HasSegId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegIds) SetSegId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SegIds) FullId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SegIds) HasFullId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegIds) SetFullId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SegIds_List is a list of SegIds.
type SegIds_List struct{ capnp.List }

// NewSegIds creates a new list of SegIds.
func NewSegIds_List(s *capnp.Segment, sz int32) (SegIds_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegIds_List{l}, err
}

func (s SegIds_List) At(i int) SegIds { return SegIds{s.List.Struct(i)} }

func (s SegIds_List) Set(i int, v SegIds) error { return s.List.SetStruct(i, v.Struct) }

func (s SegIds_List) String() string {
	str, _ := text.MarshalList(0xabf979c3f68dae4b, s.List)
	return str
}

// SegIds_Promise is a wrapper for a SegIds promised by a client call.
type SegIds_Promise struct{ *capnp.Pipeline }

func (p SegIds_Promise) Struct() (SegIds, error) {
	s, err := p.Pipeline.Struct()
	return SegIds{s}, err
}

type SegChangesIdReply struct{ capnp.Struct }

// SegChangesIdReply_TypeID is the unique identifier for the type SegChangesIdReply.
const SegChangesIdReply_TypeID = 0xbd56ceeaf8c65140

func NewSegChangesIdReply(s *capnp.Segment) (SegChangesIdReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegChangesIdReply{st}, err
}

func NewRootSegChangesIdReply(s *capnp.Segment) (SegChangesIdReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegChangesIdReply{st}, err
}

func ReadRootSegChangesIdReply(msg *capnp.Message) (SegChangesIdReply, error) {
	root, err := msg.RootPtr()
	return SegChangesIdReply{root.Struct()}, err
}

func (s SegChangesIdReply) String() string {
	str, _ := text.Marshal(0xbd56ceeaf8c65140, s.Struct)
	return str
}

func (s SegChangesIdReply) Ids() (SegIds_List, error) {
	p, err := s.Struct.Ptr(0)
	return SegIds_List{List: p.List()}, err
}

func (s SegChangesIdReply) HasIds() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegChangesIdReply) SetIds(v SegIds_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewIds sets the ids field to a newly
// allocated SegIds_List, preferring placement in s's segment.
func (s SegChangesIdReply) NewIds(n int32) (SegIds_List, error) {
	l, err := NewSegIds_List(s.Struct.Segment(), n)
	if err != nil {
		return SegIds_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SegChangesIdReply_List is a list of SegChangesIdReply.
type SegChangesIdReply_List struct{ capnp.List }

// NewSegChangesIdReply creates a new list of SegChangesIdReply.
func NewSegChangesIdReply_List(s *capnp.Segment, sz int32) (SegChangesIdReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegChangesIdReply_List{l}, err
}

func (s SegChangesIdReply_List) At(i int) SegChangesIdReply {
	return SegChangesIdReply{s.List.Struct(i)}
}

func (s SegChangesIdReply_List) Set(i int, v SegChangesIdReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegChangesIdReply_List) String() string {
	str, _ := text.MarshalList(0xbd56ceeaf8c65140, s.List)
	return str
}

// SegChangesIdReply_Promise is a wrapper for a SegChangesIdReply promised by a client call.
type SegChangesIdReply_Promise struct{ *capnp.Pipeline }

func (p SegChangesIdReply_Promise) Struct() (SegChangesIdReply, error) {
	s, err := p.Pipeline.Struct()
	return SegChangesIdReply{s}, err
}

type SegChangesReq struct{ capnp.Struct }

// SegChangesReq_TypeID is the unique identifier for the type SegChangesReq.
const SegChangesReq_TypeID = 0xa7ad0c62a234c68b

func NewSegChangesReq(s *capnp.Segment) (SegChangesReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegChangesReq{st}, err
}

func NewRootSegChangesReq(s *capnp.Segment) (SegChangesReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegChangesReq{st}, err
}

func ReadRootSegChangesReq(msg *capnp.Message) (SegChangesReq, error) {
	root, err := msg.RootPtr()
	return SegChangesReq{root.Struct()}, err
}

func (s SegChangesReq) String() string {
	str, _ := text.Marshal(0xa7ad0c62a234c68b, s.Struct)
	return str
}

func (s SegChangesReq) SegIds() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s SegChangesReq) HasSegIds() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegChangesReq) SetSegIds(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSegIds sets the segIds field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s SegChangesReq) NewSegIds(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SegChangesReq_List is a list of SegChangesReq.
type SegChangesReq_List struct{ capnp.List }

// NewSegChangesReq creates a new list of SegChangesReq.
func NewSegChangesReq_List(s *capnp.Segment, sz int32) (SegChangesReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegChangesReq_List{l}, err
}

func (s SegChangesReq_List) At(i int) SegChangesReq { return SegChangesReq{s.List.Struct(i)} }

func (s SegChangesReq_List) Set(i int, v SegChangesReq) error { return s.List.SetStruct(i, v.Struct) }

func (s SegChangesReq_List) String() string {
	str, _ := text.MarshalList(0xa7ad0c62a234c68b, s.List)
	return str
}

// SegChangesReq_Promise is a wrapper for a SegChangesReq promised by a client call.
type SegChangesReq_Promise struct{ *capnp.Pipeline }

func (p SegChangesReq_Promise) Struct() (SegChangesReq, error) {
	s, err := p.Pipeline.Struct()
	return SegChangesReq{s}, err
}

type HPGroupId struct{ capnp.Struct }

// HPGroupId_TypeID is the unique identifier for the type HPGroupId.
const HPGroupId_TypeID = 0xba21c7133ee44518

func NewHPGroupId(s *capnp.Segment) (HPGroupId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return HPGroupId{st}, err
}

func NewRootHPGroupId(s *capnp.Segment) (HPGroupId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return HPGroupId{st}, err
}

func ReadRootHPGroupId(msg *capnp.Message) (HPGroupId, error) {
	root, err := msg.RootPtr()
	return HPGroupId{root.Struct()}, err
}

func (s HPGroupId) String() string {
	str, _ := text.Marshal(0xba21c7133ee44518, s.Struct)
	return str
}

func (s HPGroupId) OwnerAS() uint64 {
	return s.Struct.Uint64(0)
}

func (s HPGroupId) SetOwnerAS(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HPGroupId) GroupId() uint16 {
	return s.Struct.Uint16(8)
}

func (s HPGroupId) SetGroupId(v uint16) {
	s.Struct.SetUint16(8, v)
}

// HPGroupId_List is a list of HPGroupId.
type HPGroupId_List struct{ capnp.List }

// NewHPGroupId creates a new list of HPGroupId.
func NewHPGroupId_List(s *capnp.Segment, sz int32) (HPGroupId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return HPGroupId_List{l}, err
}

func (s HPGroupId_List) At(i int) HPGroupId { return HPGroupId{s.List.Struct(i)} }

func (s HPGroupId_List) Set(i int, v HPGroupId) error { return s.List.SetStruct(i, v.Struct) }

func (s HPGroupId_List) String() string {
	str, _ := text.MarshalList(0xba21c7133ee44518, s.List)
	return str
}

// HPGroupId_Promise is a wrapper for a HPGroupId promised by a client call.
type HPGroupId_Promise struct{ *capnp.Pipeline }

func (p HPGroupId_Promise) Struct() (HPGroupId, error) {
	s, err := p.Pipeline.Struct()
	return HPGroupId{s}, err
}

type HPSegReq struct{ capnp.Struct }

// HPSegReq_TypeID is the unique identifier for the type HPSegReq.
const HPSegReq_TypeID = 0x8f51e8717b3fbe1c

func NewHPSegReq(s *capnp.Segment) (HPSegReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HPSegReq{st}, err
}

func NewRootHPSegReq(s *capnp.Segment) (HPSegReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HPSegReq{st}, err
}

func ReadRootHPSegReq(msg *capnp.Message) (HPSegReq, error) {
	root, err := msg.RootPtr()
	return HPSegReq{root.Struct()}, err
}

func (s HPSegReq) String() string {
	str, _ := text.Marshal(0x8f51e8717b3fbe1c, s.Struct)
	return str
}

func (s HPSegReq) DstIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s HPSegReq) SetDstIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HPSegReq) GroupIds() (HPGroupId_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId_List{List: p.List()}, err
}

func (s HPSegReq) HasGroupIds() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPSegReq) SetGroupIds(v HPGroupId_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewGroupIds sets the groupIds field to a newly
// allocated HPGroupId_List, preferring placement in s's segment.
func (s HPSegReq) NewGroupIds(n int32) (HPGroupId_List, error) {
	l, err := NewHPGroupId_List(s.Struct.Segment(), n)
	if err != nil {
		return HPGroupId_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HPSegReq_List is a list of HPSegReq.
type HPSegReq_List struct{ capnp.List }

// NewHPSegReq creates a new list of HPSegReq.
func NewHPSegReq_List(s *capnp.Segment, sz int32) (HPSegReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HPSegReq_List{l}, err
}

func (s HPSegReq_List) At(i int) HPSegReq { return HPSegReq{s.List.Struct(i)} }

func (s HPSegReq_List) Set(i int, v HPSegReq) error { return s.List.SetStruct(i, v.Struct) }

func (s HPSegReq_List) String() string {
	str, _ := text.MarshalList(0x8f51e8717b3fbe1c, s.List)
	return str
}

// HPSegReq_Promise is a wrapper for a HPSegReq promised by a client call.
type HPSegReq_Promise struct{ *capnp.Pipeline }

func (p HPSegReq_Promise) Struct() (HPSegReq, error) {
	s, err := p.Pipeline.Struct()
	return HPSegReq{s}, err
}

type HPSegRecs struct{ capnp.Struct }

// HPSegRecs_TypeID is the unique identifier for the type HPSegRecs.
const HPSegRecs_TypeID = 0xa56b96c8b25ce2e1

func NewHPSegRecs(s *capnp.Segment) (HPSegRecs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HPSegRecs{st}, err
}

func NewRootHPSegRecs(s *capnp.Segment) (HPSegRecs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HPSegRecs{st}, err
}

func ReadRootHPSegRecs(msg *capnp.Message) (HPSegRecs, error) {
	root, err := msg.RootPtr()
	return HPSegRecs{root.Struct()}, err
}

func (s HPSegRecs) String() string {
	str, _ := text.Marshal(0xa56b96c8b25ce2e1, s.Struct)
	return str
}

func (s HPSegRecs) GroupId() (HPGroupId, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId{Struct: p.Struct()}, err
}

func (s HPSegRecs) HasGroupId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPSegRecs) SetGroupId(v HPGroupId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGroupId sets the groupId field to a newly
// allocated HPGroupId struct, preferring placement in s's segment.
func (s HPSegRecs) NewGroupId() (HPGroupId, error) {
	ss, err := NewHPGroupId(s.Struct.Segment())
	if err != nil {
		return HPGroupId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s HPSegRecs) Recs() (PathSegMeta_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathSegMeta_List{List: p.List()}, err
}

func (s HPSegRecs) HasRecs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HPSegRecs) SetRecs(v PathSegMeta_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated PathSegMeta_List, preferring placement in s's segment.
func (s HPSegRecs) NewRecs(n int32) (PathSegMeta_List, error) {
	l, err := NewPathSegMeta_List(s.Struct.Segment(), n)
	if err != nil {
		return PathSegMeta_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s HPSegRecs) Err() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s HPSegRecs) HasErr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s HPSegRecs) ErrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s HPSegRecs) SetErr(v string) error {
	return s.Struct.SetText(2, v)
}

// HPSegRecs_List is a list of HPSegRecs.
type HPSegRecs_List struct{ capnp.List }

// NewHPSegRecs creates a new list of HPSegRecs.
func NewHPSegRecs_List(s *capnp.Segment, sz int32) (HPSegRecs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return HPSegRecs_List{l}, err
}

func (s HPSegRecs_List) At(i int) HPSegRecs { return HPSegRecs{s.List.Struct(i)} }

func (s HPSegRecs_List) Set(i int, v HPSegRecs) error { return s.List.SetStruct(i, v.Struct) }

func (s HPSegRecs_List) String() string {
	str, _ := text.MarshalList(0xa56b96c8b25ce2e1, s.List)
	return str
}

// HPSegRecs_Promise is a wrapper for a HPSegRecs promised by a client call.
type HPSegRecs_Promise struct{ *capnp.Pipeline }

func (p HPSegRecs_Promise) Struct() (HPSegRecs, error) {
	s, err := p.Pipeline.Struct()
	return HPSegRecs{s}, err
}

func (p HPSegRecs_Promise) GroupId() HPGroupId_Promise {
	return HPGroupId_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type HPSegReply struct{ capnp.Struct }

// HPSegReply_TypeID is the unique identifier for the type HPSegReply.
const HPSegReply_TypeID = 0xaaf7fd9241668ed6

func NewHPSegReply(s *capnp.Segment) (HPSegReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPSegReply{st}, err
}

func NewRootHPSegReply(s *capnp.Segment) (HPSegReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPSegReply{st}, err
}

func ReadRootHPSegReply(msg *capnp.Message) (HPSegReply, error) {
	root, err := msg.RootPtr()
	return HPSegReply{root.Struct()}, err
}

func (s HPSegReply) String() string {
	str, _ := text.Marshal(0xaaf7fd9241668ed6, s.Struct)
	return str
}

func (s HPSegReply) Recs() (HPSegRecs_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPSegRecs_List{List: p.List()}, err
}

func (s HPSegReply) HasRecs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPSegReply) SetRecs(v HPSegRecs_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated HPSegRecs_List, preferring placement in s's segment.
func (s HPSegReply) NewRecs(n int32) (HPSegRecs_List, error) {
	l, err := NewHPSegRecs_List(s.Struct.Segment(), n)
	if err != nil {
		return HPSegRecs_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HPSegReply_List is a list of HPSegReply.
type HPSegReply_List struct{ capnp.List }

// NewHPSegReply creates a new list of HPSegReply.
func NewHPSegReply_List(s *capnp.Segment, sz int32) (HPSegReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HPSegReply_List{l}, err
}

func (s HPSegReply_List) At(i int) HPSegReply { return HPSegReply{s.List.Struct(i)} }

func (s HPSegReply_List) Set(i int, v HPSegReply) error { return s.List.SetStruct(i, v.Struct) }

func (s HPSegReply_List) String() string {
	str, _ := text.MarshalList(0xaaf7fd9241668ed6, s.List)
	return str
}

// HPSegReply_Promise is a wrapper for a HPSegReply promised by a client call.
type HPSegReply_Promise struct{ *capnp.Pipeline }

func (p HPSegReply_Promise) Struct() (HPSegReply, error) {
	s, err := p.Pipeline.Struct()
	return HPSegReply{s}, err
}

type HPCfg struct{ capnp.Struct }

// HPCfg_TypeID is the unique identifier for the type HPCfg.
const HPCfg_TypeID = 0xf307100ab87a1963

func NewHPCfg(s *capnp.Segment) (HPCfg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return HPCfg{st}, err
}

func NewRootHPCfg(s *capnp.Segment) (HPCfg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return HPCfg{st}, err
}

func ReadRootHPCfg(msg *capnp.Message) (HPCfg, error) {
	root, err := msg.RootPtr()
	return HPCfg{root.Struct()}, err
}

func (s HPCfg) String() string {
	str, _ := text.Marshal(0xf307100ab87a1963, s.Struct)
	return str
}

func (s HPCfg) GroupId() (HPGroupId, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId{Struct: p.Struct()}, err
}

func (s HPCfg) HasGroupId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetGroupId(v HPGroupId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGroupId sets the groupId field to a newly
// allocated HPGroupId struct, preferring placement in s's segment.
func (s HPCfg) NewGroupId() (HPGroupId, error) {
	ss, err := NewHPGroupId(s.Struct.Segment())
	if err != nil {
		return HPGroupId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s HPCfg) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s HPCfg) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s HPCfg) OwnerISD() uint16 {
	return s.Struct.Uint16(4)
}

func (s HPCfg) SetOwnerISD(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s HPCfg) Writers() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.UInt64List{List: p.List()}, err
}

func (s HPCfg) HasWriters() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetWriters(v capnp.UInt64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewWriters sets the writers field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s HPCfg) NewWriters(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s HPCfg) Readers() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.UInt64List{List: p.List()}, err
}

func (s HPCfg) HasReaders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetReaders(v capnp.UInt64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewReaders sets the readers field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s HPCfg) NewReaders(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s HPCfg) Registries() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.UInt64List{List: p.List()}, err
}

func (s HPCfg) HasRegistries() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetRegistries(v capnp.UInt64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewRegistries sets the registries field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s HPCfg) NewRegistries(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// HPCfg_List is a list of HPCfg.
type HPCfg_List struct{ capnp.List }

// NewHPCfg creates a new list of HPCfg.
func NewHPCfg_List(s *capnp.Segment, sz int32) (HPCfg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return HPCfg_List{l}, err
}

func (s HPCfg_List) At(i int) HPCfg { return HPCfg{s.List.Struct(i)} }

func (s HPCfg_List) Set(i int, v HPCfg) error { return s.List.SetStruct(i, v.Struct) }

func (s HPCfg_List) String() string {
	str, _ := text.MarshalList(0xf307100ab87a1963, s.List)
	return str
}

// HPCfg_Promise is a wrapper for a HPCfg promised by a client call.
type HPCfg_Promise struct{ *capnp.Pipeline }

func (p HPCfg_Promise) Struct() (HPCfg, error) {
	s, err := p.Pipeline.Struct()
	return HPCfg{s}, err
}

func (p HPCfg_Promise) GroupId() HPGroupId_Promise {
	return HPGroupId_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type HPCfgReq struct{ capnp.Struct }

// HPCfgReq_TypeID is the unique identifier for the type HPCfgReq.
const HPCfgReq_TypeID = 0xd24bad15bb2bab5e

func NewHPCfgReq(s *capnp.Segment) (HPCfgReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return HPCfgReq{st}, err
}

func NewRootHPCfgReq(s *capnp.Segment) (HPCfgReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return HPCfgReq{st}, err
}

func ReadRootHPCfgReq(msg *capnp.Message) (HPCfgReq, error) {
	root, err := msg.RootPtr()
	return HPCfgReq{root.Struct()}, err
}

func (s HPCfgReq) String() string {
	str, _ := text.Marshal(0xd24bad15bb2bab5e, s.Struct)
	return str
}

func (s HPCfgReq) ChangedSince() uint32 {
	return s.Struct.Uint32(0)
}

func (s HPCfgReq) SetChangedSince(v uint32) {
	s.Struct.SetUint32(0, v)
}

// HPCfgReq_List is a list of HPCfgReq.
type HPCfgReq_List struct{ capnp.List }

// NewHPCfgReq creates a new list of HPCfgReq.
func NewHPCfgReq_List(s *capnp.Segment, sz int32) (HPCfgReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return HPCfgReq_List{l}, err
}

func (s HPCfgReq_List) At(i int) HPCfgReq { return HPCfgReq{s.List.Struct(i)} }

func (s HPCfgReq_List) Set(i int, v HPCfgReq) error { return s.List.SetStruct(i, v.Struct) }

func (s HPCfgReq_List) String() string {
	str, _ := text.MarshalList(0xd24bad15bb2bab5e, s.List)
	return str
}

// HPCfgReq_Promise is a wrapper for a HPCfgReq promised by a client call.
type HPCfgReq_Promise struct{ *capnp.Pipeline }

func (p HPCfgReq_Promise) Struct() (HPCfgReq, error) {
	s, err := p.Pipeline.Struct()
	return HPCfgReq{s}, err
}

type HPCfgReply struct{ capnp.Struct }

// HPCfgReply_TypeID is the unique identifier for the type HPCfgReply.
const HPCfgReply_TypeID = 0xb27bf6e10de2aa8c

func NewHPCfgReply(s *capnp.Segment) (HPCfgReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPCfgReply{st}, err
}

func NewRootHPCfgReply(s *capnp.Segment) (HPCfgReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPCfgReply{st}, err
}

func ReadRootHPCfgReply(msg *capnp.Message) (HPCfgReply, error) {
	root, err := msg.RootPtr()
	return HPCfgReply{root.Struct()}, err
}

func (s HPCfgReply) String() string {
	str, _ := text.Marshal(0xb27bf6e10de2aa8c, s.Struct)
	return str
}

func (s HPCfgReply) Cfgs() (HPCfg_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPCfg_List{List: p.List()}, err
}

func (s HPCfgReply) HasCfgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPCfgReply) SetCfgs(v HPCfg_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCfgs sets the cfgs field to a newly
// allocated HPCfg_List, preferring placement in s's segment.
func (s HPCfgReply) NewCfgs(n int32) (HPCfg_List, error) {
	l, err := NewHPCfg_List(s.Struct.Segment(), n)
	if err != nil {
		return HPCfg_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HPCfgReply_List is a list of HPCfgReply.
type HPCfgReply_List struct{ capnp.List }

// NewHPCfgReply creates a new list of HPCfgReply.
func NewHPCfgReply_List(s *capnp.Segment, sz int32) (HPCfgReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HPCfgReply_List{l}, err
}

func (s HPCfgReply_List) At(i int) HPCfgReply { return HPCfgReply{s.List.Struct(i)} }

func (s HPCfgReply_List) Set(i int, v HPCfgReply) error { return s.List.SetStruct(i, v.Struct) }

func (s HPCfgReply_List) String() string {
	str, _ := text.MarshalList(0xb27bf6e10de2aa8c, s.List)
	return str
}

// HPCfgReply_Promise is a wrapper for a HPCfgReply promised by a client call.
type HPCfgReply_Promise struct{ *capnp.Pipeline }

func (p HPCfgReply_Promise) Struct() (HPCfgReply, error) {
	s, err := p.Pipeline.Struct()
	return HPCfgReply{s}, err
}

type PathMgmt struct{ capnp.Struct }
type PathMgmt_Which uint16

const (
	PathMgmt_Which_unset             PathMgmt_Which = 0
	PathMgmt_Which_segReq            PathMgmt_Which = 1
	PathMgmt_Which_segReply          PathMgmt_Which = 2
	PathMgmt_Which_segReg            PathMgmt_Which = 3
	PathMgmt_Which_sRevInfo          PathMgmt_Which = 4
	PathMgmt_Which_ifStateReq        PathMgmt_Which = 5
	PathMgmt_Which_ifStateInfos      PathMgmt_Which = 6
	PathMgmt_Which_segChangesIdReq   PathMgmt_Which = 7
	PathMgmt_Which_segChangesIdReply PathMgmt_Which = 8
	PathMgmt_Which_segChangesReq     PathMgmt_Which = 9
	PathMgmt_Which_segChangesReply   PathMgmt_Which = 10
	PathMgmt_Which_hpSegReq          PathMgmt_Which = 11
	PathMgmt_Which_hpSegReply        PathMgmt_Which = 12
	PathMgmt_Which_hpSegReg          PathMgmt_Which = 13
	PathMgmt_Which_hpCfgReq          PathMgmt_Which = 14
	PathMgmt_Which_hpCfgReply        PathMgmt_Which = 15
)

func (w PathMgmt_Which) String() string {
	const s = "unsetsegReqsegReplysegRegsRevInfoifStateReqifStateInfossegChangesIdReqsegChangesIdReplysegChangesReqsegChangesReplyhpSegReqhpSegReplyhpSegReghpCfgReqhpCfgReply"
	switch w {
	case PathMgmt_Which_unset:
		return s[0:5]
	case PathMgmt_Which_segReq:
		return s[5:11]
	case PathMgmt_Which_segReply:
		return s[11:19]
	case PathMgmt_Which_segReg:
		return s[19:25]
	case PathMgmt_Which_sRevInfo:
		return s[25:33]
	case PathMgmt_Which_ifStateReq:
		return s[33:43]
	case PathMgmt_Which_ifStateInfos:
		return s[43:55]
	case PathMgmt_Which_segChangesIdReq:
		return s[55:70]
	case PathMgmt_Which_segChangesIdReply:
		return s[70:87]
	case PathMgmt_Which_segChangesReq:
		return s[87:100]
	case PathMgmt_Which_segChangesReply:
		return s[100:115]
	case PathMgmt_Which_hpSegReq:
		return s[115:123]
	case PathMgmt_Which_hpSegReply:
		return s[123:133]
	case PathMgmt_Which_hpSegReg:
		return s[133:141]
	case PathMgmt_Which_hpCfgReq:
		return s[141:149]
	case PathMgmt_Which_hpCfgReply:
		return s[149:159]

	}
	return "PathMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PathMgmt_TypeID is the unique identifier for the type PathMgmt.
const PathMgmt_TypeID = 0xa12cfa420c9ad0ca

func NewPathMgmt(s *capnp.Segment) (PathMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMgmt{st}, err
}

func NewRootPathMgmt(s *capnp.Segment) (PathMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMgmt{st}, err
}

func ReadRootPathMgmt(msg *capnp.Message) (PathMgmt, error) {
	root, err := msg.RootPtr()
	return PathMgmt{root.Struct()}, err
}

func (s PathMgmt) String() string {
	str, _ := text.Marshal(0xa12cfa420c9ad0ca, s.Struct)
	return str
}

func (s PathMgmt) Which() PathMgmt_Which {
	return PathMgmt_Which(s.Struct.Uint16(0))
}
func (s PathMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s PathMgmt) SegReq() (SegReq, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != segReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegReq() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegReq(v SegReq) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegReq sets the segReq field to a newly
// allocated SegReq struct, preferring placement in s's segment.
func (s PathMgmt) NewSegReq() (SegReq, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegReq(s.Struct.Segment())
	if err != nil {
		return SegReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegReply() (SegReply, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != segReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegReply() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegReply(v SegReply) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegReply sets the segReply field to a newly
// allocated SegReply struct, preferring placement in s's segment.
func (s PathMgmt) NewSegReply() (SegReply, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSegReply(s.Struct.Segment())
	if err != nil {
		return SegReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegReg() (SegRecs, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != segReg")
	}
	p, err := s.Struct.Ptr(0)
	return SegRecs{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegReg() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegReg(v SegRecs) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegReg sets the segReg field to a newly
// allocated SegRecs struct, preferring placement in s's segment.
func (s PathMgmt) NewSegReg() (SegRecs, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSegRecs(s.Struct.Segment())
	if err != nil {
		return SegRecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SRevInfo() (SignedBlob, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != sRevInfo")
	}
	p, err := s.Struct.Ptr(0)
	return SignedBlob{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSRevInfo() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSRevInfo(v SignedBlob) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSRevInfo sets the sRevInfo field to a newly
// allocated SignedBlob struct, preferring placement in s's segment.
func (s PathMgmt) NewSRevInfo() (SignedBlob, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewSignedBlob(s.Struct.Segment())
	if err != nil {
		return SignedBlob{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) IfStateReq() (IFStateReq, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != ifStateReq")
	}
	p, err := s.Struct.Ptr(0)
	return IFStateReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasIfStateReq() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetIfStateReq(v IFStateReq) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfStateReq sets the ifStateReq field to a newly
// allocated IFStateReq struct, preferring placement in s's segment.
func (s PathMgmt) NewIfStateReq() (IFStateReq, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewIFStateReq(s.Struct.Segment())
	if err != nil {
		return IFStateReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) IfStateInfos() (IFStateInfos, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != ifStateInfos")
	}
	p, err := s.Struct.Ptr(0)
	return IFStateInfos{Struct: p.Struct()}, err
}

func (s PathMgmt) HasIfStateInfos() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetIfStateInfos(v IFStateInfos) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfStateInfos sets the ifStateInfos field to a newly
// allocated IFStateInfos struct, preferring placement in s's segment.
func (s PathMgmt) NewIfStateInfos() (IFStateInfos, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewIFStateInfos(s.Struct.Segment())
	if err != nil {
		return IFStateInfos{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegChangesIdReq() (SegChangesIdReq, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != segChangesIdReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegChangesIdReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegChangesIdReq() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegChangesIdReq(v SegChangesIdReq) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegChangesIdReq sets the segChangesIdReq field to a newly
// allocated SegChangesIdReq struct, preferring placement in s's segment.
func (s PathMgmt) NewSegChangesIdReq() (SegChangesIdReq, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSegChangesIdReq(s.Struct.Segment())
	if err != nil {
		return SegChangesIdReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegChangesIdReply() (SegChangesIdReply, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != segChangesIdReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegChangesIdReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegChangesIdReply() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegChangesIdReply(v SegChangesIdReply) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegChangesIdReply sets the segChangesIdReply field to a newly
// allocated SegChangesIdReply struct, preferring placement in s's segment.
func (s PathMgmt) NewSegChangesIdReply() (SegChangesIdReply, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewSegChangesIdReply(s.Struct.Segment())
	if err != nil {
		return SegChangesIdReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegChangesReq() (SegChangesReq, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != segChangesReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegChangesReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegChangesReq() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegChangesReq(v SegChangesReq) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegChangesReq sets the segChangesReq field to a newly
// allocated SegChangesReq struct, preferring placement in s's segment.
func (s PathMgmt) NewSegChangesReq() (SegChangesReq, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewSegChangesReq(s.Struct.Segment())
	if err != nil {
		return SegChangesReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegChangesReply() (SegRecs, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != segChangesReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegRecs{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegChangesReply() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegChangesReply(v SegRecs) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegChangesReply sets the segChangesReply field to a newly
// allocated SegRecs struct, preferring placement in s's segment.
func (s PathMgmt) NewSegChangesReply() (SegRecs, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewSegRecs(s.Struct.Segment())
	if err != nil {
		return SegRecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpSegReq() (HPSegReq, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != hpSegReq")
	}
	p, err := s.Struct.Ptr(0)
	return HPSegReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpSegReq() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpSegReq(v HPSegReq) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpSegReq sets the hpSegReq field to a newly
// allocated HPSegReq struct, preferring placement in s's segment.
func (s PathMgmt) NewHpSegReq() (HPSegReq, error) {
	s.Struct.SetUint16(0, 11)
	ss, err := NewHPSegReq(s.Struct.Segment())
	if err != nil {
		return HPSegReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpSegReply() (HPSegReply, error) {
	if s.Struct.Uint16(0) != 12 {
		panic("Which() != hpSegReply")
	}
	p, err := s.Struct.Ptr(0)
	return HPSegReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpSegReply() bool {
	if s.Struct.Uint16(0) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpSegReply(v HPSegReply) error {
	s.Struct.SetUint16(0, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpSegReply sets the hpSegReply field to a newly
// allocated HPSegReply struct, preferring placement in s's segment.
func (s PathMgmt) NewHpSegReply() (HPSegReply, error) {
	s.Struct.SetUint16(0, 12)
	ss, err := NewHPSegReply(s.Struct.Segment())
	if err != nil {
		return HPSegReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpSegReg() (HPSegRecs, error) {
	if s.Struct.Uint16(0) != 13 {
		panic("Which() != hpSegReg")
	}
	p, err := s.Struct.Ptr(0)
	return HPSegRecs{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpSegReg() bool {
	if s.Struct.Uint16(0) != 13 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpSegReg(v HPSegRecs) error {
	s.Struct.SetUint16(0, 13)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpSegReg sets the hpSegReg field to a newly
// allocated HPSegRecs struct, preferring placement in s's segment.
func (s PathMgmt) NewHpSegReg() (HPSegRecs, error) {
	s.Struct.SetUint16(0, 13)
	ss, err := NewHPSegRecs(s.Struct.Segment())
	if err != nil {
		return HPSegRecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpCfgReq() (HPCfgReq, error) {
	if s.Struct.Uint16(0) != 14 {
		panic("Which() != hpCfgReq")
	}
	p, err := s.Struct.Ptr(0)
	return HPCfgReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpCfgReq() bool {
	if s.Struct.Uint16(0) != 14 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpCfgReq(v HPCfgReq) error {
	s.Struct.SetUint16(0, 14)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpCfgReq sets the hpCfgReq field to a newly
// allocated HPCfgReq struct, preferring placement in s's segment.
func (s PathMgmt) NewHpCfgReq() (HPCfgReq, error) {
	s.Struct.SetUint16(0, 14)
	ss, err := NewHPCfgReq(s.Struct.Segment())
	if err != nil {
		return HPCfgReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpCfgReply() (HPCfgReply, error) {
	if s.Struct.Uint16(0) != 15 {
		panic("Which() != hpCfgReply")
	}
	p, err := s.Struct.Ptr(0)
	return HPCfgReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpCfgReply() bool {
	if s.Struct.Uint16(0) != 15 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpCfgReply(v HPCfgReply) error {
	s.Struct.SetUint16(0, 15)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpCfgReply sets the hpCfgReply field to a newly
// allocated HPCfgReply struct, preferring placement in s's segment.
func (s PathMgmt) NewHpCfgReply() (HPCfgReply, error) {
	s.Struct.SetUint16(0, 15)
	ss, err := NewHPCfgReply(s.Struct.Segment())
	if err != nil {
		return HPCfgReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PathMgmt_List is a list of PathMgmt.
type PathMgmt_List struct{ capnp.List }

// NewPathMgmt creates a new list of PathMgmt.
func NewPathMgmt_List(s *capnp.Segment, sz int32) (PathMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMgmt_List{l}, err
}

func (s PathMgmt_List) At(i int) PathMgmt { return PathMgmt{s.List.Struct(i)} }

func (s PathMgmt_List) Set(i int, v PathMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s PathMgmt_List) String() string {
	str, _ := text.MarshalList(0xa12cfa420c9ad0ca, s.List)
	return str
}

// PathMgmt_Promise is a wrapper for a PathMgmt promised by a client call.
type PathMgmt_Promise struct{ *capnp.Pipeline }

func (p PathMgmt_Promise) Struct() (PathMgmt, error) {
	s, err := p.Pipeline.Struct()
	return PathMgmt{s}, err
}

func (p PathMgmt_Promise) SegReq() SegReq_Promise {
	return SegReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegReply() SegReply_Promise {
	return SegReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegReg() SegRecs_Promise {
	return SegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SRevInfo() SignedBlob_Promise {
	return SignedBlob_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) IfStateReq() IFStateReq_Promise {
	return IFStateReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) IfStateInfos() IFStateInfos_Promise {
	return IFStateInfos_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegChangesIdReq() SegChangesIdReq_Promise {
	return SegChangesIdReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegChangesIdReply() SegChangesIdReply_Promise {
	return SegChangesIdReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegChangesReq() SegChangesReq_Promise {
	return SegChangesReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegChangesReply() SegRecs_Promise {
	return SegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpSegReq() HPSegReq_Promise {
	return HPSegReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpSegReply() HPSegReply_Promise {
	return HPSegReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpSegReg() HPSegRecs_Promise {
	return HPSegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpCfgReq() HPCfgReq_Promise {
	return HPCfgReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpCfgReply() HPCfgReply_Promise {
	return HPCfgReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_8fcd13516850d142 = "x\xda|V}l\x14[\x15?\xe7\xdem\xf7\xbb\xdd" +
	"u\xc6X\"Z \x90X\xa4\x04\x0a\x06\xd3\xa0-\x05" +
	"\x02\x0b\xa2\x9dND$\xa2.\xbb\xb3\xdb\xa5\xdb\xedv" +
	"gKS\x89\xa9\x98 !\x8a\x04\x04\x03F\x02\x18\x08" +
	"\xe1K\xa5\x09I-\x1f\x11\x05$\x8d\x90\x82h\x0c\xe8" +
	"\xcb\x83\xf7^^C\x1e\x09\xdf\xd0\xd2\xbey9w\xb7" +
	"3\xdb\xe9\xb6\xff\xed\xde\xdfo\xce\xf9\xdds\xcf\xfd\x9d" +
	"\xbb`\x84\xd7\xb3\x85%;K\x00\x94\xfa\x92Rc\xfa" +
	"\x95\xbam\xed\x83\xca\x1eP\x02\x88F\xc3\x9d\xc6fE" +
	"\xba\xb5\x07J\xd0\x09 \x9db\xfd\xd2\x05F\xbf\xce\xb3" +
	"N@\xe3\xf2\xb7\xe5Q\xef\xc9\xb5\xbf\x81`\xa0\x90+" +
	"\x183\xf9\xdf\xa4*N\xbf\xe6p\xe2^|\xb0\xe4A" +
	"\xcf\xc3\xef\x17\xe5\x9e\xe0\xfd\xd2y\xc1='\xb8_\xfe" +
	"\x85\xe3\xa7\xeckx\x98Dp\x8b\xec \x86\xdb\xd1'" +
	"\x05\xc5/\xbf\xe3O\x80F\xff\xc0\xef|\x0d\xc3\xf3\x8e" +
	"\xd9\x04\xafDg\x00@\xda\xe5\xe8\x97\x0e\x10{\xd1^" +
	"\xc7N\x0eh<|\xf4\x83\x9e\x9b\xbfm9a\x93!" +
	"\x92\xb7\xba\xeeJ].\xfa\xd5\xe1\xa2\xd0\xbf\xbc\xb1\xf8" +
	"\x0f\x9b}\xe7N\xda\xb8\xa2\x14_r?\x97\xaa\xdcb" +
	"{\xee:@\xe3?\xbf\x8e-\xdb7\xfa\xe6t1\xee" +
	"w\xdd\xf7\xa5\xb0\xe0n\x12\xdc\xb5\x7f\xdc\xfd\xfa\xef]" +
	"Cg\x8a\x95b\xb7\xbbO: \xb8{\xddT\x8a_" +
	"\x9d~\xe4\x7f\xf8z[O\xb1\xb8O\xdc\xf7\xa5!\xc1" +
	"}%\xe2V\xac\xfc\xf0\x9b\xd2?f\xf6Q)\x98\xad" +
	"ls<w\xa5\x85\x1e\xfaU\xed\xa1\xb8\xf5\xca\x8d\xb7" +
	"\x8fo\xaf\xbf\\$\xee\xa2]\x9e\xcf\xa1tH\x90\x0f" +
	"x(\xf0\xde\x81c\x1f\xb7\x0c\xef\xbei\xab\xb1\xa8\xeb" +
	"u\x0fC\xe9\x8e \xdf\x12\xe4\x1f\x9e\xf9\xea\xc5\xcf\x9f" +
	"[{\xb7\x08Yz\xe6\xe9\x97F\x05wHp\xb7~" +
	"q\xc5\xbbuU\xfb\xdf\x03\xe5\x0b\xc8\xadc\x97\x9dH" +
	"%\xf6>\x06\x94fzInd\xdaOz=\x01\xe7" +
	"\x0b{[\x8a\xa8\xdb\xbd=\xd2./\x89\xd9\xe1\xfd\x1e" +
	"\x02\x1a\xe9p\xb6\xf9G\xad\xf1V\x96\x9d\x1f\x09\xa7S" +
	"\xe9\xda\xd5\x8d\xaa\x16o\xd2\xda\x01\x1a\x11\x15\x17w\x00" +
	"8\x10 XU\x03\xa0\xcc\xe6\xa8,`\x88(#\xad" +
	"U\xaf\x01P\xe6qTV3\xac\x8c\xea\xd9\xd02t" +
	"\x03C7\xa0\x11\xcf\xb4u\xa4CQ\x1d\x00\xb0\x0c\xb0" +
	"\x91#\x06\xac\xaa\x03\xd2\xe2\xc4\xe4\"uD\xb7\xa7\x9e" +
	"\x9bO]\xcf08\x96\xfb\x1bM\x00\xcaR\x8e\xca\x06" +
	"\x86\xe5\x19-\xa2[i\xca\xfb<K\xb7\xad?xd" +
	",\x8d\xde\xa4m\x0d\xa5bm\x80\x05\xa4\xa6\x0f\x86\x97" +
	"\xecXUsdj-\xe9d\xd7\x84B\xcc\xb2\x0aa" +
	"\xaa\xa9&\x89_\xe1\xa8,f\xe8\xcch\xed\x18\xb0\x8e" +
	"\x08\x10\x03\x90\xd7\x18\xb0\x8c \xb7l\xe6\xc5\xb1\xbcu" +
	"\xb9\xfaSR\x9f\x99t%U\xbf\x9e\xa3\xf2\xad\x82\xa4" +
	"!Z\\\xc1Qid\x88\x0c\x0bz$\xb8\xae\x06X" +
	"\xa5\x9e\x89X'2\xfe|*c\xc9p\\\x9f\xb8\xe9" +
	"\xc6p\xb6y]\xbc5\x9b\xdbt=w\xf8\x0c\x83\x04" +
	"H\xe7\xb1\x06@=\x8b\x1c\xd5^d\xe8\xc7O\x0d!" +
	"B\xba\x80\xb5\x00\xea\x9f\x09\xb8D\x00\x1b5dd\x00" +
	"\xd2_p\x0d\x80\xdaK\xc05\x02\xf8\x88!#\x07\x90" +
	"\xae\x8a/.\x11p\x93\x00\xc7;CF\x07\x80t]" +
	"|q\x8d\x80\x01\x02J\x86\x0d\x19K\xe8\xb6\xe0F\x00" +
	"\xf5\x9f\x04\xfc\x97\x80\xd2!C\xc6R\x00\xe9\xdf\xb8\x05" +
	"@\xbdG\xc0\xfb\x048\xdf\x1a\xb2\xb8\xef\xff\xc7\x9f\x03" +
	"\xa8\xff#`\x90\x00\xd7\x1bCF\x17\x80\xf4\x11\xee\x03" +
	"P\x07\x09xI\x80\xfb\xb5!\xa3\x9b\xee\x1bf\x00\xd4" +
	"\xa7\x04\x8c\x10\xe0ye\xc8\xe8\xa1\xeb'B\xbd%\xc0" +
	"\xc1\x18\xfa\xbd/\x0d\x19\xbd\x00\x12\xb25\x00M\x8c\xa3" +
	"\xea\xa3u\xdf\x0bCF\x1f\xd9.#\xb5.\x02d\x02" +
	"\xfc\xcf\x0d\x19\xfd\x00R\x90>P\x03\x04L'\xa0\xec" +
	"\x99!c\x19\x804M\x00\x15\x04\xcc&\xa0\xfc\xa9!" +
	"c9M\x06\x11j\x06\x01\xf3\x18\xc3\xca\x8e\x94\xaee" +
	"\xa1\xb4N\x17-2\xb1\xc9\x0c\xddlZ\xc0\x805H" +
	"rh\xee\xb3x\x91&4o\x88\xf8\xac\xf0j\x10\x9a" +
	"\x88\xa9\xd9pVk\x02.r\x9e\x8a\xfd\xfejK\xe7" +
	"\x93A\x1b\x1c\x82\xf2T\xac\x8dZ\xfc\x8aw\xe4U\xcd" +
	"\xed\x19\xff*\x10\xb5\xbc9\x9c\x8a\xa3\xa6\x87\xa2d-" +
	"\x18\xb0|\xb28'\x9d\xc4.\x0cX\xd6kcA\xa5" +
	"\xa6\xe7\x0a`\x0e\x9e\x89qr\x85(\xb2\xdb\xe6\xf4\x98" +
	"\xc5\x11j\x8e\xf1\xf1h\x1ax\x92$\x98\xd3j<\x1c" +
	"\xcf}l\xceH\x13]\x1e\xb3B\x9b\xfe>\x1e\x1d\x0b" +
	"m\x0e,\x9b\x15\xd8\xbd8\x82\xba\xcd\x0d\x1a\x8a\xb9\xc1" +
	"\xdc\xbc\x1b\xfc\x98a\x901q\x09\x83\x9b\xc8\xac6p" +
	"T\xa2\x0c\xbb\xf3\x9el3b\xd3\x9b&\xf3O\xa7\x96" +
	"\xc9\xa0\x0f\x18\xfa&\xb1IQ\xf0\xdc\x89\x90N\x87\xa9" +
	"\xd3_\x0b\xa0\xb88*\xb3\x99h\xbeP\xd4\xcc\xe2\x07" +
	"V\xdcv\xf3{N\xf3d\x97-\xd8\\+\x98Mp" +
	"\xe1)\x94M\xe6\xa9\xa1\xa8>\xf9D\xb3\x8c\xbc\xd62" +
	"\xf2J!YH\xf5\x03\xd6\xc5:\x92I\xebo1\xe5" +
	"\xb9\xd3\x9dZy$\x16/Pn\x0e\xeb\xc9\xa6\xd0\xea" +
	"\xc6U\xe2\xd40j\x13\xdfP(\xde\x91\x17\xdf`\x89" +
	"\xefn\xebLi\x99e\xea\x98\xe3\x9b\xa7\xef\x04\x86\xce" +
	"\x82T\xdc~\x92\xd6\x0d\xb4mc\x96\xb5\x0dg\"Z" +
	"\xb0\x0b\xf3\x95f\xdb\xc5$\xa1\xdb\xc1\x16\x98F\xb9\x8f" +
	"\xa3R\xc1\xd0H\x86\xf5\xec\xf2f-\x02\xd8\x82.`" +
	"\xe8\x9a\xa2\xd4\xf9GJA\xa4-\x05\x91\"\"cT" +
	"\x85\xf2D*\xa2M\x1e,g\x06\xf3c\xe54\x12\xa9" +
	"\xc4\x81\x9f\xe5.\xcf\xf8\x06\xd9.\xa6W\xb0\xba)\xff" +
	"\xe6\xf9:5Hbs&\x8c\x08\x0c\xe9-\x15\x09G" +
	"\x9a\xb5\xef\xa4\x92\x80]\xe6\xda\x84V\xac\x14\xdaIv" +
	"\x85)\xfb\x10\x9d\xdb~\x8e\xcaQ\xebmu\x98\xd6\x0e" +
	"rT\x8e\x17\\\xe7c\xf4\xe0:\xcaQ9\xcb0\xc8" +
	"1\xa7\xe8\x141\x8fsT\xfe\xca0\xe8`b\x96\x06" +
	"/\xd3b/G\xe5\x1e\xc3`\x09\x17s4xg#" +
	"\x802\xc0Q\xf9d*7\xe8\xde\xaae\xf4D[\xca" +
	"\xac\x98\xe8\xa4\x90\xba\x82L-\xdf=\xdd\x9d\x99DV" +
	"\xcb\x98=\xe0\xce]\xe7\xee\x8c\x16\x8eN\\62Z" +
	"<\xa1g3\x09\xe0\x9a\x1d\xfb,\x00\x00\xff\xffcw" +
	"G\xee"

func init() {
	schemas.Register(schema_8fcd13516850d142,
		0x8f51e8717b3fbe1c,
		0x934ba70bfd144ebd,
		0x9359e1b2db37dbbb,
		0x9d0135027d04861e,
		0xa12cfa420c9ad0ca,
		0xa56b96c8b25ce2e1,
		0xa7ad0c62a234c68b,
		0xaaf7fd9241668ed6,
		0xabf979c3f68dae4b,
		0xb27bf6e10de2aa8c,
		0xba21c7133ee44518,
		0xbd56ceeaf8c65140,
		0xc88dfa6be7a1d091,
		0xd24bad15bb2bab5e,
		0xde94294dfb441b76,
		0xf307100ab87a1963)
}
