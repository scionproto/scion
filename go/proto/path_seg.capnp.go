// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type PathSegment struct{ capnp.Struct }

// PathSegment_TypeID is the unique identifier for the type PathSegment.
const PathSegment_TypeID = 0x939cc09a86ba70fa

func NewPathSegment(s *capnp.Segment) (PathSegment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathSegment{st}, err
}

func NewRootPathSegment(s *capnp.Segment) (PathSegment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathSegment{st}, err
}

func ReadRootPathSegment(msg *capnp.Message) (PathSegment, error) {
	root, err := msg.RootPtr()
	return PathSegment{root.Struct()}, err
}

func (s PathSegment) String() string {
	str, _ := text.Marshal(0x939cc09a86ba70fa, s.Struct)
	return str
}

func (s PathSegment) Sdata() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PathSegment) HasSdata() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegment) SetSdata(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PathSegment) AsEntries() (SignedBlob_List, error) {
	p, err := s.Struct.Ptr(1)
	return SignedBlob_List{List: p.List()}, err
}

func (s PathSegment) HasAsEntries() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathSegment) SetAsEntries(v SignedBlob_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAsEntries sets the asEntries field to a newly
// allocated SignedBlob_List, preferring placement in s's segment.
func (s PathSegment) NewAsEntries(n int32) (SignedBlob_List, error) {
	l, err := NewSignedBlob_List(s.Struct.Segment(), n)
	if err != nil {
		return SignedBlob_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// PathSegment_List is a list of PathSegment.
type PathSegment_List struct{ capnp.List }

// NewPathSegment creates a new list of PathSegment.
func NewPathSegment_List(s *capnp.Segment, sz int32) (PathSegment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PathSegment_List{l}, err
}

func (s PathSegment_List) At(i int) PathSegment { return PathSegment{s.List.Struct(i)} }

func (s PathSegment_List) Set(i int, v PathSegment) error { return s.List.SetStruct(i, v.Struct) }

func (s PathSegment_List) String() string {
	str, _ := text.MarshalList(0x939cc09a86ba70fa, s.List)
	return str
}

// PathSegment_Promise is a wrapper for a PathSegment promised by a client call.
type PathSegment_Promise struct{ *capnp.Pipeline }

func (p PathSegment_Promise) Struct() (PathSegment, error) {
	s, err := p.Pipeline.Struct()
	return PathSegment{s}, err
}

type PathSegmentSignedData struct{ capnp.Struct }

// PathSegmentSignedData_TypeID is the unique identifier for the type PathSegmentSignedData.
const PathSegmentSignedData_TypeID = 0xc7cf7a18177aec2a

func NewPathSegmentSignedData(s *capnp.Segment) (PathSegmentSignedData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathSegmentSignedData{st}, err
}

func NewRootPathSegmentSignedData(s *capnp.Segment) (PathSegmentSignedData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathSegmentSignedData{st}, err
}

func ReadRootPathSegmentSignedData(msg *capnp.Message) (PathSegmentSignedData, error) {
	root, err := msg.RootPtr()
	return PathSegmentSignedData{root.Struct()}, err
}

func (s PathSegmentSignedData) String() string {
	str, _ := text.Marshal(0xc7cf7a18177aec2a, s.Struct)
	return str
}

func (s PathSegmentSignedData) InfoF() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PathSegmentSignedData) HasInfoF() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegmentSignedData) SetInfoF(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PathSegmentSignedData) Timestamp() uint32 {
	return s.Struct.Uint32(0)
}

func (s PathSegmentSignedData) SetTimestamp(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s PathSegmentSignedData) SegID() uint16 {
	return s.Struct.Uint16(4)
}

func (s PathSegmentSignedData) SetSegID(v uint16) {
	s.Struct.SetUint16(4, v)
}

// PathSegmentSignedData_List is a list of PathSegmentSignedData.
type PathSegmentSignedData_List struct{ capnp.List }

// NewPathSegmentSignedData creates a new list of PathSegmentSignedData.
func NewPathSegmentSignedData_List(s *capnp.Segment, sz int32) (PathSegmentSignedData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathSegmentSignedData_List{l}, err
}

func (s PathSegmentSignedData_List) At(i int) PathSegmentSignedData {
	return PathSegmentSignedData{s.List.Struct(i)}
}

func (s PathSegmentSignedData_List) Set(i int, v PathSegmentSignedData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathSegmentSignedData_List) String() string {
	str, _ := text.MarshalList(0xc7cf7a18177aec2a, s.List)
	return str
}

// PathSegmentSignedData_Promise is a wrapper for a PathSegmentSignedData promised by a client call.
type PathSegmentSignedData_Promise struct{ *capnp.Pipeline }

func (p PathSegmentSignedData_Promise) Struct() (PathSegmentSignedData, error) {
	s, err := p.Pipeline.Struct()
	return PathSegmentSignedData{s}, err
}

type ASEntry struct{ capnp.Struct }
type ASEntry_exts ASEntry

// ASEntry_TypeID is the unique identifier for the type ASEntry.
const ASEntry_TypeID = 0xd4a209e8e78874ff

func NewASEntry(s *capnp.Segment) (ASEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 5})
	return ASEntry{st}, err
}

func NewRootASEntry(s *capnp.Segment) (ASEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 5})
	return ASEntry{st}, err
}

func ReadRootASEntry(msg *capnp.Message) (ASEntry, error) {
	root, err := msg.RootPtr()
	return ASEntry{root.Struct()}, err
}

func (s ASEntry) String() string {
	str, _ := text.Marshal(0xd4a209e8e78874ff, s.Struct)
	return str
}

func (s ASEntry) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASEntry) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASEntry) TrcVer() uint64 {
	return s.Struct.Uint64(8)
}

func (s ASEntry) SetTrcVer(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s ASEntry) CertVer() uint64 {
	return s.Struct.Uint64(16)
}

func (s ASEntry) SetCertVer(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s ASEntry) IfIDSize() uint8 {
	return s.Struct.Uint8(24)
}

func (s ASEntry) SetIfIDSize(v uint8) {
	s.Struct.SetUint8(24, v)
}

func (s ASEntry) Hops() (HopEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return HopEntry_List{List: p.List()}, err
}

func (s ASEntry) HasHops() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASEntry) SetHops(v HopEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHops sets the hops field to a newly
// allocated HopEntry_List, preferring placement in s's segment.
func (s ASEntry) NewHops(n int32) (HopEntry_List, error) {
	l, err := NewHopEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return HopEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ASEntry) Mtu() uint16 {
	return s.Struct.Uint16(26)
}

func (s ASEntry) SetMtu(v uint16) {
	s.Struct.SetUint16(26, v)
}

func (s ASEntry) Exts() ASEntry_exts { return ASEntry_exts(s) }

func (s ASEntry_exts) RoutingPolicy() (RoutingPolicyExt, error) {
	p, err := s.Struct.Ptr(1)
	return RoutingPolicyExt{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasRoutingPolicy() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetRoutingPolicy(v RoutingPolicyExt) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRoutingPolicy sets the routingPolicy field to a newly
// allocated RoutingPolicyExt struct, preferring placement in s's segment.
func (s ASEntry_exts) NewRoutingPolicy() (RoutingPolicyExt, error) {
	ss, err := NewRoutingPolicyExt(s.Struct.Segment())
	if err != nil {
		return RoutingPolicyExt{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ASEntry_exts) Sibra() (SibraPCBExt, error) {
	p, err := s.Struct.Ptr(2)
	return SibraPCBExt{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasSibra() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetSibra(v SibraPCBExt) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSibra sets the sibra field to a newly
// allocated SibraPCBExt struct, preferring placement in s's segment.
func (s ASEntry_exts) NewSibra() (SibraPCBExt, error) {
	ss, err := NewSibraPCBExt(s.Struct.Segment())
	if err != nil {
		return SibraPCBExt{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s ASEntry_exts) HiddenPathSeg() (HiddenPathSegExtn, error) {
	p, err := s.Struct.Ptr(3)
	return HiddenPathSegExtn{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasHiddenPathSeg() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetHiddenPathSeg(v HiddenPathSegExtn) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewHiddenPathSeg sets the hiddenPathSeg field to a newly
// allocated HiddenPathSegExtn struct, preferring placement in s's segment.
func (s ASEntry_exts) NewHiddenPathSeg() (HiddenPathSegExtn, error) {
	ss, err := NewHiddenPathSegExtn(s.Struct.Segment())
	if err != nil {
		return HiddenPathSegExtn{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s ASEntry_exts) StaticInfo() (StaticInfoExtn, error) {
	p, err := s.Struct.Ptr(4)
	return StaticInfoExtn{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasStaticInfo() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetStaticInfo(v StaticInfoExtn) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewStaticInfo sets the staticInfo field to a newly
// allocated StaticInfoExtn struct, preferring placement in s's segment.
func (s ASEntry_exts) NewStaticInfo() (StaticInfoExtn, error) {
	ss, err := NewStaticInfoExtn(s.Struct.Segment())
	if err != nil {
		return StaticInfoExtn{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

// ASEntry_List is a list of ASEntry.
type ASEntry_List struct{ capnp.List }

// NewASEntry creates a new list of ASEntry.
func NewASEntry_List(s *capnp.Segment, sz int32) (ASEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 5}, sz)
	return ASEntry_List{l}, err
}

func (s ASEntry_List) At(i int) ASEntry { return ASEntry{s.List.Struct(i)} }

func (s ASEntry_List) Set(i int, v ASEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ASEntry_List) String() string {
	str, _ := text.MarshalList(0xd4a209e8e78874ff, s.List)
	return str
}

// ASEntry_Promise is a wrapper for a ASEntry promised by a client call.
type ASEntry_Promise struct{ *capnp.Pipeline }

func (p ASEntry_Promise) Struct() (ASEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASEntry{s}, err
}

func (p ASEntry_Promise) Exts() ASEntry_exts_Promise { return ASEntry_exts_Promise{p.Pipeline} }

// ASEntry_exts_Promise is a wrapper for a ASEntry_exts promised by a client call.
type ASEntry_exts_Promise struct{ *capnp.Pipeline }

func (p ASEntry_exts_Promise) Struct() (ASEntry_exts, error) {
	s, err := p.Pipeline.Struct()
	return ASEntry_exts{s}, err
}

func (p ASEntry_exts_Promise) RoutingPolicy() RoutingPolicyExt_Promise {
	return RoutingPolicyExt_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p ASEntry_exts_Promise) Sibra() SibraPCBExt_Promise {
	return SibraPCBExt_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

func (p ASEntry_exts_Promise) HiddenPathSeg() HiddenPathSegExtn_Promise {
	return HiddenPathSegExtn_Promise{Pipeline: p.Pipeline.GetPipeline(3)}
}

func (p ASEntry_exts_Promise) StaticInfo() StaticInfoExtn_Promise {
	return StaticInfoExtn_Promise{Pipeline: p.Pipeline.GetPipeline(4)}
}

type HopEntry struct{ capnp.Struct }
type HopEntry_hopField HopEntry

// HopEntry_TypeID is the unique identifier for the type HopEntry.
const HopEntry_TypeID = 0x8bb1ddafb4872b0b

func NewHopEntry(s *capnp.Segment) (HopEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return HopEntry{st}, err
}

func NewRootHopEntry(s *capnp.Segment) (HopEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return HopEntry{st}, err
}

func ReadRootHopEntry(msg *capnp.Message) (HopEntry, error) {
	root, err := msg.RootPtr()
	return HopEntry{root.Struct()}, err
}

func (s HopEntry) String() string {
	str, _ := text.Marshal(0x8bb1ddafb4872b0b, s.Struct)
	return str
}

func (s HopEntry) InIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s HopEntry) SetInIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HopEntry) RemoteInIF() uint64 {
	return s.Struct.Uint64(8)
}

func (s HopEntry) SetRemoteInIF(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s HopEntry) InMTU() uint16 {
	return s.Struct.Uint16(16)
}

func (s HopEntry) SetInMTU(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s HopEntry) OutIA() uint64 {
	return s.Struct.Uint64(24)
}

func (s HopEntry) SetOutIA(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s HopEntry) RemoteOutIF() uint64 {
	return s.Struct.Uint64(32)
}

func (s HopEntry) SetRemoteOutIF(v uint64) {
	s.Struct.SetUint64(32, v)
}

func (s HopEntry) HopF() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s HopEntry) HasHopF() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HopEntry) SetHopF(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s HopEntry) HopField() HopEntry_hopField { return HopEntry_hopField(s) }

func (s HopEntry_hopField) ExpTime() uint8 {
	return s.Struct.Uint8(18)
}

func (s HopEntry_hopField) SetExpTime(v uint8) {
	s.Struct.SetUint8(18, v)
}

func (s HopEntry_hopField) ConsIngress() uint16 {
	return s.Struct.Uint16(20)
}

func (s HopEntry_hopField) SetConsIngress(v uint16) {
	s.Struct.SetUint16(20, v)
}

func (s HopEntry_hopField) ConsEgress() uint16 {
	return s.Struct.Uint16(22)
}

func (s HopEntry_hopField) SetConsEgress(v uint16) {
	s.Struct.SetUint16(22, v)
}

func (s HopEntry_hopField) Mac() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s HopEntry_hopField) HasMac() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HopEntry_hopField) SetMac(v []byte) error {
	return s.Struct.SetData(1, v)
}

// HopEntry_List is a list of HopEntry.
type HopEntry_List struct{ capnp.List }

// NewHopEntry creates a new list of HopEntry.
func NewHopEntry_List(s *capnp.Segment, sz int32) (HopEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return HopEntry_List{l}, err
}

func (s HopEntry_List) At(i int) HopEntry { return HopEntry{s.List.Struct(i)} }

func (s HopEntry_List) Set(i int, v HopEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s HopEntry_List) String() string {
	str, _ := text.MarshalList(0x8bb1ddafb4872b0b, s.List)
	return str
}

// HopEntry_Promise is a wrapper for a HopEntry promised by a client call.
type HopEntry_Promise struct{ *capnp.Pipeline }

func (p HopEntry_Promise) Struct() (HopEntry, error) {
	s, err := p.Pipeline.Struct()
	return HopEntry{s}, err
}

func (p HopEntry_Promise) HopField() HopEntry_hopField_Promise {
	return HopEntry_hopField_Promise{p.Pipeline}
}

// HopEntry_hopField_Promise is a wrapper for a HopEntry_hopField promised by a client call.
type HopEntry_hopField_Promise struct{ *capnp.Pipeline }

func (p HopEntry_hopField_Promise) Struct() (HopEntry_hopField, error) {
	s, err := p.Pipeline.Struct()
	return HopEntry_hopField{s}, err
}

type PCB struct{ capnp.Struct }

// PCB_TypeID is the unique identifier for the type PCB.
const PCB_TypeID = 0xd6c04763377951e5

func NewPCB(s *capnp.Segment) (PCB, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PCB{st}, err
}

func NewRootPCB(s *capnp.Segment) (PCB, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PCB{st}, err
}

func ReadRootPCB(msg *capnp.Message) (PCB, error) {
	root, err := msg.RootPtr()
	return PCB{root.Struct()}, err
}

func (s PCB) String() string {
	str, _ := text.Marshal(0xd6c04763377951e5, s.Struct)
	return str
}

func (s PCB) PathSeg() (PathSegment, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegment{Struct: p.Struct()}, err
}

func (s PCB) HasPathSeg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PCB) SetPathSeg(v PathSegment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathSeg sets the pathSeg field to a newly
// allocated PathSegment struct, preferring placement in s's segment.
func (s PCB) NewPathSeg() (PathSegment, error) {
	ss, err := NewPathSegment(s.Struct.Segment())
	if err != nil {
		return PathSegment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PCB) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s PCB) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PCB_List is a list of PCB.
type PCB_List struct{ capnp.List }

// NewPCB creates a new list of PCB.
func NewPCB_List(s *capnp.Segment, sz int32) (PCB_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PCB_List{l}, err
}

func (s PCB_List) At(i int) PCB { return PCB{s.List.Struct(i)} }

func (s PCB_List) Set(i int, v PCB) error { return s.List.SetStruct(i, v.Struct) }

func (s PCB_List) String() string {
	str, _ := text.MarshalList(0xd6c04763377951e5, s.List)
	return str
}

// PCB_Promise is a wrapper for a PCB promised by a client call.
type PCB_Promise struct{ *capnp.Pipeline }

func (p PCB_Promise) Struct() (PCB, error) {
	s, err := p.Pipeline.Struct()
	return PCB{s}, err
}

func (p PCB_Promise) PathSeg() PathSegment_Promise {
	return PathSegment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathSegMeta struct{ capnp.Struct }

// PathSegMeta_TypeID is the unique identifier for the type PathSegMeta.
const PathSegMeta_TypeID = 0x9f98567b3c0aba0f

func NewPathSegMeta(s *capnp.Segment) (PathSegMeta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathSegMeta{st}, err
}

func NewRootPathSegMeta(s *capnp.Segment) (PathSegMeta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathSegMeta{st}, err
}

func ReadRootPathSegMeta(msg *capnp.Message) (PathSegMeta, error) {
	root, err := msg.RootPtr()
	return PathSegMeta{root.Struct()}, err
}

func (s PathSegMeta) String() string {
	str, _ := text.Marshal(0x9f98567b3c0aba0f, s.Struct)
	return str
}

func (s PathSegMeta) PathSeg() (PathSegment, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegment{Struct: p.Struct()}, err
}

func (s PathSegMeta) HasPathSeg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegMeta) SetPathSeg(v PathSegment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathSeg sets the pathSeg field to a newly
// allocated PathSegment struct, preferring placement in s's segment.
func (s PathSegMeta) NewPathSeg() (PathSegment, error) {
	ss, err := NewPathSegment(s.Struct.Segment())
	if err != nil {
		return PathSegment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathSegMeta) Type() PathSegType {
	return PathSegType(s.Struct.Uint16(0))
}

func (s PathSegMeta) SetType(v PathSegType) {
	s.Struct.SetUint16(0, uint16(v))
}

// PathSegMeta_List is a list of PathSegMeta.
type PathSegMeta_List struct{ capnp.List }

// NewPathSegMeta creates a new list of PathSegMeta.
func NewPathSegMeta_List(s *capnp.Segment, sz int32) (PathSegMeta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathSegMeta_List{l}, err
}

func (s PathSegMeta_List) At(i int) PathSegMeta { return PathSegMeta{s.List.Struct(i)} }

func (s PathSegMeta_List) Set(i int, v PathSegMeta) error { return s.List.SetStruct(i, v.Struct) }

func (s PathSegMeta_List) String() string {
	str, _ := text.MarshalList(0x9f98567b3c0aba0f, s.List)
	return str
}

// PathSegMeta_Promise is a wrapper for a PathSegMeta promised by a client call.
type PathSegMeta_Promise struct{ *capnp.Pipeline }

func (p PathSegMeta_Promise) Struct() (PathSegMeta, error) {
	s, err := p.Pipeline.Struct()
	return PathSegMeta{s}, err
}

func (p PathSegMeta_Promise) PathSeg() PathSegment_Promise {
	return PathSegment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathSegType uint16

// PathSegType_TypeID is the unique identifier for the type PathSegType.
const PathSegType_TypeID = 0xa1f7a9650aa23880

// Values of PathSegType.
const (
	PathSegType_unset PathSegType = 0
	PathSegType_up    PathSegType = 1
	PathSegType_down  PathSegType = 2
	PathSegType_core  PathSegType = 3
)

// String returns the enum's constant name.
func (c PathSegType) String() string {
	switch c {
	case PathSegType_unset:
		return "unset"
	case PathSegType_up:
		return "up"
	case PathSegType_down:
		return "down"
	case PathSegType_core:
		return "core"

	default:
		return ""
	}
}

// PathSegTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PathSegTypeFromString(c string) PathSegType {
	switch c {
	case "unset":
		return PathSegType_unset
	case "up":
		return PathSegType_up
	case "down":
		return PathSegType_down
	case "core":
		return PathSegType_core

	default:
		return 0
	}
}

type PathSegType_List struct{ capnp.List }

func NewPathSegType_List(s *capnp.Segment, sz int32) (PathSegType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PathSegType_List{l.List}, err
}

func (l PathSegType_List) At(i int) PathSegType {
	ul := capnp.UInt16List{List: l.List}
	return PathSegType(ul.At(i))
}

func (l PathSegType_List) Set(i int, v PathSegType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_fb8053d9fb34b837 = "x\xda\xacUo\x88\x14e\x1c\xfe=\xef\xbb\xb3sw" +
	"f\xb3\xd3\xacxE\xb0\x14~\xa8+\xc5\xd4R$\xf0" +
	"O\xfe[Q\xda\xd7\xbb\xac$\xcaq\xf7uo\xe0v" +
	"v\xdcy\x17o\xad\xf0\xbeXAE\x1f\x8a()\x8e" +
	"\xfc\xd6'\x8b\x0c\xce\xc3\xe0N\x94\x0c\x94\x904\xf4B" +
	"\xc8TL(\"\"B\xc5&\xde\xdd\x9d\xdd\xe5\xee\xfc" +
	"\xd6\xb7\x9d\xdf>\xef\xfc~\xcf\xf3>\xbfg\x16\x8f\xb0" +
	"\xd5\xec\x09#\xc3\x89\xc4\x02#\x19\xcdy\xec\xcd#\x87" +
	"/}\xf96\x09\x0bF\xb4|l\xd9\xed\x8b\xfd#\xb7" +
	"\xc9`&\x91S\xc5q\xe7u\x98DKkx\x0f\x84" +
	"\xe8V0\xfe\xc6\xc1\x89O\xde'\xdb\xc2t\xf0\x9fl" +
	"\xca\xb9S\xffu\x93\xed%D\xd6x\xcf\xd3\xafn\xff" +
	"hT\xbf\xb9\x13\xac\xdf\xe7x|\xca\xa9r\xfdk\x0f" +
	"\xd7\xe0\x91\x15\x87z\xe4\xe7\xff|F\xb6\xc5\xdaX\x82" +
	"s\x86O9\x17\xeb\xc0\xf3\xbcH\x88\xa2\xd1\x03\x9f\xfe" +
	"\xdb\xa3\x8e\x93\x98\x8fD\x14\xa9\xb7\xae\xff\xda}\xe8\x1c" +
	"\xcd3L\xe8\xce\xfc\x17\x82s\x87_'D\xe3\xb2\xf7" +
	"\xca\xe8\x0f\x7f\x9c$\xd1\x0b\xa3\xcds\x1e\xd3\xc8\xa5\x97" +
	"\x12= 8\xd7\x12\x1a\xda\xf7\xdb\xbe\xf9\xbd\xfb\xbe\xff" +
	"v\xb6Q\x97N\x1a}p\xce\x1az\x843\xc6a=" +
	"B\xdcTXHt\xa0\xeb\x10/9\xee\xecI\xeas" +
	"\xa5d]\xb2k\xa2\xb6<\xbfq\xe2\xc7Ye\xf8\xdd" +
	"<\xe8\xfcm\xd6\xd53\xb5\x0c\x81\xab\x06_\x09e\x91" +
	"-\xca\xbb\x81\x1f\xac\xdcT\x0e\xd6\xfb\xaaR\xa3\x1c " +
	"\x1e\xe4\x09\xa2\x04\x88\xec\xaf\xfb\x88\xc4\x17\x1c\xe2\x18\x83" +
	"\x0d\xa4\xa1\x8bGw\x10\x891\x0eq\x82\xc1f]i" +
	"0\"{r\x09\x918\xc6!N1\xd8\x9c\xa7\xc1\x89" +
	"\xec\x93\xba8\xc1!N3\xd8\x89D\x1a\x09\"\xfb\xbb" +
	"]D\xe2\x14\x878\xc7\x00#\x0d\x83\xc8>\xab\xfb\x9c" +
	"\xe6\x10\x17\x18\x90D\x87\xa6\xf6\xf9\xcd\xc4,\xcf\xcf\xae" +
	"A71t\x13\xa2\x8a,\x95\x95\xcc\xfa\xc4\xb3\x1b\xe2" +
	"b\xc6\xf3\xb7\x0e<\x07\x93\x18LB\xa6\\U3\x0e" +
	"<[%S\xb5OX\x83\xe5`\x03\xe6\x12\xc3\\B" +
	"\xa4\x1f<9T \xa2\x19\xda\xe4\\5\xd8/\x8b%" +
	"\xc9}\xa5\xe5\xe9j\xc9\xf3\xa8\xe6\xb7\x80C,\xee\x90" +
	"g\xe16\"\xf18\x87\xd8\xc4\x90\x09\x0b\xaer[]" +
	"\xdcP\x8b\xecIB\x88{\x099\x0e\xa4\xa2mWn" +
	"-?\xb0q\xc9(\x11t\xf1n\xed\xb7J\xae\xdci" +
	"\xed\xd7\xb6\xdb\xb7\xbak%\x1f\xe1\x10\xcb\x18\xf6\x07\x8d" +
	"\xa3H\xb5\xf7\x89\x80\x14\xc1R\xb5@\xc2jo\x03\x01" +
	"\xd6\xdd{\x0f\xd4x u\xefT\xfd\xae5m\xc0~" +
	"\xe8\x01\"0\xfb\xfe>\"p\xdb\xee#\xcaT\xfdP" +
	"*^\x0d\xacBy\xafo\xe5\xcb\x159\xe3\x95k\xfa" +
	"\xebF[$\xcda\x15\x8a\x14O\xa4\x90F\x92\xc8v" +
	"+Db'\x87\x18\xd2b\xb2\xb4\xf6\xad\xedi\x85\x0b" +
	"\x1c\"\xd0^\xe3it\x11\xd9%\x8d\x1c\xe2\x10\xc3\xda" +
	"k\x894\xba\x89\xec\xaav\xa5\xe2\x10#\x0cQ\xa5\\" +
	"U\x9e_\xccQ\xa6<\xe4\xe5kHE7\xaf>\xb9" +
	"blj\xf2\xc3\xa6\x00\x99\xd0\xdbUq\x91\x8a\xde\xdd" +
	"y\xe3\xc5\xa37\xee\x8c5\xeb\xd1\xa0W(H?\xe7" +
	"R&\x96\xee\xafw\xae]\xfe\xf8\xabZ\x14#B\xe5" +
	"*/\xaf\xed\xb7\xbb\x8cT\xf4\xfcB\xf9\xc1S/\xe7" +
	"~\x8a\xff\x8e\xf9\xf2i\x9b\xb5\xa8m\xb1:\xeb\xfb\x9a" +
	"\xac\xf5\x1d\xbe\xc4!\x065\xeb\x9e\x06k\xb9\xab\x93\xf5" +
	"\x9c&\xeb\x1d\x9d\xac\xd1d\xfd0\x91\x088\xc4k\x0c" +
	"\xfb\xe5p0\xe0\x95$\x92\xc4\x90$D\xf9\xb2\x1ff" +
	"\xfdb\x85L\x19\x86\xf1n\xd4\xab\xeb\x8b\x15I\xbc]" +
	"4Kn\xbe\xe5\xd2\xe9\x0cZ\xfe\xf7U\xbfW\xf4e" +
	"\xc1Z\xe76\xacxO\xcb\x8a\xeb\xf5=\xad\xe6\x10[" +
	"\xdaV\xcc\xeaE\xd8\xc4!\x064\x0b\xd6\xc8\x09\xa1\x81" +
	"[8\xc4\x0bL/\xed\xeer{\x07\x95W\x92\xa1r" +
	"K\x84\x00]\xc4\xd0\xa5\xafI\x16\xb3\xebZ\xa3\xc7\x93" +
	"!\xf6\xd2\xaa\x86\x99\xa6\x85\xd6\x92\xd9Bk%\x918" +
	"\xc2!&:\x86\xf9fmG\x92\xf1\xdeFhMn" +
	"n\x87\x16\xe2\xcc\xd2[u\x82C\xfc\xcc`\x1bs\x1b" +
	"\xa1uIk\x7f\x81C\\m\x86V\xeb\x93a_\xee" +
	"#\x96\xf1\xc2\x82\x1b\xc6q\xb3JU\xf2\xdbe%~" +
	"\xdc\x9f\x97\x15\xd5\xf1\x1cy\xbb\xb3\xeb\xfa\xbd}\x92\x88" +
	"\xe2\xfb\xd3\x09\xd5\x91\x13\xad\x0fK#'\xcc\x92\xaa\xc6" +
	"\xc2XrX\x853\xd4\xc9\xf1g\xd6\xfeo\x81\xa1\xe7" +
	"\x8b\x87\xfd/\x00\x00\xff\xff=\x88\xf2\xaf"

func init() {
	schemas.Register(schema_fb8053d9fb34b837,
		0x8bb1ddafb4872b0b,
		0x939cc09a86ba70fa,
		0x9f98567b3c0aba0f,
		0xa1f7a9650aa23880,
		0xc2740afe9d859fff,
		0xc5efd39fe31865ba,
		0xc7cf7a18177aec2a,
		0xd4a209e8e78874ff,
		0xd6c04763377951e5)
}
