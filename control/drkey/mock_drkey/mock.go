// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/control/drkey (interfaces: Fetcher,Level1PrefetchListKeeper,Level1Engine)

// Package mock_drkey is a generated GoMock package.
package mock_drkey

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	drkey "github.com/scionproto/scion/control/drkey"
	drkey0 "github.com/scionproto/scion/pkg/drkey"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// Level1 mocks base method.
func (m *MockFetcher) Level1(arg0 context.Context, arg1 drkey0.Level1Meta) (drkey0.Level1Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level1", arg0, arg1)
	ret0, _ := ret[0].(drkey0.Level1Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Level1 indicates an expected call of Level1.
func (mr *MockFetcherMockRecorder) Level1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level1", reflect.TypeOf((*MockFetcher)(nil).Level1), arg0, arg1)
}

// MockLevel1PrefetchListKeeper is a mock of Level1PrefetchListKeeper interface.
type MockLevel1PrefetchListKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockLevel1PrefetchListKeeperMockRecorder
}

// MockLevel1PrefetchListKeeperMockRecorder is the mock recorder for MockLevel1PrefetchListKeeper.
type MockLevel1PrefetchListKeeperMockRecorder struct {
	mock *MockLevel1PrefetchListKeeper
}

// NewMockLevel1PrefetchListKeeper creates a new mock instance.
func NewMockLevel1PrefetchListKeeper(ctrl *gomock.Controller) *MockLevel1PrefetchListKeeper {
	mock := &MockLevel1PrefetchListKeeper{ctrl: ctrl}
	mock.recorder = &MockLevel1PrefetchListKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLevel1PrefetchListKeeper) EXPECT() *MockLevel1PrefetchListKeeperMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockLevel1PrefetchListKeeper) Info() []drkey.Level1PrefetchInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].([]drkey.Level1PrefetchInfo)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockLevel1PrefetchListKeeperMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLevel1PrefetchListKeeper)(nil).Info))
}

// Update mocks base method.
func (m *MockLevel1PrefetchListKeeper) Update(arg0 drkey.Level1PrefetchInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MockLevel1PrefetchListKeeperMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLevel1PrefetchListKeeper)(nil).Update), arg0)
}

// MockLevel1Engine is a mock of Level1Engine interface.
type MockLevel1Engine struct {
	ctrl     *gomock.Controller
	recorder *MockLevel1EngineMockRecorder
}

// MockLevel1EngineMockRecorder is the mock recorder for MockLevel1Engine.
type MockLevel1EngineMockRecorder struct {
	mock *MockLevel1Engine
}

// NewMockLevel1Engine creates a new mock instance.
func NewMockLevel1Engine(ctrl *gomock.Controller) *MockLevel1Engine {
	mock := &MockLevel1Engine{ctrl: ctrl}
	mock.recorder = &MockLevel1EngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLevel1Engine) EXPECT() *MockLevel1EngineMockRecorder {
	return m.recorder
}

// GetLevel1Key mocks base method.
func (m *MockLevel1Engine) GetLevel1Key(arg0 context.Context, arg1 drkey0.Level1Meta) (drkey0.Level1Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel1Key", arg0, arg1)
	ret0, _ := ret[0].(drkey0.Level1Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLevel1Key indicates an expected call of GetLevel1Key.
func (mr *MockLevel1EngineMockRecorder) GetLevel1Key(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel1Key", reflect.TypeOf((*MockLevel1Engine)(nil).GetLevel1Key), arg0, arg1)
}

// GetLevel1PrefetchInfo mocks base method.
func (m *MockLevel1Engine) GetLevel1PrefetchInfo() []drkey.Level1PrefetchInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel1PrefetchInfo")
	ret0, _ := ret[0].([]drkey.Level1PrefetchInfo)
	return ret0
}

// GetLevel1PrefetchInfo indicates an expected call of GetLevel1PrefetchInfo.
func (mr *MockLevel1EngineMockRecorder) GetLevel1PrefetchInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel1PrefetchInfo", reflect.TypeOf((*MockLevel1Engine)(nil).GetLevel1PrefetchInfo))
}
