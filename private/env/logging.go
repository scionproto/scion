// Copyright 2018 ETH Zurich, Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package env

import (
	"fmt"
	"os"
	"runtime"

	"github.com/scionproto/scion/pkg/log"
	"github.com/scionproto/scion/pkg/private/serrors"
)

// Startup* variables are set during link time.
var (
	// The value is generated by tools/git-version.
	StartupVersion string
)

// LogAppStarted should be called by applications as soon as logging is
// initialized.
func LogAppStarted(svcType, elemID string) error {
	// XXX(JordiSubira): Right now RunsInDocker() only is Linux-compatible.
	// If we are going to run apps in docker also in macOS (and potentially in Windows)
	// we should make the method compatible.
	inDocker := false
	if runtime.GOOS == "linux" {
		var err error
		inDocker, err = RunsInDocker()
		if err != nil {
			return serrors.WrapStr("Unable to determine if running in docker", err)
		}
	}

	info := fmt.Sprintf("=====================> Service started %s %s\n"+
		"%s  %s\n  %s\n  %s\n  %s\n",
		svcType,
		elemID,
		VersionInfo(),
		fmt.Sprintf("In docker:     %v", inDocker),
		fmt.Sprintf("pid:           %d", os.Getpid()),
		fmt.Sprintf("euid/egid:     %d %d", os.Geteuid(), os.Getegid()),
		fmt.Sprintf("cmd line:      %q", os.Args),
	)
	log.Info(info)
	return nil
}

// VersionInfo returns build version information (build date, build version, build chain).
func VersionInfo() string {
	return fmt.Sprintf("  Scion version: %s\n", StartupVersion)
}

func LogAppStopped(svcType, elemID string) {
	log.Info(fmt.Sprintf("=====================> Service stopped %s %s", svcType, elemID))
}
