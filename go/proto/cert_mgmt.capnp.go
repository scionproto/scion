// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type CertChainReq struct{ capnp.Struct }

// CertChainReq_TypeID is the unique identifier for the type CertChainReq.
const CertChainReq_TypeID = 0xc464d1e0777e54d3

func NewCertChainReq(s *capnp.Segment) (CertChainReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return CertChainReq{st}, err
}

func NewRootCertChainReq(s *capnp.Segment) (CertChainReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return CertChainReq{st}, err
}

func ReadRootCertChainReq(msg *capnp.Message) (CertChainReq, error) {
	root, err := msg.RootPtr()
	return CertChainReq{root.Struct()}, err
}

func (s CertChainReq) String() string {
	str, _ := text.Marshal(0xc464d1e0777e54d3, s.Struct)
	return str
}

func (s CertChainReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s CertChainReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s CertChainReq) Version() uint64 {
	return s.Struct.Uint64(8)
}

func (s CertChainReq) SetVersion(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CertChainReq) CacheOnly() bool {
	return s.Struct.Bit(128)
}

func (s CertChainReq) SetCacheOnly(v bool) {
	s.Struct.SetBit(128, v)
}

// CertChainReq_List is a list of CertChainReq.
type CertChainReq_List struct{ capnp.List }

// NewCertChainReq creates a new list of CertChainReq.
func NewCertChainReq_List(s *capnp.Segment, sz int32) (CertChainReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return CertChainReq_List{l}, err
}

func (s CertChainReq_List) At(i int) CertChainReq { return CertChainReq{s.List.Struct(i)} }

func (s CertChainReq_List) Set(i int, v CertChainReq) error { return s.List.SetStruct(i, v.Struct) }

func (s CertChainReq_List) String() string {
	str, _ := text.MarshalList(0xc464d1e0777e54d3, s.List)
	return str
}

// CertChainReq_Promise is a wrapper for a CertChainReq promised by a client call.
type CertChainReq_Promise struct{ *capnp.Pipeline }

func (p CertChainReq_Promise) Struct() (CertChainReq, error) {
	s, err := p.Pipeline.Struct()
	return CertChainReq{s}, err
}

type CertChain struct{ capnp.Struct }

// CertChain_TypeID is the unique identifier for the type CertChain.
const CertChain_TypeID = 0xadadc71f7e190917

func NewCertChain(s *capnp.Segment) (CertChain, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChain{st}, err
}

func NewRootCertChain(s *capnp.Segment) (CertChain, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChain{st}, err
}

func ReadRootCertChain(msg *capnp.Message) (CertChain, error) {
	root, err := msg.RootPtr()
	return CertChain{root.Struct()}, err
}

func (s CertChain) String() string {
	str, _ := text.Marshal(0xadadc71f7e190917, s.Struct)
	return str
}

func (s CertChain) Chain() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChain) HasChain() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChain) SetChain(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertChain_List is a list of CertChain.
type CertChain_List struct{ capnp.List }

// NewCertChain creates a new list of CertChain.
func NewCertChain_List(s *capnp.Segment, sz int32) (CertChain_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CertChain_List{l}, err
}

func (s CertChain_List) At(i int) CertChain { return CertChain{s.List.Struct(i)} }

func (s CertChain_List) Set(i int, v CertChain) error { return s.List.SetStruct(i, v.Struct) }

func (s CertChain_List) String() string {
	str, _ := text.MarshalList(0xadadc71f7e190917, s.List)
	return str
}

// CertChain_Promise is a wrapper for a CertChain promised by a client call.
type CertChain_Promise struct{ *capnp.Pipeline }

func (p CertChain_Promise) Struct() (CertChain, error) {
	s, err := p.Pipeline.Struct()
	return CertChain{s}, err
}

type CertChainIssReq struct{ capnp.Struct }

// CertChainIssReq_TypeID is the unique identifier for the type CertChainIssReq.
const CertChainIssReq_TypeID = 0xb2de94224c009676

func NewCertChainIssReq(s *capnp.Segment) (CertChainIssReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssReq{st}, err
}

func NewRootCertChainIssReq(s *capnp.Segment) (CertChainIssReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssReq{st}, err
}

func ReadRootCertChainIssReq(msg *capnp.Message) (CertChainIssReq, error) {
	root, err := msg.RootPtr()
	return CertChainIssReq{root.Struct()}, err
}

func (s CertChainIssReq) String() string {
	str, _ := text.Marshal(0xb2de94224c009676, s.Struct)
	return str
}

func (s CertChainIssReq) Cert() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChainIssReq) HasCert() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChainIssReq) SetCert(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertChainIssReq_List is a list of CertChainIssReq.
type CertChainIssReq_List struct{ capnp.List }

// NewCertChainIssReq creates a new list of CertChainIssReq.
func NewCertChainIssReq_List(s *capnp.Segment, sz int32) (CertChainIssReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CertChainIssReq_List{l}, err
}

func (s CertChainIssReq_List) At(i int) CertChainIssReq { return CertChainIssReq{s.List.Struct(i)} }

func (s CertChainIssReq_List) Set(i int, v CertChainIssReq) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CertChainIssReq_List) String() string {
	str, _ := text.MarshalList(0xb2de94224c009676, s.List)
	return str
}

// CertChainIssReq_Promise is a wrapper for a CertChainIssReq promised by a client call.
type CertChainIssReq_Promise struct{ *capnp.Pipeline }

func (p CertChainIssReq_Promise) Struct() (CertChainIssReq, error) {
	s, err := p.Pipeline.Struct()
	return CertChainIssReq{s}, err
}

type CertChainIssRep struct{ capnp.Struct }

// CertChainIssRep_TypeID is the unique identifier for the type CertChainIssRep.
const CertChainIssRep_TypeID = 0xc95b16276878cfc1

func NewCertChainIssRep(s *capnp.Segment) (CertChainIssRep, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssRep{st}, err
}

func NewRootCertChainIssRep(s *capnp.Segment) (CertChainIssRep, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssRep{st}, err
}

func ReadRootCertChainIssRep(msg *capnp.Message) (CertChainIssRep, error) {
	root, err := msg.RootPtr()
	return CertChainIssRep{root.Struct()}, err
}

func (s CertChainIssRep) String() string {
	str, _ := text.Marshal(0xc95b16276878cfc1, s.Struct)
	return str
}

func (s CertChainIssRep) Chain() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChainIssRep) HasChain() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChainIssRep) SetChain(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertChainIssRep_List is a list of CertChainIssRep.
type CertChainIssRep_List struct{ capnp.List }

// NewCertChainIssRep creates a new list of CertChainIssRep.
func NewCertChainIssRep_List(s *capnp.Segment, sz int32) (CertChainIssRep_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CertChainIssRep_List{l}, err
}

func (s CertChainIssRep_List) At(i int) CertChainIssRep { return CertChainIssRep{s.List.Struct(i)} }

func (s CertChainIssRep_List) Set(i int, v CertChainIssRep) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CertChainIssRep_List) String() string {
	str, _ := text.MarshalList(0xc95b16276878cfc1, s.List)
	return str
}

// CertChainIssRep_Promise is a wrapper for a CertChainIssRep promised by a client call.
type CertChainIssRep_Promise struct{ *capnp.Pipeline }

func (p CertChainIssRep_Promise) Struct() (CertChainIssRep, error) {
	s, err := p.Pipeline.Struct()
	return CertChainIssRep{s}, err
}

type TRCReq struct{ capnp.Struct }

// TRCReq_TypeID is the unique identifier for the type TRCReq.
const TRCReq_TypeID = 0xd4c43f7ac10a9dbc

func NewTRCReq(s *capnp.Segment) (TRCReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TRCReq{st}, err
}

func NewRootTRCReq(s *capnp.Segment) (TRCReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TRCReq{st}, err
}

func ReadRootTRCReq(msg *capnp.Message) (TRCReq, error) {
	root, err := msg.RootPtr()
	return TRCReq{root.Struct()}, err
}

func (s TRCReq) String() string {
	str, _ := text.Marshal(0xd4c43f7ac10a9dbc, s.Struct)
	return str
}

func (s TRCReq) Isd() uint16 {
	return s.Struct.Uint16(0)
}

func (s TRCReq) SetIsd(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s TRCReq) Version() uint64 {
	return s.Struct.Uint64(8)
}

func (s TRCReq) SetVersion(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TRCReq) CacheOnly() bool {
	return s.Struct.Bit(16)
}

func (s TRCReq) SetCacheOnly(v bool) {
	s.Struct.SetBit(16, v)
}

// TRCReq_List is a list of TRCReq.
type TRCReq_List struct{ capnp.List }

// NewTRCReq creates a new list of TRCReq.
func NewTRCReq_List(s *capnp.Segment, sz int32) (TRCReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return TRCReq_List{l}, err
}

func (s TRCReq_List) At(i int) TRCReq { return TRCReq{s.List.Struct(i)} }

func (s TRCReq_List) Set(i int, v TRCReq) error { return s.List.SetStruct(i, v.Struct) }

func (s TRCReq_List) String() string {
	str, _ := text.MarshalList(0xd4c43f7ac10a9dbc, s.List)
	return str
}

// TRCReq_Promise is a wrapper for a TRCReq promised by a client call.
type TRCReq_Promise struct{ *capnp.Pipeline }

func (p TRCReq_Promise) Struct() (TRCReq, error) {
	s, err := p.Pipeline.Struct()
	return TRCReq{s}, err
}

type TRC struct{ capnp.Struct }

// TRC_TypeID is the unique identifier for the type TRC.
const TRC_TypeID = 0x9aee2af152a5f7d7

func NewTRC(s *capnp.Segment) (TRC, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TRC{st}, err
}

func NewRootTRC(s *capnp.Segment) (TRC, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TRC{st}, err
}

func ReadRootTRC(msg *capnp.Message) (TRC, error) {
	root, err := msg.RootPtr()
	return TRC{root.Struct()}, err
}

func (s TRC) String() string {
	str, _ := text.Marshal(0x9aee2af152a5f7d7, s.Struct)
	return str
}

func (s TRC) Trc() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TRC) HasTrc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TRC) SetTrc(v []byte) error {
	return s.Struct.SetData(0, v)
}

// TRC_List is a list of TRC.
type TRC_List struct{ capnp.List }

// NewTRC creates a new list of TRC.
func NewTRC_List(s *capnp.Segment, sz int32) (TRC_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TRC_List{l}, err
}

func (s TRC_List) At(i int) TRC { return TRC{s.List.Struct(i)} }

func (s TRC_List) Set(i int, v TRC) error { return s.List.SetStruct(i, v.Struct) }

func (s TRC_List) String() string {
	str, _ := text.MarshalList(0x9aee2af152a5f7d7, s.List)
	return str
}

// TRC_Promise is a wrapper for a TRC promised by a client call.
type TRC_Promise struct{ *capnp.Pipeline }

func (p TRC_Promise) Struct() (TRC, error) {
	s, err := p.Pipeline.Struct()
	return TRC{s}, err
}

type CertMgmt struct{ capnp.Struct }
type CertMgmt_Which uint16

const (
	CertMgmt_Which_unset           CertMgmt_Which = 0
	CertMgmt_Which_certChainReq    CertMgmt_Which = 1
	CertMgmt_Which_certChain       CertMgmt_Which = 2
	CertMgmt_Which_trcReq          CertMgmt_Which = 3
	CertMgmt_Which_trc             CertMgmt_Which = 4
	CertMgmt_Which_certChainIssReq CertMgmt_Which = 5
	CertMgmt_Which_certChainIssRep CertMgmt_Which = 6
)

func (w CertMgmt_Which) String() string {
	const s = "unsetcertChainReqcertChaintrcReqtrccertChainIssReqcertChainIssRep"
	switch w {
	case CertMgmt_Which_unset:
		return s[0:5]
	case CertMgmt_Which_certChainReq:
		return s[5:17]
	case CertMgmt_Which_certChain:
		return s[17:26]
	case CertMgmt_Which_trcReq:
		return s[26:32]
	case CertMgmt_Which_trc:
		return s[32:35]
	case CertMgmt_Which_certChainIssReq:
		return s[35:50]
	case CertMgmt_Which_certChainIssRep:
		return s[50:65]

	}
	return "CertMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CertMgmt_TypeID is the unique identifier for the type CertMgmt.
const CertMgmt_TypeID = 0xa19070b486ecd839

func NewCertMgmt(s *capnp.Segment) (CertMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertMgmt{st}, err
}

func NewRootCertMgmt(s *capnp.Segment) (CertMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertMgmt{st}, err
}

func ReadRootCertMgmt(msg *capnp.Message) (CertMgmt, error) {
	root, err := msg.RootPtr()
	return CertMgmt{root.Struct()}, err
}

func (s CertMgmt) String() string {
	str, _ := text.Marshal(0xa19070b486ecd839, s.Struct)
	return str
}

func (s CertMgmt) Which() CertMgmt_Which {
	return CertMgmt_Which(s.Struct.Uint16(0))
}
func (s CertMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CertMgmt) CertChainReq() (CertChainReq, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != certChainReq")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainReq() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainReq(v CertChainReq) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainReq sets the certChainReq field to a newly
// allocated CertChainReq struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainReq() (CertChainReq, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewCertChainReq(s.Struct.Segment())
	if err != nil {
		return CertChainReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChain() (CertChain, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != certChain")
	}
	p, err := s.Struct.Ptr(0)
	return CertChain{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChain() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChain(v CertChain) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChain sets the certChain field to a newly
// allocated CertChain struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChain() (CertChain, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewCertChain(s.Struct.Segment())
	if err != nil {
		return CertChain{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) TrcReq() (TRCReq, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != trcReq")
	}
	p, err := s.Struct.Ptr(0)
	return TRCReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasTrcReq() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetTrcReq(v TRCReq) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrcReq sets the trcReq field to a newly
// allocated TRCReq struct, preferring placement in s's segment.
func (s CertMgmt) NewTrcReq() (TRCReq, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewTRCReq(s.Struct.Segment())
	if err != nil {
		return TRCReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) Trc() (TRC, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != trc")
	}
	p, err := s.Struct.Ptr(0)
	return TRC{Struct: p.Struct()}, err
}

func (s CertMgmt) HasTrc() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetTrc(v TRC) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrc sets the trc field to a newly
// allocated TRC struct, preferring placement in s's segment.
func (s CertMgmt) NewTrc() (TRC, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewTRC(s.Struct.Segment())
	if err != nil {
		return TRC{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChainIssReq() (CertChainIssReq, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != certChainIssReq")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainIssReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainIssReq() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainIssReq(v CertChainIssReq) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainIssReq sets the certChainIssReq field to a newly
// allocated CertChainIssReq struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainIssReq() (CertChainIssReq, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewCertChainIssReq(s.Struct.Segment())
	if err != nil {
		return CertChainIssReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChainIssRep() (CertChainIssRep, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != certChainIssRep")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainIssRep{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainIssRep() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainIssRep(v CertChainIssRep) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainIssRep sets the certChainIssRep field to a newly
// allocated CertChainIssRep struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainIssRep() (CertChainIssRep, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewCertChainIssRep(s.Struct.Segment())
	if err != nil {
		return CertChainIssRep{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CertMgmt_List is a list of CertMgmt.
type CertMgmt_List struct{ capnp.List }

// NewCertMgmt creates a new list of CertMgmt.
func NewCertMgmt_List(s *capnp.Segment, sz int32) (CertMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return CertMgmt_List{l}, err
}

func (s CertMgmt_List) At(i int) CertMgmt { return CertMgmt{s.List.Struct(i)} }

func (s CertMgmt_List) Set(i int, v CertMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s CertMgmt_List) String() string {
	str, _ := text.MarshalList(0xa19070b486ecd839, s.List)
	return str
}

// CertMgmt_Promise is a wrapper for a CertMgmt promised by a client call.
type CertMgmt_Promise struct{ *capnp.Pipeline }

func (p CertMgmt_Promise) Struct() (CertMgmt, error) {
	s, err := p.Pipeline.Struct()
	return CertMgmt{s}, err
}

func (p CertMgmt_Promise) CertChainReq() CertChainReq_Promise {
	return CertChainReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChain() CertChain_Promise {
	return CertChain_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) TrcReq() TRCReq_Promise {
	return TRCReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) Trc() TRC_Promise {
	return TRC_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChainIssReq() CertChainIssReq_Promise {
	return CertChainIssReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChainIssRep() CertChainIssRep_Promise {
	return CertChainIssRep_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_ec3b2b10a5e23975 = "x\xda\x94\x93OHTQ\x14\xc6\xcfw\xef\xfc\xc9\xf0" +
	"\xe1{\xdcG\x11\x04\x03\xb6\x08,\xa2t\xa5-F\x9a" +
	"\\\x08J\xde\xc9E\xd0\"\x86qp&\xf25\xce\x8c" +
	"\xf6ga\x7f\x16A\x0b\xa9E\x05\x05A\x05.\\\x88" +
	"\x15\x09\x15\x06\x0d\x0c\x98\x91\xa4%dP\x11Q\x8b\xc2" +
	"\x82\x16\x11fu\xe3\xbeqfdF\xb2\x98\xcd\x9d{" +
	"\x7f\xe7\xe3|\xe7|o\xfb\xb0\xb7\x99\xed\xf0Nl\"" +
	"\xda{\x0d^\x9fz\xf1}(\xfc\xb5\xee\xcb\x15\xb2L" +
	"\xa8\xbe\xc6wC\xe6\x96\x9d\xf3\xe4\x85\x9fHLZ7" +
	"\xc4\x8c\xa5OSV\x90\xa0\x1a\xe7\xe6\xcf\xdcI\x9e\xbf" +
	"N\xd2\xc42\xb8\x05~\xcd|\xb6\x1e\x8b\x05M7|" +
	"\xb3\xce\x81\xa0\xd6Wm\x18\x08L\x8c\x8c\xac$=(" +
	"\x9e\x89\xcbB\x9f.\x8a a\xb1\xffR[\xed\x857" +
	"\xb7+\xc9\x861\xc1 \xb2.\xfa@\xa3\xeay\xe7\xc0" +
	"\x91\xb73]9\xdd\x05/\xd1\x1eM\xbc\x16\x9f\xc4G" +
	"\x97\xfd F\x09*\xfb\xf4h|\xf3\xba\xfd\x93+\xb4" +
	"\xd0p\xcaf\x10\x83\xb6\x86\xcf\xdaZx\xfc\xea\xda\xec" +
	"\xf1`nV\x0b\xb32\xe1a\xfb\xbe\xb8\xe5\xb2#\xf6" +
	"(\xa9\xa5\xdfV\x15\x8d\xa52\x07z\xba{\x90\xd9\x16" +
	"\x8d$\x9dd\x93\xbf3\x1c\xea\x00\xa4\x87{\x88< " +
	"\xb2\x8cZ\"\xb9\x86C\xda\x0c\xfeL*\x0a\x83\x18\x0c" +
	"B\xb1\x96\x15jC\xb1T\xa6\xbd\xbb'C\xa4\x156" +
	"rO\xb5R\xae\xc4X=\x91\xbc\xc9!\xc7\x19\x0c\xfc" +
	"V6\xf4\xed\xbd\x83D\xf2.\x87\xcc1\x18\xec\x97\xb2" +
	"\xc1\x88\xacl\x98H>\xe4\x90O\x18\x0c\xfeS\xd9\xe0" +
	"D\xd6d\x13\x91\xccq\xc8i\x06\xc3\xb3\xa8lx\x88" +
	"\xac)\xdd\xda#\x0e9\xcb`x\x7f(\x1b^\"k" +
	"\xe64\x91\x9c\xe6\x90\xaf\x18\x0c\xdf\x82\xb2\xe1#\xb2^" +
	"\xea\xdb9\x0e\xf9\x9e!\xd0\xe7\xa4c\x19\xf2\xb9\x16B" +
	"\xf1H\x82j\x9cp\xac\x17fi9\x04\x98K\x1e]" +
	"\x00\x0e\xccR\"\xf2\xaf\xc1L*\x9a/+\x8e>\xff" +
	"\xe0\x8e\xc9,e\xb3L\x0cNk:\x1d\x8e\xf5\x12\xcc" +
	"BpV&\x92\x04\xb3\x94\x81eL\xc5\xd8\xf3Ee" +
	"\x8b\xab/-.\x10\x8dG\x12N\xc5\xeax\xb9F\xa1" +
	"\xb32\xa5\xba\x92R\x8d\xae\xfd{\x06\xb4\x90;P\xad" +
	"R]Ti\xd1\xfd4s\xc86\x06\x0b\xc8\x87\xa0u" +
	"\x17\x91\xdc\xcd!;\x18,v2\x9f\x81v\x9d\x816" +
	"\x0e\xb9\x8f!\x90HwE\xd2\xa8\"\x86*\xc2\x89\xfe" +
	"X*\x9d8\xec\x14\xfe\xabh$\x1a\x8f\xedq\x0e\x11" +
	"\x8e\x01\xc4\x80\xd5\xdd%\xe9\xbf\xe7T\xfc<\x82\x9d\xe1" +
	"P\xa5\xb1\xdaU\x8d\x99\x95\xc6\xfc\x89t\x17\xfc\xc4\xe0" +
	"\xff7[\x7f\x02\x00\x00\xff\xff\x1eGLP"

func init() {
	schemas.Register(schema_ec3b2b10a5e23975,
		0x9aee2af152a5f7d7,
		0xa19070b486ecd839,
		0xadadc71f7e190917,
		0xb2de94224c009676,
		0xc464d1e0777e54d3,
		0xc95b16276878cfc1,
		0xd4c43f7ac10a9dbc)
}
