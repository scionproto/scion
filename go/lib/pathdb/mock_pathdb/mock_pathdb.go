// Code generated by MockGen. DO NOT EDIT.
// Source: go/lib/pathdb/pathdb.go

// Package mock_pathdb is a generated GoMock package.
package mock_pathdb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "github.com/scionproto/scion/go/lib/common"
	seg "github.com/scionproto/scion/go/lib/ctrl/seg"
	query "github.com/scionproto/scion/go/lib/pathdb/query"
	proto "github.com/scionproto/scion/go/proto"
	reflect "reflect"
	time "time"
)

// MockPathDB is a mock of PathDB interface
type MockPathDB struct {
	ctrl     *gomock.Controller
	recorder *MockPathDBMockRecorder
}

// MockPathDBMockRecorder is the mock recorder for MockPathDB
type MockPathDBMockRecorder struct {
	mock *MockPathDB
}

// NewMockPathDB creates a new mock instance
func NewMockPathDB(ctrl *gomock.Controller) *MockPathDB {
	mock := &MockPathDB{ctrl: ctrl}
	mock.recorder = &MockPathDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPathDB) EXPECT() *MockPathDBMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockPathDB) Insert(arg0 context.Context, arg1 *seg.PathSegment, arg2 []proto.PathSegType) (int, error) {
	ret := m.ctrl.Call(m, "Insert", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockPathDBMockRecorder) Insert(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPathDB)(nil).Insert), arg0, arg1, arg2)
}

// InsertWithHPCfgIDs mocks base method
func (m *MockPathDB) InsertWithHPCfgIDs(arg0 context.Context, arg1 *seg.PathSegment, arg2 []proto.PathSegType, arg3 []*query.HPCfgID) (int, error) {
	ret := m.ctrl.Call(m, "InsertWithHPCfgIDs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertWithHPCfgIDs indicates an expected call of InsertWithHPCfgIDs
func (mr *MockPathDBMockRecorder) InsertWithHPCfgIDs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWithHPCfgIDs", reflect.TypeOf((*MockPathDB)(nil).InsertWithHPCfgIDs), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockPathDB) Delete(arg0 context.Context, arg1 common.RawBytes) (int, error) {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPathDBMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPathDB)(nil).Delete), arg0, arg1)
}

// DeleteWithIntf mocks base method
func (m *MockPathDB) DeleteWithIntf(arg0 context.Context, arg1 query.IntfSpec) (int, error) {
	ret := m.ctrl.Call(m, "DeleteWithIntf", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithIntf indicates an expected call of DeleteWithIntf
func (mr *MockPathDBMockRecorder) DeleteWithIntf(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithIntf", reflect.TypeOf((*MockPathDB)(nil).DeleteWithIntf), arg0, arg1)
}

// DeleteExpired mocks base method
func (m *MockPathDB) DeleteExpired(ctx context.Context, now time.Time) (int, error) {
	ret := m.ctrl.Call(m, "DeleteExpired", ctx, now)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpired indicates an expected call of DeleteExpired
func (mr *MockPathDBMockRecorder) DeleteExpired(ctx, now interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpired", reflect.TypeOf((*MockPathDB)(nil).DeleteExpired), ctx, now)
}

// Get mocks base method
func (m *MockPathDB) Get(arg0 context.Context, arg1 *query.Params) ([]*query.Result, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]*query.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPathDBMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPathDB)(nil).Get), arg0, arg1)
}
