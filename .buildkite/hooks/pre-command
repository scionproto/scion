#!/bin/bash

pathadd() {
    if [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="${PATH:+"$PATH:"}$1"
    fi
}
pathadd ~/.local/bin
printenv PATH

# Install build tools on first job for this runner.
.buildkite/provision-agent.sh

# Clean up left-overs from previous run
PRE_COMMAND_SETUP=true . .buildkite/hooks/pre-exit

set -euo pipefail

echo "--- Increase receive network buffer size"
sudo sysctl -w net.core.rmem_max=1048576

echo "--- Setting up bazel environment"

if [ -z ${BAZEL_REMOTE_S3_ACCESS_KEY_ID+x} ]; then
    echo "S3 env not set, not starting bazel remote proxy"
    exit 0
fi

rm -f $HOME/.bazelrc
# Create a custom .bazelrc file in the home directory it takes precedence over
# the workspace rc file.
# We explicitly override --[no]stamp flag.
# --nostamp is required for better caching (only on non-release jobs).
if [ "$BUILDKITE_PIPELINE_SLUG" == "scion" ]; then
    echo "build --nostamp" > $HOME/.bazelrc
    # Also set a fixed GIT_VERSION so that the workspace_status_command always
    # returns the same value on CI to improve cache reuse.
    export GIT_VERSION="ci-fixed"
else
    echo "build --stamp" > $HOME/.bazelrc
fi
echo "test --test_env CI" >> $HOME/.bazelrc

echo "--- Starting bazel remote cache proxy"

# Start bazel remote cache proxy for S3
# Note that S3 keys are injected by buildkite, see
# https://buildkite.com/docs/pipelines/secrets#storing-secrets-with-the-elastic-ci-stack-for-aws
docker-compose -f .buildkite/hooks/bazel-remote.yml -p bazel_remote up -d

echo "--- Starting go module proxy"
docker-compose -f .buildkite/hooks/go-module-proxy.yml -p athens up -d
