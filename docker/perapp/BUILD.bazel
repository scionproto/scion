load("@io_bazel_rules_docker//container:container.bzl", "container_bundle")
load(":scion_app.bzl", "scion_app_base", "scion_app_images")

scion_app_base()

scion_app_images(
    name = "border",
    binary = "//go/border:border",
    appdir = "/app",
    workdir = "/share",
    entrypoint = ["/app/border", "-config", "/share/conf/br.toml"],
)


scion_app_images(
    name = "cs",
    binary = "//go/cs:cs",
    appdir = "/app",
    workdir = "/share",
    entrypoint = ["/app/cs", "-config", "/share/conf/cs.toml"],
)

scion_app_images(
    name = "dispatcher",
    appdir = "/app",
    binary = "//go/dispatcher:dispatcher",
    entrypoint = [
        "/app/dispatcher",
        "-config",
        "/share/conf/disp.toml",
    ],
    workdir = "/share",
)

scion_app_images(
    name = "sciond",
    binary = "//go/sciond:sciond",
    appdir = "/app",
    workdir = "/share",
    entrypoint = ["/app/sciond", "-config", "/share/conf/sd.toml"],
)

scion_app_images(
    name = "sig",
    binary = "//go/sig:sig",
    appdir = "/app",
    workdir = "/share",
    entrypoint = ["/app/sig", "-config", "/share/conf/sig.toml"],
)

# To generate the images: bazel run //docker/perapp:prod
container_bundle(
    name = "prod",
    images = {
        "scion_border:latest":     ":border_prod",
        "scion_cs:latest":         ":cs_prod",
        "scion_dispatcher:latest": ":dispatcher_prod",
        "scion_sciond:latest":     ":sciond_prod",
        "scion_sig_nocap:latest":  ":sig_prod",
    },
)

container_bundle(
    name = "debug",
    images = {
        "scion_border_debug:latest":     ":border_debug",
        "scion_cs_debug:latest":         ":cs_debug",
        "scion_dispatcher_debug:latest": ":dispatcher_debug",
        "scion_sciond_debug:latest":     ":sciond_debug",
        "scion_sig_nocap_debug:latest":  ":sig_debug",
    },
)
