// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SignedBlob struct{ capnp.Struct }

// SignedBlob_TypeID is the unique identifier for the type SignedBlob.
const SignedBlob_TypeID = 0x9f32478537fae352

func NewSignedBlob(s *capnp.Segment) (SignedBlob, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedBlob{st}, err
}

func NewRootSignedBlob(s *capnp.Segment) (SignedBlob, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedBlob{st}, err
}

func ReadRootSignedBlob(msg *capnp.Message) (SignedBlob, error) {
	root, err := msg.RootPtr()
	return SignedBlob{root.Struct()}, err
}

func (s SignedBlob) String() string {
	str, _ := text.Marshal(0x9f32478537fae352, s.Struct)
	return str
}

func (s SignedBlob) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedBlob) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedBlob) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SignedBlob) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s SignedBlob) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedBlob) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s SignedBlob) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SignedBlob_List is a list of SignedBlob.
type SignedBlob_List struct{ capnp.List }

// NewSignedBlob creates a new list of SignedBlob.
func NewSignedBlob_List(s *capnp.Segment, sz int32) (SignedBlob_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SignedBlob_List{l}, err
}

func (s SignedBlob_List) At(i int) SignedBlob { return SignedBlob{s.List.Struct(i)} }

func (s SignedBlob_List) Set(i int, v SignedBlob) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedBlob_List) String() string {
	str, _ := text.MarshalList(0x9f32478537fae352, s.List)
	return str
}

// SignedBlob_Promise is a wrapper for a SignedBlob promised by a client call.
type SignedBlob_Promise struct{ *capnp.Pipeline }

func (p SignedBlob_Promise) Struct() (SignedBlob, error) {
	s, err := p.Pipeline.Struct()
	return SignedBlob{s}, err
}

func (p SignedBlob_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Sign struct{ capnp.Struct }

// Sign_TypeID is the unique identifier for the type Sign.
const Sign_TypeID = 0x844d9464f44e810a

func NewSign(s *capnp.Segment) (Sign, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Sign{st}, err
}

func NewRootSign(s *capnp.Segment) (Sign, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Sign{st}, err
}

func ReadRootSign(msg *capnp.Message) (Sign, error) {
	root, err := msg.RootPtr()
	return Sign{root.Struct()}, err
}

func (s Sign) String() string {
	str, _ := text.Marshal(0x844d9464f44e810a, s.Struct)
	return str
}

func (s Sign) Type() SignType {
	return SignType(s.Struct.Uint16(0))
}

func (s Sign) SetType(v SignType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Sign) Src() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Sign) HasSrc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Sign) SetSrc(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Sign) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Sign) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Sign) SetSignature(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Sign) Timestamp() uint32 {
	return s.Struct.Uint32(4)
}

func (s Sign) SetTimestamp(v uint32) {
	s.Struct.SetUint32(4, v)
}

// Sign_List is a list of Sign.
type Sign_List struct{ capnp.List }

// NewSign creates a new list of Sign.
func NewSign_List(s *capnp.Segment, sz int32) (Sign_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Sign_List{l}, err
}

func (s Sign_List) At(i int) Sign { return Sign{s.List.Struct(i)} }

func (s Sign_List) Set(i int, v Sign) error { return s.List.SetStruct(i, v.Struct) }

func (s Sign_List) String() string {
	str, _ := text.MarshalList(0x844d9464f44e810a, s.List)
	return str
}

// Sign_Promise is a wrapper for a Sign promised by a client call.
type Sign_Promise struct{ *capnp.Pipeline }

func (p Sign_Promise) Struct() (Sign, error) {
	s, err := p.Pipeline.Struct()
	return Sign{s}, err
}

type SignType uint16

// SignType_TypeID is the unique identifier for the type SignType.
const SignType_TypeID = 0xf6b5bc42e3072fc9

// Values of SignType.
const (
	SignType_none    SignType = 0
	SignType_ed25519 SignType = 1
)

// String returns the enum's constant name.
func (c SignType) String() string {
	switch c {
	case SignType_none:
		return "none"
	case SignType_ed25519:
		return "ed25519"

	default:
		return ""
	}
}

// SignTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SignTypeFromString(c string) SignType {
	switch c {
	case "none":
		return SignType_none
	case "ed25519":
		return SignType_ed25519

	default:
		return 0
	}
}

type SignType_List struct{ capnp.List }

func NewSignType_List(s *capnp.Segment, sz int32) (SignType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SignType_List{l.List}, err
}

func (l SignType_List) At(i int) SignType {
	ul := capnp.UInt16List{List: l.List}
	return SignType(ul.At(i))
}

func (l SignType_List) Set(i int, v SignType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_99440334ec0946a0 = "x\xdal\x91\xbf\xebRQ\x00\xc5\xcf\xb9\xd7\xd7\xd3D" +
	"\x9e\xd7\xeb\x1eTC}\xa1\xfa*\x8a\xd4\x14\x125\x15" +
	"]mhh\xe8\xa9\x17}\xa0\xcf\x97\xbe\x08!\x88\xa2" +
	"\xfe\x83\x96\xa6$hhh\x09\xda\xda\xc3\xa1\xbf\xc2\xa1" +
	"%\x9a\xa2\xa1\xe5\xc55\x7f\x04\xc5]\x0e\x87\x0f\xf7|" +
	".\xf7\xf8{\xee\xaa\xa8y\x9f\xcf\x00\xdd%\xbd\x13\xd9" +
	"\xc9\xa7\xb7~\x0c^\xde|\x0eS$\xb3\xe5\xf5\xc2\xb7" +
	"\x86\xbc\xf6\x0a\x9e\xf0\x01\xbdR\xcf\xf4\x17\xf5'}\x05" +
	"\xb3\xce\xfaW\xeb\xc5\x8d\xfak\xa8\xe2?\xec\xdb\xca\x07" +
	"\xfd\xbe\xe2\xd2\xbb\xca#0[]\xf2\xd7\xedO\x1f\x7f" +
	"B\x15\xc5\x81\x05\xb5\xa7\xdf\xe8\x92v`A\xb7\x90m" +
	"\xcf\xddl\x1e\x0d\xe3\x8b\xfd0a\x9c\\\xe9F\xc3\x18" +
	"\xb7IS\x969 G@\x85G\x80\xb9'iF\x82" +
	"d\x95\xae\xb3\xa7\x01s_\xd2\x8c\x05\x95`\x95\x02P" +
	"Q\x070#I\x93\x0a*\xc9*%\xa0\x1e\xb82\x91" +
	"4\x8f\x05\x83t\x91X\x06\x07C\x90\x01\xe8\xcfg}" +
	"\x96 X\x0272a\xfap\x06\xda}\x97F\x13;" +
	"O\xc3\x09\x980\x0f\xc1\xfc\x96\xfb[\xda\x9e\x1a\xb4\xc7" +
	"\xd3\x9eS\xcf\xef\xd5\xcf;\xf5\xb3\x92\xe6XP\xed\xdc" +
	"/\xb8\xf2\x9c\xa4i\x08\x06\xbd\xf1\xb4\xb7\xdb\x09\xdc\x9d" +
	",\x1f~\x06d\xf9?Sw\xfcEb7C\x9bg" +
	"\xab#\x07\xaaB\x1b\x08\xe2il\x9f\xd8A\xbd\xd9\xac" +
	"]\xfe\x1d\x00\x00\xff\xff\xfe,s\x1e"

func init() {
	schemas.Register(schema_99440334ec0946a0,
		0x844d9464f44e810a,
		0x9f32478537fae352,
		0xf6b5bc42e3072fc9)
}
