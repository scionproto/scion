// Package mgmtapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package mgmtapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVTW8bIRD9K2ja48rrfJz21qRVZMlporq3yAfMjtdELNCBtWJZ+9+rAduJ14lS9RCp",
	"vcEAb948HsMWlGu9s2hjgGoLhME7GzBNrmT9A391GCLPlLMRbRpK741WMmpny8fgLMeCWmErefSZcAkV",
	"fCqfocu8GspZlLaWVH8jcgR93xdQY1CkPYNBxTkF7ZLy6u4g405dM8U1Gh57ch4p6kzU7MPHWFPXNNo2",
	"Ii8XgLZroXqAGhddAwVou3QcTlzmBeCTbL1BqPYrceN5FiJp2yQ6TE0T1gyTYeeHbW7xiCpCX8BxlSd0",
	"cR8+ppt2ixZDkA2+m/3AepCd9yX6J/gzpLVWKG6llQ22aKP4cj8RS0cirlDMrid338VXHbyMaoXEDHRM",
	"cjwHB4ehgDVSyPjj0dlozOU7j1Z6DRVcjMajcyjAy7hKpZfK2aVueNhg8hILk5w0qaGCG4zXeUdx7MXz",
	"8XhgwohPsfRG6oH9hrKdWGzWKYUhLDsj7vbJmfZlTvGafQ9UyhdvItmza1tJG6jgnrSNISn58+52KnKh",
	"XYYXS21wxIrKJvDtKde2zsKcMcr9db2lyCS78d/S40oGrQSXRm3WwMsGhVy4LiaVmDo5I8LOlp4c03hT",
	"JeOa8vDQ35Lq0CPelevve9ghx4dpeYNRmEEzO9GoAN+9IspsIErCv3L15kP02Lfgl/lzB4vUYf9f3dLs",
	"T24pHUHirgnVwxY6MlDBKkZfleV25ULsq613FPtSel2uz7jFStJyYbJGvCX39qXsTIQKjFPSpDB7wNFg",
	"+WJ8eXnGKswPdIY/w3Vil34DfPIuYC0Wm92HsHue6V1a2XIr2RXTz/vfAQAA//9Se+9IPwgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
