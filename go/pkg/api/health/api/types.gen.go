// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
)

// Defines values for Status.
const (
	StatusDegraded Status = "degraded"

	StatusFailing Status = "failing"

	StatusPassing Status = "passing"
)

// Check defines model for Check.
type Check struct {
	Data CheckData `json:"data"`

	// Additional information.
	Detail *string `json:"detail,omitempty"`

	// Name of health check.
	Name string `json:"name"`

	// Reason for check failure.
	Reason *string `json:"reason,omitempty"`
	Status Status  `json:"status"`
}

// CheckData defines model for CheckData.
type CheckData struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Health defines model for Health.
type Health struct {
	// List of health checks.
	Checks []Check `json:"checks"`
	Status Status  `json:"status"`
}

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Health Health `json:"health"`
}

// StandardError defines model for StandardError.
type StandardError struct {
	// Error message
	Error string `json:"error"`
}

// Status defines model for Status.
type Status string

// BadRequest defines model for BadRequest.
type BadRequest StandardError

// Getter for additional properties for CheckData. Returns the specified
// element and whether it was found
func (a CheckData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CheckData
func (a *CheckData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CheckData to handle AdditionalProperties
func (a *CheckData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CheckData to handle AdditionalProperties
func (a CheckData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
