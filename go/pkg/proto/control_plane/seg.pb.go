// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: proto/control_plane/v1/seg.proto

package control_plane

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SegmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIsdAs uint64 `protobuf:"varint,1,opt,name=src_isd_as,json=srcIsdAs,proto3" json:"src_isd_as,omitempty"`
	DstIsdAs uint64 `protobuf:"varint,2,opt,name=dst_isd_as,json=dstIsdAs,proto3" json:"dst_isd_as,omitempty"`
}

func (x *SegmentsRequest) Reset() {
	*x = SegmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_seg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentsRequest) ProtoMessage() {}

func (x *SegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_seg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentsRequest.ProtoReflect.Descriptor instead.
func (*SegmentsRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_seg_proto_rawDescGZIP(), []int{0}
}

func (x *SegmentsRequest) GetSrcIsdAs() uint64 {
	if x != nil {
		return x.SrcIsdAs
	}
	return 0
}

func (x *SegmentsRequest) GetDstIsdAs() uint64 {
	if x != nil {
		return x.DstIsdAs
	}
	return 0
}

type SegmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1000,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *SegmentsResponse) Reset() {
	*x = SegmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_seg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentsResponse) ProtoMessage() {}

func (x *SegmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_seg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentsResponse.ProtoReflect.Descriptor instead.
func (*SegmentsResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_seg_proto_rawDescGZIP(), []int{1}
}

func (x *SegmentsResponse) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type SegmentsRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1000,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *SegmentsRegistrationRequest) Reset() {
	*x = SegmentsRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_seg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentsRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentsRegistrationRequest) ProtoMessage() {}

func (x *SegmentsRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_seg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentsRegistrationRequest.ProtoReflect.Descriptor instead.
func (*SegmentsRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_seg_proto_rawDescGZIP(), []int{2}
}

func (x *SegmentsRegistrationRequest) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type SegmentsRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SegmentsRegistrationResponse) Reset() {
	*x = SegmentsRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_seg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentsRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentsRegistrationResponse) ProtoMessage() {}

func (x *SegmentsRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_seg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentsRegistrationResponse.ProtoReflect.Descriptor instead.
func (*SegmentsRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_seg_proto_rawDescGZIP(), []int{3}
}

type BeaconRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw []byte `protobuf:"bytes,1000,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *BeaconRequest) Reset() {
	*x = BeaconRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_seg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconRequest) ProtoMessage() {}

func (x *BeaconRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_seg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconRequest.ProtoReflect.Descriptor instead.
func (*BeaconRequest) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_seg_proto_rawDescGZIP(), []int{4}
}

func (x *BeaconRequest) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type BeaconResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BeaconResponse) Reset() {
	*x = BeaconResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_control_plane_v1_seg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconResponse) ProtoMessage() {}

func (x *BeaconResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_control_plane_v1_seg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconResponse.ProtoReflect.Descriptor instead.
func (*BeaconResponse) Descriptor() ([]byte, []int) {
	return file_proto_control_plane_v1_seg_proto_rawDescGZIP(), []int{5}
}

var File_proto_control_plane_v1_seg_proto protoreflect.FileDescriptor

var file_proto_control_plane_v1_seg_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x22, 0x4d, 0x0a, 0x0f, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x0a, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x73, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x73, 0x64, 0x41, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x64,
	0x73, 0x74, 0x5f, 0x69, 0x73, 0x64, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x64, 0x73, 0x74, 0x49, 0x73, 0x64, 0x41, 0x73, 0x22, 0x25, 0x0a, 0x10, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x0a,
	0x03, 0x72, 0x61, 0x77, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77,
	0x22, 0x30, 0x0a, 0x1b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x0a, 0x0d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0x10, 0x0a, 0x0e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x77, 0x0a, 0x14, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x5f, 0x0a, 0x08, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0xa2, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x83, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x73, 0x0a, 0x16, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x06, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x63, 0x69, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_control_plane_v1_seg_proto_rawDescOnce sync.Once
	file_proto_control_plane_v1_seg_proto_rawDescData = file_proto_control_plane_v1_seg_proto_rawDesc
)

func file_proto_control_plane_v1_seg_proto_rawDescGZIP() []byte {
	file_proto_control_plane_v1_seg_proto_rawDescOnce.Do(func() {
		file_proto_control_plane_v1_seg_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_control_plane_v1_seg_proto_rawDescData)
	})
	return file_proto_control_plane_v1_seg_proto_rawDescData
}

var file_proto_control_plane_v1_seg_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_control_plane_v1_seg_proto_goTypes = []interface{}{
	(*SegmentsRequest)(nil),              // 0: proto.control_plane.v1.SegmentsRequest
	(*SegmentsResponse)(nil),             // 1: proto.control_plane.v1.SegmentsResponse
	(*SegmentsRegistrationRequest)(nil),  // 2: proto.control_plane.v1.SegmentsRegistrationRequest
	(*SegmentsRegistrationResponse)(nil), // 3: proto.control_plane.v1.SegmentsRegistrationResponse
	(*BeaconRequest)(nil),                // 4: proto.control_plane.v1.BeaconRequest
	(*BeaconResponse)(nil),               // 5: proto.control_plane.v1.BeaconResponse
}
var file_proto_control_plane_v1_seg_proto_depIdxs = []int32{
	0, // 0: proto.control_plane.v1.SegmentLookupService.Segments:input_type -> proto.control_plane.v1.SegmentsRequest
	2, // 1: proto.control_plane.v1.SegmentRegistrationService.SegmentsRegistration:input_type -> proto.control_plane.v1.SegmentsRegistrationRequest
	4, // 2: proto.control_plane.v1.SegmentCreationService.Beacon:input_type -> proto.control_plane.v1.BeaconRequest
	1, // 3: proto.control_plane.v1.SegmentLookupService.Segments:output_type -> proto.control_plane.v1.SegmentsResponse
	3, // 4: proto.control_plane.v1.SegmentRegistrationService.SegmentsRegistration:output_type -> proto.control_plane.v1.SegmentsRegistrationResponse
	5, // 5: proto.control_plane.v1.SegmentCreationService.Beacon:output_type -> proto.control_plane.v1.BeaconResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_control_plane_v1_seg_proto_init() }
func file_proto_control_plane_v1_seg_proto_init() {
	if File_proto_control_plane_v1_seg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_control_plane_v1_seg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_seg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_seg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentsRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_seg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentsRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_seg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_control_plane_v1_seg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_control_plane_v1_seg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_proto_control_plane_v1_seg_proto_goTypes,
		DependencyIndexes: file_proto_control_plane_v1_seg_proto_depIdxs,
		MessageInfos:      file_proto_control_plane_v1_seg_proto_msgTypes,
	}.Build()
	File_proto_control_plane_v1_seg_proto = out.File
	file_proto_control_plane_v1_seg_proto_rawDesc = nil
	file_proto_control_plane_v1_seg_proto_goTypes = nil
	file_proto_control_plane_v1_seg_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SegmentLookupServiceClient is the client API for SegmentLookupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SegmentLookupServiceClient interface {
	Segments(ctx context.Context, in *SegmentsRequest, opts ...grpc.CallOption) (*SegmentsResponse, error)
}

type segmentLookupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentLookupServiceClient(cc grpc.ClientConnInterface) SegmentLookupServiceClient {
	return &segmentLookupServiceClient{cc}
}

func (c *segmentLookupServiceClient) Segments(ctx context.Context, in *SegmentsRequest, opts ...grpc.CallOption) (*SegmentsResponse, error) {
	out := new(SegmentsResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.SegmentLookupService/Segments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentLookupServiceServer is the server API for SegmentLookupService service.
type SegmentLookupServiceServer interface {
	Segments(context.Context, *SegmentsRequest) (*SegmentsResponse, error)
}

// UnimplementedSegmentLookupServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSegmentLookupServiceServer struct {
}

func (*UnimplementedSegmentLookupServiceServer) Segments(context.Context, *SegmentsRequest) (*SegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Segments not implemented")
}

func RegisterSegmentLookupServiceServer(s *grpc.Server, srv SegmentLookupServiceServer) {
	s.RegisterService(&_SegmentLookupService_serviceDesc, srv)
}

func _SegmentLookupService_Segments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentLookupServiceServer).Segments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.SegmentLookupService/Segments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentLookupServiceServer).Segments(ctx, req.(*SegmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SegmentLookupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.v1.SegmentLookupService",
	HandlerType: (*SegmentLookupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Segments",
			Handler:    _SegmentLookupService_Segments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/v1/seg.proto",
}

// SegmentRegistrationServiceClient is the client API for SegmentRegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SegmentRegistrationServiceClient interface {
	SegmentsRegistration(ctx context.Context, in *SegmentsRegistrationRequest, opts ...grpc.CallOption) (*SegmentsRegistrationResponse, error)
}

type segmentRegistrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentRegistrationServiceClient(cc grpc.ClientConnInterface) SegmentRegistrationServiceClient {
	return &segmentRegistrationServiceClient{cc}
}

func (c *segmentRegistrationServiceClient) SegmentsRegistration(ctx context.Context, in *SegmentsRegistrationRequest, opts ...grpc.CallOption) (*SegmentsRegistrationResponse, error) {
	out := new(SegmentsRegistrationResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.SegmentRegistrationService/SegmentsRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentRegistrationServiceServer is the server API for SegmentRegistrationService service.
type SegmentRegistrationServiceServer interface {
	SegmentsRegistration(context.Context, *SegmentsRegistrationRequest) (*SegmentsRegistrationResponse, error)
}

// UnimplementedSegmentRegistrationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSegmentRegistrationServiceServer struct {
}

func (*UnimplementedSegmentRegistrationServiceServer) SegmentsRegistration(context.Context, *SegmentsRegistrationRequest) (*SegmentsRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SegmentsRegistration not implemented")
}

func RegisterSegmentRegistrationServiceServer(s *grpc.Server, srv SegmentRegistrationServiceServer) {
	s.RegisterService(&_SegmentRegistrationService_serviceDesc, srv)
}

func _SegmentRegistrationService_SegmentsRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentsRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentRegistrationServiceServer).SegmentsRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.SegmentRegistrationService/SegmentsRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentRegistrationServiceServer).SegmentsRegistration(ctx, req.(*SegmentsRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SegmentRegistrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.v1.SegmentRegistrationService",
	HandlerType: (*SegmentRegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SegmentsRegistration",
			Handler:    _SegmentRegistrationService_SegmentsRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/v1/seg.proto",
}

// SegmentCreationServiceClient is the client API for SegmentCreationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SegmentCreationServiceClient interface {
	Beacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*BeaconResponse, error)
}

type segmentCreationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentCreationServiceClient(cc grpc.ClientConnInterface) SegmentCreationServiceClient {
	return &segmentCreationServiceClient{cc}
}

func (c *segmentCreationServiceClient) Beacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*BeaconResponse, error) {
	out := new(BeaconResponse)
	err := c.cc.Invoke(ctx, "/proto.control_plane.v1.SegmentCreationService/Beacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentCreationServiceServer is the server API for SegmentCreationService service.
type SegmentCreationServiceServer interface {
	Beacon(context.Context, *BeaconRequest) (*BeaconResponse, error)
}

// UnimplementedSegmentCreationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSegmentCreationServiceServer struct {
}

func (*UnimplementedSegmentCreationServiceServer) Beacon(context.Context, *BeaconRequest) (*BeaconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Beacon not implemented")
}

func RegisterSegmentCreationServiceServer(s *grpc.Server, srv SegmentCreationServiceServer) {
	s.RegisterService(&_SegmentCreationService_serviceDesc, srv)
}

func _SegmentCreationService_Beacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeaconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentCreationServiceServer).Beacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.control_plane.v1.SegmentCreationService/Beacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentCreationServiceServer).Beacon(ctx, req.(*BeaconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SegmentCreationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.control_plane.v1.SegmentCreationService",
	HandlerType: (*SegmentCreationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Beacon",
			Handler:    _SegmentCreationService_Beacon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/control_plane/v1/seg.proto",
}
