// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVwW7bMAz9FYHb0YiTdrv4tnZDESBbi2W3IgfFph0VsqhJctAg8L8PlBKvcVp02KHA",
	"dpMp+vHx6YnaQ0mtJYMmeCj24NBbMh7jx5WsvuPPDn3gr5JMQBOX0lqtShkUmfzBk+GYLzfYSl69d1hD",
	"Ae/y39B52vX5MkhTSVd9cY4c9H2fQYW+dMoyGBRcU7hDUd49/Mi4C2oWuEXNa+vIogsqEdXH8CnWgppG",
	"mUak7QzQdC0U91DhumsgA2Vq4nDkssoAH2VrNUJx3Ak7y18+OGWaSIepKYcVwyTY1ZBG6wcsA/QZnHZ5",
	"RheP4VO6MVu06L1s8NXqA+tRdc6L9M/wl+i2qkTx6W4uanIibFAsr+e338RniS0ZLqlC7P9pmPMhgy06",
	"n3Cmk+lkxm2SRSOtggIuJ9PJBWRgZdjEFvOSTK0aXjYYPcMCRMfMKyjgBsN1yshOPXcxnY7MFvAx5FZL",
	"NbLZWJ4zKy27skTv606L22Nxpv0hlXjOpgOV/In3ow27tpVuBwXcOWWCj+L9uP26EKnRLsGLWmmcsJCy",
	"8XxKJbWs7Iox8uOxvKTIPLnu39LjSnpVCm7NtUkDKxsUck1diCoxdUda+IP9rCOm8aJKmpp8uNAvSTXM",
	"glfl+vtZNdR4My1vMAg9GlpnGmVgu2dEWY5EifhXVO3eRI/jqH1aP02q4Drs/6tTWv7JKcVf0PHUhOJ+",
	"D53TUMAmBFvk+X5DPvTF3pILfS6tyrczHrHSKbnWSSNOSTO8lp0OUICmUuoYZg+QG21fzmYfL1iF1UBn",
	"/AJcR3bxAcBHSx4rsd4d3oDD9Yz30siWR8mhmX7V/woAAP///fSYSCcIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
