// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type PathSegment struct{ capnp.Struct }

// PathSegment_TypeID is the unique identifier for the type PathSegment.
const PathSegment_TypeID = 0x939cc09a86ba70fa

func NewPathSegment(s *capnp.Segment) (PathSegment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathSegment{st}, err
}

func NewRootPathSegment(s *capnp.Segment) (PathSegment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathSegment{st}, err
}

func ReadRootPathSegment(msg *capnp.Message) (PathSegment, error) {
	root, err := msg.RootPtr()
	return PathSegment{root.Struct()}, err
}

func (s PathSegment) String() string {
	str, _ := text.Marshal(0x939cc09a86ba70fa, s.Struct)
	return str
}

func (s PathSegment) Sdata() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PathSegment) HasSdata() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegment) SetSdata(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PathSegment) AsEntries() (SignedBlob_List, error) {
	p, err := s.Struct.Ptr(1)
	return SignedBlob_List{List: p.List()}, err
}

func (s PathSegment) HasAsEntries() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathSegment) SetAsEntries(v SignedBlob_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAsEntries sets the asEntries field to a newly
// allocated SignedBlob_List, preferring placement in s's segment.
func (s PathSegment) NewAsEntries(n int32) (SignedBlob_List, error) {
	l, err := NewSignedBlob_List(s.Struct.Segment(), n)
	if err != nil {
		return SignedBlob_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// PathSegment_List is a list of PathSegment.
type PathSegment_List struct{ capnp.List }

// NewPathSegment creates a new list of PathSegment.
func NewPathSegment_List(s *capnp.Segment, sz int32) (PathSegment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PathSegment_List{l}, err
}

func (s PathSegment_List) At(i int) PathSegment { return PathSegment{s.List.Struct(i)} }

func (s PathSegment_List) Set(i int, v PathSegment) error { return s.List.SetStruct(i, v.Struct) }

func (s PathSegment_List) String() string {
	str, _ := text.MarshalList(0x939cc09a86ba70fa, s.List)
	return str
}

// PathSegment_Promise is a wrapper for a PathSegment promised by a client call.
type PathSegment_Promise struct{ *capnp.Pipeline }

func (p PathSegment_Promise) Struct() (PathSegment, error) {
	s, err := p.Pipeline.Struct()
	return PathSegment{s}, err
}

type PathSegmentSignedData struct{ capnp.Struct }

// PathSegmentSignedData_TypeID is the unique identifier for the type PathSegmentSignedData.
const PathSegmentSignedData_TypeID = 0xc7cf7a18177aec2a

func NewPathSegmentSignedData(s *capnp.Segment) (PathSegmentSignedData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PathSegmentSignedData{st}, err
}

func NewRootPathSegmentSignedData(s *capnp.Segment) (PathSegmentSignedData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PathSegmentSignedData{st}, err
}

func ReadRootPathSegmentSignedData(msg *capnp.Message) (PathSegmentSignedData, error) {
	root, err := msg.RootPtr()
	return PathSegmentSignedData{root.Struct()}, err
}

func (s PathSegmentSignedData) String() string {
	str, _ := text.Marshal(0xc7cf7a18177aec2a, s.Struct)
	return str
}

func (s PathSegmentSignedData) InfoF() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PathSegmentSignedData) HasInfoF() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegmentSignedData) SetInfoF(v []byte) error {
	return s.Struct.SetData(0, v)
}

// PathSegmentSignedData_List is a list of PathSegmentSignedData.
type PathSegmentSignedData_List struct{ capnp.List }

// NewPathSegmentSignedData creates a new list of PathSegmentSignedData.
func NewPathSegmentSignedData_List(s *capnp.Segment, sz int32) (PathSegmentSignedData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PathSegmentSignedData_List{l}, err
}

func (s PathSegmentSignedData_List) At(i int) PathSegmentSignedData {
	return PathSegmentSignedData{s.List.Struct(i)}
}

func (s PathSegmentSignedData_List) Set(i int, v PathSegmentSignedData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathSegmentSignedData_List) String() string {
	str, _ := text.MarshalList(0xc7cf7a18177aec2a, s.List)
	return str
}

// PathSegmentSignedData_Promise is a wrapper for a PathSegmentSignedData promised by a client call.
type PathSegmentSignedData_Promise struct{ *capnp.Pipeline }

func (p PathSegmentSignedData_Promise) Struct() (PathSegmentSignedData, error) {
	s, err := p.Pipeline.Struct()
	return PathSegmentSignedData{s}, err
}

type ASEntry struct{ capnp.Struct }
type ASEntry_exts ASEntry

// ASEntry_TypeID is the unique identifier for the type ASEntry.
const ASEntry_TypeID = 0xd4a209e8e78874ff

func NewASEntry(s *capnp.Segment) (ASEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return ASEntry{st}, err
}

func NewRootASEntry(s *capnp.Segment) (ASEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return ASEntry{st}, err
}

func ReadRootASEntry(msg *capnp.Message) (ASEntry, error) {
	root, err := msg.RootPtr()
	return ASEntry{root.Struct()}, err
}

func (s ASEntry) String() string {
	str, _ := text.Marshal(0xd4a209e8e78874ff, s.Struct)
	return str
}

func (s ASEntry) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASEntry) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASEntry) TrcVer() uint64 {
	return s.Struct.Uint64(8)
}

func (s ASEntry) SetTrcVer(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s ASEntry) CertVer() uint64 {
	return s.Struct.Uint64(16)
}

func (s ASEntry) SetCertVer(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s ASEntry) IfIDSize() uint8 {
	return s.Struct.Uint8(24)
}

func (s ASEntry) SetIfIDSize(v uint8) {
	s.Struct.SetUint8(24, v)
}

func (s ASEntry) Hops() (HopEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return HopEntry_List{List: p.List()}, err
}

func (s ASEntry) HasHops() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASEntry) SetHops(v HopEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHops sets the hops field to a newly
// allocated HopEntry_List, preferring placement in s's segment.
func (s ASEntry) NewHops(n int32) (HopEntry_List, error) {
	l, err := NewHopEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return HopEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ASEntry) Mtu() uint16 {
	return s.Struct.Uint16(26)
}

func (s ASEntry) SetMtu(v uint16) {
	s.Struct.SetUint16(26, v)
}

func (s ASEntry) Exts() ASEntry_exts { return ASEntry_exts(s) }

func (s ASEntry_exts) RoutingPolicy() (RoutingPolicyExt, error) {
	p, err := s.Struct.Ptr(1)
	return RoutingPolicyExt{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasRoutingPolicy() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetRoutingPolicy(v RoutingPolicyExt) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRoutingPolicy sets the routingPolicy field to a newly
// allocated RoutingPolicyExt struct, preferring placement in s's segment.
func (s ASEntry_exts) NewRoutingPolicy() (RoutingPolicyExt, error) {
	ss, err := NewRoutingPolicyExt(s.Struct.Segment())
	if err != nil {
		return RoutingPolicyExt{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ASEntry_exts) Sibra() (SibraPCBExt, error) {
	p, err := s.Struct.Ptr(2)
	return SibraPCBExt{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasSibra() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetSibra(v SibraPCBExt) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSibra sets the sibra field to a newly
// allocated SibraPCBExt struct, preferring placement in s's segment.
func (s ASEntry_exts) NewSibra() (SibraPCBExt, error) {
	ss, err := NewSibraPCBExt(s.Struct.Segment())
	if err != nil {
		return SibraPCBExt{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// ASEntry_List is a list of ASEntry.
type ASEntry_List struct{ capnp.List }

// NewASEntry creates a new list of ASEntry.
func NewASEntry_List(s *capnp.Segment, sz int32) (ASEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return ASEntry_List{l}, err
}

func (s ASEntry_List) At(i int) ASEntry { return ASEntry{s.List.Struct(i)} }

func (s ASEntry_List) Set(i int, v ASEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ASEntry_List) String() string {
	str, _ := text.MarshalList(0xd4a209e8e78874ff, s.List)
	return str
}

// ASEntry_Promise is a wrapper for a ASEntry promised by a client call.
type ASEntry_Promise struct{ *capnp.Pipeline }

func (p ASEntry_Promise) Struct() (ASEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASEntry{s}, err
}

func (p ASEntry_Promise) Exts() ASEntry_exts_Promise { return ASEntry_exts_Promise{p.Pipeline} }

// ASEntry_exts_Promise is a wrapper for a ASEntry_exts promised by a client call.
type ASEntry_exts_Promise struct{ *capnp.Pipeline }

func (p ASEntry_exts_Promise) Struct() (ASEntry_exts, error) {
	s, err := p.Pipeline.Struct()
	return ASEntry_exts{s}, err
}

func (p ASEntry_exts_Promise) RoutingPolicy() RoutingPolicyExt_Promise {
	return RoutingPolicyExt_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p ASEntry_exts_Promise) Sibra() SibraPCBExt_Promise {
	return SibraPCBExt_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type HopEntry struct{ capnp.Struct }

// HopEntry_TypeID is the unique identifier for the type HopEntry.
const HopEntry_TypeID = 0x8bb1ddafb4872b0b

func NewHopEntry(s *capnp.Segment) (HopEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return HopEntry{st}, err
}

func NewRootHopEntry(s *capnp.Segment) (HopEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return HopEntry{st}, err
}

func ReadRootHopEntry(msg *capnp.Message) (HopEntry, error) {
	root, err := msg.RootPtr()
	return HopEntry{root.Struct()}, err
}

func (s HopEntry) String() string {
	str, _ := text.Marshal(0x8bb1ddafb4872b0b, s.Struct)
	return str
}

func (s HopEntry) InIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s HopEntry) SetInIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HopEntry) RemoteInIF() uint64 {
	return s.Struct.Uint64(8)
}

func (s HopEntry) SetRemoteInIF(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s HopEntry) InMTU() uint16 {
	return s.Struct.Uint16(16)
}

func (s HopEntry) SetInMTU(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s HopEntry) OutIA() uint64 {
	return s.Struct.Uint64(24)
}

func (s HopEntry) SetOutIA(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s HopEntry) RemoteOutIF() uint64 {
	return s.Struct.Uint64(32)
}

func (s HopEntry) SetRemoteOutIF(v uint64) {
	s.Struct.SetUint64(32, v)
}

func (s HopEntry) HopF() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s HopEntry) HasHopF() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HopEntry) SetHopF(v []byte) error {
	return s.Struct.SetData(0, v)
}

// HopEntry_List is a list of HopEntry.
type HopEntry_List struct{ capnp.List }

// NewHopEntry creates a new list of HopEntry.
func NewHopEntry_List(s *capnp.Segment, sz int32) (HopEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return HopEntry_List{l}, err
}

func (s HopEntry_List) At(i int) HopEntry { return HopEntry{s.List.Struct(i)} }

func (s HopEntry_List) Set(i int, v HopEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s HopEntry_List) String() string {
	str, _ := text.MarshalList(0x8bb1ddafb4872b0b, s.List)
	return str
}

// HopEntry_Promise is a wrapper for a HopEntry promised by a client call.
type HopEntry_Promise struct{ *capnp.Pipeline }

func (p HopEntry_Promise) Struct() (HopEntry, error) {
	s, err := p.Pipeline.Struct()
	return HopEntry{s}, err
}

type PCB struct{ capnp.Struct }

// PCB_TypeID is the unique identifier for the type PCB.
const PCB_TypeID = 0xd6c04763377951e5

func NewPCB(s *capnp.Segment) (PCB, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PCB{st}, err
}

func NewRootPCB(s *capnp.Segment) (PCB, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PCB{st}, err
}

func ReadRootPCB(msg *capnp.Message) (PCB, error) {
	root, err := msg.RootPtr()
	return PCB{root.Struct()}, err
}

func (s PCB) String() string {
	str, _ := text.Marshal(0xd6c04763377951e5, s.Struct)
	return str
}

func (s PCB) PathSeg() (PathSegment, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegment{Struct: p.Struct()}, err
}

func (s PCB) HasPathSeg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PCB) SetPathSeg(v PathSegment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathSeg sets the pathSeg field to a newly
// allocated PathSegment struct, preferring placement in s's segment.
func (s PCB) NewPathSeg() (PathSegment, error) {
	ss, err := NewPathSegment(s.Struct.Segment())
	if err != nil {
		return PathSegment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PCB) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s PCB) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PCB_List is a list of PCB.
type PCB_List struct{ capnp.List }

// NewPCB creates a new list of PCB.
func NewPCB_List(s *capnp.Segment, sz int32) (PCB_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PCB_List{l}, err
}

func (s PCB_List) At(i int) PCB { return PCB{s.List.Struct(i)} }

func (s PCB_List) Set(i int, v PCB) error { return s.List.SetStruct(i, v.Struct) }

func (s PCB_List) String() string {
	str, _ := text.MarshalList(0xd6c04763377951e5, s.List)
	return str
}

// PCB_Promise is a wrapper for a PCB promised by a client call.
type PCB_Promise struct{ *capnp.Pipeline }

func (p PCB_Promise) Struct() (PCB, error) {
	s, err := p.Pipeline.Struct()
	return PCB{s}, err
}

func (p PCB_Promise) PathSeg() PathSegment_Promise {
	return PathSegment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathSegMeta struct{ capnp.Struct }

// PathSegMeta_TypeID is the unique identifier for the type PathSegMeta.
const PathSegMeta_TypeID = 0x9f98567b3c0aba0f

func NewPathSegMeta(s *capnp.Segment) (PathSegMeta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathSegMeta{st}, err
}

func NewRootPathSegMeta(s *capnp.Segment) (PathSegMeta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathSegMeta{st}, err
}

func ReadRootPathSegMeta(msg *capnp.Message) (PathSegMeta, error) {
	root, err := msg.RootPtr()
	return PathSegMeta{root.Struct()}, err
}

func (s PathSegMeta) String() string {
	str, _ := text.Marshal(0x9f98567b3c0aba0f, s.Struct)
	return str
}

func (s PathSegMeta) PathSeg() (PathSegment, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegment{Struct: p.Struct()}, err
}

func (s PathSegMeta) HasPathSeg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegMeta) SetPathSeg(v PathSegment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathSeg sets the pathSeg field to a newly
// allocated PathSegment struct, preferring placement in s's segment.
func (s PathSegMeta) NewPathSeg() (PathSegment, error) {
	ss, err := NewPathSegment(s.Struct.Segment())
	if err != nil {
		return PathSegment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathSegMeta) Type() PathSegType {
	return PathSegType(s.Struct.Uint16(0))
}

func (s PathSegMeta) SetType(v PathSegType) {
	s.Struct.SetUint16(0, uint16(v))
}

// PathSegMeta_List is a list of PathSegMeta.
type PathSegMeta_List struct{ capnp.List }

// NewPathSegMeta creates a new list of PathSegMeta.
func NewPathSegMeta_List(s *capnp.Segment, sz int32) (PathSegMeta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathSegMeta_List{l}, err
}

func (s PathSegMeta_List) At(i int) PathSegMeta { return PathSegMeta{s.List.Struct(i)} }

func (s PathSegMeta_List) Set(i int, v PathSegMeta) error { return s.List.SetStruct(i, v.Struct) }

func (s PathSegMeta_List) String() string {
	str, _ := text.MarshalList(0x9f98567b3c0aba0f, s.List)
	return str
}

// PathSegMeta_Promise is a wrapper for a PathSegMeta promised by a client call.
type PathSegMeta_Promise struct{ *capnp.Pipeline }

func (p PathSegMeta_Promise) Struct() (PathSegMeta, error) {
	s, err := p.Pipeline.Struct()
	return PathSegMeta{s}, err
}

func (p PathSegMeta_Promise) PathSeg() PathSegment_Promise {
	return PathSegment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathSegType uint16

// PathSegType_TypeID is the unique identifier for the type PathSegType.
const PathSegType_TypeID = 0xa1f7a9650aa23880

// Values of PathSegType.
const (
	PathSegType_unset PathSegType = 0
	PathSegType_up    PathSegType = 1
	PathSegType_down  PathSegType = 2
	PathSegType_core  PathSegType = 3
)

// String returns the enum's constant name.
func (c PathSegType) String() string {
	switch c {
	case PathSegType_unset:
		return "unset"
	case PathSegType_up:
		return "up"
	case PathSegType_down:
		return "down"
	case PathSegType_core:
		return "core"

	default:
		return ""
	}
}

// PathSegTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PathSegTypeFromString(c string) PathSegType {
	switch c {
	case "unset":
		return PathSegType_unset
	case "up":
		return PathSegType_up
	case "down":
		return PathSegType_down
	case "core":
		return PathSegType_core

	default:
		return 0
	}
}

type PathSegType_List struct{ capnp.List }

func NewPathSegType_List(s *capnp.Segment, sz int32) (PathSegType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PathSegType_List{l.List}, err
}

func (l PathSegType_List) At(i int) PathSegType {
	ul := capnp.UInt16List{List: l.List}
	return PathSegType(ul.At(i))
}

func (l PathSegType_List) Set(i int, v PathSegType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_fb8053d9fb34b837 = "x\xda\xacT]h\x1cU\x18\xfd\xce\xbd\xfb\x93\x8d\xc4" +
	"\xd9\xcb\x8ci\x14a\x89\xfa`WS\xda\xa4\x92P\x94" +
	"\x98\xda\xbf\x08\xc5\xbd\xddZ\xd1\x17\x9dn\xa6\x9b\x013" +
	";\xcc\xdc%\xdd\xf8\xd0\xbeT\x05)>(bJC" +
	"\xd2b\xc1B\xc5\x0a-l\x82\x85\xa4\x14JA\x11A" +
	"D\x03\x05\x7f*Z\xf0]l\xa9#w\xff\xc9\xda7" +
	"\x99\x97\x99\x8f\xef\x9e\xf3\x9d\xef\x9e3[S\x89\xe7\xd9" +
	"\xb6\xf8\xf5\xc7\x89\xf2K\x88'\xa2\x07\x9ez\xe7\xd2\xe7" +
	"7\xbfx\x8f\xa4\x81x4Z\xdd~\xf7\xc7\xfc\xf1\xbb" +
	"\x14G\x92\xc8\xbc!\xae\x9a\xdf\x8a$\xd1\xc8\xd7\xe2\x15" +
	"\x10\xa2;\xfe\xca\xdb\xa7VO\x7f@\xc2@G3\xd3" +
	"\xcd\x83\xe6\xba9d\xea\xb7\xcd\xe6,!2Vz\x9f" +
	"}\xeb\xd0\xc7\x8b\x1a\x19\x1b\x91\xe7\xcdu\xf3\\\xad\xf9" +
	"L\xad\xf9\xf8\xd8\xd9^\xe7\xfc_gH\x18\xac\xddK" +
	"0\xef\x99\xebf\xca\xd2\x8dq\xabH\x88\xa2\xc5\x13\x0b" +
	"\xff\xf4\xaa\xab$7!\x16E\xea\xdd\xdf\xffH\x9d\xfd" +
	"\x8e\x1e\xe2Ihf\xeb\x17\x829di\xc8\xec\x9fs" +
	"\x9b\x06\xe6\xbe\xb9\xbeaVM?r\xd2\xca\xc2\\\xa8" +
	"\xc1\xce[\xe3\x1a\xb6\x09$\x0d\xc4:\xba\xb9nY\xb6" +
	"V\xcc5\xdd<r\xc5z_\xaf\xe17Y\x19-\xec" +
	"]\xfd\xfe?\xa5=\xd7\x7f\xca\xdc\xdd\xaf\xdf&\xfag" +
	")j<\x83\x91o\xab\xe9\xd7C\xa7\xc8\xb6\x14l\xdf" +
	"\xf3w\xec+\xf9\xbb=\x15T(\x07\xc8\x01\x1e#\x8a" +
	"\x81H\xccg\x89\xe4\x87\x1cr\x89A\x00\x16tq\xe1" +
	"5\"y\x9aC~\xca X\x8f\x05F$\xce\x0d\x13" +
	"\xc9%\x0ey\x81Apn\x81\x13\x89\xf3\xba\xf8\x09\x87" +
	"\xbc\xc8 b1\x0b1\"\xf1\xd9a\"y\x81CV" +
	"\x19\x10\xb7\x10'\x12\x975\xcfE\x0e\xf9%\x83\xe1z" +
	"\x93\x13H\x11C\x8a\x10\x05\xceLI9\x93\x1e\xf1\xc9" +
	"=\xcdb\xc6\xf5\xf6\x1f|\x19IbH\x122\xa5\xb2" +
	"\xea:\xf0R\x99\x92\xaa}\xc2\x98.\xf9{\xd0G\x0c" +
	"}\x84.\xf19[M\xe7\x9d\xe2\x8c\xc3=\xa5\xf5\xf7" +
	"\xb4\xf4o\xd6\x02\x9e\xe0\x90[;\xf4\x0f\x1d \x92O" +
	"s\xc8}\x0c\x99p\xcaVv\x0b\xd9\x0e\xf5\x16]\x87" +
	"\x10\xe2AB\x8e\x03\xe9\xe8\xc0\xafwFO\xec\x1d^" +
	"$\x82.\xde\x8f~\xbf\xc3\x95\xbd\x81~g\x9b\xbe\xc5" +
	"\xaeW\xf5$\x87\xdc\xcep\xcc\xaf\x1fE\xba\x1d\x06\x02" +
	"\xd2\x04CU|\x07F\xdb\xca\x04\x18\xf7\xe7>X\xe1" +
	"\xbe\xa3\xb9\xd3\xb5\xcb\xd4\xb2\x011\xf8\x08\x11\x98x8" +
	"K\x04.D\x96(S\xf6BG\xf1\xb2oL\x95f" +
	"=\xa3P\x0a\x9c.\xc8\x89|\xcdI[\x9c\xe4Q\x15" +
	"j1iXHh\xd4\xa0=\xb9\x00\xb3\xb4A\xc5\xb6" +
	"\xe1\xc62\xc7\x18\xa2\xa0TV\xaeW\xccQ\xa6\xf4\xa6" +
	"[\xa8 \x1d\xfd}\xeb\x99\xb1\xea\xfa\xdaG\x0dY\x99" +
	"\xd0=\x1c\xd8HG'\xdf\xb8\xfd\xea\xf2\xed{\xd5F" +
	"\xbd5\x04\xdfx\xa5\x9e\xca\xbbE\xcf\x992v\xd9\xf5" +
	"\xed\xc6Z\xdb\xed\xd3\xd4=\x1c\xd2b\xdaRGJ\xdd" +
	"\x0eAS\xd3x]\x94\x06x\xb4\x05py\xb8\xed\xda" +
	"\x96;\x96w\x10\xc9K\x1crU\xa7\x83\xd5\xd3qE" +
	"_d\x95C^\xd3\xe9\x18\xa8\xa7c\xedE\"\xb9\xca" +
	"!\xbfb@#\x1c7\xf4\xed^\xe3\x90?1\x88x" +
	"_=\x1d7\x1f#\x92?p\xc8[\x0cH\xa0\xe3\xbf" +
	"#~\xce\x12\xcb\xb8\xe1\x94\x1d6\xad>\xae\x82\xc2!" +
	"'h~\x1e+8\x81\xea\xf8\x8e\xdc#\x93\xbb\xf2\xee" +
	"\x9cCDH\x10C\xa2\x9e\x8e\x0e\xbf\xb6\xfe\xc2u\xbf" +
	"&gT\xb9\x995\xc39\xaa\xc2\xae\xed\xe4\xf8\x0b;" +
	"\xff7\xe3\xea\xf9\x9a\xc3\xfe\x1b\x00\x00\xff\xff.\x8f\x84" +
	"\xbd"

func init() {
	schemas.Register(schema_fb8053d9fb34b837,
		0x8bb1ddafb4872b0b,
		0x939cc09a86ba70fa,
		0x9f98567b3c0aba0f,
		0xa1f7a9650aa23880,
		0xc2740afe9d859fff,
		0xc7cf7a18177aec2a,
		0xd4a209e8e78874ff,
		0xd6c04763377951e5)
}
