#!/usr/bin/python3

# Stdlib
import argparse
import glob
import os
import sys

# External
from kazoo.client import KazooClient
from kazoo.exceptions import KazooException
from kazoo.handlers.threading import KazooTimeoutError

# SCION
from lib.topology import Topology
from lib.defines import TOPO_FILE


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--zk", help="Zookeeper service to connect to (E.g. 127.0.0.1:2181)")
    parser.add_argument('root', default="/", nargs="?",
                        help="Zookeeper dir to clean. (Default: %(default)s)")
    args = parser.parse_args()
    if not args.zk and os.system("./supervisor/supervisor.sh mstart *:zk*"):
        sys.exit(1)
    servers = [args.zk] if args.zk else set(find_servers())
    for server in servers:
        clean_zk(server, args.root)
    if not args.zk:
        sys.exit(os.system("./supervisor/supervisor.sh mstop *:zk*"))


def find_servers():
    for as_dir in glob.glob("gen/ISD*/AS*"):
        t = Topology.from_file(os.path.join(as_dir, "endhost", TOPO_FILE))
        for zk_host in t.zookeepers:
            yield zk_host


def clean_zk(server, root):
    print("=====> Cleaning: %s:%s" % (server, root))
    zk = KazooClient(hosts=server)
    try:
        zk.start(timeout=1)
    except (KazooException, KazooTimeoutError):
        return
    for entries in zk.get_children(root):
        path = os.path.join(root, entries)
        if path.startswith("/zookeeper"):
            continue
        zk.delete(path, recursive=True)
    zk.stop()


if __name__ == '__main__':
    main()
