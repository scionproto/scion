--- pkg/make_rpm.py
+++ pkg/make_rpm.py
@@ -160,1 +160,13 @@
   raise NoRpmbuildFoundError()
+
+def GetRpmbuildVersion(rpmbuild_path):
+  """Returns the version of rpmbuild by calling 'rpmbuild --version'."""
+  try:
+    result = subprocess.run([rpmbuild_path, '--version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
+    if result.returncode == 0:
+      version_info = result.stdout.strip().splitlines()[0]  # Get the first line of output
+      version_str = version_info.split()[-1]  # Version is the last part
+      return version_str
+  except Exception as e:
+    raise RuntimeError(f"Error checking rpmbuild version: {e}")
+  return None
@@ -187,13 +191,14 @@
     DEBUGINFO_TYPE_FEDORA,
   }

-  def __init__(self, name, version, release, arch, rpmbuild_path,
-               source_date_epoch=None,
+  def __init__(self, name, version, release, arch, target_arch,
+               rpmbuild_path, source_date_epoch=None,
                debug=False):
     self.name = name
     self.version = helpers.GetFlagValue(version)
     self.release = helpers.GetFlagValue(release)
     self.arch = arch
+    self.target_arch = target_arch
     self.files = []
     self.rpmbuild_path = FindRpmbuild(rpmbuild_path)
     self.rpm_paths = None
@@ -384,2 +371,12 @@
       '--define', '_builddir %s/BUILD' % dirname,
     ]
+    version = GetRpmbuildVersion(self.rpmbuild_path)
+    if version:
+      version_parts = version.split('.')
+      major = int(version_parts[0])
+      minor = int(version_parts[1])
+      if (major > 4) or ((major == 4) and (minor >= 20)):
+        args += [
+          '--define', 'buildsubdir ..',
+          '--define', 'debug_package %{nil}',
+        ]
@@ -397,6 +412,10 @@
       '--bb',
       '--buildroot=%s' % buildroot,
     ]  # yapf: disable
+
+    # Target platform
+    if self.target_arch:
+      args += ['--target=%s' % self.target_arch]

     # Macro-based RPM parameter substitution, if necessary inputs provided.
     if self.preamble_file:
@@ -546,7 +565,10 @@
                       help='The release of the software being packaged.')
   parser.add_argument(
       '--arch',
-      help='The CPU architecture of the software being packaged.')
+      help='The CPU architecture of the machine on which it is built. '
+           'If the package is not architecture dependent, set this to "noarch".')
+  parser.add_argument('--target_arch',
+      help='The CPU architecture of the target platform the software being packaged for.')
   parser.add_argument('--spec_file', required=True,
                       help='The file containing the RPM specification.')
   parser.add_argument('--out_file', required=True,
@@ -597,7 +619,7 @@
   try:
     builder = RpmBuilder(options.name,
                          options.version, options.release,
-                         options.arch, options.rpmbuild,
+                         options.arch, options.target_arch, options.rpmbuild,
                          source_date_epoch=options.source_date_epoch,
                          debug=options.debug)
     builder.AddFiles(options.files)

