#!/usr/bin/env python3

import os
import sys
from plumbum import local
from plumbum.cmd import cp, mkdir, rm, chmod

MOCK_TARGETS = [
    ("go/border/rctrl/grpc", "IfStateHandler"),
    ("go/cs/beacon", "DB,Transaction"),
    ("go/cs/beaconing",
        "BeaconInserter,BeaconProvider,BeaconSender,RPC,SegmentProvider,SegmentStore"),
    ("go/cs/ifstate", "InterfaceStateSender,RevInserter"),
    ("go/cs/keepalive", "IfStatePusher,RevDropper"),
    ("go/cs/reservationstorage/backend", "DB,Transaction"),
    ("go/cs/segutil", "Policy"),
    ("go/hidden_path_srv/internal/hpsegreq", "Fetcher"),
    ("go/hidden_path_srv/internal/registration", "Validator"),
    ("go/lib/ctrl/seg", "Signer"),
    ("go/lib/infra/messenger", "LocalSVCRouter,Resolver"),
    ("go/lib/infra", "Messenger,ResponseWriter,Verifier,Handler"),
    ("go/lib/infra/modules/segfetcher",
        "DstProvider,ReplyHandler,Requester,Resolver,RPC,Splitter,LocalInfo"),
    ("go/lib/infra/modules/seghandler", "Storage,Verifier"),
    ("go/lib/l4", "L4Header"),
    ("go/lib/pathdb", "PathDB,Transaction,ReadWrite"),
    ("go/lib/pathmgr", "Policy,Querier,Resolver"),
    ("go/lib/periodic/internal/metrics", "ExportMetric"),
    ("go/lib/pktcls", "Cond"),
    ("go/lib/revcache", "RevCache"),
    ("go/lib/sciond", "Connector"),
    ("go/lib/snet",
        "PacketDispatcherService,Network,PacketConn,Path,PathInterface," +
        "PathMetadata,PathQuerier,Router,RevocationHandler"),
    ("go/lib/sock/reliable", "Dispatcher"),
    ("go/lib/sock/reliable/reconnect", "IOOperation,Reconnecter"),
    ("go/lib/svc/internal/ctxconn", "DeadlineCloser"),
    ("go/lib/svc", "RequestHandler,RoundTripper"),
    ("go/lib/topology", "Topology"),
    ("go/lib/underlay/conn", "Conn"),
    ("go/lib/xtest", "Callback"),
    ("go/pkg/cs/trust/grpc", "ChainBuilder,RenewalRequestVerifier,Signer"),
    ("go/pkg/cs/trust", "CACertProvider,PolicyGen,SignerGen"),
    ("go/pkg/proto/control_plane",
        "ChainRenewalServiceServer,InterfaceStateConsumerServiceServer," +
        "InterfaceStateServiceServer,TrustMaterialServiceServer"),
    ("go/pkg/router/bfd", "Source,IntervalGenerator"),
    ("go/pkg/router", "BatchConn"),
    ("go/pkg/sciond/fetcher", "Fetcher,Policy"),
    ("go/pkg/trust",
        "DB,Fetcher,Inspector,KeyRing,Provider,Recurser,Router,X509KeyPairLoader"),
    ("go/pkg/trust/renewal", "DB"),
    ("go/sig/egress/iface", "Session"),
    ("go/sig/egress/worker", "SCIONWriter"),
]

rootpath = os.path.dirname(sys.path[0])
bazel = local['bazel']

for (package, interfaces) in MOCK_TARGETS:
    print("Processing " + package)
    name = os.path.split(package)[1]
    mockdir = os.path.join(rootpath, package, "mock_" + name)
    # Remove old mock code.
    rm("-rf", mockdir)
    mkdir("-p", mockdir)
    # Generate the bazel rule to generate the mock.
    buildscript = """
load("@com_github_jmhodges_bazel_gomock//:gomock.bzl", "gomock")
gomock(
    name = "mock_%s",
    library = "//%s:go_default_library",
    package = "mock_%s",
    interfaces = %s,
    out = "%s.go",
)
""" % (name, package, name, interfaces.split(","), name)
    with open(os.path.join(mockdir, 'BUILD.bazel'), 'x') as out:
        out.write(buildscript + '\n')
    # Execute the rule.
    (bazel['build', '--incompatible_no_support_tools_in_action_inputs=false',
           '//' + package + "/mock_" + name])()
    filename = '%s.go' % name
    # Remove the rule.
    rm(os.path.join(mockdir, 'BUILD.bazel'))
    # Move the generated code to the source tree.
    cp(os.path.join(rootpath, 'bazel-bin', package, 'mock_' + name, filename), mockdir)
    chmod("0644", os.path.join(mockdir, filename))
