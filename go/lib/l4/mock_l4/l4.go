// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/lib/l4 (interfaces: L4Header)

// Package mock_l4 is a generated GoMock package.
package mock_l4

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/scionproto/scion/go/lib/common"
	l4 "github.com/scionproto/scion/go/lib/l4"
	reflect "reflect"
)

// MockL4Header is a mock of L4Header interface
type MockL4Header struct {
	ctrl     *gomock.Controller
	recorder *MockL4HeaderMockRecorder
}

// MockL4HeaderMockRecorder is the mock recorder for MockL4Header
type MockL4HeaderMockRecorder struct {
	mock *MockL4Header
}

// NewMockL4Header creates a new mock instance
func NewMockL4Header(ctrl *gomock.Controller) *MockL4Header {
	mock := &MockL4Header{ctrl: ctrl}
	mock.recorder = &MockL4HeaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockL4Header) EXPECT() *MockL4HeaderMockRecorder {
	return m.recorder
}

// Copy mocks base method
func (m *MockL4Header) Copy() l4.L4Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(l4.L4Header)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockL4HeaderMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockL4Header)(nil).Copy))
}

// GetCSum mocks base method
func (m *MockL4Header) GetCSum() common.RawBytes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSum")
	ret0, _ := ret[0].(common.RawBytes)
	return ret0
}

// GetCSum indicates an expected call of GetCSum
func (mr *MockL4HeaderMockRecorder) GetCSum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSum", reflect.TypeOf((*MockL4Header)(nil).GetCSum))
}

// L4Len mocks base method
func (m *MockL4Header) L4Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "L4Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// L4Len indicates an expected call of L4Len
func (mr *MockL4HeaderMockRecorder) L4Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L4Len", reflect.TypeOf((*MockL4Header)(nil).L4Len))
}

// L4Type mocks base method
func (m *MockL4Header) L4Type() common.L4ProtocolType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "L4Type")
	ret0, _ := ret[0].(common.L4ProtocolType)
	return ret0
}

// L4Type indicates an expected call of L4Type
func (mr *MockL4HeaderMockRecorder) L4Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L4Type", reflect.TypeOf((*MockL4Header)(nil).L4Type))
}

// Pack mocks base method
func (m *MockL4Header) Pack(arg0 bool) (common.RawBytes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pack", arg0)
	ret0, _ := ret[0].(common.RawBytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pack indicates an expected call of Pack
func (mr *MockL4HeaderMockRecorder) Pack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pack", reflect.TypeOf((*MockL4Header)(nil).Pack), arg0)
}

// Reverse mocks base method
func (m *MockL4Header) Reverse() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reverse")
}

// Reverse indicates an expected call of Reverse
func (mr *MockL4HeaderMockRecorder) Reverse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reverse", reflect.TypeOf((*MockL4Header)(nil).Reverse))
}

// SetCSum mocks base method
func (m *MockL4Header) SetCSum(arg0 common.RawBytes) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCSum", arg0)
}

// SetCSum indicates an expected call of SetCSum
func (mr *MockL4HeaderMockRecorder) SetCSum(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCSum", reflect.TypeOf((*MockL4Header)(nil).SetCSum), arg0)
}

// SetPldLen mocks base method
func (m *MockL4Header) SetPldLen(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPldLen", arg0)
}

// SetPldLen indicates an expected call of SetPldLen
func (mr *MockL4HeaderMockRecorder) SetPldLen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPldLen", reflect.TypeOf((*MockL4Header)(nil).SetPldLen), arg0)
}

// String mocks base method
func (m *MockL4Header) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockL4HeaderMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockL4Header)(nil).String))
}

// Validate mocks base method
func (m *MockL4Header) Validate(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockL4HeaderMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockL4Header)(nil).Validate), arg0)
}

// Write mocks base method
func (m *MockL4Header) Write(arg0 common.RawBytes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockL4HeaderMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockL4Header)(nil).Write), arg0)
}
