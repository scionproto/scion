// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SegmentReservationID struct{ capnp.Struct }

// SegmentReservationID_TypeID is the unique identifier for the type SegmentReservationID.
const SegmentReservationID_TypeID = 0x8eeec8f2d8e7feb5

func NewSegmentReservationID(s *capnp.Segment) (SegmentReservationID, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentReservationID{st}, err
}

func NewRootSegmentReservationID(s *capnp.Segment) (SegmentReservationID, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentReservationID{st}, err
}

func ReadRootSegmentReservationID(msg *capnp.Message) (SegmentReservationID, error) {
	root, err := msg.RootPtr()
	return SegmentReservationID{root.Struct()}, err
}

func (s SegmentReservationID) String() string {
	str, _ := text.Marshal(0x8eeec8f2d8e7feb5, s.Struct)
	return str
}

func (s SegmentReservationID) Asid() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SegmentReservationID) HasAsid() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentReservationID) SetAsid(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SegmentReservationID) Suffix() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SegmentReservationID) HasSuffix() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentReservationID) SetSuffix(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SegmentReservationID_List is a list of SegmentReservationID.
type SegmentReservationID_List struct{ capnp.List }

// NewSegmentReservationID creates a new list of SegmentReservationID.
func NewSegmentReservationID_List(s *capnp.Segment, sz int32) (SegmentReservationID_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegmentReservationID_List{l}, err
}

func (s SegmentReservationID_List) At(i int) SegmentReservationID {
	return SegmentReservationID{s.List.Struct(i)}
}

func (s SegmentReservationID_List) Set(i int, v SegmentReservationID) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentReservationID_List) String() string {
	str, _ := text.MarshalList(0x8eeec8f2d8e7feb5, s.List)
	return str
}

// SegmentReservationID_Promise is a wrapper for a SegmentReservationID promised by a client call.
type SegmentReservationID_Promise struct{ *capnp.Pipeline }

func (p SegmentReservationID_Promise) Struct() (SegmentReservationID, error) {
	s, err := p.Pipeline.Struct()
	return SegmentReservationID{s}, err
}

type E2EReservationID struct{ capnp.Struct }

// E2EReservationID_TypeID is the unique identifier for the type E2EReservationID.
const E2EReservationID_TypeID = 0xf621d7829e171884

func NewE2EReservationID(s *capnp.Segment) (E2EReservationID, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return E2EReservationID{st}, err
}

func NewRootE2EReservationID(s *capnp.Segment) (E2EReservationID, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return E2EReservationID{st}, err
}

func ReadRootE2EReservationID(msg *capnp.Message) (E2EReservationID, error) {
	root, err := msg.RootPtr()
	return E2EReservationID{root.Struct()}, err
}

func (s E2EReservationID) String() string {
	str, _ := text.Marshal(0xf621d7829e171884, s.Struct)
	return str
}

func (s E2EReservationID) Asid() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s E2EReservationID) HasAsid() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2EReservationID) SetAsid(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s E2EReservationID) Suffix() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s E2EReservationID) HasSuffix() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2EReservationID) SetSuffix(v []byte) error {
	return s.Struct.SetData(1, v)
}

// E2EReservationID_List is a list of E2EReservationID.
type E2EReservationID_List struct{ capnp.List }

// NewE2EReservationID creates a new list of E2EReservationID.
func NewE2EReservationID_List(s *capnp.Segment, sz int32) (E2EReservationID_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return E2EReservationID_List{l}, err
}

func (s E2EReservationID_List) At(i int) E2EReservationID { return E2EReservationID{s.List.Struct(i)} }

func (s E2EReservationID_List) Set(i int, v E2EReservationID) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s E2EReservationID_List) String() string {
	str, _ := text.MarshalList(0xf621d7829e171884, s.List)
	return str
}

// E2EReservationID_Promise is a wrapper for a E2EReservationID promised by a client call.
type E2EReservationID_Promise struct{ *capnp.Pipeline }

func (p E2EReservationID_Promise) Struct() (E2EReservationID, error) {
	s, err := p.Pipeline.Struct()
	return E2EReservationID{s}, err
}

type ReservationIndexState uint16

// ReservationIndexState_TypeID is the unique identifier for the type ReservationIndexState.
const ReservationIndexState_TypeID = 0xc790178ff054f9a1

// Values of ReservationIndexState.
const (
	ReservationIndexState_pending ReservationIndexState = 0
	ReservationIndexState_active  ReservationIndexState = 1
)

// String returns the enum's constant name.
func (c ReservationIndexState) String() string {
	switch c {
	case ReservationIndexState_pending:
		return "pending"
	case ReservationIndexState_active:
		return "active"

	default:
		return ""
	}
}

// ReservationIndexStateFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ReservationIndexStateFromString(c string) ReservationIndexState {
	switch c {
	case "pending":
		return ReservationIndexState_pending
	case "active":
		return ReservationIndexState_active

	default:
		return 0
	}
}

type ReservationIndexState_List struct{ capnp.List }

func NewReservationIndexState_List(s *capnp.Segment, sz int32) (ReservationIndexState_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ReservationIndexState_List{l.List}, err
}

func (l ReservationIndexState_List) At(i int) ReservationIndexState {
	ul := capnp.UInt16List{List: l.List}
	return ReservationIndexState(ul.At(i))
}

func (l ReservationIndexState_List) Set(i int, v ReservationIndexState) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PathEndProps struct{ capnp.Struct }

// PathEndProps_TypeID is the unique identifier for the type PathEndProps.
const PathEndProps_TypeID = 0xbcacff128f5ddd26

func NewPathEndProps(s *capnp.Segment) (PathEndProps, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PathEndProps{st}, err
}

func NewRootPathEndProps(s *capnp.Segment) (PathEndProps, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PathEndProps{st}, err
}

func ReadRootPathEndProps(msg *capnp.Message) (PathEndProps, error) {
	root, err := msg.RootPtr()
	return PathEndProps{root.Struct()}, err
}

func (s PathEndProps) String() string {
	str, _ := text.Marshal(0xbcacff128f5ddd26, s.Struct)
	return str
}

func (s PathEndProps) Local() bool {
	return s.Struct.Bit(0)
}

func (s PathEndProps) SetLocal(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PathEndProps) Transfer() bool {
	return s.Struct.Bit(1)
}

func (s PathEndProps) SetTransfer(v bool) {
	s.Struct.SetBit(1, v)
}

// PathEndProps_List is a list of PathEndProps.
type PathEndProps_List struct{ capnp.List }

// NewPathEndProps creates a new list of PathEndProps.
func NewPathEndProps_List(s *capnp.Segment, sz int32) (PathEndProps_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return PathEndProps_List{l}, err
}

func (s PathEndProps_List) At(i int) PathEndProps { return PathEndProps{s.List.Struct(i)} }

func (s PathEndProps_List) Set(i int, v PathEndProps) error { return s.List.SetStruct(i, v.Struct) }

func (s PathEndProps_List) String() string {
	str, _ := text.MarshalList(0xbcacff128f5ddd26, s.List)
	return str
}

// PathEndProps_Promise is a wrapper for a PathEndProps promised by a client call.
type PathEndProps_Promise struct{ *capnp.Pipeline }

func (p PathEndProps_Promise) Struct() (PathEndProps, error) {
	s, err := p.Pipeline.Struct()
	return PathEndProps{s}, err
}

type AllocationBead struct{ capnp.Struct }

// AllocationBead_TypeID is the unique identifier for the type AllocationBead.
const AllocationBead_TypeID = 0xc8ba760a91de682a

func NewAllocationBead(s *capnp.Segment) (AllocationBead, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AllocationBead{st}, err
}

func NewRootAllocationBead(s *capnp.Segment) (AllocationBead, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AllocationBead{st}, err
}

func ReadRootAllocationBead(msg *capnp.Message) (AllocationBead, error) {
	root, err := msg.RootPtr()
	return AllocationBead{root.Struct()}, err
}

func (s AllocationBead) String() string {
	str, _ := text.Marshal(0xc8ba760a91de682a, s.Struct)
	return str
}

func (s AllocationBead) AllocBW() uint8 {
	return s.Struct.Uint8(0)
}

func (s AllocationBead) SetAllocBW(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s AllocationBead) MaxBW() uint8 {
	return s.Struct.Uint8(1)
}

func (s AllocationBead) SetMaxBW(v uint8) {
	s.Struct.SetUint8(1, v)
}

// AllocationBead_List is a list of AllocationBead.
type AllocationBead_List struct{ capnp.List }

// NewAllocationBead creates a new list of AllocationBead.
func NewAllocationBead_List(s *capnp.Segment, sz int32) (AllocationBead_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return AllocationBead_List{l}, err
}

func (s AllocationBead_List) At(i int) AllocationBead { return AllocationBead{s.List.Struct(i)} }

func (s AllocationBead_List) Set(i int, v AllocationBead) error { return s.List.SetStruct(i, v.Struct) }

func (s AllocationBead_List) String() string {
	str, _ := text.MarshalList(0xc8ba760a91de682a, s.List)
	return str
}

// AllocationBead_Promise is a wrapper for a AllocationBead promised by a client call.
type AllocationBead_Promise struct{ *capnp.Pipeline }

func (p AllocationBead_Promise) Struct() (AllocationBead, error) {
	s, err := p.Pipeline.Struct()
	return AllocationBead{s}, err
}

type SegmentBase struct{ capnp.Struct }

// SegmentBase_TypeID is the unique identifier for the type SegmentBase.
const SegmentBase_TypeID = 0x9668b2a783bf3465

func NewSegmentBase(s *capnp.Segment) (SegmentBase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentBase{st}, err
}

func NewRootSegmentBase(s *capnp.Segment) (SegmentBase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentBase{st}, err
}

func ReadRootSegmentBase(msg *capnp.Message) (SegmentBase, error) {
	root, err := msg.RootPtr()
	return SegmentBase{root.Struct()}, err
}

func (s SegmentBase) String() string {
	str, _ := text.Marshal(0x9668b2a783bf3465, s.Struct)
	return str
}

func (s SegmentBase) Id() (SegmentReservationID, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentReservationID{Struct: p.Struct()}, err
}

func (s SegmentBase) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentBase) SetId(v SegmentReservationID) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated SegmentReservationID struct, preferring placement in s's segment.
func (s SegmentBase) NewId() (SegmentReservationID, error) {
	ss, err := NewSegmentReservationID(s.Struct.Segment())
	if err != nil {
		return SegmentReservationID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentBase) Index() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentBase) SetIndex(v uint8) {
	s.Struct.SetUint8(0, v)
}

// SegmentBase_List is a list of SegmentBase.
type SegmentBase_List struct{ capnp.List }

// NewSegmentBase creates a new list of SegmentBase.
func NewSegmentBase_List(s *capnp.Segment, sz int32) (SegmentBase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegmentBase_List{l}, err
}

func (s SegmentBase_List) At(i int) SegmentBase { return SegmentBase{s.List.Struct(i)} }

func (s SegmentBase_List) Set(i int, v SegmentBase) error { return s.List.SetStruct(i, v.Struct) }

func (s SegmentBase_List) String() string {
	str, _ := text.MarshalList(0x9668b2a783bf3465, s.List)
	return str
}

// SegmentBase_Promise is a wrapper for a SegmentBase promised by a client call.
type SegmentBase_Promise struct{ *capnp.Pipeline }

func (p SegmentBase_Promise) Struct() (SegmentBase, error) {
	s, err := p.Pipeline.Struct()
	return SegmentBase{s}, err
}

func (p SegmentBase_Promise) Id() SegmentReservationID_Promise {
	return SegmentReservationID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type E2EBase struct{ capnp.Struct }

// E2EBase_TypeID is the unique identifier for the type E2EBase.
const E2EBase_TypeID = 0x830a81292c60dfee

func NewE2EBase(s *capnp.Segment) (E2EBase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return E2EBase{st}, err
}

func NewRootE2EBase(s *capnp.Segment) (E2EBase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return E2EBase{st}, err
}

func ReadRootE2EBase(msg *capnp.Message) (E2EBase, error) {
	root, err := msg.RootPtr()
	return E2EBase{root.Struct()}, err
}

func (s E2EBase) String() string {
	str, _ := text.Marshal(0x830a81292c60dfee, s.Struct)
	return str
}

func (s E2EBase) Id() (E2EReservationID, error) {
	p, err := s.Struct.Ptr(0)
	return E2EReservationID{Struct: p.Struct()}, err
}

func (s E2EBase) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2EBase) SetId(v E2EReservationID) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated E2EReservationID struct, preferring placement in s's segment.
func (s E2EBase) NewId() (E2EReservationID, error) {
	ss, err := NewE2EReservationID(s.Struct.Segment())
	if err != nil {
		return E2EReservationID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s E2EBase) Index() uint8 {
	return s.Struct.Uint8(0)
}

func (s E2EBase) SetIndex(v uint8) {
	s.Struct.SetUint8(0, v)
}

// E2EBase_List is a list of E2EBase.
type E2EBase_List struct{ capnp.List }

// NewE2EBase creates a new list of E2EBase.
func NewE2EBase_List(s *capnp.Segment, sz int32) (E2EBase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return E2EBase_List{l}, err
}

func (s E2EBase_List) At(i int) E2EBase { return E2EBase{s.List.Struct(i)} }

func (s E2EBase_List) Set(i int, v E2EBase) error { return s.List.SetStruct(i, v.Struct) }

func (s E2EBase_List) String() string {
	str, _ := text.MarshalList(0x830a81292c60dfee, s.List)
	return str
}

// E2EBase_Promise is a wrapper for a E2EBase promised by a client call.
type E2EBase_Promise struct{ *capnp.Pipeline }

func (p E2EBase_Promise) Struct() (E2EBase, error) {
	s, err := p.Pipeline.Struct()
	return E2EBase{s}, err
}

func (p E2EBase_Promise) Id() E2EReservationID_Promise {
	return E2EReservationID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentSetupReqData struct{ capnp.Struct }

// SegmentSetupReqData_TypeID is the unique identifier for the type SegmentSetupReqData.
const SegmentSetupReqData_TypeID = 0xa26d74bea4eb287e

func NewSegmentSetupReqData(s *capnp.Segment) (SegmentSetupReqData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return SegmentSetupReqData{st}, err
}

func NewRootSegmentSetupReqData(s *capnp.Segment) (SegmentSetupReqData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return SegmentSetupReqData{st}, err
}

func ReadRootSegmentSetupReqData(msg *capnp.Message) (SegmentSetupReqData, error) {
	root, err := msg.RootPtr()
	return SegmentSetupReqData{root.Struct()}, err
}

func (s SegmentSetupReqData) String() string {
	str, _ := text.Marshal(0xa26d74bea4eb287e, s.Struct)
	return str
}

func (s SegmentSetupReqData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentSetupReqData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentSetupReqData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupReqData) MinBW() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentSetupReqData) SetMinBW(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s SegmentSetupReqData) MaxBW() uint8 {
	return s.Struct.Uint8(1)
}

func (s SegmentSetupReqData) SetMaxBW(v uint8) {
	s.Struct.SetUint8(1, v)
}

func (s SegmentSetupReqData) SplitCls() uint8 {
	return s.Struct.Uint8(2)
}

func (s SegmentSetupReqData) SetSplitCls(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s SegmentSetupReqData) StartProps() (PathEndProps, error) {
	p, err := s.Struct.Ptr(1)
	return PathEndProps{Struct: p.Struct()}, err
}

func (s SegmentSetupReqData) HasStartProps() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetStartProps(v PathEndProps) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewStartProps sets the startProps field to a newly
// allocated PathEndProps struct, preferring placement in s's segment.
func (s SegmentSetupReqData) NewStartProps() (PathEndProps, error) {
	ss, err := NewPathEndProps(s.Struct.Segment())
	if err != nil {
		return PathEndProps{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupReqData) EndProps() (PathEndProps, error) {
	p, err := s.Struct.Ptr(2)
	return PathEndProps{Struct: p.Struct()}, err
}

func (s SegmentSetupReqData) HasEndProps() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetEndProps(v PathEndProps) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewEndProps sets the endProps field to a newly
// allocated PathEndProps struct, preferring placement in s's segment.
func (s SegmentSetupReqData) NewEndProps() (PathEndProps, error) {
	ss, err := NewPathEndProps(s.Struct.Segment())
	if err != nil {
		return PathEndProps{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupReqData) InfoField() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s SegmentSetupReqData) HasInfoField() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetInfoField(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s SegmentSetupReqData) AllocationTrail() (AllocationBead_List, error) {
	p, err := s.Struct.Ptr(4)
	return AllocationBead_List{List: p.List()}, err
}

func (s SegmentSetupReqData) HasAllocationTrail() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetAllocationTrail(v AllocationBead_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewAllocationTrail sets the allocationTrail field to a newly
// allocated AllocationBead_List, preferring placement in s's segment.
func (s SegmentSetupReqData) NewAllocationTrail(n int32) (AllocationBead_List, error) {
	l, err := NewAllocationBead_List(s.Struct.Segment(), n)
	if err != nil {
		return AllocationBead_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// SegmentSetupReqData_List is a list of SegmentSetupReqData.
type SegmentSetupReqData_List struct{ capnp.List }

// NewSegmentSetupReqData creates a new list of SegmentSetupReqData.
func NewSegmentSetupReqData_List(s *capnp.Segment, sz int32) (SegmentSetupReqData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return SegmentSetupReqData_List{l}, err
}

func (s SegmentSetupReqData_List) At(i int) SegmentSetupReqData {
	return SegmentSetupReqData{s.List.Struct(i)}
}

func (s SegmentSetupReqData_List) Set(i int, v SegmentSetupReqData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentSetupReqData_List) String() string {
	str, _ := text.MarshalList(0xa26d74bea4eb287e, s.List)
	return str
}

// SegmentSetupReqData_Promise is a wrapper for a SegmentSetupReqData promised by a client call.
type SegmentSetupReqData_Promise struct{ *capnp.Pipeline }

func (p SegmentSetupReqData_Promise) Struct() (SegmentSetupReqData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentSetupReqData{s}, err
}

func (p SegmentSetupReqData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegmentSetupReqData_Promise) StartProps() PathEndProps_Promise {
	return PathEndProps_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p SegmentSetupReqData_Promise) EndProps() PathEndProps_Promise {
	return PathEndProps_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type SegmentSetupResData struct{ capnp.Struct }
type SegmentSetupResData_Which uint16

const (
	SegmentSetupResData_Which_unset   SegmentSetupResData_Which = 0
	SegmentSetupResData_Which_failure SegmentSetupResData_Which = 1
	SegmentSetupResData_Which_token   SegmentSetupResData_Which = 2
)

func (w SegmentSetupResData_Which) String() string {
	const s = "unsetfailuretoken"
	switch w {
	case SegmentSetupResData_Which_unset:
		return s[0:5]
	case SegmentSetupResData_Which_failure:
		return s[5:12]
	case SegmentSetupResData_Which_token:
		return s[12:17]

	}
	return "SegmentSetupResData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SegmentSetupResData_TypeID is the unique identifier for the type SegmentSetupResData.
const SegmentSetupResData_TypeID = 0xaa345154c72e2fa5

func NewSegmentSetupResData(s *capnp.Segment) (SegmentSetupResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SegmentSetupResData{st}, err
}

func NewRootSegmentSetupResData(s *capnp.Segment) (SegmentSetupResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SegmentSetupResData{st}, err
}

func ReadRootSegmentSetupResData(msg *capnp.Message) (SegmentSetupResData, error) {
	root, err := msg.RootPtr()
	return SegmentSetupResData{root.Struct()}, err
}

func (s SegmentSetupResData) String() string {
	str, _ := text.Marshal(0xaa345154c72e2fa5, s.Struct)
	return str
}

func (s SegmentSetupResData) Which() SegmentSetupResData_Which {
	return SegmentSetupResData_Which(s.Struct.Uint16(0))
}
func (s SegmentSetupResData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentSetupResData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentSetupResData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentSetupResData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupResData) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s SegmentSetupResData) Failure() (SegmentSetupReqData, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != failure")
	}
	p, err := s.Struct.Ptr(1)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s SegmentSetupResData) HasFailure() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentSetupResData) SetFailure(v SegmentSetupReqData) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFailure sets the failure field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s SegmentSetupResData) NewFailure() (SegmentSetupReqData, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupResData) Token() ([]byte, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != token")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SegmentSetupResData) HasToken() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentSetupResData) SetToken(v []byte) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetData(1, v)
}

// SegmentSetupResData_List is a list of SegmentSetupResData.
type SegmentSetupResData_List struct{ capnp.List }

// NewSegmentSetupResData creates a new list of SegmentSetupResData.
func NewSegmentSetupResData_List(s *capnp.Segment, sz int32) (SegmentSetupResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SegmentSetupResData_List{l}, err
}

func (s SegmentSetupResData_List) At(i int) SegmentSetupResData {
	return SegmentSetupResData{s.List.Struct(i)}
}

func (s SegmentSetupResData_List) Set(i int, v SegmentSetupResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentSetupResData_List) String() string {
	str, _ := text.MarshalList(0xaa345154c72e2fa5, s.List)
	return str
}

// SegmentSetupResData_Promise is a wrapper for a SegmentSetupResData promised by a client call.
type SegmentSetupResData_Promise struct{ *capnp.Pipeline }

func (p SegmentSetupResData_Promise) Struct() (SegmentSetupResData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentSetupResData{s}, err
}

func (p SegmentSetupResData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegmentSetupResData_Promise) Failure() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type SegmentTelesSetupData struct{ capnp.Struct }

// SegmentTelesSetupData_TypeID is the unique identifier for the type SegmentTelesSetupData.
const SegmentTelesSetupData_TypeID = 0xa953af3d8be428ba

func NewSegmentTelesSetupData(s *capnp.Segment) (SegmentTelesSetupData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentTelesSetupData{st}, err
}

func NewRootSegmentTelesSetupData(s *capnp.Segment) (SegmentTelesSetupData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentTelesSetupData{st}, err
}

func ReadRootSegmentTelesSetupData(msg *capnp.Message) (SegmentTelesSetupData, error) {
	root, err := msg.RootPtr()
	return SegmentTelesSetupData{root.Struct()}, err
}

func (s SegmentTelesSetupData) String() string {
	str, _ := text.Marshal(0xa953af3d8be428ba, s.Struct)
	return str
}

func (s SegmentTelesSetupData) Setup() (SegmentSetupReqData, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s SegmentTelesSetupData) HasSetup() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentTelesSetupData) SetSetup(v SegmentSetupReqData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSetup sets the setup field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s SegmentTelesSetupData) NewSetup() (SegmentSetupReqData, error) {
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentTelesSetupData) BaseID() (SegmentReservationID, error) {
	p, err := s.Struct.Ptr(1)
	return SegmentReservationID{Struct: p.Struct()}, err
}

func (s SegmentTelesSetupData) HasBaseID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentTelesSetupData) SetBaseID(v SegmentReservationID) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewBaseID sets the baseID field to a newly
// allocated SegmentReservationID struct, preferring placement in s's segment.
func (s SegmentTelesSetupData) NewBaseID() (SegmentReservationID, error) {
	ss, err := NewSegmentReservationID(s.Struct.Segment())
	if err != nil {
		return SegmentReservationID{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SegmentTelesSetupData_List is a list of SegmentTelesSetupData.
type SegmentTelesSetupData_List struct{ capnp.List }

// NewSegmentTelesSetupData creates a new list of SegmentTelesSetupData.
func NewSegmentTelesSetupData_List(s *capnp.Segment, sz int32) (SegmentTelesSetupData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegmentTelesSetupData_List{l}, err
}

func (s SegmentTelesSetupData_List) At(i int) SegmentTelesSetupData {
	return SegmentTelesSetupData{s.List.Struct(i)}
}

func (s SegmentTelesSetupData_List) Set(i int, v SegmentTelesSetupData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentTelesSetupData_List) String() string {
	str, _ := text.MarshalList(0xa953af3d8be428ba, s.List)
	return str
}

// SegmentTelesSetupData_Promise is a wrapper for a SegmentTelesSetupData promised by a client call.
type SegmentTelesSetupData_Promise struct{ *capnp.Pipeline }

func (p SegmentTelesSetupData_Promise) Struct() (SegmentTelesSetupData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentTelesSetupData{s}, err
}

func (p SegmentTelesSetupData_Promise) Setup() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegmentTelesSetupData_Promise) BaseID() SegmentReservationID_Promise {
	return SegmentReservationID_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type SegmentTeardownReqData struct{ capnp.Struct }

// SegmentTeardownReqData_TypeID is the unique identifier for the type SegmentTeardownReqData.
const SegmentTeardownReqData_TypeID = 0xa53b4bed5b0bc568

func NewSegmentTeardownReqData(s *capnp.Segment) (SegmentTeardownReqData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegmentTeardownReqData{st}, err
}

func NewRootSegmentTeardownReqData(s *capnp.Segment) (SegmentTeardownReqData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegmentTeardownReqData{st}, err
}

func ReadRootSegmentTeardownReqData(msg *capnp.Message) (SegmentTeardownReqData, error) {
	root, err := msg.RootPtr()
	return SegmentTeardownReqData{root.Struct()}, err
}

func (s SegmentTeardownReqData) String() string {
	str, _ := text.Marshal(0xa53b4bed5b0bc568, s.Struct)
	return str
}

func (s SegmentTeardownReqData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentTeardownReqData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentTeardownReqData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentTeardownReqData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SegmentTeardownReqData_List is a list of SegmentTeardownReqData.
type SegmentTeardownReqData_List struct{ capnp.List }

// NewSegmentTeardownReqData creates a new list of SegmentTeardownReqData.
func NewSegmentTeardownReqData_List(s *capnp.Segment, sz int32) (SegmentTeardownReqData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegmentTeardownReqData_List{l}, err
}

func (s SegmentTeardownReqData_List) At(i int) SegmentTeardownReqData {
	return SegmentTeardownReqData{s.List.Struct(i)}
}

func (s SegmentTeardownReqData_List) Set(i int, v SegmentTeardownReqData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentTeardownReqData_List) String() string {
	str, _ := text.MarshalList(0xa53b4bed5b0bc568, s.List)
	return str
}

// SegmentTeardownReqData_Promise is a wrapper for a SegmentTeardownReqData promised by a client call.
type SegmentTeardownReqData_Promise struct{ *capnp.Pipeline }

func (p SegmentTeardownReqData_Promise) Struct() (SegmentTeardownReqData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentTeardownReqData{s}, err
}

func (p SegmentTeardownReqData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentTeardownResData struct{ capnp.Struct }

// SegmentTeardownResData_TypeID is the unique identifier for the type SegmentTeardownResData.
const SegmentTeardownResData_TypeID = 0x8bd6c2ab5c4cf984

func NewSegmentTeardownResData(s *capnp.Segment) (SegmentTeardownResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentTeardownResData{st}, err
}

func NewRootSegmentTeardownResData(s *capnp.Segment) (SegmentTeardownResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentTeardownResData{st}, err
}

func ReadRootSegmentTeardownResData(msg *capnp.Message) (SegmentTeardownResData, error) {
	root, err := msg.RootPtr()
	return SegmentTeardownResData{root.Struct()}, err
}

func (s SegmentTeardownResData) String() string {
	str, _ := text.Marshal(0x8bd6c2ab5c4cf984, s.Struct)
	return str
}

func (s SegmentTeardownResData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentTeardownResData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentTeardownResData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentTeardownResData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentTeardownResData) ErrorCode() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentTeardownResData) SetErrorCode(v uint8) {
	s.Struct.SetUint8(0, v)
}

// SegmentTeardownResData_List is a list of SegmentTeardownResData.
type SegmentTeardownResData_List struct{ capnp.List }

// NewSegmentTeardownResData creates a new list of SegmentTeardownResData.
func NewSegmentTeardownResData_List(s *capnp.Segment, sz int32) (SegmentTeardownResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegmentTeardownResData_List{l}, err
}

func (s SegmentTeardownResData_List) At(i int) SegmentTeardownResData {
	return SegmentTeardownResData{s.List.Struct(i)}
}

func (s SegmentTeardownResData_List) Set(i int, v SegmentTeardownResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentTeardownResData_List) String() string {
	str, _ := text.MarshalList(0x8bd6c2ab5c4cf984, s.List)
	return str
}

// SegmentTeardownResData_Promise is a wrapper for a SegmentTeardownResData promised by a client call.
type SegmentTeardownResData_Promise struct{ *capnp.Pipeline }

func (p SegmentTeardownResData_Promise) Struct() (SegmentTeardownResData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentTeardownResData{s}, err
}

func (p SegmentTeardownResData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentIndexConfirmationData struct{ capnp.Struct }

// SegmentIndexConfirmationData_TypeID is the unique identifier for the type SegmentIndexConfirmationData.
const SegmentIndexConfirmationData_TypeID = 0xc4264f5cf728f9ac

func NewSegmentIndexConfirmationData(s *capnp.Segment) (SegmentIndexConfirmationData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentIndexConfirmationData{st}, err
}

func NewRootSegmentIndexConfirmationData(s *capnp.Segment) (SegmentIndexConfirmationData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentIndexConfirmationData{st}, err
}

func ReadRootSegmentIndexConfirmationData(msg *capnp.Message) (SegmentIndexConfirmationData, error) {
	root, err := msg.RootPtr()
	return SegmentIndexConfirmationData{root.Struct()}, err
}

func (s SegmentIndexConfirmationData) String() string {
	str, _ := text.Marshal(0xc4264f5cf728f9ac, s.Struct)
	return str
}

func (s SegmentIndexConfirmationData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentIndexConfirmationData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentIndexConfirmationData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentIndexConfirmationData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentIndexConfirmationData) State() ReservationIndexState {
	return ReservationIndexState(s.Struct.Uint16(0))
}

func (s SegmentIndexConfirmationData) SetState(v ReservationIndexState) {
	s.Struct.SetUint16(0, uint16(v))
}

// SegmentIndexConfirmationData_List is a list of SegmentIndexConfirmationData.
type SegmentIndexConfirmationData_List struct{ capnp.List }

// NewSegmentIndexConfirmationData creates a new list of SegmentIndexConfirmationData.
func NewSegmentIndexConfirmationData_List(s *capnp.Segment, sz int32) (SegmentIndexConfirmationData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegmentIndexConfirmationData_List{l}, err
}

func (s SegmentIndexConfirmationData_List) At(i int) SegmentIndexConfirmationData {
	return SegmentIndexConfirmationData{s.List.Struct(i)}
}

func (s SegmentIndexConfirmationData_List) Set(i int, v SegmentIndexConfirmationData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentIndexConfirmationData_List) String() string {
	str, _ := text.MarshalList(0xc4264f5cf728f9ac, s.List)
	return str
}

// SegmentIndexConfirmationData_Promise is a wrapper for a SegmentIndexConfirmationData promised by a client call.
type SegmentIndexConfirmationData_Promise struct{ *capnp.Pipeline }

func (p SegmentIndexConfirmationData_Promise) Struct() (SegmentIndexConfirmationData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentIndexConfirmationData{s}, err
}

func (p SegmentIndexConfirmationData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentIndexConfirmationResData struct{ capnp.Struct }

// SegmentIndexConfirmationResData_TypeID is the unique identifier for the type SegmentIndexConfirmationResData.
const SegmentIndexConfirmationResData_TypeID = 0xaaff46584917b361

func NewSegmentIndexConfirmationResData(s *capnp.Segment) (SegmentIndexConfirmationResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentIndexConfirmationResData{st}, err
}

func NewRootSegmentIndexConfirmationResData(s *capnp.Segment) (SegmentIndexConfirmationResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentIndexConfirmationResData{st}, err
}

func ReadRootSegmentIndexConfirmationResData(msg *capnp.Message) (SegmentIndexConfirmationResData, error) {
	root, err := msg.RootPtr()
	return SegmentIndexConfirmationResData{root.Struct()}, err
}

func (s SegmentIndexConfirmationResData) String() string {
	str, _ := text.Marshal(0xaaff46584917b361, s.Struct)
	return str
}

func (s SegmentIndexConfirmationResData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentIndexConfirmationResData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentIndexConfirmationResData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentIndexConfirmationResData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentIndexConfirmationResData) ErrorCode() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentIndexConfirmationResData) SetErrorCode(v uint8) {
	s.Struct.SetUint8(0, v)
}

// SegmentIndexConfirmationResData_List is a list of SegmentIndexConfirmationResData.
type SegmentIndexConfirmationResData_List struct{ capnp.List }

// NewSegmentIndexConfirmationResData creates a new list of SegmentIndexConfirmationResData.
func NewSegmentIndexConfirmationResData_List(s *capnp.Segment, sz int32) (SegmentIndexConfirmationResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegmentIndexConfirmationResData_List{l}, err
}

func (s SegmentIndexConfirmationResData_List) At(i int) SegmentIndexConfirmationResData {
	return SegmentIndexConfirmationResData{s.List.Struct(i)}
}

func (s SegmentIndexConfirmationResData_List) Set(i int, v SegmentIndexConfirmationResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentIndexConfirmationResData_List) String() string {
	str, _ := text.MarshalList(0xaaff46584917b361, s.List)
	return str
}

// SegmentIndexConfirmationResData_Promise is a wrapper for a SegmentIndexConfirmationResData promised by a client call.
type SegmentIndexConfirmationResData_Promise struct{ *capnp.Pipeline }

func (p SegmentIndexConfirmationResData_Promise) Struct() (SegmentIndexConfirmationResData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentIndexConfirmationResData{s}, err
}

func (p SegmentIndexConfirmationResData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentCleanupData struct{ capnp.Struct }

// SegmentCleanupData_TypeID is the unique identifier for the type SegmentCleanupData.
const SegmentCleanupData_TypeID = 0xd3e56d3f1e39ca3c

func NewSegmentCleanupData(s *capnp.Segment) (SegmentCleanupData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegmentCleanupData{st}, err
}

func NewRootSegmentCleanupData(s *capnp.Segment) (SegmentCleanupData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegmentCleanupData{st}, err
}

func ReadRootSegmentCleanupData(msg *capnp.Message) (SegmentCleanupData, error) {
	root, err := msg.RootPtr()
	return SegmentCleanupData{root.Struct()}, err
}

func (s SegmentCleanupData) String() string {
	str, _ := text.Marshal(0xd3e56d3f1e39ca3c, s.Struct)
	return str
}

func (s SegmentCleanupData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentCleanupData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentCleanupData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentCleanupData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SegmentCleanupData_List is a list of SegmentCleanupData.
type SegmentCleanupData_List struct{ capnp.List }

// NewSegmentCleanupData creates a new list of SegmentCleanupData.
func NewSegmentCleanupData_List(s *capnp.Segment, sz int32) (SegmentCleanupData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegmentCleanupData_List{l}, err
}

func (s SegmentCleanupData_List) At(i int) SegmentCleanupData {
	return SegmentCleanupData{s.List.Struct(i)}
}

func (s SegmentCleanupData_List) Set(i int, v SegmentCleanupData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentCleanupData_List) String() string {
	str, _ := text.MarshalList(0xd3e56d3f1e39ca3c, s.List)
	return str
}

// SegmentCleanupData_Promise is a wrapper for a SegmentCleanupData promised by a client call.
type SegmentCleanupData_Promise struct{ *capnp.Pipeline }

func (p SegmentCleanupData_Promise) Struct() (SegmentCleanupData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentCleanupData{s}, err
}

func (p SegmentCleanupData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentCleanupResData struct{ capnp.Struct }

// SegmentCleanupResData_TypeID is the unique identifier for the type SegmentCleanupResData.
const SegmentCleanupResData_TypeID = 0xa6f94955f188b848

func NewSegmentCleanupResData(s *capnp.Segment) (SegmentCleanupResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentCleanupResData{st}, err
}

func NewRootSegmentCleanupResData(s *capnp.Segment) (SegmentCleanupResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentCleanupResData{st}, err
}

func ReadRootSegmentCleanupResData(msg *capnp.Message) (SegmentCleanupResData, error) {
	root, err := msg.RootPtr()
	return SegmentCleanupResData{root.Struct()}, err
}

func (s SegmentCleanupResData) String() string {
	str, _ := text.Marshal(0xa6f94955f188b848, s.Struct)
	return str
}

func (s SegmentCleanupResData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentCleanupResData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentCleanupResData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentCleanupResData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentCleanupResData) ErrorCode() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentCleanupResData) SetErrorCode(v uint8) {
	s.Struct.SetUint8(0, v)
}

// SegmentCleanupResData_List is a list of SegmentCleanupResData.
type SegmentCleanupResData_List struct{ capnp.List }

// NewSegmentCleanupResData creates a new list of SegmentCleanupResData.
func NewSegmentCleanupResData_List(s *capnp.Segment, sz int32) (SegmentCleanupResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegmentCleanupResData_List{l}, err
}

func (s SegmentCleanupResData_List) At(i int) SegmentCleanupResData {
	return SegmentCleanupResData{s.List.Struct(i)}
}

func (s SegmentCleanupResData_List) Set(i int, v SegmentCleanupResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentCleanupResData_List) String() string {
	str, _ := text.MarshalList(0xa6f94955f188b848, s.List)
	return str
}

// SegmentCleanupResData_Promise is a wrapper for a SegmentCleanupResData promised by a client call.
type SegmentCleanupResData_Promise struct{ *capnp.Pipeline }

func (p SegmentCleanupResData_Promise) Struct() (SegmentCleanupResData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentCleanupResData{s}, err
}

func (p SegmentCleanupResData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type E2ESetupReqData struct{ capnp.Struct }

// E2ESetupReqData_TypeID is the unique identifier for the type E2ESetupReqData.
const E2ESetupReqData_TypeID = 0xfb1a873660b7e310

func NewE2ESetupReqData(s *capnp.Segment) (E2ESetupReqData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return E2ESetupReqData{st}, err
}

func NewRootE2ESetupReqData(s *capnp.Segment) (E2ESetupReqData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return E2ESetupReqData{st}, err
}

func ReadRootE2ESetupReqData(msg *capnp.Message) (E2ESetupReqData, error) {
	root, err := msg.RootPtr()
	return E2ESetupReqData{root.Struct()}, err
}

func (s E2ESetupReqData) String() string {
	str, _ := text.Marshal(0xfb1a873660b7e310, s.Struct)
	return str
}

func (s E2ESetupReqData) Base() (E2EBase, error) {
	p, err := s.Struct.Ptr(0)
	return E2EBase{Struct: p.Struct()}, err
}

func (s E2ESetupReqData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2ESetupReqData) SetBase(v E2EBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated E2EBase struct, preferring placement in s's segment.
func (s E2ESetupReqData) NewBase() (E2EBase, error) {
	ss, err := NewE2EBase(s.Struct.Segment())
	if err != nil {
		return E2EBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s E2ESetupReqData) SegmentRsvs() (SegmentReservationID_List, error) {
	p, err := s.Struct.Ptr(1)
	return SegmentReservationID_List{List: p.List()}, err
}

func (s E2ESetupReqData) HasSegmentRsvs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2ESetupReqData) SetSegmentRsvs(v SegmentReservationID_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSegmentRsvs sets the segmentRsvs field to a newly
// allocated SegmentReservationID_List, preferring placement in s's segment.
func (s E2ESetupReqData) NewSegmentRsvs(n int32) (SegmentReservationID_List, error) {
	l, err := NewSegmentReservationID_List(s.Struct.Segment(), n)
	if err != nil {
		return SegmentReservationID_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s E2ESetupReqData) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s E2ESetupReqData) HasToken() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s E2ESetupReqData) SetToken(v []byte) error {
	return s.Struct.SetData(2, v)
}

// E2ESetupReqData_List is a list of E2ESetupReqData.
type E2ESetupReqData_List struct{ capnp.List }

// NewE2ESetupReqData creates a new list of E2ESetupReqData.
func NewE2ESetupReqData_List(s *capnp.Segment, sz int32) (E2ESetupReqData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return E2ESetupReqData_List{l}, err
}

func (s E2ESetupReqData_List) At(i int) E2ESetupReqData { return E2ESetupReqData{s.List.Struct(i)} }

func (s E2ESetupReqData_List) Set(i int, v E2ESetupReqData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s E2ESetupReqData_List) String() string {
	str, _ := text.MarshalList(0xfb1a873660b7e310, s.List)
	return str
}

// E2ESetupReqData_Promise is a wrapper for a E2ESetupReqData promised by a client call.
type E2ESetupReqData_Promise struct{ *capnp.Pipeline }

func (p E2ESetupReqData_Promise) Struct() (E2ESetupReqData, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupReqData{s}, err
}

func (p E2ESetupReqData_Promise) Base() E2EBase_Promise {
	return E2EBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type E2ESetupResData struct{ capnp.Struct }
type E2ESetupResData_success E2ESetupResData
type E2ESetupResData_failure E2ESetupResData
type E2ESetupResData_Which uint16

const (
	E2ESetupResData_Which_unset   E2ESetupResData_Which = 0
	E2ESetupResData_Which_success E2ESetupResData_Which = 1
	E2ESetupResData_Which_failure E2ESetupResData_Which = 2
)

func (w E2ESetupResData_Which) String() string {
	const s = "unsetsuccessfailure"
	switch w {
	case E2ESetupResData_Which_unset:
		return s[0:5]
	case E2ESetupResData_Which_success:
		return s[5:12]
	case E2ESetupResData_Which_failure:
		return s[12:19]

	}
	return "E2ESetupResData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// E2ESetupResData_TypeID is the unique identifier for the type E2ESetupResData.
const E2ESetupResData_TypeID = 0xb65a7701e86386b2

func NewE2ESetupResData(s *capnp.Segment) (E2ESetupResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return E2ESetupResData{st}, err
}

func NewRootE2ESetupResData(s *capnp.Segment) (E2ESetupResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return E2ESetupResData{st}, err
}

func ReadRootE2ESetupResData(msg *capnp.Message) (E2ESetupResData, error) {
	root, err := msg.RootPtr()
	return E2ESetupResData{root.Struct()}, err
}

func (s E2ESetupResData) String() string {
	str, _ := text.Marshal(0xb65a7701e86386b2, s.Struct)
	return str
}

func (s E2ESetupResData) Which() E2ESetupResData_Which {
	return E2ESetupResData_Which(s.Struct.Uint16(0))
}
func (s E2ESetupResData) Base() (E2EBase, error) {
	p, err := s.Struct.Ptr(0)
	return E2EBase{Struct: p.Struct()}, err
}

func (s E2ESetupResData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2ESetupResData) SetBase(v E2EBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated E2EBase struct, preferring placement in s's segment.
func (s E2ESetupResData) NewBase() (E2EBase, error) {
	ss, err := NewE2EBase(s.Struct.Segment())
	if err != nil {
		return E2EBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s E2ESetupResData) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s E2ESetupResData) Success() E2ESetupResData_success { return E2ESetupResData_success(s) }

func (s E2ESetupResData) SetSuccess() {
	s.Struct.SetUint16(0, 1)
}

func (s E2ESetupResData_success) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s E2ESetupResData_success) HasToken() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2ESetupResData_success) SetToken(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s E2ESetupResData) Failure() E2ESetupResData_failure { return E2ESetupResData_failure(s) }

func (s E2ESetupResData) SetFailure() {
	s.Struct.SetUint16(0, 2)
}

func (s E2ESetupResData_failure) ErrorCode() uint8 {
	return s.Struct.Uint8(2)
}

func (s E2ESetupResData_failure) SetErrorCode(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s E2ESetupResData_failure) InfoField() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s E2ESetupResData_failure) HasInfoField() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2ESetupResData_failure) SetInfoField(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s E2ESetupResData_failure) MaxBWs() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.UInt8List{List: p.List()}, err
}

func (s E2ESetupResData_failure) HasMaxBWs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s E2ESetupResData_failure) SetMaxBWs(v capnp.UInt8List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewMaxBWs sets the maxBWs field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s E2ESetupResData_failure) NewMaxBWs(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// E2ESetupResData_List is a list of E2ESetupResData.
type E2ESetupResData_List struct{ capnp.List }

// NewE2ESetupResData creates a new list of E2ESetupResData.
func NewE2ESetupResData_List(s *capnp.Segment, sz int32) (E2ESetupResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return E2ESetupResData_List{l}, err
}

func (s E2ESetupResData_List) At(i int) E2ESetupResData { return E2ESetupResData{s.List.Struct(i)} }

func (s E2ESetupResData_List) Set(i int, v E2ESetupResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s E2ESetupResData_List) String() string {
	str, _ := text.MarshalList(0xb65a7701e86386b2, s.List)
	return str
}

// E2ESetupResData_Promise is a wrapper for a E2ESetupResData promised by a client call.
type E2ESetupResData_Promise struct{ *capnp.Pipeline }

func (p E2ESetupResData_Promise) Struct() (E2ESetupResData, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupResData{s}, err
}

func (p E2ESetupResData_Promise) Base() E2EBase_Promise {
	return E2EBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p E2ESetupResData_Promise) Success() E2ESetupResData_success_Promise {
	return E2ESetupResData_success_Promise{p.Pipeline}
}

// E2ESetupResData_success_Promise is a wrapper for a E2ESetupResData_success promised by a client call.
type E2ESetupResData_success_Promise struct{ *capnp.Pipeline }

func (p E2ESetupResData_success_Promise) Struct() (E2ESetupResData_success, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupResData_success{s}, err
}

func (p E2ESetupResData_Promise) Failure() E2ESetupResData_failure_Promise {
	return E2ESetupResData_failure_Promise{p.Pipeline}
}

// E2ESetupResData_failure_Promise is a wrapper for a E2ESetupResData_failure promised by a client call.
type E2ESetupResData_failure_Promise struct{ *capnp.Pipeline }

func (p E2ESetupResData_failure_Promise) Struct() (E2ESetupResData_failure, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupResData_failure{s}, err
}

type E2ECleanupData struct{ capnp.Struct }

// E2ECleanupData_TypeID is the unique identifier for the type E2ECleanupData.
const E2ECleanupData_TypeID = 0x96ec60724ebd66d7

func NewE2ECleanupData(s *capnp.Segment) (E2ECleanupData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return E2ECleanupData{st}, err
}

func NewRootE2ECleanupData(s *capnp.Segment) (E2ECleanupData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return E2ECleanupData{st}, err
}

func ReadRootE2ECleanupData(msg *capnp.Message) (E2ECleanupData, error) {
	root, err := msg.RootPtr()
	return E2ECleanupData{root.Struct()}, err
}

func (s E2ECleanupData) String() string {
	str, _ := text.Marshal(0x96ec60724ebd66d7, s.Struct)
	return str
}

func (s E2ECleanupData) Base() (E2EBase, error) {
	p, err := s.Struct.Ptr(0)
	return E2EBase{Struct: p.Struct()}, err
}

func (s E2ECleanupData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2ECleanupData) SetBase(v E2EBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated E2EBase struct, preferring placement in s's segment.
func (s E2ECleanupData) NewBase() (E2EBase, error) {
	ss, err := NewE2EBase(s.Struct.Segment())
	if err != nil {
		return E2EBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// E2ECleanupData_List is a list of E2ECleanupData.
type E2ECleanupData_List struct{ capnp.List }

// NewE2ECleanupData creates a new list of E2ECleanupData.
func NewE2ECleanupData_List(s *capnp.Segment, sz int32) (E2ECleanupData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return E2ECleanupData_List{l}, err
}

func (s E2ECleanupData_List) At(i int) E2ECleanupData { return E2ECleanupData{s.List.Struct(i)} }

func (s E2ECleanupData_List) Set(i int, v E2ECleanupData) error { return s.List.SetStruct(i, v.Struct) }

func (s E2ECleanupData_List) String() string {
	str, _ := text.MarshalList(0x96ec60724ebd66d7, s.List)
	return str
}

// E2ECleanupData_Promise is a wrapper for a E2ECleanupData promised by a client call.
type E2ECleanupData_Promise struct{ *capnp.Pipeline }

func (p E2ECleanupData_Promise) Struct() (E2ECleanupData, error) {
	s, err := p.Pipeline.Struct()
	return E2ECleanupData{s}, err
}

func (p E2ECleanupData_Promise) Base() E2EBase_Promise {
	return E2EBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type E2ECleanupResData struct{ capnp.Struct }

// E2ECleanupResData_TypeID is the unique identifier for the type E2ECleanupResData.
const E2ECleanupResData_TypeID = 0xe04f6146370056c9

func NewE2ECleanupResData(s *capnp.Segment) (E2ECleanupResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return E2ECleanupResData{st}, err
}

func NewRootE2ECleanupResData(s *capnp.Segment) (E2ECleanupResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return E2ECleanupResData{st}, err
}

func ReadRootE2ECleanupResData(msg *capnp.Message) (E2ECleanupResData, error) {
	root, err := msg.RootPtr()
	return E2ECleanupResData{root.Struct()}, err
}

func (s E2ECleanupResData) String() string {
	str, _ := text.Marshal(0xe04f6146370056c9, s.Struct)
	return str
}

func (s E2ECleanupResData) Base() (E2EBase, error) {
	p, err := s.Struct.Ptr(0)
	return E2EBase{Struct: p.Struct()}, err
}

func (s E2ECleanupResData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2ECleanupResData) SetBase(v E2EBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated E2EBase struct, preferring placement in s's segment.
func (s E2ECleanupResData) NewBase() (E2EBase, error) {
	ss, err := NewE2EBase(s.Struct.Segment())
	if err != nil {
		return E2EBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s E2ECleanupResData) ErrorCode() uint8 {
	return s.Struct.Uint8(0)
}

func (s E2ECleanupResData) SetErrorCode(v uint8) {
	s.Struct.SetUint8(0, v)
}

// E2ECleanupResData_List is a list of E2ECleanupResData.
type E2ECleanupResData_List struct{ capnp.List }

// NewE2ECleanupResData creates a new list of E2ECleanupResData.
func NewE2ECleanupResData_List(s *capnp.Segment, sz int32) (E2ECleanupResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return E2ECleanupResData_List{l}, err
}

func (s E2ECleanupResData_List) At(i int) E2ECleanupResData {
	return E2ECleanupResData{s.List.Struct(i)}
}

func (s E2ECleanupResData_List) Set(i int, v E2ECleanupResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s E2ECleanupResData_List) String() string {
	str, _ := text.MarshalList(0xe04f6146370056c9, s.List)
	return str
}

// E2ECleanupResData_Promise is a wrapper for a E2ECleanupResData promised by a client call.
type E2ECleanupResData_Promise struct{ *capnp.Pipeline }

func (p E2ECleanupResData_Promise) Struct() (E2ECleanupResData, error) {
	s, err := p.Pipeline.Struct()
	return E2ECleanupResData{s}, err
}

func (p E2ECleanupResData_Promise) Base() E2EBase_Promise {
	return E2EBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Request struct{ capnp.Struct }
type Request_Which uint16

const (
	Request_Which_unset                    Request_Which = 0
	Request_Which_segmentSetup             Request_Which = 1
	Request_Which_segmentRenewal           Request_Which = 2
	Request_Which_segmentTelesSetup        Request_Which = 3
	Request_Which_segmentTelesRenewal      Request_Which = 4
	Request_Which_segmentTeardown          Request_Which = 5
	Request_Which_segmentIndexConfirmation Request_Which = 6
	Request_Which_segmentCleanup           Request_Which = 7
	Request_Which_e2eSetup                 Request_Which = 8
	Request_Which_e2eRenewal               Request_Which = 9
	Request_Which_e2eCleanup               Request_Which = 10
)

func (w Request_Which) String() string {
	const s = "unsetsegmentSetupsegmentRenewalsegmentTelesSetupsegmentTelesRenewalsegmentTeardownsegmentIndexConfirmationsegmentCleanupe2eSetupe2eRenewale2eCleanup"
	switch w {
	case Request_Which_unset:
		return s[0:5]
	case Request_Which_segmentSetup:
		return s[5:17]
	case Request_Which_segmentRenewal:
		return s[17:31]
	case Request_Which_segmentTelesSetup:
		return s[31:48]
	case Request_Which_segmentTelesRenewal:
		return s[48:67]
	case Request_Which_segmentTeardown:
		return s[67:82]
	case Request_Which_segmentIndexConfirmation:
		return s[82:106]
	case Request_Which_segmentCleanup:
		return s[106:120]
	case Request_Which_e2eSetup:
		return s[120:128]
	case Request_Which_e2eRenewal:
		return s[128:138]
	case Request_Which_e2eCleanup:
		return s[138:148]

	}
	return "Request_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Request_TypeID is the unique identifier for the type Request.
const Request_TypeID = 0xe16d5facdcc87244

func NewRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func NewRootRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func ReadRootRequest(msg *capnp.Message) (Request, error) {
	root, err := msg.RootPtr()
	return Request{root.Struct()}, err
}

func (s Request) String() string {
	str, _ := text.Marshal(0xe16d5facdcc87244, s.Struct)
	return str
}

func (s Request) Which() Request_Which {
	return Request_Which(s.Struct.Uint16(0))
}
func (s Request) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s Request) SegmentSetup() (SegmentSetupReqData, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != segmentSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentSetup() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentSetup(v SegmentSetupReqData) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentSetup sets the segmentSetup field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s Request) NewSegmentSetup() (SegmentSetupReqData, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentRenewal() (SegmentSetupReqData, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != segmentRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentRenewal() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentRenewal(v SegmentSetupReqData) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentRenewal sets the segmentRenewal field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s Request) NewSegmentRenewal() (SegmentSetupReqData, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentTelesSetup() (SegmentTelesSetupData, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != segmentTelesSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTelesSetupData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentTelesSetup() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentTelesSetup(v SegmentTelesSetupData) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTelesSetup sets the segmentTelesSetup field to a newly
// allocated SegmentTelesSetupData struct, preferring placement in s's segment.
func (s Request) NewSegmentTelesSetup() (SegmentTelesSetupData, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSegmentTelesSetupData(s.Struct.Segment())
	if err != nil {
		return SegmentTelesSetupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentTelesRenewal() (SegmentTelesSetupData, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != segmentTelesRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTelesSetupData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentTelesRenewal() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentTelesRenewal(v SegmentTelesSetupData) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTelesRenewal sets the segmentTelesRenewal field to a newly
// allocated SegmentTelesSetupData struct, preferring placement in s's segment.
func (s Request) NewSegmentTelesRenewal() (SegmentTelesSetupData, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewSegmentTelesSetupData(s.Struct.Segment())
	if err != nil {
		return SegmentTelesSetupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentTeardown() (SegmentTeardownReqData, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != segmentTeardown")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTeardownReqData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentTeardown() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentTeardown(v SegmentTeardownReqData) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTeardown sets the segmentTeardown field to a newly
// allocated SegmentTeardownReqData struct, preferring placement in s's segment.
func (s Request) NewSegmentTeardown() (SegmentTeardownReqData, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSegmentTeardownReqData(s.Struct.Segment())
	if err != nil {
		return SegmentTeardownReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentIndexConfirmation() (SegmentIndexConfirmationData, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != segmentIndexConfirmation")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentIndexConfirmationData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentIndexConfirmation() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentIndexConfirmation(v SegmentIndexConfirmationData) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentIndexConfirmation sets the segmentIndexConfirmation field to a newly
// allocated SegmentIndexConfirmationData struct, preferring placement in s's segment.
func (s Request) NewSegmentIndexConfirmation() (SegmentIndexConfirmationData, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewSegmentIndexConfirmationData(s.Struct.Segment())
	if err != nil {
		return SegmentIndexConfirmationData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentCleanup() (SegmentCleanupData, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != segmentCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentCleanupData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentCleanup() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentCleanup(v SegmentCleanupData) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentCleanup sets the segmentCleanup field to a newly
// allocated SegmentCleanupData struct, preferring placement in s's segment.
func (s Request) NewSegmentCleanup() (SegmentCleanupData, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSegmentCleanupData(s.Struct.Segment())
	if err != nil {
		return SegmentCleanupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) E2eSetup() (E2ESetupReqData, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != e2eSetup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupReqData{Struct: p.Struct()}, err
}

func (s Request) HasE2eSetup() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetE2eSetup(v E2ESetupReqData) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eSetup sets the e2eSetup field to a newly
// allocated E2ESetupReqData struct, preferring placement in s's segment.
func (s Request) NewE2eSetup() (E2ESetupReqData, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewE2ESetupReqData(s.Struct.Segment())
	if err != nil {
		return E2ESetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) E2eRenewal() (E2ESetupReqData, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != e2eRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupReqData{Struct: p.Struct()}, err
}

func (s Request) HasE2eRenewal() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetE2eRenewal(v E2ESetupReqData) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eRenewal sets the e2eRenewal field to a newly
// allocated E2ESetupReqData struct, preferring placement in s's segment.
func (s Request) NewE2eRenewal() (E2ESetupReqData, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewE2ESetupReqData(s.Struct.Segment())
	if err != nil {
		return E2ESetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) E2eCleanup() (E2ECleanupData, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != e2eCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ECleanupData{Struct: p.Struct()}, err
}

func (s Request) HasE2eCleanup() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetE2eCleanup(v E2ECleanupData) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eCleanup sets the e2eCleanup field to a newly
// allocated E2ECleanupData struct, preferring placement in s's segment.
func (s Request) NewE2eCleanup() (E2ECleanupData, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewE2ECleanupData(s.Struct.Segment())
	if err != nil {
		return E2ECleanupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Request_List is a list of Request.
type Request_List struct{ capnp.List }

// NewRequest creates a new list of Request.
func NewRequest_List(s *capnp.Segment, sz int32) (Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Request_List{l}, err
}

func (s Request_List) At(i int) Request { return Request{s.List.Struct(i)} }

func (s Request_List) Set(i int, v Request) error { return s.List.SetStruct(i, v.Struct) }

func (s Request_List) String() string {
	str, _ := text.MarshalList(0xe16d5facdcc87244, s.List)
	return str
}

// Request_Promise is a wrapper for a Request promised by a client call.
type Request_Promise struct{ *capnp.Pipeline }

func (p Request_Promise) Struct() (Request, error) {
	s, err := p.Pipeline.Struct()
	return Request{s}, err
}

func (p Request_Promise) SegmentSetup() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentRenewal() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentTelesSetup() SegmentTelesSetupData_Promise {
	return SegmentTelesSetupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentTelesRenewal() SegmentTelesSetupData_Promise {
	return SegmentTelesSetupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentTeardown() SegmentTeardownReqData_Promise {
	return SegmentTeardownReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentIndexConfirmation() SegmentIndexConfirmationData_Promise {
	return SegmentIndexConfirmationData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentCleanup() SegmentCleanupData_Promise {
	return SegmentCleanupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) E2eSetup() E2ESetupReqData_Promise {
	return E2ESetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) E2eRenewal() E2ESetupReqData_Promise {
	return E2ESetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) E2eCleanup() E2ECleanupData_Promise {
	return E2ECleanupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Response struct{ capnp.Struct }
type Response_Which uint16

const (
	Response_Which_unset                    Response_Which = 0
	Response_Which_segmentSetup             Response_Which = 1
	Response_Which_segmentRenewal           Response_Which = 2
	Response_Which_segmentTeardown          Response_Which = 3
	Response_Which_segmentIndexConfirmation Response_Which = 4
	Response_Which_segmentCleanup           Response_Which = 5
	Response_Which_e2eSetup                 Response_Which = 6
	Response_Which_e2eRenewal               Response_Which = 7
	Response_Which_e2eCleanup               Response_Which = 8
)

func (w Response_Which) String() string {
	const s = "unsetsegmentSetupsegmentRenewalsegmentTeardownsegmentIndexConfirmationsegmentCleanupe2eSetupe2eRenewale2eCleanup"
	switch w {
	case Response_Which_unset:
		return s[0:5]
	case Response_Which_segmentSetup:
		return s[5:17]
	case Response_Which_segmentRenewal:
		return s[17:31]
	case Response_Which_segmentTeardown:
		return s[31:46]
	case Response_Which_segmentIndexConfirmation:
		return s[46:70]
	case Response_Which_segmentCleanup:
		return s[70:84]
	case Response_Which_e2eSetup:
		return s[84:92]
	case Response_Which_e2eRenewal:
		return s[92:102]
	case Response_Which_e2eCleanup:
		return s[102:112]

	}
	return "Response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0xe0c72f2fd9ed587d

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Response{st}, err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Response{st}, err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.RootPtr()
	return Response{root.Struct()}, err
}

func (s Response) String() string {
	str, _ := text.Marshal(0xe0c72f2fd9ed587d, s.Struct)
	return str
}

func (s Response) Which() Response_Which {
	return Response_Which(s.Struct.Uint16(0))
}
func (s Response) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s Response) SegmentSetup() (SegmentSetupResData, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != segmentSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentSetup() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentSetup(v SegmentSetupResData) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentSetup sets the segmentSetup field to a newly
// allocated SegmentSetupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentSetup() (SegmentSetupResData, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegmentSetupResData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentRenewal() (SegmentSetupResData, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != segmentRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentRenewal() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentRenewal(v SegmentSetupResData) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentRenewal sets the segmentRenewal field to a newly
// allocated SegmentSetupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentRenewal() (SegmentSetupResData, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSegmentSetupResData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentTeardown() (SegmentTeardownResData, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != segmentTeardown")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTeardownResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentTeardown() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentTeardown(v SegmentTeardownResData) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTeardown sets the segmentTeardown field to a newly
// allocated SegmentTeardownResData struct, preferring placement in s's segment.
func (s Response) NewSegmentTeardown() (SegmentTeardownResData, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSegmentTeardownResData(s.Struct.Segment())
	if err != nil {
		return SegmentTeardownResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentIndexConfirmation() (SegmentIndexConfirmationResData, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != segmentIndexConfirmation")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentIndexConfirmationResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentIndexConfirmation() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentIndexConfirmation(v SegmentIndexConfirmationResData) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentIndexConfirmation sets the segmentIndexConfirmation field to a newly
// allocated SegmentIndexConfirmationResData struct, preferring placement in s's segment.
func (s Response) NewSegmentIndexConfirmation() (SegmentIndexConfirmationResData, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewSegmentIndexConfirmationResData(s.Struct.Segment())
	if err != nil {
		return SegmentIndexConfirmationResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentCleanup() (SegmentCleanupResData, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != segmentCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentCleanupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentCleanup() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentCleanup(v SegmentCleanupResData) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentCleanup sets the segmentCleanup field to a newly
// allocated SegmentCleanupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentCleanup() (SegmentCleanupResData, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSegmentCleanupResData(s.Struct.Segment())
	if err != nil {
		return SegmentCleanupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) E2eSetup() (E2ESetupResData, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != e2eSetup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupResData{Struct: p.Struct()}, err
}

func (s Response) HasE2eSetup() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetE2eSetup(v E2ESetupResData) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eSetup sets the e2eSetup field to a newly
// allocated E2ESetupResData struct, preferring placement in s's segment.
func (s Response) NewE2eSetup() (E2ESetupResData, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewE2ESetupResData(s.Struct.Segment())
	if err != nil {
		return E2ESetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) E2eRenewal() (E2ESetupResData, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != e2eRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupResData{Struct: p.Struct()}, err
}

func (s Response) HasE2eRenewal() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetE2eRenewal(v E2ESetupResData) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eRenewal sets the e2eRenewal field to a newly
// allocated E2ESetupResData struct, preferring placement in s's segment.
func (s Response) NewE2eRenewal() (E2ESetupResData, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewE2ESetupResData(s.Struct.Segment())
	if err != nil {
		return E2ESetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) E2eCleanup() (E2ECleanupResData, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != e2eCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ECleanupResData{Struct: p.Struct()}, err
}

func (s Response) HasE2eCleanup() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetE2eCleanup(v E2ECleanupResData) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eCleanup sets the e2eCleanup field to a newly
// allocated E2ECleanupResData struct, preferring placement in s's segment.
func (s Response) NewE2eCleanup() (E2ECleanupResData, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewE2ECleanupResData(s.Struct.Segment())
	if err != nil {
		return E2ECleanupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) Accepted() bool {
	return s.Struct.Bit(16)
}

func (s Response) SetAccepted(v bool) {
	s.Struct.SetBit(16, v)
}

func (s Response) FailedHop() uint8 {
	return s.Struct.Uint8(3)
}

func (s Response) SetFailedHop(v uint8) {
	s.Struct.SetUint8(3, v)
}

// Response_List is a list of Response.
type Response_List struct{ capnp.List }

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Response_List{l}, err
}

func (s Response_List) At(i int) Response { return Response{s.List.Struct(i)} }

func (s Response_List) Set(i int, v Response) error { return s.List.SetStruct(i, v.Struct) }

func (s Response_List) String() string {
	str, _ := text.MarshalList(0xe0c72f2fd9ed587d, s.List)
	return str
}

// Response_Promise is a wrapper for a Response promised by a client call.
type Response_Promise struct{ *capnp.Pipeline }

func (p Response_Promise) Struct() (Response, error) {
	s, err := p.Pipeline.Struct()
	return Response{s}, err
}

func (p Response_Promise) SegmentSetup() SegmentSetupResData_Promise {
	return SegmentSetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentRenewal() SegmentSetupResData_Promise {
	return SegmentSetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentTeardown() SegmentTeardownResData_Promise {
	return SegmentTeardownResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentIndexConfirmation() SegmentIndexConfirmationResData_Promise {
	return SegmentIndexConfirmationResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentCleanup() SegmentCleanupResData_Promise {
	return SegmentCleanupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) E2eSetup() E2ESetupResData_Promise {
	return E2ESetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) E2eRenewal() E2ESetupResData_Promise {
	return E2ESetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) E2eCleanup() E2ECleanupResData_Promise {
	return E2ECleanupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ColibriRequestPayload struct{ capnp.Struct }
type ColibriRequestPayload_Which uint16

const (
	ColibriRequestPayload_Which_unset    ColibriRequestPayload_Which = 0
	ColibriRequestPayload_Which_request  ColibriRequestPayload_Which = 1
	ColibriRequestPayload_Which_response ColibriRequestPayload_Which = 2
)

func (w ColibriRequestPayload_Which) String() string {
	const s = "unsetrequestresponse"
	switch w {
	case ColibriRequestPayload_Which_unset:
		return s[0:5]
	case ColibriRequestPayload_Which_request:
		return s[5:12]
	case ColibriRequestPayload_Which_response:
		return s[12:20]

	}
	return "ColibriRequestPayload_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ColibriRequestPayload_TypeID is the unique identifier for the type ColibriRequestPayload.
const ColibriRequestPayload_TypeID = 0xc571cc47a792000f

func NewColibriRequestPayload(s *capnp.Segment) (ColibriRequestPayload, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColibriRequestPayload{st}, err
}

func NewRootColibriRequestPayload(s *capnp.Segment) (ColibriRequestPayload, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColibriRequestPayload{st}, err
}

func ReadRootColibriRequestPayload(msg *capnp.Message) (ColibriRequestPayload, error) {
	root, err := msg.RootPtr()
	return ColibriRequestPayload{root.Struct()}, err
}

func (s ColibriRequestPayload) String() string {
	str, _ := text.Marshal(0xc571cc47a792000f, s.Struct)
	return str
}

func (s ColibriRequestPayload) Which() ColibriRequestPayload_Which {
	return ColibriRequestPayload_Which(s.Struct.Uint16(4))
}
func (s ColibriRequestPayload) Timestamp() uint32 {
	return s.Struct.Uint32(0)
}

func (s ColibriRequestPayload) SetTimestamp(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ColibriRequestPayload) SetUnset() {
	s.Struct.SetUint16(4, 0)

}

func (s ColibriRequestPayload) Request() (Request, error) {
	if s.Struct.Uint16(4) != 1 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return Request{Struct: p.Struct()}, err
}

func (s ColibriRequestPayload) HasRequest() bool {
	if s.Struct.Uint16(4) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriRequestPayload) SetRequest(v Request) error {
	s.Struct.SetUint16(4, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Request struct, preferring placement in s's segment.
func (s ColibriRequestPayload) NewRequest() (Request, error) {
	s.Struct.SetUint16(4, 1)
	ss, err := NewRequest(s.Struct.Segment())
	if err != nil {
		return Request{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriRequestPayload) Response() (Response, error) {
	if s.Struct.Uint16(4) != 2 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return Response{Struct: p.Struct()}, err
}

func (s ColibriRequestPayload) HasResponse() bool {
	if s.Struct.Uint16(4) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriRequestPayload) SetResponse(v Response) error {
	s.Struct.SetUint16(4, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Response struct, preferring placement in s's segment.
func (s ColibriRequestPayload) NewResponse() (Response, error) {
	s.Struct.SetUint16(4, 2)
	ss, err := NewResponse(s.Struct.Segment())
	if err != nil {
		return Response{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ColibriRequestPayload_List is a list of ColibriRequestPayload.
type ColibriRequestPayload_List struct{ capnp.List }

// NewColibriRequestPayload creates a new list of ColibriRequestPayload.
func NewColibriRequestPayload_List(s *capnp.Segment, sz int32) (ColibriRequestPayload_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ColibriRequestPayload_List{l}, err
}

func (s ColibriRequestPayload_List) At(i int) ColibriRequestPayload {
	return ColibriRequestPayload{s.List.Struct(i)}
}

func (s ColibriRequestPayload_List) Set(i int, v ColibriRequestPayload) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ColibriRequestPayload_List) String() string {
	str, _ := text.MarshalList(0xc571cc47a792000f, s.List)
	return str
}

// ColibriRequestPayload_Promise is a wrapper for a ColibriRequestPayload promised by a client call.
type ColibriRequestPayload_Promise struct{ *capnp.Pipeline }

func (p ColibriRequestPayload_Promise) Struct() (ColibriRequestPayload, error) {
	s, err := p.Pipeline.Struct()
	return ColibriRequestPayload{s}, err
}

func (p ColibriRequestPayload_Promise) Request() Request_Promise {
	return Request_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriRequestPayload_Promise) Response() Response_Promise {
	return Response_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_a3bf9fed859570f0 = "x\xda\xbcX{\x8cTg\x15?\xe7~\xf3\xda\xd9\x9d" +
	"\xd9\xb9|\xd3PI\xe8\x14\"\x0d\x10\xcac\x16lA" +
	"\xea\x94\xdd\x1dd\x91\xda\xbd3[\xa5\x94F.;w" +
	"\xbbW\xe7\xb5s\xef\xf20\xad\x08\xa5j\xad\xb1Z\xd3" +
	"\xfeiC\x15k+\x09\x09\xa6>\x88\xdahl@\x82" +
	"Q\xd4J1\xa04\x96\xb4\xb4\xd0P\"m\xb7\x14\xae" +
	"9\xdf\x9d\xb9w\xf6\xee\x9de\xadi\xff\xdb\xfd\xceo" +
	"\xce9\xdf9\xbf\xf3\xf8\xee\xe2{B\xb7KK\x82O" +
	"F\x00\x94B0d\xbd\xf9\xafM\x0b\xe6\xed\x8c>\x08" +
	"J\x1c\xd1\xbaP}\xfc\xa1\xf3O>\xff\x03\x08b\x18" +
	"\x80/\x0b\x1c\xe0\xb7\x05\xe8\xaf\xe5\x81\xad\x80\xd6\xee\xb1" +
	"u\x1b\x7f\xf2\xbb\xbf?\xe2\x07\xeez<0\x1f\xf9^" +
	"\x81\xde#\xd0\xcf]}\xf5\xa5\x8b\x87\xdf\xfc6\xc8\xf1" +
	"f\xb0D`\x0c\xce@.\x07\x09\x1c\x0b\x12X[\xfa" +
	"\xfc\x83O\x1f\x18~\xc2\xd7\x0f=\xf8\x17>*\xc0#" +
	"\x02||\xe8\xd7\x9f\xadm:\xf7\x84G\xb3\xc0\xfe1" +
	"\xf8:?!\xb0/\x063\x80\xd6W\xe6\xbe\xf1\xc3\xdf" +
	"\x98\xa5\xa7\xbc\x8a\x09\xd2u)8\x0dy0$<\x0a" +
	"\x1dB@k\xf8\x85\xf6{\xce\x7f\xe6\x93{}Tw" +
	"\x9d\x0d\xcfG>\x16&\xdd\x97\xc2\xa4{\xcd/\xbe\xf1" +
	"\xd6]}c?\xf2\x8d\xc7u\x91\xd9\xc8\xe7D\x08=" +
	"+B^\xff\xe9\xde=o\x84\xcf\xdd\xfdcPn@" +
	"\xb4\x0e|m\xf05\xdc\xba\xe1gp\x1d\x0b#@\xd7" +
	"\xceH\x1a\x01\xf9\xc3\x11R|p\xee+\x8f\xdc\xb6?" +
	"\xff\x8c_\xe8\x9e!\xbd\xbf\x14z\x9f\x13z\xf7.Z" +
	"xh@Y\xfa\xac\xc7\x8b\xac\x14f\x00]r\xdb4" +
	"\xe4\xb3\xda\x08>\xb3\xedU@K\xfd\xe9\xf4\xbe\xf5\xab" +
	"\xadg}\x9d~\xab\xad\x86<\x18%4FI\xb9\xe3" +
	"\xa6G9#\xe5\\\x8d^\xe4%\x81\xd6\xa3\xa4\xfb\xa6" +
	"S\xf7>:\xcd\xda\xf7+\x0fZ\x90\"\xd8\xfe\x0f." +
	"\xb7\x8b\x8c\xb7\x93\xe6}cs\xdf\xd9x\xe7M\xbf\xf7" +
	"\xf5\xa3\xd4\xbe\x01\xf9N\x81~\x80\xd0W:\x1f{\xfa" +
	"\xd3GG^\xf0x\x81a\x86R\xd7\x89\xf6\xd9\xc8\xcf" +
	"\x0a\xf0\x99vrc\xcf\xd8\xc0\x85G\xa7\x7f\xe7\x10\xc8" +
	"q\xc9E\x03v\xfd\xb6c6\xf2c\x1d\x82'\x1d\xb7" +
	"\x00Z\xf3\x87\xff\xf9\xdd\xe8\x96\x83\x87\xfd\x1c>\xd6\xf1" +
	":?%\xb0':\xc8\xe1\x95G\x96\xdf\x90)\x9d\xf9" +
	"\xab\x1f5\x96\xc5\xa2\xc8\xb31\x02\xaf\x8aQ\x06?\xf5" +
	"\xcd\xfd\xdf\xcb\xb7\x1f=\xee\x9fl5&\x92\xad\xc7\xf6" +
	"\x03^\xfe\xc3\xe7nY\xad\xdey\xda/\x0c\x1f\x8bK" +
	"\xc8\xe7\xc4\x05\x87\xe2\xe4\xc3\x03\xeb\xcf\x9fX\xb4\xe8\xd0" +
	"i\x98\x10\x886\x00\xbe3~\x90?L\xe8\xae\x87\xe2" +
	"\x15\x09\xd0\xea\xad\x1d>\xb9\xef\x0b\xa5\x97'\xc2\xdb\x01" +
	"\xf8\xcd\xf2\x01\xbeL&\xf8\x12Y\xc0w_?\xfd\xfb" +
	"\xbb\x8e\xcfz\xdb\x87v\xfce\xfe\x1e?\xcf\xe9\xaf\xb3" +
	"\x9c<I\xfc\xfb\xe7\x9b>\xf1\xf5\x19\x97=XF\x88" +
	"l\xf2\"W\x92\xf4\xd7\x1d\xc9\xfd\x80\xd6`\xa5\xa8o" +
	"\xae\xe9\x0bqP\xad\x96\xab+\xb2\xe9T\xb6[5\xb4" +
	"~D%\xc2\x02\x00\x01\x04\x90\xe7\xcd\x00P>\xceP" +
	"Y,!b\x12\xe9\xec\xe64\x802\x97\xa1\xb2TB" +
	"\xa6\x170\xe1\xba\x08\x88\x09\xc0\x94^.h\xdb0\x04" +
	"\x12\x86\x9a\x0c1\xdbP^\xbb\xaf\xa4\x95\xcd\x01M\xad" +
	"\x15*[\xcb9\xcd\xe8\xecUM\xd5cw\xbe\x8f\xdd" +
	"\x1c\x80\xb2\x80\xa1r\xab\x84\x9d\x9bUC\xc3\x84\xdb\xa1" +
	"l\xcb\x96V\xabUj=\x95\x02\xa0v\x0d\xfb9\xcd" +
	"\xd0j[TS\xaf\x94Y_ok\xeb\xb2c~\x85" +
	"{\xedN\xd5\xd0\x0b\x18\x03\x09c\x80\x19cthH" +
	"\xdf\xd6\xf8\xd7\xb1'\x8d\xb3\xd7\xad\x1a\xf8\x81\x82\xebt" +
	"\xecI\x83+5\xb2\x98\xed)jjy\xb4\xea\x045" +
	"\xe0\xd8\x8b\xd1\xb5\"\x0c\x95\xa4\x1b@g\xd4\xd4\x03\xe8" +
	"\x1f\xac\xbcf\x8eVs\xdaH\xafj\xa2Pz\xa3\xa3" +
	"\xf4\x18)=\xcaPy\xc9\xbd\xc4\x8bt\x89?3T" +
	"NJ(K\x98D\x09@>A\x87\x7fc\xa8\x9c\x96" +
	"PfR\x12\x19\x80|j-\x80r\x92\xa1\xf2\x9a\x84" +
	"r\x00\x93\x18\x00\x90\xcfl\x00P^a\xa8\\\x90P" +
	"\x0eJI\x0c\x02\xc8\xe7\x09y\x8e\xa1\xf2\xae\x84r\x88" +
	"%1\x04 _\"J\xfc\x87a\x0e%\x94\xc3\x81$" +
	"\xd5\xa7|e\x17\x80\xf2>\xc3\xfc\xf5\xd8\x92(\xa9\x92" +
	"^\xee\xfe|#\x8a\xa9\x92\xba\xcd\xfd\xcf2\xaaE\xdd" +
	"\xec)\x1a\x00\xe0\x9e\x99j\xcd\xec\xafU\x80U\x0dL" +
	"\xb8=\xb5\xc1\xbbr\xa1\xbfV\xa9\x8a\x9fL\x94\xea\xe5" +
	"\xa1\xcaj]+\x02:\xa4\xb1\xd4b\xb12\xa8\x9a:" +
	"V\xca\x035U/\x02\xc6\x01\xfb\x19b\xc2\xed\x7f\x80" +
	"tx\xcd\x02\x1a\x99b\xae\xbd\xc5\xe2\xaf\xb7\xce\x9f\x9c" +
	"f\xf4\x86?\xca\xba\xcc\xa6\xb3u\x9a\x19t\x9d\x85\xc6" +
	"hjpP3\x0c\xbaT\xa2\xce\xa1X\xda\xbdU\xca" +
	"\xac|I+O\xa8:o\x90\x8a\x9a!\xd4\xfa]&" +
	"}\x8d2O\x19\xf4KL\xb8\xfb\x8a}\x9d\x0c\xdd\xb2" +
	"\xafwbqN^>\x86S>\x09\xc7\x07\x95\x02\xba" +
	"\x91\xa12,a\x0c-\xcbvB#\xcf61T\x8a" +
	"\x12\xce\x94\xaeZ\xf5\xeb\xeb\xdd\xb4 2T\xaa\x12\xce" +
	"dW\xe8\x98\x8a\xa8D\xe8a\x86\x8a\xd9\x9a\xef\xa3e" +
	"C3!\xb4cH\xd5\x8b\xa35m\xe2\x9dZ\x843" +
	"0\xee\"}\xd4{z*\xe5!\xbdV\x12\xad3\xa7" +
	"\xa5\x8c\x8f\xa6{K^\x96\xb8\x86\xff\x97h\xc6(\x9a" +
	"Mk\x1f\xc5T\x8aQ,\x9b\xd6\x03Y\xe9\x06\xa9E" +
	"\x87t\"i\x8c\x0az6\"\xeau\xb4_5\x87\xb3" +
	"\xa2+\xb0\xaa1\x15\xde\xadu\xe3\x93\xa2\xd6PD\x04" +
	"\x09i\xfd5kj\xd9\x18\xd2j\xd4\\\x1agS\xcc" +
	"O\xaf\xca\xa6\x94\x9c\xa6\xa9\xd3\x8aA\x86\xa9\x9a\x1av" +
	"\xba{\x1c vN\xa4|\x8f\xfdoN\x1b\x19\xd5\x0c" +
	"\xb3_\xdd^\x0cW\xd4\x82'M\xb9\xa6\x848i\xd2" +
	"\xd3.\xbb)M6\xe7K\xdd.\xb9)O6\xe5G" +
	"(ZU\x86\xca\xfd\x12Z\xa6^\xd2\x0cS-\x01V" +
	"1\x02\x12F\x9a\xb2T\xb3\xfd\xc0\x84\xbbv\xd5\xc9V" +
	"\xd3\x8cj\xa5lhv\xcbvv8\xffBn\xda\x16" +
	"D\x8c\xf3fX5\xedq.\xbc\x94\xbb\xe9\x87r\xdb" +
	"\x0a\x80\x1dU\xad\\\xd0\xcb\xf7e\xd4AS\xdf2\x81" +
	"\x17\xab\xea}\xbfR\xee\xec\xd6\xec\xc04\xe5\xa6\xdb\x8f" +
	"\x19M\xc9\xd9!\xc6F\xcb\xc95iG\xa7r\x01\xf8" +
	"\xbf\xc7\x84\xb7O\x0f\xa9)Q\x00J\x07\x0b$\xeac" +
	"=K\x09\xeee\xa8\xf4\xd7\xefAc\xfd\x0e:\\\xc7" +
	"PYO[A}\xac\xdfE\xed\xb6\xdf\xa6\x82o\xfd" +
	"\xfb\xcc\xce\x8c\xb8\xb4\xd1\x18\x98\x84\x8c\xfb\xfa\xd94\xca" +
	"\xe8\xee\x1f\xacIy7\xa4\xc9\x9a\x146\xd8\x92\xb1\xb9" +
	"E\x16\x17\xb0@\x87e\x91I>\x07\xd3\x00\xf9\x1b\x91" +
	"a~\x01\x12\xf5\xaf\xda\xd4\xe7\xf3\xf0\x8b\x00\xf9\xb9$" +
	"XJ\x02\xe9\x8a\xcd~\xbe\x04\xbf\x0c\x90_L\x82\x95" +
	"$`\xef\xdb\x05\xc0\x97\xe3.\x80\xfc\xad$\xe8%A" +
	"\xe0\xb2%\xa2\xccW\xe1\x11\x80\xfc\x1a\x12\x0c\x90 \xf8" +
	"\x9e%\"\xcd\x15\xa1\xaa\x9f\x04\x1bI\x10\x1a\xb3\xc4\x12" +
	"\xc5\xef\xc6\xb5\x00\xf9\xf5$(\x90 \xfc\xae%\x16)" +
	"\xae\xe2\x06\x80\xfc&\x12\x14I\x10y\xc7Jb\x84\xde" +
	"\x95B0L\x02\x936\xaf\xb6D\x12\xe9\xa93\"4" +
	"U\xe9\xfc~:\x8f\xb2$F\x01\xf8v\xcc\x01\xe4\xb7" +
	"\xd1\xf9n\x94\x9c\xe2\xb4\x8c\xfax\x84\xce\xfa\x9cu^" +
	"\xcd\xf5X\xd7\x019\xc8hem\xabZl\x0d\x19\xc0" +
	"\xfa:D\xc5\xec|\x12\x19\x8f\xe9\x93\xbc\xedQ\x94\xbe" +
	"\xf3\xf6\x1e\x8f\xee\x81\x8cM\x1fL\xb8\xdf\x14\x1a\x1cH" +
	"k\xa2\x06\xec\xde\xe1<$]i\x8e\xfc\x05&<\xf6" +
	"\x11\x0bb\x02#\xdd\x8d\x97f]\xa8\x0e\x0ejUS" +
	"+4\xf7z\x9a0ZaM\x85\xfa[K\xc6\xa5\xec" +
	"~\xfb!\x12\xee1\x80\xfcJ\x12\xac\x19G\xb8,>" +
	"\xd5\x8ap\xbbZ\x11\xee\xc88^9\x84\xd3\x85q\x87" +
	"W.\xe1<\xc4\x8a\xb5\xbdm\xd9\x8c\xdb.\x98\xe80" +
	"+\x16\xbdd\xd9\x94\xdb)\x04_%\xc1\xb7&\xa5\x9c" +
	"g\x0d\xf2\xa3\\\x0b\xc8\x006\x96K$E\xce\xe7!" +
	"?\x14\xf1!lkk\x8ds\x09\xec|\xf0\x9a\x12\x81" +
	"\x9d\x8f6\xad\x09\xec|&\xf1%\xb0\xf3\xd9\xc0\x9f\xc0" +
	">\xe2&\x02\xbb\x1f\xfe<\xf3\xc2\xdd\xd8\xea\xd33#" +
	"\xc6\xe7\x87\xf9\xd6n\xda\x0eG\x1a\xdba\x87c*K" +
	"\xa6ng\xa8\xack2\xd5\xb7\x19@Y\xc3P)\xd4" +
	"\xa7\x12\x8ds5\xed\xee\x91\xad\xe6\x80C\x94\xb0\xb1\xc5" +
	"p\x1fo\xcd/\x82\xb8w\xad\xfeo\x00\x00\x00\xff\xff" +
	"+\xa0\xc2*"

func init() {
	schemas.Register(schema_a3bf9fed859570f0,
		0x830a81292c60dfee,
		0x8bd6c2ab5c4cf984,
		0x8eeec8f2d8e7feb5,
		0x9668b2a783bf3465,
		0x96ec60724ebd66d7,
		0xa26d74bea4eb287e,
		0xa53b4bed5b0bc568,
		0xa6f94955f188b848,
		0xa859ec07eba15dcf,
		0xa953af3d8be428ba,
		0xaa345154c72e2fa5,
		0xaaff46584917b361,
		0xb65a7701e86386b2,
		0xbcacff128f5ddd26,
		0xc4264f5cf728f9ac,
		0xc571cc47a792000f,
		0xc790178ff054f9a1,
		0xc8ba760a91de682a,
		0xd3e56d3f1e39ca3c,
		0xd7cc0b5393af8a3e,
		0xe04f6146370056c9,
		0xe0c72f2fd9ed587d,
		0xe16d5facdcc87244,
		0xf621d7829e171884,
		0xfb1a873660b7e310)
}
