// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/beacon_srv/internal/keepalive (interfaces: IfStatePusher)

// Package mock_keepalive is a generated GoMock package.
package mock_keepalive

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "github.com/scionproto/scion/go/lib/common"
	reflect "reflect"
)

// MockIfStatePusher is a mock of IfStatePusher interface
type MockIfStatePusher struct {
	ctrl     *gomock.Controller
	recorder *MockIfStatePusherMockRecorder
}

// MockIfStatePusherMockRecorder is the mock recorder for MockIfStatePusher
type MockIfStatePusherMockRecorder struct {
	mock *MockIfStatePusher
}

// NewMockIfStatePusher creates a new mock instance
func NewMockIfStatePusher(ctrl *gomock.Controller) *MockIfStatePusher {
	mock := &MockIfStatePusher{ctrl: ctrl}
	mock.recorder = &MockIfStatePusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIfStatePusher) EXPECT() *MockIfStatePusherMockRecorder {
	return m.recorder
}

// Push mocks base method
func (m *MockIfStatePusher) Push(arg0 context.Context, arg1 common.IFIDType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", arg0, arg1)
}

// Push indicates an expected call of Push
func (mr *MockIfStatePusherMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockIfStatePusher)(nil).Push), arg0, arg1)
}
