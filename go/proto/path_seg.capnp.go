// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type PathSegment struct{ capnp.Struct }

// PathSegment_TypeID is the unique identifier for the type PathSegment.
const PathSegment_TypeID = 0x939cc09a86ba70fa

func NewPathSegment(s *capnp.Segment) (PathSegment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathSegment{st}, err
}

func NewRootPathSegment(s *capnp.Segment) (PathSegment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathSegment{st}, err
}

func ReadRootPathSegment(msg *capnp.Message) (PathSegment, error) {
	root, err := msg.RootPtr()
	return PathSegment{root.Struct()}, err
}

func (s PathSegment) String() string {
	str, _ := text.Marshal(0x939cc09a86ba70fa, s.Struct)
	return str
}

func (s PathSegment) Sdata() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PathSegment) HasSdata() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegment) SetSdata(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PathSegment) AsEntries() (SignedBlob_List, error) {
	p, err := s.Struct.Ptr(1)
	return SignedBlob_List{List: p.List()}, err
}

func (s PathSegment) HasAsEntries() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathSegment) SetAsEntries(v SignedBlob_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAsEntries sets the asEntries field to a newly
// allocated SignedBlob_List, preferring placement in s's segment.
func (s PathSegment) NewAsEntries(n int32) (SignedBlob_List, error) {
	l, err := NewSignedBlob_List(s.Struct.Segment(), n)
	if err != nil {
		return SignedBlob_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// PathSegment_List is a list of PathSegment.
type PathSegment_List struct{ capnp.List }

// NewPathSegment creates a new list of PathSegment.
func NewPathSegment_List(s *capnp.Segment, sz int32) (PathSegment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PathSegment_List{l}, err
}

func (s PathSegment_List) At(i int) PathSegment { return PathSegment{s.List.Struct(i)} }

func (s PathSegment_List) Set(i int, v PathSegment) error { return s.List.SetStruct(i, v.Struct) }

func (s PathSegment_List) String() string {
	str, _ := text.MarshalList(0x939cc09a86ba70fa, s.List)
	return str
}

// PathSegment_Promise is a wrapper for a PathSegment promised by a client call.
type PathSegment_Promise struct{ *capnp.Pipeline }

func (p PathSegment_Promise) Struct() (PathSegment, error) {
	s, err := p.Pipeline.Struct()
	return PathSegment{s}, err
}

type PathSegmentSignedData struct{ capnp.Struct }

// PathSegmentSignedData_TypeID is the unique identifier for the type PathSegmentSignedData.
const PathSegmentSignedData_TypeID = 0xc7cf7a18177aec2a

func NewPathSegmentSignedData(s *capnp.Segment) (PathSegmentSignedData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PathSegmentSignedData{st}, err
}

func NewRootPathSegmentSignedData(s *capnp.Segment) (PathSegmentSignedData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PathSegmentSignedData{st}, err
}

func ReadRootPathSegmentSignedData(msg *capnp.Message) (PathSegmentSignedData, error) {
	root, err := msg.RootPtr()
	return PathSegmentSignedData{root.Struct()}, err
}

func (s PathSegmentSignedData) String() string {
	str, _ := text.Marshal(0xc7cf7a18177aec2a, s.Struct)
	return str
}

func (s PathSegmentSignedData) InfoF() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PathSegmentSignedData) HasInfoF() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegmentSignedData) SetInfoF(v []byte) error {
	return s.Struct.SetData(0, v)
}

// PathSegmentSignedData_List is a list of PathSegmentSignedData.
type PathSegmentSignedData_List struct{ capnp.List }

// NewPathSegmentSignedData creates a new list of PathSegmentSignedData.
func NewPathSegmentSignedData_List(s *capnp.Segment, sz int32) (PathSegmentSignedData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PathSegmentSignedData_List{l}, err
}

func (s PathSegmentSignedData_List) At(i int) PathSegmentSignedData {
	return PathSegmentSignedData{s.List.Struct(i)}
}

func (s PathSegmentSignedData_List) Set(i int, v PathSegmentSignedData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathSegmentSignedData_List) String() string {
	str, _ := text.MarshalList(0xc7cf7a18177aec2a, s.List)
	return str
}

// PathSegmentSignedData_Promise is a wrapper for a PathSegmentSignedData promised by a client call.
type PathSegmentSignedData_Promise struct{ *capnp.Pipeline }

func (p PathSegmentSignedData_Promise) Struct() (PathSegmentSignedData, error) {
	s, err := p.Pipeline.Struct()
	return PathSegmentSignedData{s}, err
}

type ASEntry struct{ capnp.Struct }
type ASEntry_exts ASEntry

// ASEntry_TypeID is the unique identifier for the type ASEntry.
const ASEntry_TypeID = 0xd4a209e8e78874ff

func NewASEntry(s *capnp.Segment) (ASEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return ASEntry{st}, err
}

func NewRootASEntry(s *capnp.Segment) (ASEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return ASEntry{st}, err
}

func ReadRootASEntry(msg *capnp.Message) (ASEntry, error) {
	root, err := msg.RootPtr()
	return ASEntry{root.Struct()}, err
}

func (s ASEntry) String() string {
	str, _ := text.Marshal(0xd4a209e8e78874ff, s.Struct)
	return str
}

func (s ASEntry) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASEntry) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASEntry) TrcVer() uint64 {
	return s.Struct.Uint64(8)
}

func (s ASEntry) SetTrcVer(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s ASEntry) CertVer() uint64 {
	return s.Struct.Uint64(16)
}

func (s ASEntry) SetCertVer(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s ASEntry) IfIDSize() uint8 {
	return s.Struct.Uint8(24)
}

func (s ASEntry) SetIfIDSize(v uint8) {
	s.Struct.SetUint8(24, v)
}

func (s ASEntry) Hops() (HopEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return HopEntry_List{List: p.List()}, err
}

func (s ASEntry) HasHops() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASEntry) SetHops(v HopEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHops sets the hops field to a newly
// allocated HopEntry_List, preferring placement in s's segment.
func (s ASEntry) NewHops(n int32) (HopEntry_List, error) {
	l, err := NewHopEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return HopEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ASEntry) Mtu() uint16 {
	return s.Struct.Uint16(26)
}

func (s ASEntry) SetMtu(v uint16) {
	s.Struct.SetUint16(26, v)
}

func (s ASEntry) Exts() ASEntry_exts { return ASEntry_exts(s) }

func (s ASEntry_exts) RoutingPolicy() (RoutingPolicyExt, error) {
	p, err := s.Struct.Ptr(1)
	return RoutingPolicyExt{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasRoutingPolicy() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetRoutingPolicy(v RoutingPolicyExt) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRoutingPolicy sets the routingPolicy field to a newly
// allocated RoutingPolicyExt struct, preferring placement in s's segment.
func (s ASEntry_exts) NewRoutingPolicy() (RoutingPolicyExt, error) {
	ss, err := NewRoutingPolicyExt(s.Struct.Segment())
	if err != nil {
		return RoutingPolicyExt{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ASEntry_exts) Sibra() (SibraPCBExt, error) {
	p, err := s.Struct.Ptr(2)
	return SibraPCBExt{Struct: p.Struct()}, err
}

func (s ASEntry_exts) HasSibra() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ASEntry_exts) SetSibra(v SibraPCBExt) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSibra sets the sibra field to a newly
// allocated SibraPCBExt struct, preferring placement in s's segment.
func (s ASEntry_exts) NewSibra() (SibraPCBExt, error) {
	ss, err := NewSibraPCBExt(s.Struct.Segment())
	if err != nil {
		return SibraPCBExt{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// ASEntry_List is a list of ASEntry.
type ASEntry_List struct{ capnp.List }

// NewASEntry creates a new list of ASEntry.
func NewASEntry_List(s *capnp.Segment, sz int32) (ASEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return ASEntry_List{l}, err
}

func (s ASEntry_List) At(i int) ASEntry { return ASEntry{s.List.Struct(i)} }

func (s ASEntry_List) Set(i int, v ASEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ASEntry_List) String() string {
	str, _ := text.MarshalList(0xd4a209e8e78874ff, s.List)
	return str
}

// ASEntry_Promise is a wrapper for a ASEntry promised by a client call.
type ASEntry_Promise struct{ *capnp.Pipeline }

func (p ASEntry_Promise) Struct() (ASEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASEntry{s}, err
}

func (p ASEntry_Promise) Exts() ASEntry_exts_Promise { return ASEntry_exts_Promise{p.Pipeline} }

// ASEntry_exts_Promise is a wrapper for a ASEntry_exts promised by a client call.
type ASEntry_exts_Promise struct{ *capnp.Pipeline }

func (p ASEntry_exts_Promise) Struct() (ASEntry_exts, error) {
	s, err := p.Pipeline.Struct()
	return ASEntry_exts{s}, err
}

func (p ASEntry_exts_Promise) RoutingPolicy() RoutingPolicyExt_Promise {
	return RoutingPolicyExt_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p ASEntry_exts_Promise) Sibra() SibraPCBExt_Promise {
	return SibraPCBExt_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type HopEntry struct{ capnp.Struct }

// HopEntry_TypeID is the unique identifier for the type HopEntry.
const HopEntry_TypeID = 0x8bb1ddafb4872b0b

func NewHopEntry(s *capnp.Segment) (HopEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return HopEntry{st}, err
}

func NewRootHopEntry(s *capnp.Segment) (HopEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return HopEntry{st}, err
}

func ReadRootHopEntry(msg *capnp.Message) (HopEntry, error) {
	root, err := msg.RootPtr()
	return HopEntry{root.Struct()}, err
}

func (s HopEntry) String() string {
	str, _ := text.Marshal(0x8bb1ddafb4872b0b, s.Struct)
	return str
}

func (s HopEntry) InIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s HopEntry) SetInIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HopEntry) RemoteInIF() uint64 {
	return s.Struct.Uint64(8)
}

func (s HopEntry) SetRemoteInIF(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s HopEntry) InMTU() uint16 {
	return s.Struct.Uint16(16)
}

func (s HopEntry) SetInMTU(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s HopEntry) OutIA() uint64 {
	return s.Struct.Uint64(24)
}

func (s HopEntry) SetOutIA(v uint64) {
	s.Struct.SetUint64(24, v)
}

func (s HopEntry) RemoteOutIF() uint64 {
	return s.Struct.Uint64(32)
}

func (s HopEntry) SetRemoteOutIF(v uint64) {
	s.Struct.SetUint64(32, v)
}

func (s HopEntry) HopF() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s HopEntry) HasHopF() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HopEntry) SetHopF(v []byte) error {
	return s.Struct.SetData(0, v)
}

// HopEntry_List is a list of HopEntry.
type HopEntry_List struct{ capnp.List }

// NewHopEntry creates a new list of HopEntry.
func NewHopEntry_List(s *capnp.Segment, sz int32) (HopEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return HopEntry_List{l}, err
}

func (s HopEntry_List) At(i int) HopEntry { return HopEntry{s.List.Struct(i)} }

func (s HopEntry_List) Set(i int, v HopEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s HopEntry_List) String() string {
	str, _ := text.MarshalList(0x8bb1ddafb4872b0b, s.List)
	return str
}

// HopEntry_Promise is a wrapper for a HopEntry promised by a client call.
type HopEntry_Promise struct{ *capnp.Pipeline }

func (p HopEntry_Promise) Struct() (HopEntry, error) {
	s, err := p.Pipeline.Struct()
	return HopEntry{s}, err
}

type PCB struct{ capnp.Struct }

// PCB_TypeID is the unique identifier for the type PCB.
const PCB_TypeID = 0xd6c04763377951e5

func NewPCB(s *capnp.Segment) (PCB, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PCB{st}, err
}

func NewRootPCB(s *capnp.Segment) (PCB, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PCB{st}, err
}

func ReadRootPCB(msg *capnp.Message) (PCB, error) {
	root, err := msg.RootPtr()
	return PCB{root.Struct()}, err
}

func (s PCB) String() string {
	str, _ := text.Marshal(0xd6c04763377951e5, s.Struct)
	return str
}

func (s PCB) PathSeg() (PathSegment, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegment{Struct: p.Struct()}, err
}

func (s PCB) HasPathSeg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PCB) SetPathSeg(v PathSegment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathSeg sets the pathSeg field to a newly
// allocated PathSegment struct, preferring placement in s's segment.
func (s PCB) NewPathSeg() (PathSegment, error) {
	ss, err := NewPathSegment(s.Struct.Segment())
	if err != nil {
		return PathSegment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PCB) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s PCB) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PCB_List is a list of PCB.
type PCB_List struct{ capnp.List }

// NewPCB creates a new list of PCB.
func NewPCB_List(s *capnp.Segment, sz int32) (PCB_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PCB_List{l}, err
}

func (s PCB_List) At(i int) PCB { return PCB{s.List.Struct(i)} }

func (s PCB_List) Set(i int, v PCB) error { return s.List.SetStruct(i, v.Struct) }

func (s PCB_List) String() string {
	str, _ := text.MarshalList(0xd6c04763377951e5, s.List)
	return str
}

// PCB_Promise is a wrapper for a PCB promised by a client call.
type PCB_Promise struct{ *capnp.Pipeline }

func (p PCB_Promise) Struct() (PCB, error) {
	s, err := p.Pipeline.Struct()
	return PCB{s}, err
}

func (p PCB_Promise) PathSeg() PathSegment_Promise {
	return PathSegment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathSegMeta struct{ capnp.Struct }

// PathSegMeta_TypeID is the unique identifier for the type PathSegMeta.
const PathSegMeta_TypeID = 0x9f98567b3c0aba0f

func NewPathSegMeta(s *capnp.Segment) (PathSegMeta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathSegMeta{st}, err
}

func NewRootPathSegMeta(s *capnp.Segment) (PathSegMeta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathSegMeta{st}, err
}

func ReadRootPathSegMeta(msg *capnp.Message) (PathSegMeta, error) {
	root, err := msg.RootPtr()
	return PathSegMeta{root.Struct()}, err
}

func (s PathSegMeta) String() string {
	str, _ := text.Marshal(0x9f98567b3c0aba0f, s.Struct)
	return str
}

func (s PathSegMeta) PathSeg() (PathSegment, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegment{Struct: p.Struct()}, err
}

func (s PathSegMeta) HasPathSeg() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathSegMeta) SetPathSeg(v PathSegment) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathSeg sets the pathSeg field to a newly
// allocated PathSegment struct, preferring placement in s's segment.
func (s PathSegMeta) NewPathSeg() (PathSegment, error) {
	ss, err := NewPathSegment(s.Struct.Segment())
	if err != nil {
		return PathSegment{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathSegMeta) Type() PathSegType {
	return PathSegType(s.Struct.Uint16(0))
}

func (s PathSegMeta) SetType(v PathSegType) {
	s.Struct.SetUint16(0, uint16(v))
}

// PathSegMeta_List is a list of PathSegMeta.
type PathSegMeta_List struct{ capnp.List }

// NewPathSegMeta creates a new list of PathSegMeta.
func NewPathSegMeta_List(s *capnp.Segment, sz int32) (PathSegMeta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathSegMeta_List{l}, err
}

func (s PathSegMeta_List) At(i int) PathSegMeta { return PathSegMeta{s.List.Struct(i)} }

func (s PathSegMeta_List) Set(i int, v PathSegMeta) error { return s.List.SetStruct(i, v.Struct) }

func (s PathSegMeta_List) String() string {
	str, _ := text.MarshalList(0x9f98567b3c0aba0f, s.List)
	return str
}

// PathSegMeta_Promise is a wrapper for a PathSegMeta promised by a client call.
type PathSegMeta_Promise struct{ *capnp.Pipeline }

func (p PathSegMeta_Promise) Struct() (PathSegMeta, error) {
	s, err := p.Pipeline.Struct()
	return PathSegMeta{s}, err
}

func (p PathSegMeta_Promise) PathSeg() PathSegment_Promise {
	return PathSegment_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathSegType uint16

// PathSegType_TypeID is the unique identifier for the type PathSegType.
const PathSegType_TypeID = 0xa1f7a9650aa23880

// Values of PathSegType.
const (
	PathSegType_unset PathSegType = 0
	PathSegType_up    PathSegType = 1
	PathSegType_down  PathSegType = 2
	PathSegType_core  PathSegType = 3
)

// String returns the enum's constant name.
func (c PathSegType) String() string {
	switch c {
	case PathSegType_unset:
		return "unset"
	case PathSegType_up:
		return "up"
	case PathSegType_down:
		return "down"
	case PathSegType_core:
		return "core"

	default:
		return ""
	}
}

// PathSegTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PathSegTypeFromString(c string) PathSegType {
	switch c {
	case "unset":
		return PathSegType_unset
	case "up":
		return PathSegType_up
	case "down":
		return PathSegType_down
	case "core":
		return PathSegType_core

	default:
		return 0
	}
}

type PathSegType_List struct{ capnp.List }

func NewPathSegType_List(s *capnp.Segment, sz int32) (PathSegType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PathSegType_List{l.List}, err
}

func (l PathSegType_List) At(i int) PathSegType {
	ul := capnp.UInt16List{List: l.List}
	return PathSegType(ul.At(i))
}

func (l PathSegType_List) Set(i int, v PathSegType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_fb8053d9fb34b837 = "x\xda\xacT_h\x1c\xd5\x1b\xfd\xce\xbd3\xbbI~" +
	"\xeco\xf62+MEY+\x0a\xbaji\xd3Jb" +
	"Qbjm\xbbBpo\xb7V\xf4E\xa7\x9b\xdb\xcd" +
	"\x80\x99\x1dv\xee\xd2nD\xda\x97\xf8\x07\x11\x1f\x14\xd1" +
	"\xd2\x92\xb6(\x18h\xb0B\x0b\xdb`!)\x95\"\x08" +
	"\xbe\x88h\xa0\xe0\x9f\x8a\x06|\x17[t\xe4\xeef\xff" +
	"\x90\xb4o\xbe\xdd\xf9\xf8\xee9\xdf\xf9\xee9\xb3e\x05" +
	"O\xb2\xad\xf6UF$\xef\xb1\x13\xf1\xff\x1ez\xe3\xfc" +
	"g\xd7>\x7f\x9b\xa4\x03;\x1enl\xbf\xf9C\xf1\xd8" +
	"M\xb2\x91$r\xf3\xb8\xecJs\xda6\x8e\xe7A\x88" +
	"o\x84\x0b\xaf\x1f_<\xf1\x1e\x09\x07=\xcd\xcc4\x9f" +
	"f\xcb\xee|\xf34\xc7\x0e\x13bga\xe0\xf1W\x0f" +
	"|8k\x90\xb1\x16y#_v\xef\xe7\xe6\xb4\x89\x9b" +
	"\xe6c#g\x06\xd4\xdc\x9f\xa7I8\xac\xdbKp_" +
	"\xe3\xcb\xee[\xcd\xc6\x19^&\xc4\xf1\xec\xcc\xc9\x7f\x06" +
	"\xf4e\x92\x1b`\xc5\xb1~\xf3\xb7\xdf\xfb\xcf|Kw" +
	"\xf0$\x0c3\xff\x99\xe0\xce7!s\x7fLo\x18\x9c" +
	"\xfe\xe6\xea\x9aY\x9brRV\x0e\xee\xddVs\x12k" +
	"\xd4\xc0\xb6\x81\xa4\x03\xab\xa7\xbb\xc9\xfc\x98\xb5\xe0\x8e\x99" +
	"\xe6mOX\xef\x9a5\xfc*\xeb\xc3\xa5=\x8b\xdf\xdd" +
	"R\xda%\xfb\xb8\xfb\xa5mNK\xb6\x99#\xf4\xf4\xe4" +
	"K\x91*\xb3\xcd%/\x0c\xc2\x1d{+\xe1\xd3\x81\xae" +
	"\xd6\xa9\x00\xc8An\x11Y \x12\x1f\xe5\x88\xe4\xfb\x1c" +
	"\xf2\x14\x83\x0020\xc5\x93/\x12\xc9\x13\x1c\xf2S\x06" +
	"\xc1\xfa2`D\xe2\x93!\"y\x8aC\x9ee\x10\x9c" +
	"g\xc0\x89\xc4\x9c)~\xcc!\xcf1\x08\xcb\xca\xc0\"" +
	"\x12\xf3\x07\x89\xe4Y\x0e\xd9`\x80\x9d\x81M$.\x18" +
	"\x9es\x1c\xf2\x0b\x06\xc7\x0f\xf2c\xe8'\x86~B\\" +
	"US\x15\xad\xf2\x01\xf1\xfc\xeev1\xeb\x07\xe3\xfb\x9f" +
	"C\x92\x18\x92\x84l\xa5\xa6\xd7]x\xb6FI\xdd\xbd" +
	"\xe1LV\xc2\xddH\x11C\xea\x16\xe2\x0b\x9e\x9e,\xaa" +
	"\xf2\x94\xe2\x816\xfa\xfb:\xfa\x1f4\x02\xee\xe3\x90[" +
	"z\xf4?\xb2\x8fH>\xcc!\xf72d\xa3\x09O{" +
	"\x1dd/2[\xf4\x15!\xc2\xff\x09\x05\x0e\xa4\xe3}" +
	"\xbf\xdc\x18\x9e\xd934K\x04S\xbc\x1d\xfd\xb8\xe2\xda" +
	"[C\xbf\xb3K\xdfa7\xabz\x80Cng8\x1a" +
	"\xb6\xae\"\xdd\x0d\x01\x01i\x82\xa3\xeb\xa1\x82\xd3\xb50" +
	"\x01\xce\xed\xb9\xf7\xd7y\xa8\x0cw\xba\xf9\x98F6 " +
	"6\xddI\x04&6\xe6\x88\xc0\x85\xc8\x11ekA\xa4" +
	"4\xaf\x85\xceD\xe5p\xe0\x94*U\xb5\x0er\xac\xd8" +
	"t\xd2f\x95<\xa2##&\x8d\x0c\x12\x06\xb5\xda\x9d" +
	"\\\x80e\x8c1\xc5\xd6\xa1\xd5e\x8e0\xc4\xd5JM" +
	"\xfbA\xb9@\xd9\xca+~\xa9\x8et\xfc\xd7\xf5GG" +
	"\x1a\xcbK\x1f\xac\xca\xcaF\xfe\xc1\xaa\x87t\xfc\xce\xcb" +
	"+/\\\\\xf9\xbb\xb1Z\xef\x0c\xc1\xd7>i\xa0\x8b" +
	"~9P\x13\xce.\xaf\xb5]\xab\xb3\xdd\x94\xa1\xee\xe3" +
	"\x90\x19f,u\xa8\xb2\xde!hk\x1am\x892\x00" +
	"wu\x00.\x0cu]\xdbq\xc7\xc5\x1dD\xf2<\x87" +
	"\\4\xe9`\xadt\\2\x0f\xd9\xe0\x90WL:\x06" +
	"[\xe9Xz\x86H.r\xc8\xaf\x19\xb0\x1a\x8e\xaf\xcc" +
	"\xeb^\xe1\x90?2\x08;\xd5J\xc7\xb5{\x89\xe4\xf7" +
	"\x1c\xf2:\x03\x12\xe8\xf9\xdf\x88\x9fr\xc4\xb2~4\xe1" +
	"Em\xab\x8f\xeaj\xe9\x80\xaa\xb6?\x8f\x96TU\xf7" +
	"|\xc7\xfe\xa1\xfc\xae\xa2?\xad\x88\x08\x09bH\xb4\xd2" +
	"\xd1\xe3\xd7\xce\xdf\xb7\xe5\xd7\xe4\x94\xae\xb5\xb3\xe6\xa8#" +
	":Z\xb7\x9d\x02\x7fj\xe7\x7ff\\3_{\xd8\x7f" +
	"\x03\x00\x00\xff\xff5\xca}\xde"

func init() {
	schemas.Register(schema_fb8053d9fb34b837,
		0x8bb1ddafb4872b0b,
		0x939cc09a86ba70fa,
		0x9f98567b3c0aba0f,
		0xa1f7a9650aa23880,
		0xc2740afe9d859fff,
		0xc7cf7a18177aec2a,
		0xd4a209e8e78874ff,
		0xd6c04763377951e5)
}
