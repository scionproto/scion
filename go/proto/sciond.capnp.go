// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SCIONDMsg struct{ capnp.Struct }
type SCIONDMsg_Which uint16

const (
	SCIONDMsg_Which_unset              SCIONDMsg_Which = 0
	SCIONDMsg_Which_pathReq            SCIONDMsg_Which = 1
	SCIONDMsg_Which_pathReply          SCIONDMsg_Which = 2
	SCIONDMsg_Which_asInfoReq          SCIONDMsg_Which = 3
	SCIONDMsg_Which_asInfoReply        SCIONDMsg_Which = 4
	SCIONDMsg_Which_revNotification    SCIONDMsg_Which = 5
	SCIONDMsg_Which_ifInfoRequest      SCIONDMsg_Which = 6
	SCIONDMsg_Which_ifInfoReply        SCIONDMsg_Which = 7
	SCIONDMsg_Which_serviceInfoRequest SCIONDMsg_Which = 8
	SCIONDMsg_Which_serviceInfoReply   SCIONDMsg_Which = 9
	SCIONDMsg_Which_revReply           SCIONDMsg_Which = 10
	SCIONDMsg_Which_segTypeHopReq      SCIONDMsg_Which = 11
	SCIONDMsg_Which_segTypeHopReply    SCIONDMsg_Which = 12
)

func (w SCIONDMsg_Which) String() string {
	const s = "unsetpathReqpathReplyasInfoReqasInfoReplyrevNotificationifInfoRequestifInfoReplyserviceInfoRequestserviceInfoReplyrevReplysegTypeHopReqsegTypeHopReply"
	switch w {
	case SCIONDMsg_Which_unset:
		return s[0:5]
	case SCIONDMsg_Which_pathReq:
		return s[5:12]
	case SCIONDMsg_Which_pathReply:
		return s[12:21]
	case SCIONDMsg_Which_asInfoReq:
		return s[21:30]
	case SCIONDMsg_Which_asInfoReply:
		return s[30:41]
	case SCIONDMsg_Which_revNotification:
		return s[41:56]
	case SCIONDMsg_Which_ifInfoRequest:
		return s[56:69]
	case SCIONDMsg_Which_ifInfoReply:
		return s[69:80]
	case SCIONDMsg_Which_serviceInfoRequest:
		return s[80:98]
	case SCIONDMsg_Which_serviceInfoReply:
		return s[98:114]
	case SCIONDMsg_Which_revReply:
		return s[114:122]
	case SCIONDMsg_Which_segTypeHopReq:
		return s[122:135]
	case SCIONDMsg_Which_segTypeHopReply:
		return s[135:150]

	}
	return "SCIONDMsg_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SCIONDMsg_TypeID is the unique identifier for the type SCIONDMsg.
const SCIONDMsg_TypeID = 0x91ea9bb47f46c346

func NewSCIONDMsg(s *capnp.Segment) (SCIONDMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SCIONDMsg{st}, err
}

func NewRootSCIONDMsg(s *capnp.Segment) (SCIONDMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SCIONDMsg{st}, err
}

func ReadRootSCIONDMsg(msg *capnp.Message) (SCIONDMsg, error) {
	root, err := msg.RootPtr()
	return SCIONDMsg{root.Struct()}, err
}

func (s SCIONDMsg) String() string {
	str, _ := text.Marshal(0x91ea9bb47f46c346, s.Struct)
	return str
}

func (s SCIONDMsg) Which() SCIONDMsg_Which {
	return SCIONDMsg_Which(s.Struct.Uint16(8))
}
func (s SCIONDMsg) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s SCIONDMsg) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SCIONDMsg) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s SCIONDMsg) PathReq() (PathReq, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != pathReq")
	}
	p, err := s.Struct.Ptr(0)
	return PathReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasPathReq() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetPathReq(v PathReq) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathReq sets the pathReq field to a newly
// allocated PathReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewPathReq() (PathReq, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewPathReq(s.Struct.Segment())
	if err != nil {
		return PathReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) PathReply() (PathReply, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != pathReply")
	}
	p, err := s.Struct.Ptr(0)
	return PathReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasPathReply() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetPathReply(v PathReply) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathReply sets the pathReply field to a newly
// allocated PathReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewPathReply() (PathReply, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewPathReply(s.Struct.Segment())
	if err != nil {
		return PathReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) AsInfoReq() (ASInfoReq, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != asInfoReq")
	}
	p, err := s.Struct.Ptr(0)
	return ASInfoReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasAsInfoReq() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetAsInfoReq(v ASInfoReq) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsInfoReq sets the asInfoReq field to a newly
// allocated ASInfoReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewAsInfoReq() (ASInfoReq, error) {
	s.Struct.SetUint16(8, 3)
	ss, err := NewASInfoReq(s.Struct.Segment())
	if err != nil {
		return ASInfoReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) AsInfoReply() (ASInfoReply, error) {
	if s.Struct.Uint16(8) != 4 {
		panic("Which() != asInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return ASInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasAsInfoReply() bool {
	if s.Struct.Uint16(8) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetAsInfoReply(v ASInfoReply) error {
	s.Struct.SetUint16(8, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsInfoReply sets the asInfoReply field to a newly
// allocated ASInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewAsInfoReply() (ASInfoReply, error) {
	s.Struct.SetUint16(8, 4)
	ss, err := NewASInfoReply(s.Struct.Segment())
	if err != nil {
		return ASInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) RevNotification() (RevNotification, error) {
	if s.Struct.Uint16(8) != 5 {
		panic("Which() != revNotification")
	}
	p, err := s.Struct.Ptr(0)
	return RevNotification{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasRevNotification() bool {
	if s.Struct.Uint16(8) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetRevNotification(v RevNotification) error {
	s.Struct.SetUint16(8, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRevNotification sets the revNotification field to a newly
// allocated RevNotification struct, preferring placement in s's segment.
func (s SCIONDMsg) NewRevNotification() (RevNotification, error) {
	s.Struct.SetUint16(8, 5)
	ss, err := NewRevNotification(s.Struct.Segment())
	if err != nil {
		return RevNotification{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) IfInfoRequest() (IFInfoRequest, error) {
	if s.Struct.Uint16(8) != 6 {
		panic("Which() != ifInfoRequest")
	}
	p, err := s.Struct.Ptr(0)
	return IFInfoRequest{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasIfInfoRequest() bool {
	if s.Struct.Uint16(8) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetIfInfoRequest(v IFInfoRequest) error {
	s.Struct.SetUint16(8, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfInfoRequest sets the ifInfoRequest field to a newly
// allocated IFInfoRequest struct, preferring placement in s's segment.
func (s SCIONDMsg) NewIfInfoRequest() (IFInfoRequest, error) {
	s.Struct.SetUint16(8, 6)
	ss, err := NewIFInfoRequest(s.Struct.Segment())
	if err != nil {
		return IFInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) IfInfoReply() (IFInfoReply, error) {
	if s.Struct.Uint16(8) != 7 {
		panic("Which() != ifInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return IFInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasIfInfoReply() bool {
	if s.Struct.Uint16(8) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetIfInfoReply(v IFInfoReply) error {
	s.Struct.SetUint16(8, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfInfoReply sets the ifInfoReply field to a newly
// allocated IFInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewIfInfoReply() (IFInfoReply, error) {
	s.Struct.SetUint16(8, 7)
	ss, err := NewIFInfoReply(s.Struct.Segment())
	if err != nil {
		return IFInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) ServiceInfoRequest() (ServiceInfoRequest, error) {
	if s.Struct.Uint16(8) != 8 {
		panic("Which() != serviceInfoRequest")
	}
	p, err := s.Struct.Ptr(0)
	return ServiceInfoRequest{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasServiceInfoRequest() bool {
	if s.Struct.Uint16(8) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetServiceInfoRequest(v ServiceInfoRequest) error {
	s.Struct.SetUint16(8, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceInfoRequest sets the serviceInfoRequest field to a newly
// allocated ServiceInfoRequest struct, preferring placement in s's segment.
func (s SCIONDMsg) NewServiceInfoRequest() (ServiceInfoRequest, error) {
	s.Struct.SetUint16(8, 8)
	ss, err := NewServiceInfoRequest(s.Struct.Segment())
	if err != nil {
		return ServiceInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) ServiceInfoReply() (ServiceInfoReply, error) {
	if s.Struct.Uint16(8) != 9 {
		panic("Which() != serviceInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return ServiceInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasServiceInfoReply() bool {
	if s.Struct.Uint16(8) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetServiceInfoReply(v ServiceInfoReply) error {
	s.Struct.SetUint16(8, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceInfoReply sets the serviceInfoReply field to a newly
// allocated ServiceInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewServiceInfoReply() (ServiceInfoReply, error) {
	s.Struct.SetUint16(8, 9)
	ss, err := NewServiceInfoReply(s.Struct.Segment())
	if err != nil {
		return ServiceInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) RevReply() (RevReply, error) {
	if s.Struct.Uint16(8) != 10 {
		panic("Which() != revReply")
	}
	p, err := s.Struct.Ptr(0)
	return RevReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasRevReply() bool {
	if s.Struct.Uint16(8) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetRevReply(v RevReply) error {
	s.Struct.SetUint16(8, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRevReply sets the revReply field to a newly
// allocated RevReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewRevReply() (RevReply, error) {
	s.Struct.SetUint16(8, 10)
	ss, err := NewRevReply(s.Struct.Segment())
	if err != nil {
		return RevReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) SegTypeHopReq() (SegTypeHopReq, error) {
	if s.Struct.Uint16(8) != 11 {
		panic("Which() != segTypeHopReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasSegTypeHopReq() bool {
	if s.Struct.Uint16(8) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetSegTypeHopReq(v SegTypeHopReq) error {
	s.Struct.SetUint16(8, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegTypeHopReq sets the segTypeHopReq field to a newly
// allocated SegTypeHopReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewSegTypeHopReq() (SegTypeHopReq, error) {
	s.Struct.SetUint16(8, 11)
	ss, err := NewSegTypeHopReq(s.Struct.Segment())
	if err != nil {
		return SegTypeHopReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) SegTypeHopReply() (SegTypeHopReply, error) {
	if s.Struct.Uint16(8) != 12 {
		panic("Which() != segTypeHopReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasSegTypeHopReply() bool {
	if s.Struct.Uint16(8) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetSegTypeHopReply(v SegTypeHopReply) error {
	s.Struct.SetUint16(8, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegTypeHopReply sets the segTypeHopReply field to a newly
// allocated SegTypeHopReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewSegTypeHopReply() (SegTypeHopReply, error) {
	s.Struct.SetUint16(8, 12)
	ss, err := NewSegTypeHopReply(s.Struct.Segment())
	if err != nil {
		return SegTypeHopReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SCIONDMsg_List is a list of SCIONDMsg.
type SCIONDMsg_List struct{ capnp.List }

// NewSCIONDMsg creates a new list of SCIONDMsg.
func NewSCIONDMsg_List(s *capnp.Segment, sz int32) (SCIONDMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return SCIONDMsg_List{l}, err
}

func (s SCIONDMsg_List) At(i int) SCIONDMsg { return SCIONDMsg{s.List.Struct(i)} }

func (s SCIONDMsg_List) Set(i int, v SCIONDMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s SCIONDMsg_List) String() string {
	str, _ := text.MarshalList(0x91ea9bb47f46c346, s.List)
	return str
}

// SCIONDMsg_Promise is a wrapper for a SCIONDMsg promised by a client call.
type SCIONDMsg_Promise struct{ *capnp.Pipeline }

func (p SCIONDMsg_Promise) Struct() (SCIONDMsg, error) {
	s, err := p.Pipeline.Struct()
	return SCIONDMsg{s}, err
}

func (p SCIONDMsg_Promise) PathReq() PathReq_Promise {
	return PathReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) PathReply() PathReply_Promise {
	return PathReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) AsInfoReq() ASInfoReq_Promise {
	return ASInfoReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) AsInfoReply() ASInfoReply_Promise {
	return ASInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) RevNotification() RevNotification_Promise {
	return RevNotification_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) IfInfoRequest() IFInfoRequest_Promise {
	return IFInfoRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) IfInfoReply() IFInfoReply_Promise {
	return IFInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) ServiceInfoRequest() ServiceInfoRequest_Promise {
	return ServiceInfoRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) ServiceInfoReply() ServiceInfoReply_Promise {
	return ServiceInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) RevReply() RevReply_Promise {
	return RevReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) SegTypeHopReq() SegTypeHopReq_Promise {
	return SegTypeHopReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) SegTypeHopReply() SegTypeHopReply_Promise {
	return SegTypeHopReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathReq struct{ capnp.Struct }
type PathReq_flags PathReq

// PathReq_TypeID is the unique identifier for the type PathReq.
const PathReq_TypeID = 0xc4c61531dcc4a3eb

func NewPathReq(s *capnp.Segment) (PathReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PathReq{st}, err
}

func NewRootPathReq(s *capnp.Segment) (PathReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PathReq{st}, err
}

func ReadRootPathReq(msg *capnp.Message) (PathReq, error) {
	root, err := msg.RootPtr()
	return PathReq{root.Struct()}, err
}

func (s PathReq) String() string {
	str, _ := text.Marshal(0xc4c61531dcc4a3eb, s.Struct)
	return str
}

func (s PathReq) Dst() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathReq) SetDst(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PathReq) Src() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathReq) SetSrc(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s PathReq) MaxPaths() uint16 {
	return s.Struct.Uint16(16)
}

func (s PathReq) SetMaxPaths(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s PathReq) Flags() PathReq_flags { return PathReq_flags(s) }

func (s PathReq_flags) Refresh() bool {
	return s.Struct.Bit(144)
}

func (s PathReq_flags) SetRefresh(v bool) {
	s.Struct.SetBit(144, v)
}

func (s PathReq_flags) Hidden() bool {
	return s.Struct.Bit(145)
}

func (s PathReq_flags) SetHidden(v bool) {
	s.Struct.SetBit(145, v)
}

func (s PathReq) HpCfgs() (HPGroupId_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId_List{List: p.List()}, err
}

func (s PathReq) HasHpCfgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReq) SetHpCfgs(v HPGroupId_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHpCfgs sets the hpCfgs field to a newly
// allocated HPGroupId_List, preferring placement in s's segment.
func (s PathReq) NewHpCfgs(n int32) (HPGroupId_List, error) {
	l, err := NewHPGroupId_List(s.Struct.Segment(), n)
	if err != nil {
		return HPGroupId_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PathReq_List is a list of PathReq.
type PathReq_List struct{ capnp.List }

// NewPathReq creates a new list of PathReq.
func NewPathReq_List(s *capnp.Segment, sz int32) (PathReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PathReq_List{l}, err
}

func (s PathReq_List) At(i int) PathReq { return PathReq{s.List.Struct(i)} }

func (s PathReq_List) Set(i int, v PathReq) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReq_List) String() string {
	str, _ := text.MarshalList(0xc4c61531dcc4a3eb, s.List)
	return str
}

// PathReq_Promise is a wrapper for a PathReq promised by a client call.
type PathReq_Promise struct{ *capnp.Pipeline }

func (p PathReq_Promise) Struct() (PathReq, error) {
	s, err := p.Pipeline.Struct()
	return PathReq{s}, err
}

func (p PathReq_Promise) Flags() PathReq_flags_Promise { return PathReq_flags_Promise{p.Pipeline} }

// PathReq_flags_Promise is a wrapper for a PathReq_flags promised by a client call.
type PathReq_flags_Promise struct{ *capnp.Pipeline }

func (p PathReq_flags_Promise) Struct() (PathReq_flags, error) {
	s, err := p.Pipeline.Struct()
	return PathReq_flags{s}, err
}

type PathReply struct{ capnp.Struct }

// PathReply_TypeID is the unique identifier for the type PathReply.
const PathReply_TypeID = 0xf10fe9b6293ee63f

func NewPathReply(s *capnp.Segment) (PathReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathReply{st}, err
}

func NewRootPathReply(s *capnp.Segment) (PathReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathReply{st}, err
}

func ReadRootPathReply(msg *capnp.Message) (PathReply, error) {
	root, err := msg.RootPtr()
	return PathReply{root.Struct()}, err
}

func (s PathReply) String() string {
	str, _ := text.Marshal(0xf10fe9b6293ee63f, s.Struct)
	return str
}

func (s PathReply) ErrorCode() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathReply) SetErrorCode(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathReply) Entries() (PathReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathReplyEntry_List{List: p.List()}, err
}

func (s PathReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReply) SetEntries(v PathReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated PathReplyEntry_List, preferring placement in s's segment.
func (s PathReply) NewEntries(n int32) (PathReplyEntry_List, error) {
	l, err := NewPathReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return PathReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PathReply_List is a list of PathReply.
type PathReply_List struct{ capnp.List }

// NewPathReply creates a new list of PathReply.
func NewPathReply_List(s *capnp.Segment, sz int32) (PathReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathReply_List{l}, err
}

func (s PathReply_List) At(i int) PathReply { return PathReply{s.List.Struct(i)} }

func (s PathReply_List) Set(i int, v PathReply) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReply_List) String() string {
	str, _ := text.MarshalList(0xf10fe9b6293ee63f, s.List)
	return str
}

// PathReply_Promise is a wrapper for a PathReply promised by a client call.
type PathReply_Promise struct{ *capnp.Pipeline }

func (p PathReply_Promise) Struct() (PathReply, error) {
	s, err := p.Pipeline.Struct()
	return PathReply{s}, err
}

type PathReplyEntry struct{ capnp.Struct }

// PathReplyEntry_TypeID is the unique identifier for the type PathReplyEntry.
const PathReplyEntry_TypeID = 0xc5ff2e54709776ec

func NewPathReplyEntry(s *capnp.Segment) (PathReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathReplyEntry{st}, err
}

func NewRootPathReplyEntry(s *capnp.Segment) (PathReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathReplyEntry{st}, err
}

func ReadRootPathReplyEntry(msg *capnp.Message) (PathReplyEntry, error) {
	root, err := msg.RootPtr()
	return PathReplyEntry{root.Struct()}, err
}

func (s PathReplyEntry) String() string {
	str, _ := text.Marshal(0xc5ff2e54709776ec, s.Struct)
	return str
}

func (s PathReplyEntry) Path() (FwdPathMeta, error) {
	p, err := s.Struct.Ptr(0)
	return FwdPathMeta{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetPath(v FwdPathMeta) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPath sets the path field to a newly
// allocated FwdPathMeta struct, preferring placement in s's segment.
func (s PathReplyEntry) NewPath() (FwdPathMeta, error) {
	ss, err := NewFwdPathMeta(s.Struct.Segment())
	if err != nil {
		return FwdPathMeta{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathReplyEntry) HostInfo() (HostInfo, error) {
	p, err := s.Struct.Ptr(1)
	return HostInfo{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasHostInfo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetHostInfo(v HostInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewHostInfo sets the hostInfo field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s PathReplyEntry) NewHostInfo() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// PathReplyEntry_List is a list of PathReplyEntry.
type PathReplyEntry_List struct{ capnp.List }

// NewPathReplyEntry creates a new list of PathReplyEntry.
func NewPathReplyEntry_List(s *capnp.Segment, sz int32) (PathReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PathReplyEntry_List{l}, err
}

func (s PathReplyEntry_List) At(i int) PathReplyEntry { return PathReplyEntry{s.List.Struct(i)} }

func (s PathReplyEntry_List) Set(i int, v PathReplyEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xc5ff2e54709776ec, s.List)
	return str
}

// PathReplyEntry_Promise is a wrapper for a PathReplyEntry promised by a client call.
type PathReplyEntry_Promise struct{ *capnp.Pipeline }

func (p PathReplyEntry_Promise) Struct() (PathReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return PathReplyEntry{s}, err
}

func (p PathReplyEntry_Promise) Path() FwdPathMeta_Promise {
	return FwdPathMeta_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathReplyEntry_Promise) HostInfo() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type HostInfo struct{ capnp.Struct }
type HostInfo_addrs HostInfo

// HostInfo_TypeID is the unique identifier for the type HostInfo.
const HostInfo_TypeID = 0xb21a270577932520

func NewHostInfo(s *capnp.Segment) (HostInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HostInfo{st}, err
}

func NewRootHostInfo(s *capnp.Segment) (HostInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HostInfo{st}, err
}

func ReadRootHostInfo(msg *capnp.Message) (HostInfo, error) {
	root, err := msg.RootPtr()
	return HostInfo{root.Struct()}, err
}

func (s HostInfo) String() string {
	str, _ := text.Marshal(0xb21a270577932520, s.Struct)
	return str
}

func (s HostInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HostInfo) Addrs() HostInfo_addrs { return HostInfo_addrs(s) }

func (s HostInfo_addrs) Ipv4() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s HostInfo_addrs) HasIpv4() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HostInfo_addrs) SetIpv4(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s HostInfo_addrs) Ipv6() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s HostInfo_addrs) HasIpv6() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HostInfo_addrs) SetIpv6(v []byte) error {
	return s.Struct.SetData(1, v)
}

// HostInfo_List is a list of HostInfo.
type HostInfo_List struct{ capnp.List }

// NewHostInfo creates a new list of HostInfo.
func NewHostInfo_List(s *capnp.Segment, sz int32) (HostInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return HostInfo_List{l}, err
}

func (s HostInfo_List) At(i int) HostInfo { return HostInfo{s.List.Struct(i)} }

func (s HostInfo_List) Set(i int, v HostInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s HostInfo_List) String() string {
	str, _ := text.MarshalList(0xb21a270577932520, s.List)
	return str
}

// HostInfo_Promise is a wrapper for a HostInfo promised by a client call.
type HostInfo_Promise struct{ *capnp.Pipeline }

func (p HostInfo_Promise) Struct() (HostInfo, error) {
	s, err := p.Pipeline.Struct()
	return HostInfo{s}, err
}

func (p HostInfo_Promise) Addrs() HostInfo_addrs_Promise { return HostInfo_addrs_Promise{p.Pipeline} }

// HostInfo_addrs_Promise is a wrapper for a HostInfo_addrs promised by a client call.
type HostInfo_addrs_Promise struct{ *capnp.Pipeline }

func (p HostInfo_addrs_Promise) Struct() (HostInfo_addrs, error) {
	s, err := p.Pipeline.Struct()
	return HostInfo_addrs{s}, err
}

type FwdPathMeta struct{ capnp.Struct }

// FwdPathMeta_TypeID is the unique identifier for the type FwdPathMeta.
const FwdPathMeta_TypeID = 0x8adfcabe5ff9daf4

func NewFwdPathMeta(s *capnp.Segment) (FwdPathMeta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FwdPathMeta{st}, err
}

func NewRootFwdPathMeta(s *capnp.Segment) (FwdPathMeta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FwdPathMeta{st}, err
}

func ReadRootFwdPathMeta(msg *capnp.Message) (FwdPathMeta, error) {
	root, err := msg.RootPtr()
	return FwdPathMeta{root.Struct()}, err
}

func (s FwdPathMeta) String() string {
	str, _ := text.Marshal(0x8adfcabe5ff9daf4, s.Struct)
	return str
}

func (s FwdPathMeta) FwdPath() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s FwdPathMeta) HasFwdPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetFwdPath(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s FwdPathMeta) Mtu() uint16 {
	return s.Struct.Uint16(0)
}

func (s FwdPathMeta) SetMtu(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s FwdPathMeta) Interfaces() (PathInterface_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathInterface_List{List: p.List()}, err
}

func (s FwdPathMeta) HasInterfaces() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetInterfaces(v PathInterface_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewInterfaces sets the interfaces field to a newly
// allocated PathInterface_List, preferring placement in s's segment.
func (s FwdPathMeta) NewInterfaces(n int32) (PathInterface_List, error) {
	l, err := NewPathInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return PathInterface_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s FwdPathMeta) ExpTime() uint32 {
	return s.Struct.Uint32(4)
}

func (s FwdPathMeta) SetExpTime(v uint32) {
	s.Struct.SetUint32(4, v)
}

// FwdPathMeta_List is a list of FwdPathMeta.
type FwdPathMeta_List struct{ capnp.List }

// NewFwdPathMeta creates a new list of FwdPathMeta.
func NewFwdPathMeta_List(s *capnp.Segment, sz int32) (FwdPathMeta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return FwdPathMeta_List{l}, err
}

func (s FwdPathMeta_List) At(i int) FwdPathMeta { return FwdPathMeta{s.List.Struct(i)} }

func (s FwdPathMeta_List) Set(i int, v FwdPathMeta) error { return s.List.SetStruct(i, v.Struct) }

func (s FwdPathMeta_List) String() string {
	str, _ := text.MarshalList(0x8adfcabe5ff9daf4, s.List)
	return str
}

// FwdPathMeta_Promise is a wrapper for a FwdPathMeta promised by a client call.
type FwdPathMeta_Promise struct{ *capnp.Pipeline }

func (p FwdPathMeta_Promise) Struct() (FwdPathMeta, error) {
	s, err := p.Pipeline.Struct()
	return FwdPathMeta{s}, err
}

type PathInterface struct{ capnp.Struct }

// PathInterface_TypeID is the unique identifier for the type PathInterface.
const PathInterface_TypeID = 0x95794035a80b7da1

func NewPathInterface(s *capnp.Segment) (PathInterface, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathInterface{st}, err
}

func NewRootPathInterface(s *capnp.Segment) (PathInterface, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathInterface{st}, err
}

func ReadRootPathInterface(msg *capnp.Message) (PathInterface, error) {
	root, err := msg.RootPtr()
	return PathInterface{root.Struct()}, err
}

func (s PathInterface) String() string {
	str, _ := text.Marshal(0x95794035a80b7da1, s.Struct)
	return str
}

func (s PathInterface) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathInterface) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PathInterface) IfID() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathInterface) SetIfID(v uint64) {
	s.Struct.SetUint64(8, v)
}

// PathInterface_List is a list of PathInterface.
type PathInterface_List struct{ capnp.List }

// NewPathInterface creates a new list of PathInterface.
func NewPathInterface_List(s *capnp.Segment, sz int32) (PathInterface_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return PathInterface_List{l}, err
}

func (s PathInterface_List) At(i int) PathInterface { return PathInterface{s.List.Struct(i)} }

func (s PathInterface_List) Set(i int, v PathInterface) error { return s.List.SetStruct(i, v.Struct) }

func (s PathInterface_List) String() string {
	str, _ := text.MarshalList(0x95794035a80b7da1, s.List)
	return str
}

// PathInterface_Promise is a wrapper for a PathInterface promised by a client call.
type PathInterface_Promise struct{ *capnp.Pipeline }

func (p PathInterface_Promise) Struct() (PathInterface, error) {
	s, err := p.Pipeline.Struct()
	return PathInterface{s}, err
}

type ASInfoReq struct{ capnp.Struct }

// ASInfoReq_TypeID is the unique identifier for the type ASInfoReq.
const ASInfoReq_TypeID = 0xcc65a2a89c24e6a5

func NewASInfoReq(s *capnp.Segment) (ASInfoReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ASInfoReq{st}, err
}

func NewRootASInfoReq(s *capnp.Segment) (ASInfoReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ASInfoReq{st}, err
}

func ReadRootASInfoReq(msg *capnp.Message) (ASInfoReq, error) {
	root, err := msg.RootPtr()
	return ASInfoReq{root.Struct()}, err
}

func (s ASInfoReq) String() string {
	str, _ := text.Marshal(0xcc65a2a89c24e6a5, s.Struct)
	return str
}

func (s ASInfoReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASInfoReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ASInfoReq_List is a list of ASInfoReq.
type ASInfoReq_List struct{ capnp.List }

// NewASInfoReq creates a new list of ASInfoReq.
func NewASInfoReq_List(s *capnp.Segment, sz int32) (ASInfoReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ASInfoReq_List{l}, err
}

func (s ASInfoReq_List) At(i int) ASInfoReq { return ASInfoReq{s.List.Struct(i)} }

func (s ASInfoReq_List) Set(i int, v ASInfoReq) error { return s.List.SetStruct(i, v.Struct) }

func (s ASInfoReq_List) String() string {
	str, _ := text.MarshalList(0xcc65a2a89c24e6a5, s.List)
	return str
}

// ASInfoReq_Promise is a wrapper for a ASInfoReq promised by a client call.
type ASInfoReq_Promise struct{ *capnp.Pipeline }

func (p ASInfoReq_Promise) Struct() (ASInfoReq, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReq{s}, err
}

type ASInfoReply struct{ capnp.Struct }

// ASInfoReply_TypeID is the unique identifier for the type ASInfoReply.
const ASInfoReply_TypeID = 0x947e1828e214e89d

func NewASInfoReply(s *capnp.Segment) (ASInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ASInfoReply{st}, err
}

func NewRootASInfoReply(s *capnp.Segment) (ASInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ASInfoReply{st}, err
}

func ReadRootASInfoReply(msg *capnp.Message) (ASInfoReply, error) {
	root, err := msg.RootPtr()
	return ASInfoReply{root.Struct()}, err
}

func (s ASInfoReply) String() string {
	str, _ := text.Marshal(0x947e1828e214e89d, s.Struct)
	return str
}

func (s ASInfoReply) Entries() (ASInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ASInfoReplyEntry_List{List: p.List()}, err
}

func (s ASInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASInfoReply) SetEntries(v ASInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ASInfoReplyEntry_List, preferring placement in s's segment.
func (s ASInfoReply) NewEntries(n int32) (ASInfoReplyEntry_List, error) {
	l, err := NewASInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ASInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ASInfoReply_List is a list of ASInfoReply.
type ASInfoReply_List struct{ capnp.List }

// NewASInfoReply creates a new list of ASInfoReply.
func NewASInfoReply_List(s *capnp.Segment, sz int32) (ASInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ASInfoReply_List{l}, err
}

func (s ASInfoReply_List) At(i int) ASInfoReply { return ASInfoReply{s.List.Struct(i)} }

func (s ASInfoReply_List) Set(i int, v ASInfoReply) error { return s.List.SetStruct(i, v.Struct) }

func (s ASInfoReply_List) String() string {
	str, _ := text.MarshalList(0x947e1828e214e89d, s.List)
	return str
}

// ASInfoReply_Promise is a wrapper for a ASInfoReply promised by a client call.
type ASInfoReply_Promise struct{ *capnp.Pipeline }

func (p ASInfoReply_Promise) Struct() (ASInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReply{s}, err
}

type ASInfoReplyEntry struct{ capnp.Struct }

// ASInfoReplyEntry_TypeID is the unique identifier for the type ASInfoReplyEntry.
const ASInfoReplyEntry_TypeID = 0xfab1a3b4477ab6b3

func NewASInfoReplyEntry(s *capnp.Segment) (ASInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ASInfoReplyEntry{st}, err
}

func NewRootASInfoReplyEntry(s *capnp.Segment) (ASInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ASInfoReplyEntry{st}, err
}

func ReadRootASInfoReplyEntry(msg *capnp.Message) (ASInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return ASInfoReplyEntry{root.Struct()}, err
}

func (s ASInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xfab1a3b4477ab6b3, s.Struct)
	return str
}

func (s ASInfoReplyEntry) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASInfoReplyEntry) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASInfoReplyEntry) Mtu() uint16 {
	return s.Struct.Uint16(8)
}

func (s ASInfoReplyEntry) SetMtu(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s ASInfoReplyEntry) IsCore() bool {
	return s.Struct.Bit(80)
}

func (s ASInfoReplyEntry) SetIsCore(v bool) {
	s.Struct.SetBit(80, v)
}

// ASInfoReplyEntry_List is a list of ASInfoReplyEntry.
type ASInfoReplyEntry_List struct{ capnp.List }

// NewASInfoReplyEntry creates a new list of ASInfoReplyEntry.
func NewASInfoReplyEntry_List(s *capnp.Segment, sz int32) (ASInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return ASInfoReplyEntry_List{l}, err
}

func (s ASInfoReplyEntry_List) At(i int) ASInfoReplyEntry { return ASInfoReplyEntry{s.List.Struct(i)} }

func (s ASInfoReplyEntry_List) Set(i int, v ASInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ASInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xfab1a3b4477ab6b3, s.List)
	return str
}

// ASInfoReplyEntry_Promise is a wrapper for a ASInfoReplyEntry promised by a client call.
type ASInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p ASInfoReplyEntry_Promise) Struct() (ASInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReplyEntry{s}, err
}

type RevNotification struct{ capnp.Struct }

// RevNotification_TypeID is the unique identifier for the type RevNotification.
const RevNotification_TypeID = 0x9b0685a785df42e9

func NewRevNotification(s *capnp.Segment) (RevNotification, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RevNotification{st}, err
}

func NewRootRevNotification(s *capnp.Segment) (RevNotification, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RevNotification{st}, err
}

func ReadRootRevNotification(msg *capnp.Message) (RevNotification, error) {
	root, err := msg.RootPtr()
	return RevNotification{root.Struct()}, err
}

func (s RevNotification) String() string {
	str, _ := text.Marshal(0x9b0685a785df42e9, s.Struct)
	return str
}

func (s RevNotification) SRevInfo() (SignedBlob, error) {
	p, err := s.Struct.Ptr(0)
	return SignedBlob{Struct: p.Struct()}, err
}

func (s RevNotification) HasSRevInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RevNotification) SetSRevInfo(v SignedBlob) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSRevInfo sets the sRevInfo field to a newly
// allocated SignedBlob struct, preferring placement in s's segment.
func (s RevNotification) NewSRevInfo() (SignedBlob, error) {
	ss, err := NewSignedBlob(s.Struct.Segment())
	if err != nil {
		return SignedBlob{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RevNotification_List is a list of RevNotification.
type RevNotification_List struct{ capnp.List }

// NewRevNotification creates a new list of RevNotification.
func NewRevNotification_List(s *capnp.Segment, sz int32) (RevNotification_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RevNotification_List{l}, err
}

func (s RevNotification_List) At(i int) RevNotification { return RevNotification{s.List.Struct(i)} }

func (s RevNotification_List) Set(i int, v RevNotification) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RevNotification_List) String() string {
	str, _ := text.MarshalList(0x9b0685a785df42e9, s.List)
	return str
}

// RevNotification_Promise is a wrapper for a RevNotification promised by a client call.
type RevNotification_Promise struct{ *capnp.Pipeline }

func (p RevNotification_Promise) Struct() (RevNotification, error) {
	s, err := p.Pipeline.Struct()
	return RevNotification{s}, err
}

func (p RevNotification_Promise) SRevInfo() SignedBlob_Promise {
	return SignedBlob_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type RevReply struct{ capnp.Struct }

// RevReply_TypeID is the unique identifier for the type RevReply.
const RevReply_TypeID = 0x8f8172e4469c111a

func NewRevReply(s *capnp.Segment) (RevReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RevReply{st}, err
}

func NewRootRevReply(s *capnp.Segment) (RevReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RevReply{st}, err
}

func ReadRootRevReply(msg *capnp.Message) (RevReply, error) {
	root, err := msg.RootPtr()
	return RevReply{root.Struct()}, err
}

func (s RevReply) String() string {
	str, _ := text.Marshal(0x8f8172e4469c111a, s.Struct)
	return str
}

func (s RevReply) Result() uint16 {
	return s.Struct.Uint16(0)
}

func (s RevReply) SetResult(v uint16) {
	s.Struct.SetUint16(0, v)
}

// RevReply_List is a list of RevReply.
type RevReply_List struct{ capnp.List }

// NewRevReply creates a new list of RevReply.
func NewRevReply_List(s *capnp.Segment, sz int32) (RevReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RevReply_List{l}, err
}

func (s RevReply_List) At(i int) RevReply { return RevReply{s.List.Struct(i)} }

func (s RevReply_List) Set(i int, v RevReply) error { return s.List.SetStruct(i, v.Struct) }

func (s RevReply_List) String() string {
	str, _ := text.MarshalList(0x8f8172e4469c111a, s.List)
	return str
}

// RevReply_Promise is a wrapper for a RevReply promised by a client call.
type RevReply_Promise struct{ *capnp.Pipeline }

func (p RevReply_Promise) Struct() (RevReply, error) {
	s, err := p.Pipeline.Struct()
	return RevReply{s}, err
}

type IFInfoRequest struct{ capnp.Struct }

// IFInfoRequest_TypeID is the unique identifier for the type IFInfoRequest.
const IFInfoRequest_TypeID = 0x877af4eba6adb0f3

func NewIFInfoRequest(s *capnp.Segment) (IFInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoRequest{st}, err
}

func NewRootIFInfoRequest(s *capnp.Segment) (IFInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoRequest{st}, err
}

func ReadRootIFInfoRequest(msg *capnp.Message) (IFInfoRequest, error) {
	root, err := msg.RootPtr()
	return IFInfoRequest{root.Struct()}, err
}

func (s IFInfoRequest) String() string {
	str, _ := text.Marshal(0x877af4eba6adb0f3, s.Struct)
	return str
}

func (s IFInfoRequest) IfIDs() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s IFInfoRequest) HasIfIDs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoRequest) SetIfIDs(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewIfIDs sets the ifIDs field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s IFInfoRequest) NewIfIDs(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFInfoRequest_List is a list of IFInfoRequest.
type IFInfoRequest_List struct{ capnp.List }

// NewIFInfoRequest creates a new list of IFInfoRequest.
func NewIFInfoRequest_List(s *capnp.Segment, sz int32) (IFInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFInfoRequest_List{l}, err
}

func (s IFInfoRequest_List) At(i int) IFInfoRequest { return IFInfoRequest{s.List.Struct(i)} }

func (s IFInfoRequest_List) Set(i int, v IFInfoRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s IFInfoRequest_List) String() string {
	str, _ := text.MarshalList(0x877af4eba6adb0f3, s.List)
	return str
}

// IFInfoRequest_Promise is a wrapper for a IFInfoRequest promised by a client call.
type IFInfoRequest_Promise struct{ *capnp.Pipeline }

func (p IFInfoRequest_Promise) Struct() (IFInfoRequest, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoRequest{s}, err
}

type IFInfoReply struct{ capnp.Struct }

// IFInfoReply_TypeID is the unique identifier for the type IFInfoReply.
const IFInfoReply_TypeID = 0xe7f7d11a5652e06c

func NewIFInfoReply(s *capnp.Segment) (IFInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoReply{st}, err
}

func NewRootIFInfoReply(s *capnp.Segment) (IFInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoReply{st}, err
}

func ReadRootIFInfoReply(msg *capnp.Message) (IFInfoReply, error) {
	root, err := msg.RootPtr()
	return IFInfoReply{root.Struct()}, err
}

func (s IFInfoReply) String() string {
	str, _ := text.Marshal(0xe7f7d11a5652e06c, s.Struct)
	return str
}

func (s IFInfoReply) Entries() (IFInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return IFInfoReplyEntry_List{List: p.List()}, err
}

func (s IFInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoReply) SetEntries(v IFInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated IFInfoReplyEntry_List, preferring placement in s's segment.
func (s IFInfoReply) NewEntries(n int32) (IFInfoReplyEntry_List, error) {
	l, err := NewIFInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return IFInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFInfoReply_List is a list of IFInfoReply.
type IFInfoReply_List struct{ capnp.List }

// NewIFInfoReply creates a new list of IFInfoReply.
func NewIFInfoReply_List(s *capnp.Segment, sz int32) (IFInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFInfoReply_List{l}, err
}

func (s IFInfoReply_List) At(i int) IFInfoReply { return IFInfoReply{s.List.Struct(i)} }

func (s IFInfoReply_List) Set(i int, v IFInfoReply) error { return s.List.SetStruct(i, v.Struct) }

func (s IFInfoReply_List) String() string {
	str, _ := text.MarshalList(0xe7f7d11a5652e06c, s.List)
	return str
}

// IFInfoReply_Promise is a wrapper for a IFInfoReply promised by a client call.
type IFInfoReply_Promise struct{ *capnp.Pipeline }

func (p IFInfoReply_Promise) Struct() (IFInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoReply{s}, err
}

type IFInfoReplyEntry struct{ capnp.Struct }

// IFInfoReplyEntry_TypeID is the unique identifier for the type IFInfoReplyEntry.
const IFInfoReplyEntry_TypeID = 0xf0c5156786d72738

func NewIFInfoReplyEntry(s *capnp.Segment) (IFInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IFInfoReplyEntry{st}, err
}

func NewRootIFInfoReplyEntry(s *capnp.Segment) (IFInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IFInfoReplyEntry{st}, err
}

func ReadRootIFInfoReplyEntry(msg *capnp.Message) (IFInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return IFInfoReplyEntry{root.Struct()}, err
}

func (s IFInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xf0c5156786d72738, s.Struct)
	return str
}

func (s IFInfoReplyEntry) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s IFInfoReplyEntry) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s IFInfoReplyEntry) HostInfo() (HostInfo, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo{Struct: p.Struct()}, err
}

func (s IFInfoReplyEntry) HasHostInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoReplyEntry) SetHostInfo(v HostInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHostInfo sets the hostInfo field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s IFInfoReplyEntry) NewHostInfo() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IFInfoReplyEntry_List is a list of IFInfoReplyEntry.
type IFInfoReplyEntry_List struct{ capnp.List }

// NewIFInfoReplyEntry creates a new list of IFInfoReplyEntry.
func NewIFInfoReplyEntry_List(s *capnp.Segment, sz int32) (IFInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IFInfoReplyEntry_List{l}, err
}

func (s IFInfoReplyEntry_List) At(i int) IFInfoReplyEntry { return IFInfoReplyEntry{s.List.Struct(i)} }

func (s IFInfoReplyEntry_List) Set(i int, v IFInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IFInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xf0c5156786d72738, s.List)
	return str
}

// IFInfoReplyEntry_Promise is a wrapper for a IFInfoReplyEntry promised by a client call.
type IFInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p IFInfoReplyEntry_Promise) Struct() (IFInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoReplyEntry{s}, err
}

func (p IFInfoReplyEntry_Promise) HostInfo() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ServiceInfoRequest struct{ capnp.Struct }

// ServiceInfoRequest_TypeID is the unique identifier for the type ServiceInfoRequest.
const ServiceInfoRequest_TypeID = 0xa94f085c31a03112

func NewServiceInfoRequest(s *capnp.Segment) (ServiceInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoRequest{st}, err
}

func NewRootServiceInfoRequest(s *capnp.Segment) (ServiceInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoRequest{st}, err
}

func ReadRootServiceInfoRequest(msg *capnp.Message) (ServiceInfoRequest, error) {
	root, err := msg.RootPtr()
	return ServiceInfoRequest{root.Struct()}, err
}

func (s ServiceInfoRequest) String() string {
	str, _ := text.Marshal(0xa94f085c31a03112, s.Struct)
	return str
}

func (s ServiceInfoRequest) ServiceTypes() (ServiceType_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceType_List{List: p.List()}, err
}

func (s ServiceInfoRequest) HasServiceTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoRequest) SetServiceTypes(v ServiceType_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewServiceTypes sets the serviceTypes field to a newly
// allocated ServiceType_List, preferring placement in s's segment.
func (s ServiceInfoRequest) NewServiceTypes(n int32) (ServiceType_List, error) {
	l, err := NewServiceType_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceType_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoRequest_List is a list of ServiceInfoRequest.
type ServiceInfoRequest_List struct{ capnp.List }

// NewServiceInfoRequest creates a new list of ServiceInfoRequest.
func NewServiceInfoRequest_List(s *capnp.Segment, sz int32) (ServiceInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ServiceInfoRequest_List{l}, err
}

func (s ServiceInfoRequest_List) At(i int) ServiceInfoRequest {
	return ServiceInfoRequest{s.List.Struct(i)}
}

func (s ServiceInfoRequest_List) Set(i int, v ServiceInfoRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoRequest_List) String() string {
	str, _ := text.MarshalList(0xa94f085c31a03112, s.List)
	return str
}

// ServiceInfoRequest_Promise is a wrapper for a ServiceInfoRequest promised by a client call.
type ServiceInfoRequest_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoRequest_Promise) Struct() (ServiceInfoRequest, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoRequest{s}, err
}

type ServiceInfoReply struct{ capnp.Struct }

// ServiceInfoReply_TypeID is the unique identifier for the type ServiceInfoReply.
const ServiceInfoReply_TypeID = 0xf7a6d78ba978beb9

func NewServiceInfoReply(s *capnp.Segment) (ServiceInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoReply{st}, err
}

func NewRootServiceInfoReply(s *capnp.Segment) (ServiceInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoReply{st}, err
}

func ReadRootServiceInfoReply(msg *capnp.Message) (ServiceInfoReply, error) {
	root, err := msg.RootPtr()
	return ServiceInfoReply{root.Struct()}, err
}

func (s ServiceInfoReply) String() string {
	str, _ := text.Marshal(0xf7a6d78ba978beb9, s.Struct)
	return str
}

func (s ServiceInfoReply) Entries() (ServiceInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceInfoReplyEntry_List{List: p.List()}, err
}

func (s ServiceInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoReply) SetEntries(v ServiceInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ServiceInfoReplyEntry_List, preferring placement in s's segment.
func (s ServiceInfoReply) NewEntries(n int32) (ServiceInfoReplyEntry_List, error) {
	l, err := NewServiceInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoReply_List is a list of ServiceInfoReply.
type ServiceInfoReply_List struct{ capnp.List }

// NewServiceInfoReply creates a new list of ServiceInfoReply.
func NewServiceInfoReply_List(s *capnp.Segment, sz int32) (ServiceInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ServiceInfoReply_List{l}, err
}

func (s ServiceInfoReply_List) At(i int) ServiceInfoReply { return ServiceInfoReply{s.List.Struct(i)} }

func (s ServiceInfoReply_List) Set(i int, v ServiceInfoReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoReply_List) String() string {
	str, _ := text.MarshalList(0xf7a6d78ba978beb9, s.List)
	return str
}

// ServiceInfoReply_Promise is a wrapper for a ServiceInfoReply promised by a client call.
type ServiceInfoReply_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoReply_Promise) Struct() (ServiceInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoReply{s}, err
}

type ServiceInfoReplyEntry struct{ capnp.Struct }

// ServiceInfoReplyEntry_TypeID is the unique identifier for the type ServiceInfoReplyEntry.
const ServiceInfoReplyEntry_TypeID = 0xe7279389a6bbe1dc

func NewServiceInfoReplyEntry(s *capnp.Segment) (ServiceInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfoReplyEntry{st}, err
}

func NewRootServiceInfoReplyEntry(s *capnp.Segment) (ServiceInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfoReplyEntry{st}, err
}

func ReadRootServiceInfoReplyEntry(msg *capnp.Message) (ServiceInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return ServiceInfoReplyEntry{root.Struct()}, err
}

func (s ServiceInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xe7279389a6bbe1dc, s.Struct)
	return str
}

func (s ServiceInfoReplyEntry) ServiceType() ServiceType {
	return ServiceType(s.Struct.Uint16(0))
}

func (s ServiceInfoReplyEntry) SetServiceType(v ServiceType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s ServiceInfoReplyEntry) Ttl() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfoReplyEntry) SetTtl(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s ServiceInfoReplyEntry) HostInfos() (HostInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo_List{List: p.List()}, err
}

func (s ServiceInfoReplyEntry) HasHostInfos() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoReplyEntry) SetHostInfos(v HostInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHostInfos sets the hostInfos field to a newly
// allocated HostInfo_List, preferring placement in s's segment.
func (s ServiceInfoReplyEntry) NewHostInfos(n int32) (HostInfo_List, error) {
	l, err := NewHostInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return HostInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoReplyEntry_List is a list of ServiceInfoReplyEntry.
type ServiceInfoReplyEntry_List struct{ capnp.List }

// NewServiceInfoReplyEntry creates a new list of ServiceInfoReplyEntry.
func NewServiceInfoReplyEntry_List(s *capnp.Segment, sz int32) (ServiceInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfoReplyEntry_List{l}, err
}

func (s ServiceInfoReplyEntry_List) At(i int) ServiceInfoReplyEntry {
	return ServiceInfoReplyEntry{s.List.Struct(i)}
}

func (s ServiceInfoReplyEntry_List) Set(i int, v ServiceInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xe7279389a6bbe1dc, s.List)
	return str
}

// ServiceInfoReplyEntry_Promise is a wrapper for a ServiceInfoReplyEntry promised by a client call.
type ServiceInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoReplyEntry_Promise) Struct() (ServiceInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoReplyEntry{s}, err
}

type SegTypeHopReq struct{ capnp.Struct }

// SegTypeHopReq_TypeID is the unique identifier for the type SegTypeHopReq.
const SegTypeHopReq_TypeID = 0xca1e844241cf650f

func NewSegTypeHopReq(s *capnp.Segment) (SegTypeHopReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegTypeHopReq{st}, err
}

func NewRootSegTypeHopReq(s *capnp.Segment) (SegTypeHopReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegTypeHopReq{st}, err
}

func ReadRootSegTypeHopReq(msg *capnp.Message) (SegTypeHopReq, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReq{root.Struct()}, err
}

func (s SegTypeHopReq) String() string {
	str, _ := text.Marshal(0xca1e844241cf650f, s.Struct)
	return str
}

func (s SegTypeHopReq) Type() PathSegType {
	return PathSegType(s.Struct.Uint16(0))
}

func (s SegTypeHopReq) SetType(v PathSegType) {
	s.Struct.SetUint16(0, uint16(v))
}

// SegTypeHopReq_List is a list of SegTypeHopReq.
type SegTypeHopReq_List struct{ capnp.List }

// NewSegTypeHopReq creates a new list of SegTypeHopReq.
func NewSegTypeHopReq_List(s *capnp.Segment, sz int32) (SegTypeHopReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return SegTypeHopReq_List{l}, err
}

func (s SegTypeHopReq_List) At(i int) SegTypeHopReq { return SegTypeHopReq{s.List.Struct(i)} }

func (s SegTypeHopReq_List) Set(i int, v SegTypeHopReq) error { return s.List.SetStruct(i, v.Struct) }

func (s SegTypeHopReq_List) String() string {
	str, _ := text.MarshalList(0xca1e844241cf650f, s.List)
	return str
}

// SegTypeHopReq_Promise is a wrapper for a SegTypeHopReq promised by a client call.
type SegTypeHopReq_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReq_Promise) Struct() (SegTypeHopReq, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReq{s}, err
}

type SegTypeHopReply struct{ capnp.Struct }

// SegTypeHopReply_TypeID is the unique identifier for the type SegTypeHopReply.
const SegTypeHopReply_TypeID = 0xc340ede57616f2e8

func NewSegTypeHopReply(s *capnp.Segment) (SegTypeHopReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegTypeHopReply{st}, err
}

func NewRootSegTypeHopReply(s *capnp.Segment) (SegTypeHopReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegTypeHopReply{st}, err
}

func ReadRootSegTypeHopReply(msg *capnp.Message) (SegTypeHopReply, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReply{root.Struct()}, err
}

func (s SegTypeHopReply) String() string {
	str, _ := text.Marshal(0xc340ede57616f2e8, s.Struct)
	return str
}

func (s SegTypeHopReply) Entries() (SegTypeHopReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReplyEntry_List{List: p.List()}, err
}

func (s SegTypeHopReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegTypeHopReply) SetEntries(v SegTypeHopReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated SegTypeHopReplyEntry_List, preferring placement in s's segment.
func (s SegTypeHopReply) NewEntries(n int32) (SegTypeHopReplyEntry_List, error) {
	l, err := NewSegTypeHopReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return SegTypeHopReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SegTypeHopReply_List is a list of SegTypeHopReply.
type SegTypeHopReply_List struct{ capnp.List }

// NewSegTypeHopReply creates a new list of SegTypeHopReply.
func NewSegTypeHopReply_List(s *capnp.Segment, sz int32) (SegTypeHopReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegTypeHopReply_List{l}, err
}

func (s SegTypeHopReply_List) At(i int) SegTypeHopReply { return SegTypeHopReply{s.List.Struct(i)} }

func (s SegTypeHopReply_List) Set(i int, v SegTypeHopReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegTypeHopReply_List) String() string {
	str, _ := text.MarshalList(0xc340ede57616f2e8, s.List)
	return str
}

// SegTypeHopReply_Promise is a wrapper for a SegTypeHopReply promised by a client call.
type SegTypeHopReply_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReply_Promise) Struct() (SegTypeHopReply, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReply{s}, err
}

type SegTypeHopReplyEntry struct{ capnp.Struct }

// SegTypeHopReplyEntry_TypeID is the unique identifier for the type SegTypeHopReplyEntry.
const SegTypeHopReplyEntry_TypeID = 0xacf8185a51a9f1b4

func NewSegTypeHopReplyEntry(s *capnp.Segment) (SegTypeHopReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegTypeHopReplyEntry{st}, err
}

func NewRootSegTypeHopReplyEntry(s *capnp.Segment) (SegTypeHopReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegTypeHopReplyEntry{st}, err
}

func ReadRootSegTypeHopReplyEntry(msg *capnp.Message) (SegTypeHopReplyEntry, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReplyEntry{root.Struct()}, err
}

func (s SegTypeHopReplyEntry) String() string {
	str, _ := text.Marshal(0xacf8185a51a9f1b4, s.Struct)
	return str
}

func (s SegTypeHopReplyEntry) Interfaces() (PathInterface_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathInterface_List{List: p.List()}, err
}

func (s SegTypeHopReplyEntry) HasInterfaces() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegTypeHopReplyEntry) SetInterfaces(v PathInterface_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInterfaces sets the interfaces field to a newly
// allocated PathInterface_List, preferring placement in s's segment.
func (s SegTypeHopReplyEntry) NewInterfaces(n int32) (PathInterface_List, error) {
	l, err := NewPathInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return PathInterface_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SegTypeHopReplyEntry) Timestamp() uint32 {
	return s.Struct.Uint32(0)
}

func (s SegTypeHopReplyEntry) SetTimestamp(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SegTypeHopReplyEntry) ExpTime() uint32 {
	return s.Struct.Uint32(4)
}

func (s SegTypeHopReplyEntry) SetExpTime(v uint32) {
	s.Struct.SetUint32(4, v)
}

// SegTypeHopReplyEntry_List is a list of SegTypeHopReplyEntry.
type SegTypeHopReplyEntry_List struct{ capnp.List }

// NewSegTypeHopReplyEntry creates a new list of SegTypeHopReplyEntry.
func NewSegTypeHopReplyEntry_List(s *capnp.Segment, sz int32) (SegTypeHopReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegTypeHopReplyEntry_List{l}, err
}

func (s SegTypeHopReplyEntry_List) At(i int) SegTypeHopReplyEntry {
	return SegTypeHopReplyEntry{s.List.Struct(i)}
}

func (s SegTypeHopReplyEntry_List) Set(i int, v SegTypeHopReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegTypeHopReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xacf8185a51a9f1b4, s.List)
	return str
}

// SegTypeHopReplyEntry_Promise is a wrapper for a SegTypeHopReplyEntry promised by a client call.
type SegTypeHopReplyEntry_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReplyEntry_Promise) Struct() (SegTypeHopReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReplyEntry{s}, err
}

const schema_8f4bd412642c9517 = "x\xda\x94W}pT\xe5\xf5>\xe7\xbdI6\x81\xec" +
	"owyo\xccf\xf3\xf5\x93\x81B\x18CM\xd4\x96" +
	"a\xa6\x06\x02\xc4\xacm4w7\xf6\x0fG\xa7\xae\xd9" +
	"\xbb\xc9v6\xd9\xe5\xde\x9b\x90u\xa4\x91N\xd2Z\xaa" +
	"#\x8e2\xed\x14\x9c\xfaQ)\xb4:ZJ\x1d\xa5\xad" +
	"3\x1d\xa1\x1dSmeF\xc6\x9a\xa1U\xa8\x91\x0f\xcb" +
	"LAZ\x84\x96\xde\xce\xb9\xdf\xdc\\\xd0\xc2?\xef\xe6" +
	"9{\xde\xf3\xf5<\xe7\xdd\xeb\x7f_\xbd\x86uT~" +
	"\xfes\x00\xe9_ae\x95\xfe\xf1\x8b\xcf\xef\xfa\xe8\xdc" +
	"}\xdf\x86X\x18\xf5\xfa\xed\xd7e\x17\xbd\xfd\xe5G\xa0" +
	"\x12C\x00\xfc\xd2\xa2Y^\xc3\xe9T\xc9\xbb\x00\xf5s" +
	"\xb3\x17\xbe\xf6\xea\xcc{[A\x0a\xa3\xd7\x98\x91\xc9M" +
	"|\x86\xaf5\x8c\xbf\xc4\x8f\x03\xea\x89\xd8\xce\x9e\x0f\x94" +
	"-\x8f\xf8\x8c+\xc8b\xa9\xb8\x97\xb7\x8btj\x13\xc9" +
	"q\xcfk=\x93\xfbv\x9cz\x94l\x99k\xbb\x01C" +
	"a\xac\xe0Iq?\x97\xc8\xfa\x86>\xb1^\x00\xd4\x9f" +
	"8!\x1e[\x1e\xff\xc6\xe3A1?_?\xc3_\xa9" +
	"\xa7\xd3/\xea\xc9\xf5S\x9b\x17\xee\xbeiMy\xbb\xcf" +
	"\xb5\x11\xc6\\\xfd,?c\xd8\x9e\xae\xdf\x04\xa8\x9f\xec" +
	"~o\xfa\xc7\xd3U;\x82\xfc&\xe3\xa7\xf8\x1dq:" +
	"Iq\xf2;\xfb\xee\xd6\x13G+\xff\xb0\x03\xa4:\x14" +
	"\xf4\x8f\x9e9p\xa4\xa3\xee\xb7\x07\xa0\x0eC\x08\xc0\xc7" +
	"\xe2\xb3\x80\xbc\x1c'\xaf\x8b:\x9e\xec\xb8\xab\xfa\xf6=" +
	"\x01^o8\x1cg\xc8\x8f\x1an\xffl\xb8\xddwf" +
	"\x8ftg\xfc\x93\xe7\xfc%6\xacc\x0d\x8b\x90_\xdb" +
	"@\xd6\xcd\x0d/\x00\xea\xff\xbf\xf4\xb1M\x95\xcb\x12{" +
	"\x03\x1b\xf2f\xc3^~\xd80>\xd4@q\x9c8{" +
	"\xcd\xf8\xdc\xe95\xaf\x05e\x17K\x9c\xe2\xcd\x09:5" +
	"$(\x0c'\x1f)\x8c\xc2\xbcR$~\xc2\xa5\x84\xd1" +
	"\x8fD+\x02\xea\x7f\x1b\xff^i`\xa5~\xd0\xe7\xd9" +
	"\x88\xe2\x8e\xc6c<\xd3H\xa7\xbb\x1b)\x8a\x88\xfc\xc7" +
	"\xb5\xddS-3Ac\xf1\xeb\xc6Y\xfe\xbaa{\xb0" +
	"\x91\xa2x\xf6\xc3%;w?-\xbf\x11d;\xd7\xb8" +
	"\x9f\x9f6lO\x1a\xb6G\x8e\xfer\xd7w\x1e[v" +
	"<\xb0p5M\x09\xe4\x0dMd]\xd7D\x85+\xbc" +
	"\x9f\xfaj\xe2\xd0\xf9\xe3A\xb58\xd84\xc3\x0f\x19\xb6" +
	"o6\x91\xe7U\xcb\xde\xf9\xd6P\xdd\xc1\xbf\x07y\xe6" +
	"\x97\x9a\xce\xf2\x9af\x83\"\xcd\x94^\xd7\x877\xb7\xbd" +
	"t2r&\xd0Xn\xde\xcfG\x0c\xe3\xbca\xfc\xca" +
	"\xab\x13{\xbe\xfb\xce\xae\xf3AQ\xbc\xdb|\x96\xcf\x19" +
	"\xb6G\x9b)\x8a\xda\xc4_~:\xb4t\xee\x02H\xd7" +
	"\xa0\xa7\xf1u\xcc\x98\xb7X\xcb1@^\xd7B^\x7f" +
	"\xfe\xd2}\xb7\xec{\xe6g\x17\x83&~c\xcbY\xbe" +
	"\xb9\x85N\xe5\x96\x17@7\xfe\xbf\xae\xab\x83\xf9\xe2h" +
	"v\xe5 \xcb\x94FK\xab\x93=\xc9\xd1\\1%o" +
	"\x1c\x93\x05U\xebG\x94*\x84\x0a\x80\x0a\x04\x88\x85;" +
	"\x01\xa4j\x01\xa5%\x0c[\xf3\xb9\xe4z\x15\xff\x0f\xb0" +
	"_@\xac\x01FG\x9f\xaf\x9eM\xd9\xfe\x8c6\xdc'" +
	"k\x19\x00r\x15u\\e\xba\x01\xa4\xbb\x04\x94\x86\x19" +
	"\"\x8aH\x7f\x93\x17\x03H\xf7\x08(\x15\x18\xc6\x18\x8a" +
	"\xc8\x00b\xf9;\x01\xa4a\x01\xa5)\x861\x01E\x14" +
	"\x00b[\xe8\xdb\xf7\x0b(=\xc8p2g\xde\x82a" +
	"`\x18\x06\x0c\x8dhc\x18\x02\x86!@=?\xaa\xc9" +
	"J.3\x08\x82\xec\xc4\x1auU\x01\x90\xfe8)O" +
	"\x94\x06\xf2#2V\x03\xc3jO\x16hd\x91\x92\xc7" +
	"[Sr\xa9P\xf6\x15c\xb5U\x0c\x91a\x97\"\xab" +
	"c\x05\xcd\xb9\xf6r\x07\xe9u\xc9\xae\xdbo[\xdf\xa7" +
	"\x0e\x91\x87U\xb6\x07^\xc6\x04@ZC\x01\xd3\x0f " +
	"\xc30\xea\xbaQ\x08\xbe\x19;\x01\xd2\x13\x04L\x11\xc0" +
	"\xfe\xa3\x1b\xc5\xe0[\xb0\x1b }?\x01\x0f\x12 \\" +
	"\xd2\x8d\x82\xf0iL\x01\xa4\xa7\x08\xd8F@\xc5\xbfu" +
	"\x11+\x00\xf8\xc3\x06\xf0\x10\x01\xdf'\xa0\xf2_\xba\x88" +
	"\x95\x00|;\xde\x0b\x90~\x9c\x80'\x09\xa8\xba\xa8\x8b" +
	"X\x05\xc0\x9f\xc0o\x02\xa4w\x12\xb0\x9b\x80\xd0\x05]" +
	"4f\xf2YT\x00\xd2?\"\xe0E\x02\xaa?\xd1E" +
	"\xac&\xd15\\=G\xc0\xcb\x04\xd4\x9c\xd7E\xac!" +
	"\x0d\xc6\x1f\x00\xa4_&\xe0\x00\x01\x0b\xfe\xa9\x8b\xb8\x00" +
	"\x80\xff\x06\xb7\x02\xa4\x0f\x10\xf0\x16\x01\x0b\xff\xa1\x8b\xb8" +
	"\x908\x87\xb7\x02\xa4\xdf \xe0O\x04\xd4\x9e\xd3E\xac" +
	"\x05\xe0\x87\x8d\xcb\xdf&\xe0}\x02\xc2\x1f\xeb\"\x86I" +
	"8\x8dp\x8f\x10p\x02\x19\x0a\xf9\xac1\x8c5\x80\xad" +
	"c\xa3\xaa\xacA\xd5d)\xa3\x0d\xa7\xe4\x8d\x18u\x85" +
	"\x0d\x10\xa3\x80\xba\x89\x94\x0a\x80e\x8c\xba\xec\xb5\xd0\x8c" +
	"jR\x01\x90\xbe\xeb\xc8\x91\x1f\x0d\x95\x0a\xf4mg-" +
	"Y\xb8\"\x8f\xdfV\xd4\xf29\xcc\x0ff\xb4|q\x14" +
	"0\xea\xae\x18\xcb&\x9f\xb3|\xb4n\x1c\x93U\x0d\xa3" +
	"\xeeB\xf6[X\xb78\xd2e\xe1\xaa\xac\x8c\xe7\x07\xe5" +
	"$zH\x8bQw\xeb\x04\x9a\x95\x0ae\xa0p\x1c\x05" +
	"rC\xb6@B\x9d\x15\xee\xf8\x18\x1a(\x97\xe4^h" +
	"-\x96\xccr:j\xee\xb3@2 ?\x18u\xf7\x8e" +
	"ms\x99B\xacM'\xdd\x88|\xfc\xeav\xc5fR" +
	"\x1e\xd5\x94\xbc\x97\xc2\x8e\xcc\x99\x14\xf6\xb9%=H\x9a" +
	"\xd4\x17\x06e\xf2[\xed\xf8m#\x11[\"\xa0t=" +
	"\xc3\x98-=\xed+\x00\xa4\xe5\x02J7\x92\xb2\xa9\xd9" +
	"\x8cjOQ\x84t\xce\xfe\xe0\xbb&e\xb58?\x98" +
	"\x89P\x8b}\x09\xdc\x0a \xd5\x0a(\xc5\x19\xeajJ" +
	"\x1e\xa7T\xcd\xd2\xa6\xfez\xf1\x8b\xd3\xb7t\xfe0\xb8" +
	"(\xfd\xe6\xbc\xae\xcc\x152\xc2\x90J\xa1G\xb7\x99\xba" +
	"\xd7\xd6\xed\x8d\xfdQ\x83\xe2\xb1\xf6\xd5n\xec\x93\x8a\x9c" +
	"Sdu\x18\x11\x18\"`\xd7p>\x9b\x95G\xed\x8f" +
	"\xceE\x82)L\xd6T\xd8\xb3\xa3j\xfe\x1e|\xddJ" +
	"a9sfh\x00\"\xe5\x92\xdb\x8a\x88\xae\x0d\xbd\xd5" +
	"\xd8\xd6\x9e:\xe6o\x85}\x879\x13\xd6Hl\x18\xd5" +
	"\x144\x94\xb4\xd6\xb9e\x03I\xfcz\x01\xa5{\xdc]" +
	"pw\xca\xdd\x0f\xce.\x90\xbb\xdd\x05\xf1\xd9\xa4]\xd7" +
	"\xf2#\xb2\xaaeF\x00K\xb6\xbc\x7f\x8a\xdc\xf7\x16\xd5" +
	"V\x8dJ\xe2\x1b\x9b\x15n\xe9\xe9\x9f\xbb\x92c\xed\x9d" +
	"\xc0\"\xa5\xa2\xe2\xe8\x7fk&\x9bUT_W=\x85" +
	"\x88\x04l\x93\xabN\xbb\xf3.\xf4\x95\x18\xedy\x89\xd0" +
	"\xc0\x90G\xd1\xf1\xb8\x99\xb6\xe9\x84\xb58\xed\xb2nY" +
	"\xec.\xce\x18\xab6\xcb:M\x83:%\xa0\xb4\x8d!" +
	"\x0a\xe8y\xdd\xc6\x1e\xee\x04\x86\x15\xc6\xc6\x88\x8d\xd1\x9c" +
	"\x95\x04\x94\x1eb\x18\xca\xaa\x9aM\x8a\x90\xaa\x0c:\x04" +
	"\x19\xc9L\xd0\xf8\xaa4\xe7v5r\x85\xcc\x90\xda5" +
	"\\Z\x97\x1b\xf2\xe4\x14\xdf\xf0\xc1\xcd\xfcw\xd7\xee\xbf" +
	"2\x83\xad\x81\x09iJ\xf9\xca\xbdp)LY\\'" +
	"\xa0\xb4\x8aa\x84\x84\x1d\xa3\xeeO\x16\x8bg\xc3EU" +
	"sY\xe8<\xa3\x02Y\xe8\xe9\x97`\xd6\xd6\xd3\xad\x15" +
	"\xee\xee\x8fh\xe5\x92\x8c\x11\xfd\x81UO/\x90\xf7\x9c" +
	"\x7f\x8a\xbcE\xe6\xf5hm:\xd9e\xd2\xec\x0aO*" +
	"\xd1/<W\xe3\xaaI$A\xf1\x13\xe9^\x8bH\xfd" +
	"\x9e\xba\xf4Q\xcb{\x05\x94\x06\x18\"3;.\x11\xbb" +
	"\xfa-\"9\xbc\x0e\x99\x89x\xf9\x1c\x01\x0ciZ\xc1" +
	"\xa1\x8aS@\xf4t\xd2[\xc7\xf9\x9d\xb4\x1f\x94\xff\xb3" +
	"\xc4;/\xefOs\xdbJ\xa2R\xbe\x1a]\x03&\xe4" +
	"2Y\xffls\xe1\xb0\xadk\xd8y\x0fznL\xb9" +
	"2l\xdf\xd8\xd1m\xdd\xd8\xcbP\x97\x15\xa5\xa8\xac+" +
	"f\x01e\x9b\x1a\xf3\x93v~L\x05&\xed\x19\x82\xc0" +
	"'\xe9U\xeb\xe9\xfcF\x0at\xddk\x95`e&\x1b" +
	"\xca*\xaa\x99\x98\x99\xc5<\xba1\xdf\xc6\x8c\xe4K\xe3" +
	"7\xda\xefo\xfa\xf0\x05\xfb\xc3\x95\xd7\xbd\xdb4\xcf\xfc" +
	"\x12\x19\xd6\x08(}\x85.\xaa0oO.\xf6\x0c5" +
	"\xeb7o\xef[\xed\x0e\xf5\xe5\xb4\xf1>\xff\xbb\xf2\xea" +
	"\xba\xa2\"\xdb\xdb\xef\xbf\x01\x00\x00\xff\xffV\xae:\xc8"

func init() {
	schemas.Register(schema_8f4bd412642c9517,
		0x877af4eba6adb0f3,
		0x8adfcabe5ff9daf4,
		0x8f8172e4469c111a,
		0x91ea9bb47f46c346,
		0x947e1828e214e89d,
		0x95794035a80b7da1,
		0x9b0685a785df42e9,
		0x9bce05e1e88ad9da,
		0xa94f085c31a03112,
		0xacf8185a51a9f1b4,
		0xb21a270577932520,
		0xc340ede57616f2e8,
		0xc4c61531dcc4a3eb,
		0xc5ff2e54709776ec,
		0xca1e844241cf650f,
		0xcc65a2a89c24e6a5,
		0xe7279389a6bbe1dc,
		0xe7f7d11a5652e06c,
		0xf0c5156786d72738,
		0xf10fe9b6293ee63f,
		0xf7a6d78ba978beb9,
		0xf9e52567abde1a0c,
		0xfab1a3b4477ab6b3)
}
