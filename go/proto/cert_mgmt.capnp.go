// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type CertChainReq struct{ capnp.Struct }

// CertChainReq_TypeID is the unique identifier for the type CertChainReq.
const CertChainReq_TypeID = 0xc464d1e0777e54d3

func NewCertChainReq(s *capnp.Segment) (CertChainReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return CertChainReq{st}, err
}

func NewRootCertChainReq(s *capnp.Segment) (CertChainReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return CertChainReq{st}, err
}

func ReadRootCertChainReq(msg *capnp.Message) (CertChainReq, error) {
	root, err := msg.RootPtr()
	return CertChainReq{root.Struct()}, err
}

func (s CertChainReq) String() string {
	str, _ := text.Marshal(0xc464d1e0777e54d3, s.Struct)
	return str
}

func (s CertChainReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s CertChainReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s CertChainReq) Version() uint64 {
	return s.Struct.Uint64(8)
}

func (s CertChainReq) SetVersion(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CertChainReq) CacheOnly() bool {
	return s.Struct.Bit(128)
}

func (s CertChainReq) SetCacheOnly(v bool) {
	s.Struct.SetBit(128, v)
}

// CertChainReq_List is a list of CertChainReq.
type CertChainReq_List struct{ capnp.List }

// NewCertChainReq creates a new list of CertChainReq.
func NewCertChainReq_List(s *capnp.Segment, sz int32) (CertChainReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return CertChainReq_List{l}, err
}

func (s CertChainReq_List) At(i int) CertChainReq { return CertChainReq{s.List.Struct(i)} }

func (s CertChainReq_List) Set(i int, v CertChainReq) error { return s.List.SetStruct(i, v.Struct) }

func (s CertChainReq_List) String() string {
	str, _ := text.MarshalList(0xc464d1e0777e54d3, s.List)
	return str
}

// CertChainReq_Promise is a wrapper for a CertChainReq promised by a client call.
type CertChainReq_Promise struct{ *capnp.Pipeline }

func (p CertChainReq_Promise) Struct() (CertChainReq, error) {
	s, err := p.Pipeline.Struct()
	return CertChainReq{s}, err
}

type CertChain struct{ capnp.Struct }

// CertChain_TypeID is the unique identifier for the type CertChain.
const CertChain_TypeID = 0xadadc71f7e190917

func NewCertChain(s *capnp.Segment) (CertChain, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChain{st}, err
}

func NewRootCertChain(s *capnp.Segment) (CertChain, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChain{st}, err
}

func ReadRootCertChain(msg *capnp.Message) (CertChain, error) {
	root, err := msg.RootPtr()
	return CertChain{root.Struct()}, err
}

func (s CertChain) String() string {
	str, _ := text.Marshal(0xadadc71f7e190917, s.Struct)
	return str
}

func (s CertChain) Chain() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChain) HasChain() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChain) SetChain(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertChain_List is a list of CertChain.
type CertChain_List struct{ capnp.List }

// NewCertChain creates a new list of CertChain.
func NewCertChain_List(s *capnp.Segment, sz int32) (CertChain_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CertChain_List{l}, err
}

func (s CertChain_List) At(i int) CertChain { return CertChain{s.List.Struct(i)} }

func (s CertChain_List) Set(i int, v CertChain) error { return s.List.SetStruct(i, v.Struct) }

func (s CertChain_List) String() string {
	str, _ := text.MarshalList(0xadadc71f7e190917, s.List)
	return str
}

// CertChain_Promise is a wrapper for a CertChain promised by a client call.
type CertChain_Promise struct{ *capnp.Pipeline }

func (p CertChain_Promise) Struct() (CertChain, error) {
	s, err := p.Pipeline.Struct()
	return CertChain{s}, err
}

type CertChainIssReq struct{ capnp.Struct }

// CertChainIssReq_TypeID is the unique identifier for the type CertChainIssReq.
const CertChainIssReq_TypeID = 0xb2de94224c009676

func NewCertChainIssReq(s *capnp.Segment) (CertChainIssReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssReq{st}, err
}

func NewRootCertChainIssReq(s *capnp.Segment) (CertChainIssReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssReq{st}, err
}

func ReadRootCertChainIssReq(msg *capnp.Message) (CertChainIssReq, error) {
	root, err := msg.RootPtr()
	return CertChainIssReq{root.Struct()}, err
}

func (s CertChainIssReq) String() string {
	str, _ := text.Marshal(0xb2de94224c009676, s.Struct)
	return str
}

func (s CertChainIssReq) Cert() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChainIssReq) HasCert() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChainIssReq) SetCert(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertChainIssReq_List is a list of CertChainIssReq.
type CertChainIssReq_List struct{ capnp.List }

// NewCertChainIssReq creates a new list of CertChainIssReq.
func NewCertChainIssReq_List(s *capnp.Segment, sz int32) (CertChainIssReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CertChainIssReq_List{l}, err
}

func (s CertChainIssReq_List) At(i int) CertChainIssReq { return CertChainIssReq{s.List.Struct(i)} }

func (s CertChainIssReq_List) Set(i int, v CertChainIssReq) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CertChainIssReq_List) String() string {
	str, _ := text.MarshalList(0xb2de94224c009676, s.List)
	return str
}

// CertChainIssReq_Promise is a wrapper for a CertChainIssReq promised by a client call.
type CertChainIssReq_Promise struct{ *capnp.Pipeline }

func (p CertChainIssReq_Promise) Struct() (CertChainIssReq, error) {
	s, err := p.Pipeline.Struct()
	return CertChainIssReq{s}, err
}

type CertChainIssRep struct{ capnp.Struct }

// CertChainIssRep_TypeID is the unique identifier for the type CertChainIssRep.
const CertChainIssRep_TypeID = 0xc95b16276878cfc1

func NewCertChainIssRep(s *capnp.Segment) (CertChainIssRep, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssRep{st}, err
}

func NewRootCertChainIssRep(s *capnp.Segment) (CertChainIssRep, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssRep{st}, err
}

func ReadRootCertChainIssRep(msg *capnp.Message) (CertChainIssRep, error) {
	root, err := msg.RootPtr()
	return CertChainIssRep{root.Struct()}, err
}

func (s CertChainIssRep) String() string {
	str, _ := text.Marshal(0xc95b16276878cfc1, s.Struct)
	return str
}

func (s CertChainIssRep) Chain() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChainIssRep) HasChain() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChainIssRep) SetChain(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertChainIssRep_List is a list of CertChainIssRep.
type CertChainIssRep_List struct{ capnp.List }

// NewCertChainIssRep creates a new list of CertChainIssRep.
func NewCertChainIssRep_List(s *capnp.Segment, sz int32) (CertChainIssRep_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CertChainIssRep_List{l}, err
}

func (s CertChainIssRep_List) At(i int) CertChainIssRep { return CertChainIssRep{s.List.Struct(i)} }

func (s CertChainIssRep_List) Set(i int, v CertChainIssRep) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CertChainIssRep_List) String() string {
	str, _ := text.MarshalList(0xc95b16276878cfc1, s.List)
	return str
}

// CertChainIssRep_Promise is a wrapper for a CertChainIssRep promised by a client call.
type CertChainIssRep_Promise struct{ *capnp.Pipeline }

func (p CertChainIssRep_Promise) Struct() (CertChainIssRep, error) {
	s, err := p.Pipeline.Struct()
	return CertChainIssRep{s}, err
}

type TRCReq struct{ capnp.Struct }

// TRCReq_TypeID is the unique identifier for the type TRCReq.
const TRCReq_TypeID = 0xd4c43f7ac10a9dbc

func NewTRCReq(s *capnp.Segment) (TRCReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TRCReq{st}, err
}

func NewRootTRCReq(s *capnp.Segment) (TRCReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TRCReq{st}, err
}

func ReadRootTRCReq(msg *capnp.Message) (TRCReq, error) {
	root, err := msg.RootPtr()
	return TRCReq{root.Struct()}, err
}

func (s TRCReq) String() string {
	str, _ := text.Marshal(0xd4c43f7ac10a9dbc, s.Struct)
	return str
}

func (s TRCReq) Isd() uint16 {
	return s.Struct.Uint16(0)
}

func (s TRCReq) SetIsd(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s TRCReq) Version() uint64 {
	return s.Struct.Uint64(8)
}

func (s TRCReq) SetVersion(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TRCReq) CacheOnly() bool {
	return s.Struct.Bit(16)
}

func (s TRCReq) SetCacheOnly(v bool) {
	s.Struct.SetBit(16, v)
}

// TRCReq_List is a list of TRCReq.
type TRCReq_List struct{ capnp.List }

// NewTRCReq creates a new list of TRCReq.
func NewTRCReq_List(s *capnp.Segment, sz int32) (TRCReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return TRCReq_List{l}, err
}

func (s TRCReq_List) At(i int) TRCReq { return TRCReq{s.List.Struct(i)} }

func (s TRCReq_List) Set(i int, v TRCReq) error { return s.List.SetStruct(i, v.Struct) }

func (s TRCReq_List) String() string {
	str, _ := text.MarshalList(0xd4c43f7ac10a9dbc, s.List)
	return str
}

// TRCReq_Promise is a wrapper for a TRCReq promised by a client call.
type TRCReq_Promise struct{ *capnp.Pipeline }

func (p TRCReq_Promise) Struct() (TRCReq, error) {
	s, err := p.Pipeline.Struct()
	return TRCReq{s}, err
}

type TRC struct{ capnp.Struct }

// TRC_TypeID is the unique identifier for the type TRC.
const TRC_TypeID = 0x9aee2af152a5f7d7

func NewTRC(s *capnp.Segment) (TRC, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TRC{st}, err
}

func NewRootTRC(s *capnp.Segment) (TRC, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TRC{st}, err
}

func ReadRootTRC(msg *capnp.Message) (TRC, error) {
	root, err := msg.RootPtr()
	return TRC{root.Struct()}, err
}

func (s TRC) String() string {
	str, _ := text.Marshal(0x9aee2af152a5f7d7, s.Struct)
	return str
}

func (s TRC) Trc() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TRC) HasTrc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TRC) SetTrc(v []byte) error {
	return s.Struct.SetData(0, v)
}

// TRC_List is a list of TRC.
type TRC_List struct{ capnp.List }

// NewTRC creates a new list of TRC.
func NewTRC_List(s *capnp.Segment, sz int32) (TRC_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TRC_List{l}, err
}

func (s TRC_List) At(i int) TRC { return TRC{s.List.Struct(i)} }

func (s TRC_List) Set(i int, v TRC) error { return s.List.SetStruct(i, v.Struct) }

func (s TRC_List) String() string {
	str, _ := text.MarshalList(0x9aee2af152a5f7d7, s.List)
	return str
}

// TRC_Promise is a wrapper for a TRC promised by a client call.
type TRC_Promise struct{ *capnp.Pipeline }

func (p TRC_Promise) Struct() (TRC, error) {
	s, err := p.Pipeline.Struct()
	return TRC{s}, err
}

type CertMgmt struct{ capnp.Struct }
type CertMgmt_Which uint16

const (
	CertMgmt_Which_unset           CertMgmt_Which = 0
	CertMgmt_Which_certChainReq    CertMgmt_Which = 1
	CertMgmt_Which_certChain       CertMgmt_Which = 2
	CertMgmt_Which_trcReq          CertMgmt_Which = 3
	CertMgmt_Which_trc             CertMgmt_Which = 4
	CertMgmt_Which_certChainIssReq CertMgmt_Which = 5
	CertMgmt_Which_certChainIssRep CertMgmt_Which = 6
)

func (w CertMgmt_Which) String() string {
	const s = "unsetcertChainReqcertChaintrcReqtrccertChainIssReqcertChainIssRep"
	switch w {
	case CertMgmt_Which_unset:
		return s[0:5]
	case CertMgmt_Which_certChainReq:
		return s[5:17]
	case CertMgmt_Which_certChain:
		return s[17:26]
	case CertMgmt_Which_trcReq:
		return s[26:32]
	case CertMgmt_Which_trc:
		return s[32:35]
	case CertMgmt_Which_certChainIssReq:
		return s[35:50]
	case CertMgmt_Which_certChainIssRep:
		return s[50:65]

	}
	return "CertMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CertMgmt_TypeID is the unique identifier for the type CertMgmt.
const CertMgmt_TypeID = 0xa19070b486ecd839

func NewCertMgmt(s *capnp.Segment) (CertMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertMgmt{st}, err
}

func NewRootCertMgmt(s *capnp.Segment) (CertMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertMgmt{st}, err
}

func ReadRootCertMgmt(msg *capnp.Message) (CertMgmt, error) {
	root, err := msg.RootPtr()
	return CertMgmt{root.Struct()}, err
}

func (s CertMgmt) String() string {
	str, _ := text.Marshal(0xa19070b486ecd839, s.Struct)
	return str
}

func (s CertMgmt) Which() CertMgmt_Which {
	return CertMgmt_Which(s.Struct.Uint16(0))
}
func (s CertMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CertMgmt) CertChainReq() (CertChainReq, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != certChainReq")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainReq() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainReq(v CertChainReq) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainReq sets the certChainReq field to a newly
// allocated CertChainReq struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainReq() (CertChainReq, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewCertChainReq(s.Struct.Segment())
	if err != nil {
		return CertChainReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChain() (CertChain, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != certChain")
	}
	p, err := s.Struct.Ptr(0)
	return CertChain{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChain() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChain(v CertChain) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChain sets the certChain field to a newly
// allocated CertChain struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChain() (CertChain, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewCertChain(s.Struct.Segment())
	if err != nil {
		return CertChain{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) TrcReq() (TRCReq, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != trcReq")
	}
	p, err := s.Struct.Ptr(0)
	return TRCReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasTrcReq() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetTrcReq(v TRCReq) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrcReq sets the trcReq field to a newly
// allocated TRCReq struct, preferring placement in s's segment.
func (s CertMgmt) NewTrcReq() (TRCReq, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewTRCReq(s.Struct.Segment())
	if err != nil {
		return TRCReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) Trc() (TRC, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != trc")
	}
	p, err := s.Struct.Ptr(0)
	return TRC{Struct: p.Struct()}, err
}

func (s CertMgmt) HasTrc() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetTrc(v TRC) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrc sets the trc field to a newly
// allocated TRC struct, preferring placement in s's segment.
func (s CertMgmt) NewTrc() (TRC, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewTRC(s.Struct.Segment())
	if err != nil {
		return TRC{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChainIssReq() (CertChainIssReq, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != certChainIssReq")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainIssReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainIssReq() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainIssReq(v CertChainIssReq) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainIssReq sets the certChainIssReq field to a newly
// allocated CertChainIssReq struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainIssReq() (CertChainIssReq, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewCertChainIssReq(s.Struct.Segment())
	if err != nil {
		return CertChainIssReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChainIssRep() (CertChainIssRep, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != certChainIssRep")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainIssRep{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainIssRep() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainIssRep(v CertChainIssRep) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainIssRep sets the certChainIssRep field to a newly
// allocated CertChainIssRep struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainIssRep() (CertChainIssRep, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewCertChainIssRep(s.Struct.Segment())
	if err != nil {
		return CertChainIssRep{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CertMgmt_List is a list of CertMgmt.
type CertMgmt_List struct{ capnp.List }

// NewCertMgmt creates a new list of CertMgmt.
func NewCertMgmt_List(s *capnp.Segment, sz int32) (CertMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return CertMgmt_List{l}, err
}

func (s CertMgmt_List) At(i int) CertMgmt { return CertMgmt{s.List.Struct(i)} }

func (s CertMgmt_List) Set(i int, v CertMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s CertMgmt_List) String() string {
	str, _ := text.MarshalList(0xa19070b486ecd839, s.List)
	return str
}

// CertMgmt_Promise is a wrapper for a CertMgmt promised by a client call.
type CertMgmt_Promise struct{ *capnp.Pipeline }

func (p CertMgmt_Promise) Struct() (CertMgmt, error) {
	s, err := p.Pipeline.Struct()
	return CertMgmt{s}, err
}

func (p CertMgmt_Promise) CertChainReq() CertChainReq_Promise {
	return CertChainReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChain() CertChain_Promise {
	return CertChain_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) TrcReq() TRCReq_Promise {
	return TRCReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) Trc() TRC_Promise {
	return TRC_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChainIssReq() CertChainIssReq_Promise {
	return CertChainIssReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChainIssRep() CertChainIssRep_Promise {
	return CertChainIssRep_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_ec3b2b10a5e23975 = "x\xda\x94\x93OHT]\x18\xc6\xdf\xe7\x9c\xf9\xf3\xf9" +
	"\xe1\xc5{\xbf{\xe7\x0b\xa1\x18rQd\xf4OW\xda" +
	"b\xa4\xc9\x85\xa0\xe4\x99\\\x04-b\x18\x07g\"o" +
	"\xe3\xcc\xd5\xb2\x85E\x8b\xb6\xb5\x88\x16A\x8b\x02\x97b" +
	"DB\x85A\x03\x03e$i\x09\x19TT\xd4\xa2\x90" +
	"\xc0EE\x99\x9d8w\x9c\xb92#Y\xcc\xe6\xcc9" +
	"\xcf\xfb\xe3}\xde\xf7\xb9\xbb\xbf\xf8\xdb\xd8\x1e\xff\xae-" +
	"D\x07'\xe1\x0f\xc8g_Gc\x8b\x8d\x9f.\x93\xa1" +
	"C\x0e\xb6\xbc\x1d\xd5\xb7\xef] ?\x82D\xe6\xf2\x7f" +
	"\xd7L\xbf\xa9N0#\x04\xd92\xbfp\xeef\xe6\xc2" +
	"U\x12:V\x89\xdb\x11T\x9a\xcd\xe6Cs\x87R7" +
	"o3\xcf\x83 7\xd4\xd4\x8f\x84\xef\x8f\x8d\xad\x85\xce" +
	"[O\xcciK\x9d\xa6\xac\x08ai\xe8Rg\xc3\xc5" +
	"W7\xaa\x95\xcd\x1f,\x06\xf3\xb3+]TR\xf9\xb4" +
	"g\xe4\xc4\xeb\xd9\xde\x82\xea\x82{j\x9fR\x18\xa1\x8f" +
	"\xe6\xa6\x90:\xd5\x87\xc6\x092\xff\xf8dj\xeb\xff\x87" +
	"\xa7\xd6h\xa1y\"\xc4`\xe6]\xf1\xdd\x90\x02O^" +
	"\xf97\x7f*R\x98S`V\x01~\x19\xbac\xbew" +
	"\xb5oB\xe3$W~\xc32\x91\xcc:G\xfa\xfb\xfa" +
	"\xe1\xecL\xc43v\xa65\xd8\x13\x8bv\x03\xc2\xc7}" +
	"D>\x10\x19Z\x03\x91\xf8\x87CX\x0cA'\x9b\x80" +
	"F\x0c\x1a\xa1\\\xcbJ\xb5\xd1d\xd6\xe9\xea\xebw\x88" +
	"\x14a#\xf7\xd5J\xe9\"&\x9a\x88\xc4u\x0e1\xc9" +
	"\xa0\xe1\xa7\xb4\xa0no\x1f%\x12\xb78D\x81Ac" +
	"\xcb\xd2\x02#2\xf21\"q\x8fC<b\xd0\xf8\x0f" +
	"i\x81\x13\x19S\xadD\xa2\xc0!f\x184\xdf\x92\xb4" +
	"\xe0#2\xa6Uk\x0f8\xc4\x1c\x83\xe6\xff.-\xf8" +
	"\x89\x8c\xd9\xb3Db\x86C\xbc`\xd0\x02\xdf\xa4\x85\x00" +
	"\x91\xf1\\\xdd\xces\x88w\x0c\xe1A;\x97t(\xe0" +
	"Z\x88\xa6\xe2i\xaa\xb3c\xc9\x01\xe8\xder\x08\xd0W" +
	"<\xba\x02\xd8\xd0\xbdD\x14_#N6Q,+\x8f" +
	"\xbe\xf8\xe0\x8eI\xf7\xb2Y\x01\x83\xdd\x91\xcb\xc5\x92\x03" +
	"\x04\xbd\x14\x9c\xb5\x15\x19\x82\xeee`\x95\xa6j\xec\xc5" +
	"\xa2\x8a\xc55y\x8b\x0b'R\xf1\xb4]\xb5:^\xc9" +
	"(uVAj\xf4Hu\xaa\xf6\xf7\x19P w\xa0" +
	"\x8aR[\xa6\xb4\xab~\xda8D'\x83\x01\x14C\xd0" +
	"\xb1\x8fH\xec\xe7\x10\xdd\x0c\x06;S\xcc@\x97\xca@" +
	"'\x878\xc4\x10N\xe7z\xe39\xd4\x10C\x0d\xe1\xf4" +
	"P2\x9bK\x1f\xb7K\xffe\"\x9eH%\x0f\xd8\xc7" +
	"\x08\xc3\x001`}w\x19\xfa\xeb9\x95?\x8fHO" +
	",Zm\xaca]cz\xb5\xb1`:\xd7\x8b 1" +
	"\x04\xff\xcc\xd6\xaf\x00\x00\x00\xff\xffe\xb2H\xd2"

func init() {
	schemas.Register(schema_ec3b2b10a5e23975,
		0x9aee2af152a5f7d7,
		0xa19070b486ecd839,
		0xadadc71f7e190917,
		0xb2de94224c009676,
		0xc464d1e0777e54d3,
		0xc95b16276878cfc1,
		0xd4c43f7ac10a9dbc)
}
