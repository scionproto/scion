// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_snetproxy is a generated GoMock package.
package mock_snetproxy

import (
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	addr "github.com/scionproto/scion/go/lib/addr"
	snet "github.com/scionproto/scion/go/lib/snet"
	snetproxy "github.com/scionproto/scion/go/lib/snet/snetproxy"
)

// MockNetwork is a mock of Network interface
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// ListenSCIONWithBindSVC mocks base method
func (m *MockNetwork) ListenSCIONWithBindSVC(network string, laddr, baddr *snet.Addr, svc addr.HostSVC, timeout time.Duration) (snetproxy.Conn, error) {
	ret := m.ctrl.Call(m, "ListenSCIONWithBindSVC", network, laddr, baddr, svc, timeout)
	ret0, _ := ret[0].(snetproxy.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenSCIONWithBindSVC indicates an expected call of ListenSCIONWithBindSVC
func (mr *MockNetworkMockRecorder) ListenSCIONWithBindSVC(network, laddr, baddr, svc, timeout interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenSCIONWithBindSVC", reflect.TypeOf((*MockNetwork)(nil).ListenSCIONWithBindSVC), network, laddr, baddr, svc, timeout)
}

// DialSCIONWithBindSVC mocks base method
func (m *MockNetwork) DialSCIONWithBindSVC(network string, laddr, raddr, baddr *snet.Addr, svc addr.HostSVC, timeout time.Duration) (snetproxy.Conn, error) {
	ret := m.ctrl.Call(m, "DialSCIONWithBindSVC", network, laddr, raddr, baddr, svc, timeout)
	ret0, _ := ret[0].(snetproxy.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialSCIONWithBindSVC indicates an expected call of DialSCIONWithBindSVC
func (mr *MockNetworkMockRecorder) DialSCIONWithBindSVC(network, laddr, raddr, baddr, svc, timeout interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialSCIONWithBindSVC", reflect.TypeOf((*MockNetwork)(nil).DialSCIONWithBindSVC), network, laddr, raddr, baddr, svc, timeout)
}

// MockConn is a mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockConn) Read(b []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockConnMockRecorder) Read(b interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConn)(nil).Read), b)
}

// ReadFrom mocks base method
func (m *MockConn) ReadFrom(b []byte) (int, net.Addr, error) {
	ret := m.ctrl.Call(m, "ReadFrom", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(net.Addr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFrom indicates an expected call of ReadFrom
func (mr *MockConnMockRecorder) ReadFrom(b interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockConn)(nil).ReadFrom), b)
}

// ReadFromSCION mocks base method
func (m *MockConn) ReadFromSCION(b []byte) (int, *snet.Addr, error) {
	ret := m.ctrl.Call(m, "ReadFromSCION", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*snet.Addr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFromSCION indicates an expected call of ReadFromSCION
func (mr *MockConnMockRecorder) ReadFromSCION(b interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromSCION", reflect.TypeOf((*MockConn)(nil).ReadFromSCION), b)
}

// Write mocks base method
func (m *MockConn) Write(b []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockConnMockRecorder) Write(b interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConn)(nil).Write), b)
}

// WriteTo mocks base method
func (m *MockConn) WriteTo(b []byte, address net.Addr) (int, error) {
	ret := m.ctrl.Call(m, "WriteTo", b, address)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo
func (mr *MockConnMockRecorder) WriteTo(b, address interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockConn)(nil).WriteTo), b, address)
}

// WriteToSCION mocks base method
func (m *MockConn) WriteToSCION(b []byte, address *snet.Addr) (int, error) {
	ret := m.ctrl.Call(m, "WriteToSCION", b, address)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteToSCION indicates an expected call of WriteToSCION
func (mr *MockConnMockRecorder) WriteToSCION(b, address interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToSCION", reflect.TypeOf((*MockConn)(nil).WriteToSCION), b, address)
}

// Close mocks base method
func (m *MockConn) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// LocalAddr mocks base method
func (m *MockConn) LocalAddr() net.Addr {
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr
func (mr *MockConnMockRecorder) LocalAddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockConn)(nil).LocalAddr))
}

// BindAddr mocks base method
func (m *MockConn) BindAddr() net.Addr {
	ret := m.ctrl.Call(m, "BindAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// BindAddr indicates an expected call of BindAddr
func (mr *MockConnMockRecorder) BindAddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindAddr", reflect.TypeOf((*MockConn)(nil).BindAddr))
}

// SVC mocks base method
func (m *MockConn) SVC() addr.HostSVC {
	ret := m.ctrl.Call(m, "SVC")
	ret0, _ := ret[0].(addr.HostSVC)
	return ret0
}

// SVC indicates an expected call of SVC
func (mr *MockConnMockRecorder) SVC() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVC", reflect.TypeOf((*MockConn)(nil).SVC))
}

// RemoteAddr mocks base method
func (m *MockConn) RemoteAddr() net.Addr {
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr
func (mr *MockConnMockRecorder) RemoteAddr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method
func (m *MockConn) SetDeadline(deadline time.Time) error {
	ret := m.ctrl.Call(m, "SetDeadline", deadline)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline
func (mr *MockConnMockRecorder) SetDeadline(deadline interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockConn)(nil).SetDeadline), deadline)
}

// SetReadDeadline mocks base method
func (m *MockConn) SetReadDeadline(deadline time.Time) error {
	ret := m.ctrl.Call(m, "SetReadDeadline", deadline)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline
func (mr *MockConnMockRecorder) SetReadDeadline(deadline interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockConn)(nil).SetReadDeadline), deadline)
}

// SetWriteDeadline mocks base method
func (m *MockConn) SetWriteDeadline(deadline time.Time) error {
	ret := m.ctrl.Call(m, "SetWriteDeadline", deadline)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline
func (mr *MockConnMockRecorder) SetWriteDeadline(deadline interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockConn)(nil).SetWriteDeadline), deadline)
}
