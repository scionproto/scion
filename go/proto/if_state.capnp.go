// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type IFStateInfo struct{ capnp.Struct }

// IFStateInfo_TypeID is the unique identifier for the type IFStateInfo.
const IFStateInfo_TypeID = 0xc778fb6f09a6fd58

func NewIFStateInfo(s *capnp.Segment) (IFStateInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return IFStateInfo{st}, err
}

func NewRootIFStateInfo(s *capnp.Segment) (IFStateInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return IFStateInfo{st}, err
}

func ReadRootIFStateInfo(msg *capnp.Message) (IFStateInfo, error) {
	root, err := msg.RootPtr()
	return IFStateInfo{root.Struct()}, err
}

func (s IFStateInfo) String() string {
	str, _ := text.Marshal(0xc778fb6f09a6fd58, s.Struct)
	return str
}

func (s IFStateInfo) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s IFStateInfo) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s IFStateInfo) Active() bool {
	return s.Struct.Bit(64)
}

func (s IFStateInfo) SetActive(v bool) {
	s.Struct.SetBit(64, v)
}

func (s IFStateInfo) SRevInfo() (SignedBlob, error) {
	p, err := s.Struct.Ptr(0)
	return SignedBlob{Struct: p.Struct()}, err
}

func (s IFStateInfo) HasSRevInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFStateInfo) SetSRevInfo(v SignedBlob) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSRevInfo sets the sRevInfo field to a newly
// allocated SignedBlob struct, preferring placement in s's segment.
func (s IFStateInfo) NewSRevInfo() (SignedBlob, error) {
	ss, err := NewSignedBlob(s.Struct.Segment())
	if err != nil {
		return SignedBlob{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IFStateInfo_List is a list of IFStateInfo.
type IFStateInfo_List struct{ capnp.List }

// NewIFStateInfo creates a new list of IFStateInfo.
func NewIFStateInfo_List(s *capnp.Segment, sz int32) (IFStateInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return IFStateInfo_List{l}, err
}

func (s IFStateInfo_List) At(i int) IFStateInfo { return IFStateInfo{s.List.Struct(i)} }

func (s IFStateInfo_List) Set(i int, v IFStateInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s IFStateInfo_List) String() string {
	str, _ := text.MarshalList(0xc778fb6f09a6fd58, s.List)
	return str
}

// IFStateInfo_Promise is a wrapper for a IFStateInfo promised by a client call.
type IFStateInfo_Promise struct{ *capnp.Pipeline }

func (p IFStateInfo_Promise) Struct() (IFStateInfo, error) {
	s, err := p.Pipeline.Struct()
	return IFStateInfo{s}, err
}

func (p IFStateInfo_Promise) SRevInfo() SignedBlob_Promise {
	return SignedBlob_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type IFStateInfos struct{ capnp.Struct }

// IFStateInfos_TypeID is the unique identifier for the type IFStateInfos.
const IFStateInfos_TypeID = 0xd320ce32f5fc0bbe

func NewIFStateInfos(s *capnp.Segment) (IFStateInfos, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFStateInfos{st}, err
}

func NewRootIFStateInfos(s *capnp.Segment) (IFStateInfos, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFStateInfos{st}, err
}

func ReadRootIFStateInfos(msg *capnp.Message) (IFStateInfos, error) {
	root, err := msg.RootPtr()
	return IFStateInfos{root.Struct()}, err
}

func (s IFStateInfos) String() string {
	str, _ := text.Marshal(0xd320ce32f5fc0bbe, s.Struct)
	return str
}

func (s IFStateInfos) Infos() (IFStateInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return IFStateInfo_List{List: p.List()}, err
}

func (s IFStateInfos) HasInfos() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFStateInfos) SetInfos(v IFStateInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInfos sets the infos field to a newly
// allocated IFStateInfo_List, preferring placement in s's segment.
func (s IFStateInfos) NewInfos(n int32) (IFStateInfo_List, error) {
	l, err := NewIFStateInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return IFStateInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFStateInfos_List is a list of IFStateInfos.
type IFStateInfos_List struct{ capnp.List }

// NewIFStateInfos creates a new list of IFStateInfos.
func NewIFStateInfos_List(s *capnp.Segment, sz int32) (IFStateInfos_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFStateInfos_List{l}, err
}

func (s IFStateInfos_List) At(i int) IFStateInfos { return IFStateInfos{s.List.Struct(i)} }

func (s IFStateInfos_List) Set(i int, v IFStateInfos) error { return s.List.SetStruct(i, v.Struct) }

func (s IFStateInfos_List) String() string {
	str, _ := text.MarshalList(0xd320ce32f5fc0bbe, s.List)
	return str
}

// IFStateInfos_Promise is a wrapper for a IFStateInfos promised by a client call.
type IFStateInfos_Promise struct{ *capnp.Pipeline }

func (p IFStateInfos_Promise) Struct() (IFStateInfos, error) {
	s, err := p.Pipeline.Struct()
	return IFStateInfos{s}, err
}

type IFStateReq struct{ capnp.Struct }

// IFStateReq_TypeID is the unique identifier for the type IFStateReq.
const IFStateReq_TypeID = 0xe8ed776bc19c66a9

func NewIFStateReq(s *capnp.Segment) (IFStateReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IFStateReq{st}, err
}

func NewRootIFStateReq(s *capnp.Segment) (IFStateReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IFStateReq{st}, err
}

func ReadRootIFStateReq(msg *capnp.Message) (IFStateReq, error) {
	root, err := msg.RootPtr()
	return IFStateReq{root.Struct()}, err
}

func (s IFStateReq) String() string {
	str, _ := text.Marshal(0xe8ed776bc19c66a9, s.Struct)
	return str
}

func (s IFStateReq) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s IFStateReq) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

// IFStateReq_List is a list of IFStateReq.
type IFStateReq_List struct{ capnp.List }

// NewIFStateReq creates a new list of IFStateReq.
func NewIFStateReq_List(s *capnp.Segment, sz int32) (IFStateReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IFStateReq_List{l}, err
}

func (s IFStateReq_List) At(i int) IFStateReq { return IFStateReq{s.List.Struct(i)} }

func (s IFStateReq_List) Set(i int, v IFStateReq) error { return s.List.SetStruct(i, v.Struct) }

func (s IFStateReq_List) String() string {
	str, _ := text.MarshalList(0xe8ed776bc19c66a9, s.List)
	return str
}

// IFStateReq_Promise is a wrapper for a IFStateReq promised by a client call.
type IFStateReq_Promise struct{ *capnp.Pipeline }

func (p IFStateReq_Promise) Struct() (IFStateReq, error) {
	s, err := p.Pipeline.Struct()
	return IFStateReq{s}, err
}

const schema_e6d9e9e231c09f51 = "x\xda|\x90\xbfJ+A\x18\xc5\xcf\x99\xdd\xdc\xdcp" +
	"s\xef\xee\x904\xb7\x10-\xacR\x08I#\xa4I\x8a" +
	"\xa8\xacD\xc8D\x84t\x12\xc2\x0e,\xe2ndc\xd4" +
	"\x07\x10_BH'X\xf9\x06\xa2\x95\x9d\x85VZF" +
	"\x10-,m\xfc\xc3\xca\x04Q\x09h5\xf3\x1d~\xfc" +
	"8\xdf\xe7\xeeUE1\xe5\x10P\xd9\xd4\xaf\xa4\xf5z" +
	"\x90\x89\x9e\xb7\xcf\xa0\x1c\x8aD\x0dN\x8a\xc3\xfb\xab[" +
	"\xa4\x98\x06\xe4\xfa\xb5\xdc1\xef\xe6\x11\x98\x1c\xffyy" +
	",\x9dO]B:\x1c\x03s\x92\xc3\xdc\xc4\xe8\xf7\x9f" +
	"\x1509\xd4\xfb\xa7k[\x0fw\xc6\xfa\x05\xb6\x0d\xe1" +
	"\xf1\"\xb72b\xd5\x88\x0d\xf4j\xdck\xf7|1\xd3" +
	"iw\xc3n\xd9\x9b_6\xa3\x17Z:j\x90*k" +
	"\xd9\x80M@\xce\x15\x00U\xb5\xa8\xea\x82\x92\xd5<M" +
	"\xe8\x95\x01U\xb3\xa8\x1a\x82\x14y\x0a@.-\x02\xaa" +
	"nQ\xb5\x04\x9d@{5f \x98\x01+\xedN/" +
	"\xe8\xfb$\x04\x09&q\xd3\xef{\xa1\x8e\x00\xd0M\x9a" +
	"7O\xb3\xbb\x0b\xa5\x01@\xba?5K\xeb(6\xd5" +
	"\xec\x8fj\x7fK\x80\xfamQM\x0bN\x06\xa1\x8eb" +
	"\xfe\x03\x1b\x16\xe9~\x9e\x184\xe1w\xda\xa6\xcf\x8d1" +
	"i\xe1]\x9a\x1f[\xe3-\x00\x00\xff\xffJJp\xfd"

func init() {
	schemas.Register(schema_e6d9e9e231c09f51,
		0xc778fb6f09a6fd58,
		0xd320ce32f5fc0bbe,
		0xe8ed776bc19c66a9)
}
