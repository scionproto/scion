// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/lib/infra/modules/segfetcher (interfaces: DstProvider,PathDB,RequestAPI,Storage,TRCProvider,Verifier)

// Package mock_segfetcher is a generated GoMock package.
package mock_segfetcher

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	addr "github.com/scionproto/scion/go/lib/addr"
	path_mgmt "github.com/scionproto/scion/go/lib/ctrl/path_mgmt"
	segfetcher "github.com/scionproto/scion/go/lib/infra/modules/segfetcher"
	segverifier "github.com/scionproto/scion/go/lib/infra/modules/segverifier"
	query "github.com/scionproto/scion/go/lib/pathdb/query"
	trc "github.com/scionproto/scion/go/lib/scrypto/trc"
	net "net"
	reflect "reflect"
	time "time"
)

// MockDstProvider is a mock of DstProvider interface
type MockDstProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDstProviderMockRecorder
}

// MockDstProviderMockRecorder is the mock recorder for MockDstProvider
type MockDstProviderMockRecorder struct {
	mock *MockDstProvider
}

// NewMockDstProvider creates a new mock instance
func NewMockDstProvider(ctrl *gomock.Controller) *MockDstProvider {
	mock := &MockDstProvider{ctrl: ctrl}
	mock.recorder = &MockDstProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDstProvider) EXPECT() *MockDstProviderMockRecorder {
	return m.recorder
}

// Dst mocks base method
func (m *MockDstProvider) Dst(arg0 context.Context, arg1 segfetcher.Request) (net.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dst", arg0, arg1)
	ret0, _ := ret[0].(net.Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dst indicates an expected call of Dst
func (mr *MockDstProviderMockRecorder) Dst(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dst", reflect.TypeOf((*MockDstProvider)(nil).Dst), arg0, arg1)
}

// MockPathDB is a mock of PathDB interface
type MockPathDB struct {
	ctrl     *gomock.Controller
	recorder *MockPathDBMockRecorder
}

// MockPathDBMockRecorder is the mock recorder for MockPathDB
type MockPathDBMockRecorder struct {
	mock *MockPathDB
}

// NewMockPathDB creates a new mock instance
func NewMockPathDB(ctrl *gomock.Controller) *MockPathDB {
	mock := &MockPathDB{ctrl: ctrl}
	mock.recorder = &MockPathDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPathDB) EXPECT() *MockPathDBMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockPathDB) Get(arg0 context.Context, arg1 *query.Params) (query.Results, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(query.Results)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPathDBMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPathDB)(nil).Get), arg0, arg1)
}

// GetNextQuery mocks base method
func (m *MockPathDB) GetNextQuery(arg0 context.Context, arg1, arg2 addr.IA) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextQuery indicates an expected call of GetNextQuery
func (mr *MockPathDBMockRecorder) GetNextQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextQuery", reflect.TypeOf((*MockPathDB)(nil).GetNextQuery), arg0, arg1, arg2)
}

// MockRequestAPI is a mock of RequestAPI interface
type MockRequestAPI struct {
	ctrl     *gomock.Controller
	recorder *MockRequestAPIMockRecorder
}

// MockRequestAPIMockRecorder is the mock recorder for MockRequestAPI
type MockRequestAPIMockRecorder struct {
	mock *MockRequestAPI
}

// NewMockRequestAPI creates a new mock instance
func NewMockRequestAPI(ctrl *gomock.Controller) *MockRequestAPI {
	mock := &MockRequestAPI{ctrl: ctrl}
	mock.recorder = &MockRequestAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestAPI) EXPECT() *MockRequestAPIMockRecorder {
	return m.recorder
}

// GetSegs mocks base method
func (m *MockRequestAPI) GetSegs(arg0 context.Context, arg1 *path_mgmt.SegReq, arg2 net.Addr, arg3 uint64) (*path_mgmt.SegReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*path_mgmt.SegReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegs indicates an expected call of GetSegs
func (mr *MockRequestAPIMockRecorder) GetSegs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegs", reflect.TypeOf((*MockRequestAPI)(nil).GetSegs), arg0, arg1, arg2, arg3)
}

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// StoreRevs mocks base method
func (m *MockStorage) StoreRevs(arg0 context.Context, arg1 []*path_mgmt.SignedRevInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRevs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRevs indicates an expected call of StoreRevs
func (mr *MockStorageMockRecorder) StoreRevs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRevs", reflect.TypeOf((*MockStorage)(nil).StoreRevs), arg0, arg1)
}

// StoreSegs mocks base method
func (m *MockStorage) StoreSegs(arg0 context.Context, arg1 []*segfetcher.SegWithHP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSegs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSegs indicates an expected call of StoreSegs
func (mr *MockStorageMockRecorder) StoreSegs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSegs", reflect.TypeOf((*MockStorage)(nil).StoreSegs), arg0, arg1)
}

// MockTRCProvider is a mock of TRCProvider interface
type MockTRCProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTRCProviderMockRecorder
}

// MockTRCProviderMockRecorder is the mock recorder for MockTRCProvider
type MockTRCProviderMockRecorder struct {
	mock *MockTRCProvider
}

// NewMockTRCProvider creates a new mock instance
func NewMockTRCProvider(ctrl *gomock.Controller) *MockTRCProvider {
	mock := &MockTRCProvider{ctrl: ctrl}
	mock.recorder = &MockTRCProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTRCProvider) EXPECT() *MockTRCProviderMockRecorder {
	return m.recorder
}

// GetTRC mocks base method
func (m *MockTRCProvider) GetTRC(arg0 context.Context, arg1 addr.ISD, arg2 uint64) (*trc.TRC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTRC", arg0, arg1, arg2)
	ret0, _ := ret[0].(*trc.TRC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTRC indicates an expected call of GetTRC
func (mr *MockTRCProviderMockRecorder) GetTRC(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTRC", reflect.TypeOf((*MockTRCProvider)(nil).GetTRC), arg0, arg1, arg2)
}

// MockVerifier is a mock of Verifier interface
type MockVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockVerifierMockRecorder
}

// MockVerifierMockRecorder is the mock recorder for MockVerifier
type MockVerifierMockRecorder struct {
	mock *MockVerifier
}

// NewMockVerifier creates a new mock instance
func NewMockVerifier(ctrl *gomock.Controller) *MockVerifier {
	mock := &MockVerifier{ctrl: ctrl}
	mock.recorder = &MockVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVerifier) EXPECT() *MockVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method
func (m *MockVerifier) Verify(arg0 context.Context, arg1 *path_mgmt.SegReply, arg2 net.Addr) (chan segverifier.UnitResult, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2)
	ret0, _ := ret[0].(chan segverifier.UnitResult)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockVerifierMockRecorder) Verify(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVerifier)(nil).Verify), arg0, arg1, arg2)
}
