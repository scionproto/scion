// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SignedCtrlPld struct{ capnp.Struct }

// SignedCtrlPld_TypeID is the unique identifier for the type SignedCtrlPld.
const SignedCtrlPld_TypeID = 0xc34ac578b174f099

func NewSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func NewRootSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func ReadRootSignedCtrlPld(msg *capnp.Message) (SignedCtrlPld, error) {
	root, err := msg.RootPtr()
	return SignedCtrlPld{root.Struct()}, err
}

func (s SignedCtrlPld) String() string {
	str, _ := text.Marshal(0xc34ac578b174f099, s.Struct)
	return str
}

func (s SignedCtrlPld) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedCtrlPld) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SignedCtrlPld) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s SignedCtrlPld) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s SignedCtrlPld) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SignedCtrlPld_List is a list of SignedCtrlPld.
type SignedCtrlPld_List struct{ capnp.List }

// NewSignedCtrlPld creates a new list of SignedCtrlPld.
func NewSignedCtrlPld_List(s *capnp.Segment, sz int32) (SignedCtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SignedCtrlPld_List{l}, err
}

func (s SignedCtrlPld_List) At(i int) SignedCtrlPld { return SignedCtrlPld{s.List.Struct(i)} }

func (s SignedCtrlPld_List) Set(i int, v SignedCtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedCtrlPld_List) String() string {
	str, _ := text.MarshalList(0xc34ac578b174f099, s.List)
	return str
}

// SignedCtrlPld_Promise is a wrapper for a SignedCtrlPld promised by a client call.
type SignedCtrlPld_Promise struct{ *capnp.Pipeline }

func (p SignedCtrlPld_Promise) Struct() (SignedCtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return SignedCtrlPld{s}, err
}

func (p SignedCtrlPld_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type CtrlPld struct{ capnp.Struct }
type CtrlPld_Which uint16

const (
	CtrlPld_Which_unset     CtrlPld_Which = 0
	CtrlPld_Which_pcb       CtrlPld_Which = 1
	CtrlPld_Which_ifid      CtrlPld_Which = 2
	CtrlPld_Which_certMgmt  CtrlPld_Which = 3
	CtrlPld_Which_pathMgmt  CtrlPld_Which = 4
	CtrlPld_Which_sibra     CtrlPld_Which = 5
	CtrlPld_Which_drkeyMgmt CtrlPld_Which = 6
	CtrlPld_Which_sig       CtrlPld_Which = 7
	CtrlPld_Which_extn      CtrlPld_Which = 8
	CtrlPld_Which_ack       CtrlPld_Which = 9
)

func (w CtrlPld_Which) String() string {
	const s = "unsetpcbifidcertMgmtpathMgmtsibradrkeyMgmtsigextnack"
	switch w {
	case CtrlPld_Which_unset:
		return s[0:5]
	case CtrlPld_Which_pcb:
		return s[5:8]
	case CtrlPld_Which_ifid:
		return s[8:12]
	case CtrlPld_Which_certMgmt:
		return s[12:20]
	case CtrlPld_Which_pathMgmt:
		return s[20:28]
	case CtrlPld_Which_sibra:
		return s[28:33]
	case CtrlPld_Which_drkeyMgmt:
		return s[33:42]
	case CtrlPld_Which_sig:
		return s[42:45]
	case CtrlPld_Which_extn:
		return s[45:49]
	case CtrlPld_Which_ack:
		return s[49:52]

	}
	return "CtrlPld_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CtrlPld_TypeID is the unique identifier for the type CtrlPld.
const CtrlPld_TypeID = 0x8e6af2c877489f54

func NewCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func NewRootCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func ReadRootCtrlPld(msg *capnp.Message) (CtrlPld, error) {
	root, err := msg.RootPtr()
	return CtrlPld{root.Struct()}, err
}

func (s CtrlPld) String() string {
	str, _ := text.Marshal(0x8e6af2c877489f54, s.Struct)
	return str
}

func (s CtrlPld) Which() CtrlPld_Which {
	return CtrlPld_Which(s.Struct.Uint16(0))
}
func (s CtrlPld) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CtrlPld) Pcb() (PCB, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != pcb")
	}
	p, err := s.Struct.Ptr(0)
	return PCB{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPcb() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPcb(v PCB) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPcb sets the pcb field to a newly
// allocated PCB struct, preferring placement in s's segment.
func (s CtrlPld) NewPcb() (PCB, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPCB(s.Struct.Segment())
	if err != nil {
		return PCB{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ifid() (IFID, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != ifid")
	}
	p, err := s.Struct.Ptr(0)
	return IFID{Struct: p.Struct()}, err
}

func (s CtrlPld) HasIfid() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetIfid(v IFID) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfid sets the ifid field to a newly
// allocated IFID struct, preferring placement in s's segment.
func (s CtrlPld) NewIfid() (IFID, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewIFID(s.Struct.Segment())
	if err != nil {
		return IFID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) CertMgmt() (CertMgmt, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != certMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return CertMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasCertMgmt() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetCertMgmt(v CertMgmt) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertMgmt sets the certMgmt field to a newly
// allocated CertMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewCertMgmt() (CertMgmt, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewCertMgmt(s.Struct.Segment())
	if err != nil {
		return CertMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) PathMgmt() (PathMgmt, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != pathMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return PathMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPathMgmt() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPathMgmt(v PathMgmt) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathMgmt sets the pathMgmt field to a newly
// allocated PathMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewPathMgmt() (PathMgmt, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewPathMgmt(s.Struct.Segment())
	if err != nil {
		return PathMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sibra() (SibraPayload, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != sibra")
	}
	p, err := s.Struct.Ptr(0)
	return SibraPayload{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSibra() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSibra(v SibraPayload) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSibra sets the sibra field to a newly
// allocated SibraPayload struct, preferring placement in s's segment.
func (s CtrlPld) NewSibra() (SibraPayload, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSibraPayload(s.Struct.Segment())
	if err != nil {
		return SibraPayload{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) DrkeyMgmt() (DRKeyMgmt, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != drkeyMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return DRKeyMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasDrkeyMgmt() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetDrkeyMgmt(v DRKeyMgmt) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyMgmt sets the drkeyMgmt field to a newly
// allocated DRKeyMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewDrkeyMgmt() (DRKeyMgmt, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewDRKeyMgmt(s.Struct.Segment())
	if err != nil {
		return DRKeyMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sig() (SIGCtrl, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != sig")
	}
	p, err := s.Struct.Ptr(0)
	return SIGCtrl{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSig() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSig(v SIGCtrl) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSig sets the sig field to a newly
// allocated SIGCtrl struct, preferring placement in s's segment.
func (s CtrlPld) NewSig() (SIGCtrl, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSIGCtrl(s.Struct.Segment())
	if err != nil {
		return SIGCtrl{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Extn() (CtrlExtnDataList, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != extn")
	}
	p, err := s.Struct.Ptr(0)
	return CtrlExtnDataList{Struct: p.Struct()}, err
}

func (s CtrlPld) HasExtn() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetExtn(v CtrlExtnDataList) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExtn sets the extn field to a newly
// allocated CtrlExtnDataList struct, preferring placement in s's segment.
func (s CtrlPld) NewExtn() (CtrlExtnDataList, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewCtrlExtnDataList(s.Struct.Segment())
	if err != nil {
		return CtrlExtnDataList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ack() (Ack, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != ack")
	}
	p, err := s.Struct.Ptr(0)
	return Ack{Struct: p.Struct()}, err
}

func (s CtrlPld) HasAck() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetAck(v Ack) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAck sets the ack field to a newly
// allocated Ack struct, preferring placement in s's segment.
func (s CtrlPld) NewAck() (Ack, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewAck(s.Struct.Segment())
	if err != nil {
		return Ack{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) ReqId() uint64 {
	return s.Struct.Uint64(8)
}

func (s CtrlPld) SetReqId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CtrlPld) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s CtrlPld) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// CtrlPld_List is a list of CtrlPld.
type CtrlPld_List struct{ capnp.List }

// NewCtrlPld creates a new list of CtrlPld.
func NewCtrlPld_List(s *capnp.Segment, sz int32) (CtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return CtrlPld_List{l}, err
}

func (s CtrlPld_List) At(i int) CtrlPld { return CtrlPld{s.List.Struct(i)} }

func (s CtrlPld_List) Set(i int, v CtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s CtrlPld_List) String() string {
	str, _ := text.MarshalList(0x8e6af2c877489f54, s.List)
	return str
}

// CtrlPld_Promise is a wrapper for a CtrlPld promised by a client call.
type CtrlPld_Promise struct{ *capnp.Pipeline }

func (p CtrlPld_Promise) Struct() (CtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return CtrlPld{s}, err
}

func (p CtrlPld_Promise) Pcb() PCB_Promise {
	return PCB_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ifid() IFID_Promise {
	return IFID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) CertMgmt() CertMgmt_Promise {
	return CertMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) PathMgmt() PathMgmt_Promise {
	return PathMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sibra() SibraPayload_Promise {
	return SibraPayload_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) DrkeyMgmt() DRKeyMgmt_Promise {
	return DRKeyMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sig() SIGCtrl_Promise {
	return SIGCtrl_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Extn() CtrlExtnDataList_Promise {
	return CtrlExtnDataList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ack() Ack_Promise {
	return Ack_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_df42b02816bdc1bf = "x\xdaD\xd2MH\x1cg\x1c\x06\xf0\xe7ywg?" +
	"\xfc`g\xfb\x8e\xbd\x15\xa1HQ\xe9\x87Z\xa1TZ" +
	"j\xb5R\x15\xb7\xb8\x1d\x0b^Z\xdd\xddY\xd7\xad\xeb" +
	"v\x9c\x1dQ\xa1\xd0\x06\xc4c\xf0\x90@\x12\x08!\xa7" +
	"\x90C\x82B $\xc4$\"\x01\x13\x10B\x0e\x92C" +
	" \xe4\x90K\xc8\xc1H>\x8c\xc6\xbc\xe1]v#{" +
	"Y\xfe\xbfy\xe7\xf9\xbf\xc3\xd3v\xd1\xe8\x16\xed\xc67" +
	"_\x00\xf6\x0d\x1a!5r\xae\x7fns\xf7\xef\xe3H" +
	"\xc6(\xd4\xad\xf5\xb5O\x9bWz\x1e\xa3O\x84k\x00" +
	"y\xf8\xc9ui\xc80\xf0-\xe5\x05\x01\xaa\xd3;\xfe" +
	"\xea\xfc\x9d\xc1\x0d\xc4c<z\xda\x10a@\xae7<" +
	"\x93[\x0d\xfa\xdf\xdd\x869\xa8\xcaoEe|\xaf0" +
	"\xe6\x16\x1c~\x9dI\xb9E\xb7\xab\xf7'\xdf+\x0c\x17" +
	"\x9ca2\xd9\x16\x08\xd6)\x15$ \x7ff\x07`\xff" +
	"\xc0\x00\xed~\x0a\xd6\xf3\xbd\xb2\xa8\xa1\x8f\x9f\x03v\xb7" +
	"\x86!\x0d\xe2PY\x14\x80\x1c`+`\xff\xa2aX" +
	"C\xe0\x9d\xb2\x18\x00d\x82\x83\x80=\xa4aTC\xf0" +
	"@Y\x0c\x02\xf2\x8f2\x8ch\x18\xd7`\xec+\x8b\x06" +
	" \xff,\x87\x8fjp4\x84\xde*\x8b!@\xa6\xf8" +
	";`\x8fk(h\x08\xef)\x8b\xfa\x8e\xf9\xf2V\x8e" +
	"\x06WC\xe4\x8d\xb2\x18\x01\xe4ty\xabI\x0d>\x05" +
	"\xe35\xb4\x18\x05\xe4L9\xa2\xa0\xe7\xf3z^K\x8b" +
	"\xfa\x1b\xcf\xb2\x07\xb0]=\xffW\xbf(\xfaZY\xac" +
	"\x05\xe4B9\xc1\xd7\xf0?\x05\x1bg\x8b\xa5\xac\x8fP" +
	"\xd8\xcd\xa4i\xaa\xa7\xc9\x85\xef2\xbf\xde\xde\x06H\x13" +
	"\x8c\xe5'\xf2\x0eMu\xad\xc5\xd8\x93\x07'\xcfV\xc6" +
	"*\x93\xf5\xfcDn\xda\x07@S}\xff\xf0\xf9\xd2\x15" +
	"w\xf9|U\xdd\x94?y\xa4\xf7\xee\x9f\xa9\xeb\xd9\xff" +
	"\xb2\xaa\x8d\xa5|\xdaK\xd1T\xcb\x1b\x8bc\xaf6\xdb" +
	"w\xab\xa7\x1co*\xbb\x90\xc8M\x83\xbe>\xf5B\x1e" +
	"l_][\xadh\xb8\x94\xcf\xd1T\x91\x1f;J-" +
	"M\x7f=\xa9\xae\x97\x9d\xf7\x8b4\xd5\xc4\xbaX\xba\xf9" +
	"\xd9\xf8V5\xc2\xcb\xce\x0c8\x8cB0\x0a\xfe\xe7{" +
	"\xa9Lv\xc0a=\x04\xeb\xc1p*3ES=\xba" +
	"\xdc\xf9\xa0\xeb\xd4\xa5\x9d\x8fW\xaa\xf4IT\xfad\xe7" +
	"s\xc5\xac\xd3\xeb{\xb1j\xab\"\x81 \xa0K\x15o" +
	"i\x05\x92M\x01&\xdb\x04\xe3d\xb9P\xf1\xaf\xf4\xb0" +
	"9\xc0d\xa7`,]\xf8']\x0d\x8c\x95\xf29\xbd" +
	"e\xcd\xb1\xdf^:'\x12\x8b\x95\xc4\x0f\x01\x00\x00\xff" +
	"\xff#\xdc\xc6\xe8"

func init() {
	schemas.Register(schema_df42b02816bdc1bf,
		0x8e6af2c877489f54,
		0xc34ac578b174f099)
}
