#!/bin/bash

# This test checks that the border router fetches the dynamic topology
# from the discovery service, and that an expired dynamic topology is dropped.
#
# The test is structured as follows:
# 1. Check connectivity
# 2. Serve dynamic topology with invalid BS address -> link goes down
# 3. Check connectivity is broken
# 4. Let dynamic topology expire -> link goes up
# 5. Check connectivity is up again

. acceptance/discovery_util/util.sh

PROGRAM=`basename "$0"`
COMMAND="$1"
TEST_NAME="discovery_br_fetches_dynamic"

DST_IA=${DST_IA:-1-ff00:0:112}
DST_IA_FILE="$(ia_file $DST_IA)"


test_setup() {
    set -e
    base_setup

    local cfg="gen/ISD1/AS$AS_FILE/br$IA_FILE-1/br.toml"
    echo $cfg
    set_log_lvl "$cfg"
    set_interval "$cfg" "dynamic"

    base_start_scion
    ./tools/dc start tester_$DST_IA_FILE tester_$IA_FILE
}

test_run() {
    set -e
    sleep 3
    check_connectivity "initial check"

    log "Staring to serve dynamic topology with wrong BS address."
    jq ".BeaconService[].Addrs.IPv4.Public.Addr = \"127.42.42.42\" | .Timestamp = $( date +%s) | .TTL = 7" $TOPO | sponge $DYNAMIC_FULL
    log "Waiting for BS to issue revocation and link going down"
    sleep 4
    check_connectivity_broken "invalid beacon service address"

    log "Waiting until dynamic topology expires and revocations are gone."
    sleep 15
    check_connectivity "dynamic topology expired"

    log "Checking fail action."
    check_br_fail_action "dynamic"
}

check_connectivity() {
    bin/end2end_integration -src $IA -dst $DST_IA -attempts 5 -d || fail "FAIL: Traffic does not pass. step=( $1 )"
}

check_connectivity_broken() {
    bin/end2end_integration -src $IA -dst $DST_IA -attempts 1 -d -log.console=crit || local failed=$?
    if [ -z ${failed+x} ]; then
        echo "FAIL: Traffic still passes. step=( $1 )"
        return 1
    fi
}

shift
do_command $PROGRAM $COMMAND $TEST_NAME "$@"
