// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/control/drkey/grpc (interfaces: Engine)

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	drkey "github.com/scionproto/scion/pkg/drkey"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// DeriveASHost mocks base method.
func (m *MockEngine) DeriveASHost(arg0 context.Context, arg1 drkey.ASHostMeta) (drkey.ASHostKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveASHost", arg0, arg1)
	ret0, _ := ret[0].(drkey.ASHostKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveASHost indicates an expected call of DeriveASHost.
func (mr *MockEngineMockRecorder) DeriveASHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveASHost", reflect.TypeOf((*MockEngine)(nil).DeriveASHost), arg0, arg1)
}

// DeriveHostAS mocks base method.
func (m *MockEngine) DeriveHostAS(arg0 context.Context, arg1 drkey.HostASMeta) (drkey.HostASKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveHostAS", arg0, arg1)
	ret0, _ := ret[0].(drkey.HostASKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveHostAS indicates an expected call of DeriveHostAS.
func (mr *MockEngineMockRecorder) DeriveHostAS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveHostAS", reflect.TypeOf((*MockEngine)(nil).DeriveHostAS), arg0, arg1)
}

// DeriveHostHost mocks base method.
func (m *MockEngine) DeriveHostHost(arg0 context.Context, arg1 drkey.HostHostMeta) (drkey.HostHostKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveHostHost", arg0, arg1)
	ret0, _ := ret[0].(drkey.HostHostKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveHostHost indicates an expected call of DeriveHostHost.
func (mr *MockEngineMockRecorder) DeriveHostHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveHostHost", reflect.TypeOf((*MockEngine)(nil).DeriveHostHost), arg0, arg1)
}

// DeriveLevel1 mocks base method.
func (m *MockEngine) DeriveLevel1(arg0 drkey.Level1Meta) (drkey.Level1Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveLevel1", arg0)
	ret0, _ := ret[0].(drkey.Level1Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveLevel1 indicates an expected call of DeriveLevel1.
func (mr *MockEngineMockRecorder) DeriveLevel1(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveLevel1", reflect.TypeOf((*MockEngine)(nil).DeriveLevel1), arg0)
}

// GetLevel1Key mocks base method.
func (m *MockEngine) GetLevel1Key(arg0 context.Context, arg1 drkey.Level1Meta) (drkey.Level1Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel1Key", arg0, arg1)
	ret0, _ := ret[0].(drkey.Level1Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLevel1Key indicates an expected call of GetLevel1Key.
func (mr *MockEngineMockRecorder) GetLevel1Key(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel1Key", reflect.TypeOf((*MockEngine)(nil).GetLevel1Key), arg0, arg1)
}

// GetSecretValue mocks base method.
func (m *MockEngine) GetSecretValue(arg0 context.Context, arg1 drkey.SecretValueMeta) (drkey.SecretValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1)
	ret0, _ := ret[0].(drkey.SecretValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockEngineMockRecorder) GetSecretValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockEngine)(nil).GetSecretValue), arg0, arg1)
}
