// Copyright 2018 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package scrypto

import (
	"testing"

	. "github.com/smartystreets/goconvey/convey"
	"golang.org/x/crypto/ed25519"

	"github.com/scionproto/scion/go/lib/common"
)

var (
	// Ed25519 test vectors
	// Taken from the Python test vectors: http://ed25519.cr.yp.to/python/sign.input
	Ed25519TestPrivateKey = common.RawBytes{0xb1, 0x8e, 0x1d, 0x00, 0x45, 0x99, 0x5e, 0xc3, 0xd0,
		0x10, 0xc3, 0x87, 0xcc, 0xfe, 0xb9, 0x84, 0xd7, 0x83, 0xaf, 0x8f, 0xbb, 0x0f, 0x40, 0xfa,
		0x7d, 0xb1, 0x26, 0xd8, 0x89, 0xf6, 0xda, 0xdd}
	Ed25519TestPublicKey = common.RawBytes{0x77, 0xf4, 0x8b, 0x59, 0xca, 0xed, 0xa7, 0x77, 0x51,
		0xed, 0x13, 0x8b, 0x0e, 0xc6, 0x67, 0xff, 0x50, 0xf8, 0x76, 0x8c, 0x25, 0xd4, 0x83, 0x09,
		0xa8, 0xf3, 0x86, 0xa2, 0xba, 0xd1, 0x87, 0xfb}
	Ed25519TestMsg = common.RawBytes{0x91, 0x6c, 0x7d, 0x1d, 0x26, 0x8f, 0xc0, 0xe7, 0x7c, 0x1b,
		0xef, 0x23, 0x84, 0x32, 0x57, 0x3c, 0x39, 0xbe, 0x57, 0x7b, 0xbe, 0xa0, 0x99, 0x89, 0x36,
		0xad, 0xd2, 0xb5, 0x0a, 0x65, 0x31, 0x71, 0xce, 0x18, 0xa5, 0x42, 0xb0, 0xb7, 0xf9, 0x6c,
		0x16, 0x91, 0xa3, 0xbe, 0x60, 0x31, 0x52, 0x28, 0x94, 0xa8, 0x63, 0x41, 0x83, 0xed, 0xa3,
		0x87, 0x98, 0xa0, 0xc5, 0xd5, 0xd7, 0x9f, 0xbd, 0x01, 0xdd, 0x04, 0xa8, 0x64, 0x6d, 0x71,
		0x87, 0x3b, 0x77, 0xb2, 0x21, 0x99, 0x8a, 0x81, 0x92, 0x2d, 0x81, 0x05, 0xf8, 0x92, 0x31,
		0x63, 0x69, 0xd5, 0x22, 0x4c, 0x99, 0x83, 0x37, 0x2d, 0x23, 0x13, 0xc6, 0xb1, 0xf4, 0x55,
		0x6e, 0xa2, 0x6b, 0xa4, 0x9d, 0x46, 0xe8, 0xb5, 0x61, 0xe0, 0xfc, 0x76, 0x63, 0x3a, 0xc9,
		0x76, 0x6e, 0x68, 0xe2, 0x1f, 0xba, 0x7e, 0xdc, 0xa9, 0x3c, 0x4c, 0x74, 0x60, 0x37, 0x6d,
		0x7f, 0x3a, 0xc2, 0x2f, 0xf3, 0x72, 0xc1, 0x8f, 0x61, 0x3f, 0x2a, 0xe2, 0xe8, 0x56, 0xaf,
		0x40}
	Ed25519TestSignature = common.RawBytes{0x6b, 0xd7, 0x10, 0xa3, 0x68, 0xc1, 0x24, 0x99, 0x23,
		0xfc, 0x7a, 0x16, 0x10, 0x74, 0x74, 0x03, 0x04, 0x0f, 0x0c, 0xc3, 0x08, 0x15, 0xa0, 0x0f,
		0x9f, 0xf5, 0x48, 0xa8, 0x96, 0xbb, 0xda, 0x0b, 0x4e, 0xb2, 0xca, 0x19, 0xeb, 0xcf, 0x91,
		0x7f, 0x0f, 0x34, 0x20, 0x0a, 0x9e, 0xdb, 0xad, 0x39, 0x01, 0xb6, 0x4a, 0xb0, 0x9c, 0xc5,
		0xef, 0x7b, 0x9b, 0xcc, 0x3c, 0x40, 0xc0, 0xff, 0x75, 0x09}

	// NaClBox test vectors
	// Taken from the NaCl distribution:
	// https://github.com/jedisct1/libsodium/blob/1.0.16/test/default/box.c
	NaClBoxTestPrivateKey = common.RawBytes{0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c,
		0x16, 0xc1, 0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0, 0x99, 0x2a,
		0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a}
	NaClBoxTestPublicKey = common.RawBytes{0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3,
		0x5b, 0x61, 0xc2, 0xec, 0xe4, 0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78, 0x67, 0x4d,
		0xad, 0xfc, 0x7e, 0x14, 0x6f, 0x88, 0x2b, 0x4f}
	NaClBoxTestNonce = common.RawBytes{0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73, 0xcd, 0x62,
		0xbd, 0xa8, 0x75, 0xfc, 0x73, 0xd6, 0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37}
	NaClBoxTestMsg = common.RawBytes{0xbe, 0x07, 0x5f, 0xc5, 0x3c, 0x81, 0xf2, 0xd5, 0xcf, 0x14,
		0x13, 0x16, 0xeb, 0xeb, 0x0c, 0x7b, 0x52, 0x28, 0xc5, 0x2a, 0x4c, 0x62, 0xcb, 0xd4, 0x4b,
		0x66, 0x84, 0x9b, 0x64, 0x24, 0x4f, 0xfc, 0xe5, 0xec, 0xba, 0xaf, 0x33, 0xbd, 0x75, 0x1a,
		0x1a, 0xc7, 0x28, 0xd4, 0x5e, 0x6c, 0x61, 0x29, 0x6c, 0xdc, 0x3c, 0x01, 0x23, 0x35, 0x61,
		0xf4, 0x1d, 0xb6, 0x6c, 0xce, 0x31, 0x4a, 0xdb, 0x31, 0x0e, 0x3b, 0xe8, 0x25, 0x0c, 0x46,
		0xf0, 0x6d, 0xce, 0xea, 0x3a, 0x7f, 0xa1, 0x34, 0x80, 0x57, 0xe2, 0xf6, 0x55, 0x6a, 0xd6,
		0xb1, 0x31, 0x8a, 0x02, 0x4a, 0x83, 0x8f, 0x21, 0xaf, 0x1f, 0xde, 0x04, 0x89, 0x77, 0xeb,
		0x48, 0xf5, 0x9f, 0xfd, 0x49, 0x24, 0xca, 0x1c, 0x60, 0x90, 0x2e, 0x52, 0xf0, 0xa0, 0x89,
		0xbc, 0x76, 0x89, 0x70, 0x40, 0xe0, 0x82, 0xf9, 0x37, 0x76, 0x38, 0x48, 0x64, 0x5e, 0x07,
		0x05}
	NaClBoxTestCiphertext = common.RawBytes{0xf3, 0xff, 0xc7, 0x70, 0x3f, 0x94, 0x00, 0xe5, 0x2a,
		0x7d, 0xfb, 0x4b, 0x3d, 0x33, 0x05, 0xd9, 0x8e, 0x99, 0x3b, 0x9f, 0x48, 0x68, 0x12, 0x73,
		0xc2, 0x96, 0x50, 0xba, 0x32, 0xfc, 0x76, 0xce, 0x48, 0x33, 0x2e, 0xa7, 0x16, 0x4d, 0x96,
		0xa4, 0x47, 0x6f, 0xb8, 0xc5, 0x31, 0xa1, 0x18, 0x6a, 0xc0, 0xdf, 0xc1, 0x7c, 0x98, 0xdc,
		0xe8, 0x7b, 0x4d, 0xa7, 0xf0, 0x11, 0xec, 0x48, 0xc9, 0x72, 0x71, 0xd2, 0xc2, 0x0f, 0x9b,
		0x92, 0x8f, 0xe2, 0x27, 0x0d, 0x6f, 0xb8, 0x63, 0xd5, 0x17, 0x38, 0xb4, 0x8e, 0xee, 0xe3,
		0x14, 0xa7, 0xcc, 0x8a, 0xb9, 0x32, 0x16, 0x45, 0x48, 0xe5, 0x26, 0xae, 0x90, 0x22, 0x43,
		0x68, 0x51, 0x7a, 0xcf, 0xea, 0xbd, 0x6b, 0xb3, 0x73, 0x2b, 0xc0, 0xe9, 0xda, 0x99, 0x83,
		0x2b, 0x61, 0xca, 0x01, 0xb6, 0xde, 0x56, 0x24, 0x4a, 0x9e, 0x88, 0xd5, 0xf9, 0xb3, 0x79,
		0x73, 0xf6, 0x22, 0xa4, 0x3d, 0x14, 0xa6, 0x59, 0x9b, 0x1f, 0x65, 0x4c, 0xb4, 0x5a, 0x74,
		0xe3, 0x55, 0xa5}
)

func TestGenKeyPairs(t *testing.T) {
	Convey("GenKeyPairs should return a valid Curve25519xSalsa20Poly1305 key pair", t, func() {
		rawPubkey, rawPrivkey, err := GenKeyPairs(Curve25519xSalsa20Poly1305)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("rawPubkey", len(rawPubkey), ShouldResemble, NaClBoxKeySize)
		SoMsg("rawPrivkey", len(rawPrivkey), ShouldResemble, NaClBoxKeySize)
		newPubkey, newPrivkey, err := GenKeyPairs(Curve25519xSalsa20Poly1305)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("rawPubkey", rawPubkey, ShouldNotResemble, newPubkey)
		SoMsg("rawPrivkey", rawPrivkey, ShouldNotResemble, newPrivkey)
	})

	Convey("GenKeyPairs should return a valid Ed25519 key pair", t, func() {
		rawPubkey, rawPrivkey, err := GenKeyPairs(Ed25519)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("rawPubkey", len(rawPubkey), ShouldResemble, ed25519.PublicKeySize)
		SoMsg("rawPrivkey", len(rawPrivkey), ShouldResemble, ed25519.PrivateKeySize)
		newPubkey, newPrivkey, err := GenKeyPairs(Ed25519)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("rawPubkey", rawPubkey, ShouldNotResemble, newPubkey)
		SoMsg("rawPrivkey", rawPrivkey, ShouldNotResemble, newPrivkey)
	})

	Convey("GenKeyPairs should throw error for unknown algo", t, func() {
		_, _, err := GenKeyPairs("asdf")
		SoMsg("err", err, ShouldNotBeNil)
	})
}

func TestSign(t *testing.T) {
	// Note from: https://godoc.org/golang.org/x/crypto/ed25519
	// "...this package's private key representation includes a public key suffix to make
	// multiple signing operations with the same key more efficient...""
	Convey("Sign should sign message correctly", t, func() {
		sig, err := Sign(Ed25519TestMsg,
			common.RawBytes(ed25519.NewKeyFromSeed(Ed25519TestPrivateKey)), Ed25519)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("sig", sig, ShouldResemble, Ed25519TestSignature)
	})

	Convey("Sign should throw error for invalid key size", t, func() {
		_, err := Sign(Ed25519TestMsg,
			common.RawBytes(ed25519.NewKeyFromSeed(Ed25519TestPrivateKey))[:63], Ed25519)
		SoMsg("err", err, ShouldNotBeNil)
	})

	Convey("Sign should throw error for unknown algo", t, func() {
		_, err := Sign(Ed25519TestMsg,
			common.RawBytes(ed25519.NewKeyFromSeed(Ed25519TestPrivateKey)), "asdf")
		SoMsg("err", err, ShouldNotBeNil)
	})
}

func TestVerify(t *testing.T) {
	Convey("Verify should verify signature correctly", t, func() {
		err := Verify(Ed25519TestMsg, Ed25519TestSignature, Ed25519TestPublicKey, Ed25519)
		SoMsg("err", err, ShouldBeNil)
	})

	Convey("Verify should throw an error for an invalid signature", t, func() {
		err := Verify(Ed25519TestMsg, Ed25519TestSignature[:63], Ed25519TestPublicKey, Ed25519)
		SoMsg("err", err, ShouldNotBeNil)
	})

	Convey("Verify should throw an error for an invalid key size", t, func() {
		err := Verify(Ed25519TestMsg, Ed25519TestSignature, Ed25519TestPublicKey[:31], Ed25519)
		SoMsg("err", err, ShouldNotBeNil)
	})

	Convey("Verify should throw an error for unknown algo", t, func() {
		err := Verify(Ed25519TestMsg, Ed25519TestSignature, Ed25519TestPublicKey, "asdf")
		SoMsg("err", err, ShouldNotBeNil)
	})
}

func TestNonce(t *testing.T) {
	Convey("Nonce should return a random byte sequence", t, func() {
		rawNonce, err := Nonce(32)
		SoMsg("err", err, ShouldBeNil)
		newNonce, err := Nonce(32)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("rawNonce", rawNonce, ShouldNotResemble, newNonce)
	})

	Convey("Nonce length is equal to input", t, func() {
		rawNonce, err := Nonce(24)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("rawNonce", len(rawNonce), ShouldResemble, 24)
		rawNonce, err = Nonce(32)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("rawNonce", len(rawNonce), ShouldResemble, 32)
	})

	Convey("Nonce should throw an error for an invalid length", t, func() {
		_, err := Nonce(0)
		SoMsg("err", err, ShouldNotBeNil)
		_, err = Nonce(-1)
		SoMsg("err", err, ShouldNotBeNil)
	})
}

func TestEncrypt(t *testing.T) {
	Convey("Encrypt should encrypt a plaintext correctly", t, func() {
		rawCipher, err := Encrypt(NaClBoxTestMsg, NaClBoxTestNonce, NaClBoxTestPublicKey,
			NaClBoxTestPrivateKey, Curve25519xSalsa20Poly1305)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("rawCipher", rawCipher, ShouldResemble, NaClBoxTestCiphertext)
	})

	Convey("Encrypt should throw error for invalid nonce size", t, func() {
		_, err := Encrypt(NaClBoxTestMsg, NaClBoxTestNonce[:23], NaClBoxTestPublicKey,
			NaClBoxTestPrivateKey, Curve25519xSalsa20Poly1305)
		SoMsg("err", err, ShouldNotBeNil)
	})

	Convey("Encrypt should throw error for invalid public key size", t, func() {
		_, err := Encrypt(NaClBoxTestMsg, NaClBoxTestNonce, NaClBoxTestPublicKey[:31],
			NaClBoxTestPrivateKey, Curve25519xSalsa20Poly1305)
		SoMsg("err", err, ShouldNotBeNil)
	})

	Convey("Encrypt should throw error for invalid private key size", t, func() {
		_, err := Encrypt(NaClBoxTestMsg, NaClBoxTestNonce, NaClBoxTestPublicKey,
			NaClBoxTestPrivateKey[:31], Curve25519xSalsa20Poly1305)
		SoMsg("err", err, ShouldNotBeNil)
	})

	Convey("Encrypt should throw an error for unknown algo", t, func() {
		_, err := Encrypt(NaClBoxTestMsg, NaClBoxTestNonce, NaClBoxTestPublicKey,
			NaClBoxTestPrivateKey, "asdf")
		SoMsg("err", err, ShouldNotBeNil)
	})
}

func TestDecrypt(t *testing.T) {
	Convey("Decrypt should decrypt a ciphertex correctly", t, func() {
		rawMsg, err := Decrypt(NaClBoxTestCiphertext, NaClBoxTestNonce, NaClBoxTestPublicKey,
			NaClBoxTestPrivateKey, Curve25519xSalsa20Poly1305)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("rawMsg", rawMsg, ShouldResemble, NaClBoxTestMsg)
	})

	Convey("Decrypt should throw error for invalid nonce size", t, func() {
		_, err := Decrypt(NaClBoxTestCiphertext, NaClBoxTestNonce[:23], NaClBoxTestPublicKey,
			NaClBoxTestPrivateKey, Curve25519xSalsa20Poly1305)
		SoMsg("err", err, ShouldNotBeNil)
	})

	Convey("Decrypt should throw error for invalid public key size", t, func() {
		_, err := Decrypt(NaClBoxTestCiphertext, NaClBoxTestNonce, NaClBoxTestPublicKey[:31],
			NaClBoxTestPrivateKey, Curve25519xSalsa20Poly1305)
		SoMsg("err", err, ShouldNotBeNil)
	})

	Convey("Decrypt should throw error for invalid private key size", t, func() {
		_, err := Decrypt(NaClBoxTestCiphertext, NaClBoxTestNonce, NaClBoxTestPublicKey,
			NaClBoxTestPrivateKey[:31], Curve25519xSalsa20Poly1305)
		SoMsg("err", err, ShouldNotBeNil)
	})

	Convey("Decrypt should throw an error for unknown algo", t, func() {
		_, err := Decrypt(NaClBoxTestCiphertext, NaClBoxTestNonce, NaClBoxTestPublicKey,
			NaClBoxTestPrivateKey, "asdf")
		SoMsg("err", err, ShouldNotBeNil)
	})
}
