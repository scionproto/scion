// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SIGCtrl struct{ capnp.Struct }
type SIGCtrl_Which uint16

const (
	SIGCtrl_Which_unset   SIGCtrl_Which = 0
	SIGCtrl_Which_pollReq SIGCtrl_Which = 1
	SIGCtrl_Which_pollRep SIGCtrl_Which = 2
)

func (w SIGCtrl_Which) String() string {
	const s = "unsetpollReqpollRep"
	switch w {
	case SIGCtrl_Which_unset:
		return s[0:5]
	case SIGCtrl_Which_pollReq:
		return s[5:12]
	case SIGCtrl_Which_pollRep:
		return s[12:19]

	}
	return "SIGCtrl_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SIGCtrl_TypeID is the unique identifier for the type SIGCtrl.
const SIGCtrl_TypeID = 0xe15e242973323d08

func NewSIGCtrl(s *capnp.Segment) (SIGCtrl, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SIGCtrl{st}, err
}

func NewRootSIGCtrl(s *capnp.Segment) (SIGCtrl, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SIGCtrl{st}, err
}

func ReadRootSIGCtrl(msg *capnp.Message) (SIGCtrl, error) {
	root, err := msg.RootPtr()
	return SIGCtrl{root.Struct()}, err
}

func (s SIGCtrl) String() string {
	str, _ := text.Marshal(0xe15e242973323d08, s.Struct)
	return str
}

func (s SIGCtrl) Which() SIGCtrl_Which {
	return SIGCtrl_Which(s.Struct.Uint16(8))
}
func (s SIGCtrl) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s SIGCtrl) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SIGCtrl) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s SIGCtrl) PollReq() (SIGPoll, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != pollReq")
	}
	p, err := s.Struct.Ptr(0)
	return SIGPoll{Struct: p.Struct()}, err
}

func (s SIGCtrl) HasPollReq() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SIGCtrl) SetPollReq(v SIGPoll) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPollReq sets the pollReq field to a newly
// allocated SIGPoll struct, preferring placement in s's segment.
func (s SIGCtrl) NewPollReq() (SIGPoll, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewSIGPoll(s.Struct.Segment())
	if err != nil {
		return SIGPoll{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SIGCtrl) PollRep() (SIGPoll, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != pollRep")
	}
	p, err := s.Struct.Ptr(0)
	return SIGPoll{Struct: p.Struct()}, err
}

func (s SIGCtrl) HasPollRep() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SIGCtrl) SetPollRep(v SIGPoll) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPollRep sets the pollRep field to a newly
// allocated SIGPoll struct, preferring placement in s's segment.
func (s SIGCtrl) NewPollRep() (SIGPoll, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewSIGPoll(s.Struct.Segment())
	if err != nil {
		return SIGPoll{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SIGCtrl_List is a list of SIGCtrl.
type SIGCtrl_List struct{ capnp.List }

// NewSIGCtrl creates a new list of SIGCtrl.
func NewSIGCtrl_List(s *capnp.Segment, sz int32) (SIGCtrl_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return SIGCtrl_List{l}, err
}

func (s SIGCtrl_List) At(i int) SIGCtrl { return SIGCtrl{s.List.Struct(i)} }

func (s SIGCtrl_List) Set(i int, v SIGCtrl) error { return s.List.SetStruct(i, v.Struct) }

func (s SIGCtrl_List) String() string {
	str, _ := text.MarshalList(0xe15e242973323d08, s.List)
	return str
}

// SIGCtrl_Promise is a wrapper for a SIGCtrl promised by a client call.
type SIGCtrl_Promise struct{ *capnp.Pipeline }

func (p SIGCtrl_Promise) Struct() (SIGCtrl, error) {
	s, err := p.Pipeline.Struct()
	return SIGCtrl{s}, err
}

func (p SIGCtrl_Promise) PollReq() SIGPoll_Promise {
	return SIGPoll_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SIGCtrl_Promise) PollRep() SIGPoll_Promise {
	return SIGPoll_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SIGPoll struct{ capnp.Struct }

// SIGPoll_TypeID is the unique identifier for the type SIGPoll.
const SIGPoll_TypeID = 0x9ad73a0235a46141

func NewSIGPoll(s *capnp.Segment) (SIGPoll, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SIGPoll{st}, err
}

func NewRootSIGPoll(s *capnp.Segment) (SIGPoll, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SIGPoll{st}, err
}

func ReadRootSIGPoll(msg *capnp.Message) (SIGPoll, error) {
	root, err := msg.RootPtr()
	return SIGPoll{root.Struct()}, err
}

func (s SIGPoll) String() string {
	str, _ := text.Marshal(0x9ad73a0235a46141, s.Struct)
	return str
}

func (s SIGPoll) Addr() (SIGAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SIGAddr{Struct: p.Struct()}, err
}

func (s SIGPoll) HasAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SIGPoll) SetAddr(v SIGAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddr sets the addr field to a newly
// allocated SIGAddr struct, preferring placement in s's segment.
func (s SIGPoll) NewAddr() (SIGAddr, error) {
	ss, err := NewSIGAddr(s.Struct.Segment())
	if err != nil {
		return SIGAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SIGPoll) Session() uint8 {
	return s.Struct.Uint8(0)
}

func (s SIGPoll) SetSession(v uint8) {
	s.Struct.SetUint8(0, v)
}

// SIGPoll_List is a list of SIGPoll.
type SIGPoll_List struct{ capnp.List }

// NewSIGPoll creates a new list of SIGPoll.
func NewSIGPoll_List(s *capnp.Segment, sz int32) (SIGPoll_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SIGPoll_List{l}, err
}

func (s SIGPoll_List) At(i int) SIGPoll { return SIGPoll{s.List.Struct(i)} }

func (s SIGPoll_List) Set(i int, v SIGPoll) error { return s.List.SetStruct(i, v.Struct) }

func (s SIGPoll_List) String() string {
	str, _ := text.MarshalList(0x9ad73a0235a46141, s.List)
	return str
}

// SIGPoll_Promise is a wrapper for a SIGPoll promised by a client call.
type SIGPoll_Promise struct{ *capnp.Pipeline }

func (p SIGPoll_Promise) Struct() (SIGPoll, error) {
	s, err := p.Pipeline.Struct()
	return SIGPoll{s}, err
}

func (p SIGPoll_Promise) Addr() SIGAddr_Promise {
	return SIGAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SIGAddr struct{ capnp.Struct }

// SIGAddr_TypeID is the unique identifier for the type SIGAddr.
const SIGAddr_TypeID = 0xddf1fce11d9b0028

func NewSIGAddr(s *capnp.Segment) (SIGAddr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SIGAddr{st}, err
}

func NewRootSIGAddr(s *capnp.Segment) (SIGAddr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SIGAddr{st}, err
}

func ReadRootSIGAddr(msg *capnp.Message) (SIGAddr, error) {
	root, err := msg.RootPtr()
	return SIGAddr{root.Struct()}, err
}

func (s SIGAddr) String() string {
	str, _ := text.Marshal(0xddf1fce11d9b0028, s.Struct)
	return str
}

func (s SIGAddr) Ctrl() (HostInfo, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo{Struct: p.Struct()}, err
}

func (s SIGAddr) HasCtrl() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SIGAddr) SetCtrl(v HostInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCtrl sets the ctrl field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s SIGAddr) NewCtrl() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SIGAddr) EncapPort() uint16 {
	return s.Struct.Uint16(0)
}

func (s SIGAddr) SetEncapPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

// SIGAddr_List is a list of SIGAddr.
type SIGAddr_List struct{ capnp.List }

// NewSIGAddr creates a new list of SIGAddr.
func NewSIGAddr_List(s *capnp.Segment, sz int32) (SIGAddr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SIGAddr_List{l}, err
}

func (s SIGAddr_List) At(i int) SIGAddr { return SIGAddr{s.List.Struct(i)} }

func (s SIGAddr_List) Set(i int, v SIGAddr) error { return s.List.SetStruct(i, v.Struct) }

func (s SIGAddr_List) String() string {
	str, _ := text.MarshalList(0xddf1fce11d9b0028, s.List)
	return str
}

// SIGAddr_Promise is a wrapper for a SIGAddr promised by a client call.
type SIGAddr_Promise struct{ *capnp.Pipeline }

func (p SIGAddr_Promise) Struct() (SIGAddr, error) {
	s, err := p.Pipeline.Struct()
	return SIGAddr{s}, err
}

func (p SIGAddr_Promise) Ctrl() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_8273379c3e06a721 = "x\xda\x8c\x91\xbf\xcb\xd3@\x1c\xc6\x9f\xe7\xaeI\xdeW" +
	"(o\xeauzAT\xa8\xda\x8a?jQ\x94\x82b" +
	"\x15\x11\xb7^\xbb\xaa\x18\x9a`\x031\x89I\xa4c\xc1" +
	"?\xa1n\xea\xa8\xb8;\xbb88\xf8\x1789tr" +
	"v\xb7\x9e\xa4\xa9\x16\xac\x83\xdcr|\x9f\x0f\xf7\xb9\xe7" +
	"\xae\xab\xad\x9b\xe2\x92u\xf140\xfe@\xcb6\x03\xef" +
	"\xcd\x15\xd1\xff\xf2\x12\xfa\x08iN\xbe\xb3o\xbc\xbe\x9a" +
	"?\x87E\x07P\xab\xa3\x0be\xa9rG5\x03W\xed" +
	"W\xc7\x96?\xbe\x7f\xfd\x17\xfa@-T\xb0F\xbd\x12" +
	"5{\xd7{y\xa7\xf5pY\x9e+\xb6\xf0\x1d:\x92" +
	"5\xf5Q-\xd4\xe75\xfdI}\x83\xd9\xac\xb7&\x0f" +
	"\x1f_\x98xi\xcc\xb4?\xbeww\x98D\x8c\x86\xa4" +
	"\xde\x935\xa0F\xa0\xd19\x0b\xe8\x96\xa4\xee\x0a\x92M" +
	"\x96\xb3\xf3\xb7\x00\xdd\x96\xd4\x97\x05\x0f<\xdf\xcf\xe8\xfe" +
	"\xbe)H\x17\x9c\xe7A\x9e\x87IL\x1b\x826\xf8\x97" +
	"f\xe0\xfb\xcc\xfeC3\x02\xf49I}M\xf0`R" +
	"d\x11]s\xe2\xd4\x8b\x99u\xe6\xf0=*\x91\x09\xe2" +
	"\x89\x97\x0e\x93\x0c,\xe8@\xd0\xd9\x91\xdd.\xb2\xaa\x93" +
	"\xfbG\xe6\x1d\x02\xfa\xbe\xa4\x9e\x0a\xd6iL\xa5\x0bz" +
	"\x80~$\xa9#\xc1\xba\xf8i\x9a\x14@#,\xbb\xfa" +
	"\x92:\x15\xac\xcb\x95iR\x02\x8d'\xe5t*\xa9\x0b" +
	"A\x19\xfa\xdc\x87\xe0>x\xfcY\x9c\x07\x05\xecy\x9a" +
	"D\xd1(xJw\xfb\xdd\x9b\x97\xa9\x92t7\xf9\x15" +
	"\x00\x00\xff\xff\xd9L~\xcb"

func init() {
	schemas.Register(schema_8273379c3e06a721,
		0x9ad73a0235a46141,
		0xddf1fce11d9b0028,
		0xe15e242973323d08)
}
