// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ZkId struct{ capnp.Struct }

// ZkId_TypeID is the unique identifier for the type ZkId.
const ZkId_TypeID = 0xfaadb66890d8d665

func NewZkId(s *capnp.Segment) (ZkId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ZkId{st}, err
}

func NewRootZkId(s *capnp.Segment) (ZkId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ZkId{st}, err
}

func ReadRootZkId(msg *capnp.Message) (ZkId, error) {
	root, err := msg.RootPtr()
	return ZkId{root.Struct()}, err
}

func (s ZkId) String() string {
	str, _ := text.Marshal(0xfaadb66890d8d665, s.Struct)
	return str
}

func (s ZkId) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ZkId) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ZkId) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ZkId) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZkId) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ZkId) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ZkId) Addrs() (Addr_List, error) {
	p, err := s.Struct.Ptr(1)
	return Addr_List{List: p.List()}, err
}

func (s ZkId) HasAddrs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ZkId) SetAddrs(v Addr_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated Addr_List, preferring placement in s's segment.
func (s ZkId) NewAddrs(n int32) (Addr_List, error) {
	l, err := NewAddr_List(s.Struct.Segment(), n)
	if err != nil {
		return Addr_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// ZkId_List is a list of ZkId.
type ZkId_List struct{ capnp.List }

// NewZkId creates a new list of ZkId.
func NewZkId_List(s *capnp.Segment, sz int32) (ZkId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return ZkId_List{l}, err
}

func (s ZkId_List) At(i int) ZkId { return ZkId{s.List.Struct(i)} }

func (s ZkId_List) Set(i int, v ZkId) error { return s.List.SetStruct(i, v.Struct) }

func (s ZkId_List) String() string {
	str, _ := text.MarshalList(0xfaadb66890d8d665, s.List)
	return str
}

// ZkId_Promise is a wrapper for a ZkId promised by a client call.
type ZkId_Promise struct{ *capnp.Pipeline }

func (p ZkId_Promise) Struct() (ZkId, error) {
	s, err := p.Pipeline.Struct()
	return ZkId{s}, err
}

type Addr struct{ capnp.Struct }

// Addr_TypeID is the unique identifier for the type Addr.
const Addr_TypeID = 0x8982abce7c93c140

func NewAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Addr{st}, err
}

func NewRootAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Addr{st}, err
}

func ReadRootAddr(msg *capnp.Message) (Addr, error) {
	root, err := msg.RootPtr()
	return Addr{root.Struct()}, err
}

func (s Addr) String() string {
	str, _ := text.Marshal(0x8982abce7c93c140, s.Struct)
	return str
}

func (s Addr) Type() uint8 {
	return s.Struct.Uint8(0)
}

func (s Addr) SetType(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Addr) Addr() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Addr) HasAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Addr) SetAddr(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Addr) Port() uint16 {
	return s.Struct.Uint16(2)
}

func (s Addr) SetPort(v uint16) {
	s.Struct.SetUint16(2, v)
}

// Addr_List is a list of Addr.
type Addr_List struct{ capnp.List }

// NewAddr creates a new list of Addr.
func NewAddr_List(s *capnp.Segment, sz int32) (Addr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Addr_List{l}, err
}

func (s Addr_List) At(i int) Addr { return Addr{s.List.Struct(i)} }

func (s Addr_List) Set(i int, v Addr) error { return s.List.SetStruct(i, v.Struct) }

func (s Addr_List) String() string {
	str, _ := text.MarshalList(0x8982abce7c93c140, s.List)
	return str
}

// Addr_Promise is a wrapper for a Addr promised by a client call.
type Addr_Promise struct{ *capnp.Pipeline }

func (p Addr_Promise) Struct() (Addr, error) {
	s, err := p.Pipeline.Struct()
	return Addr{s}, err
}

const schema_c4f0db62ff503b7d = "x\xdal\x901K\x03A\x14\x84g\xde\xe6\x12\x82\x89" +
	"1n*\x9bt\x16\x16FSj\x13A\xc1\x80\xc2-" +
	"Z\xd9\x9dn\xc0#\xa0\xc7]\x1aE\x9b\xeb\xec\x04\xb1" +
	"\xf07\x88\xc4\xca\xcaF\xb0\xb6\x14\xc1?a-\xc8\xca" +
	"\x92\x80\x18\xc2k\x86\x8f\x81\xef1+\xad\xa0#\xabA" +
	"k\x11\xd8{fPt\x9d\x97\x9b\x8b\xb7\xfb\xfc\x0af" +
	"\x86t\x97\xeb\xa1;\xfc\xfczE\xc0\x12\xa0\x7f\xe6s" +
	"M=JC\xd0\xf5\xde?\xae\x8f\x9f\x1e\xbe'\xcb\xe2" +
	"+\xb7:\xd7wz\x94\x86p\xe3{t\xe7\xfd\xd8." +
	"\x1fE\x09O\x92\xb5\x0dkS\x84\xa4\xa9\xa8\x02P " +
	"P\xdfZ\x02LG\xd1\xec\x08\xc9\x06=\xebz\xb6\xa9" +
	"hBa]\xd8\xa0\x00\xf5]\x0f\xb7\x15\xcd\xbe\xb06" +
	"8Kz,BX\x04k\x91\xb5)\xab\x10V\xc1Z" +
	"r\x9a\x0eX\x82\xb0\x04\xfes\x1f\xf4\xbbv\xd2\xdd\x9e" +
	"\xe2^\x98\xe6n\x8f\xddV\xd8\x8c3\x1be,CX" +
	"\x06UlY\x81\xb0\x026\xfd\x1f\x19g\xc1P\x91s" +
	"\x7f\xd3\x82\x1e\xfe\x06\x00\x00\xff\xff\xb8\x10Q\xaf"

func init() {
	schemas.Register(schema_c4f0db62ff503b7d,
		0x8982abce7c93c140,
		0xfaadb66890d8d665)
}
