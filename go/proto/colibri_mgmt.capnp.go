// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ColibriExternalPkt struct{ capnp.Struct }

// ColibriExternalPkt_TypeID is the unique identifier for the type ColibriExternalPkt.
const ColibriExternalPkt_TypeID = 0xc88e0b4dc4851cb3

func NewColibriExternalPkt(s *capnp.Segment) (ColibriExternalPkt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ColibriExternalPkt{st}, err
}

func NewRootColibriExternalPkt(s *capnp.Segment) (ColibriExternalPkt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ColibriExternalPkt{st}, err
}

func ReadRootColibriExternalPkt(msg *capnp.Message) (ColibriExternalPkt, error) {
	root, err := msg.RootPtr()
	return ColibriExternalPkt{root.Struct()}, err
}

func (s ColibriExternalPkt) String() string {
	str, _ := text.Marshal(0xc88e0b4dc4851cb3, s.Struct)
	return str
}

func (s ColibriExternalPkt) Rpkt() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ColibriExternalPkt) HasRpkt() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriExternalPkt) SetRpkt(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ColibriExternalPkt_List is a list of ColibriExternalPkt.
type ColibriExternalPkt_List struct{ capnp.List }

// NewColibriExternalPkt creates a new list of ColibriExternalPkt.
func NewColibriExternalPkt_List(s *capnp.Segment, sz int32) (ColibriExternalPkt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ColibriExternalPkt_List{l}, err
}

func (s ColibriExternalPkt_List) At(i int) ColibriExternalPkt {
	return ColibriExternalPkt{s.List.Struct(i)}
}

func (s ColibriExternalPkt_List) Set(i int, v ColibriExternalPkt) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ColibriExternalPkt_List) String() string {
	str, _ := text.MarshalList(0xc88e0b4dc4851cb3, s.List)
	return str
}

// ColibriExternalPkt_Promise is a wrapper for a ColibriExternalPkt promised by a client call.
type ColibriExternalPkt_Promise struct{ *capnp.Pipeline }

func (p ColibriExternalPkt_Promise) Struct() (ColibriExternalPkt, error) {
	s, err := p.Pipeline.Struct()
	return ColibriExternalPkt{s}, err
}

type ColibriInstruct struct{ capnp.Struct }

// ColibriInstruct_TypeID is the unique identifier for the type ColibriInstruct.
const ColibriInstruct_TypeID = 0xc35516b835c52ea9

func NewColibriInstruct(s *capnp.Segment) (ColibriInstruct, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColibriInstruct{st}, err
}

func NewRootColibriInstruct(s *capnp.Segment) (ColibriInstruct, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColibriInstruct{st}, err
}

func ReadRootColibriInstruct(msg *capnp.Message) (ColibriInstruct, error) {
	root, err := msg.RootPtr()
	return ColibriInstruct{root.Struct()}, err
}

func (s ColibriInstruct) String() string {
	str, _ := text.Marshal(0xc35516b835c52ea9, s.Struct)
	return str
}

func (s ColibriInstruct) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ColibriInstruct) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriInstruct) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ColibriInstruct) ExpTime() uint64 {
	return s.Struct.Uint64(0)
}

func (s ColibriInstruct) SetExpTime(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ColibriInstruct_List is a list of ColibriInstruct.
type ColibriInstruct_List struct{ capnp.List }

// NewColibriInstruct creates a new list of ColibriInstruct.
func NewColibriInstruct_List(s *capnp.Segment, sz int32) (ColibriInstruct_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ColibriInstruct_List{l}, err
}

func (s ColibriInstruct_List) At(i int) ColibriInstruct { return ColibriInstruct{s.List.Struct(i)} }

func (s ColibriInstruct_List) Set(i int, v ColibriInstruct) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ColibriInstruct_List) String() string {
	str, _ := text.MarshalList(0xc35516b835c52ea9, s.List)
	return str
}

// ColibriInstruct_Promise is a wrapper for a ColibriInstruct promised by a client call.
type ColibriInstruct_Promise struct{ *capnp.Pipeline }

func (p ColibriInstruct_Promise) Struct() (ColibriInstruct, error) {
	s, err := p.Pipeline.Struct()
	return ColibriInstruct{s}, err
}

type ColibriSegmentReq struct{ capnp.Struct }

// ColibriSegmentReq_TypeID is the unique identifier for the type ColibriSegmentReq.
const ColibriSegmentReq_TypeID = 0xe8c7f9eb344c4277

func NewColibriSegmentReq(s *capnp.Segment) (ColibriSegmentReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ColibriSegmentReq{st}, err
}

func NewRootColibriSegmentReq(s *capnp.Segment) (ColibriSegmentReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ColibriSegmentReq{st}, err
}

func ReadRootColibriSegmentReq(msg *capnp.Message) (ColibriSegmentReq, error) {
	root, err := msg.RootPtr()
	return ColibriSegmentReq{root.Struct()}, err
}

func (s ColibriSegmentReq) String() string {
	str, _ := text.Marshal(0xe8c7f9eb344c4277, s.Struct)
	return str
}

func (s ColibriSegmentReq) StartIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s ColibriSegmentReq) SetStartIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ColibriSegmentReq) EndIA() uint64 {
	return s.Struct.Uint64(8)
}

func (s ColibriSegmentReq) SetEndIA(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s ColibriSegmentReq) SegID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ColibriSegmentReq) HasSegID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriSegmentReq) SetSegID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ColibriSegmentReq) PathType() uint8 {
	return s.Struct.Uint8(16)
}

func (s ColibriSegmentReq) SetPathType(v uint8) {
	s.Struct.SetUint8(16, v)
}

// ColibriSegmentReq_List is a list of ColibriSegmentReq.
type ColibriSegmentReq_List struct{ capnp.List }

// NewColibriSegmentReq creates a new list of ColibriSegmentReq.
func NewColibriSegmentReq_List(s *capnp.Segment, sz int32) (ColibriSegmentReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return ColibriSegmentReq_List{l}, err
}

func (s ColibriSegmentReq_List) At(i int) ColibriSegmentReq {
	return ColibriSegmentReq{s.List.Struct(i)}
}

func (s ColibriSegmentReq_List) Set(i int, v ColibriSegmentReq) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ColibriSegmentReq_List) String() string {
	str, _ := text.MarshalList(0xe8c7f9eb344c4277, s.List)
	return str
}

// ColibriSegmentReq_Promise is a wrapper for a ColibriSegmentReq promised by a client call.
type ColibriSegmentReq_Promise struct{ *capnp.Pipeline }

func (p ColibriSegmentReq_Promise) Struct() (ColibriSegmentReq, error) {
	s, err := p.Pipeline.Struct()
	return ColibriSegmentReq{s}, err
}

type ColibriSegmentRecs struct{ capnp.Struct }

// ColibriSegmentRecs_TypeID is the unique identifier for the type ColibriSegmentRecs.
const ColibriSegmentRecs_TypeID = 0xd976c211939fcf47

func NewColibriSegmentRecs(s *capnp.Segment) (ColibriSegmentRecs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ColibriSegmentRecs{st}, err
}

func NewRootColibriSegmentRecs(s *capnp.Segment) (ColibriSegmentRecs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ColibriSegmentRecs{st}, err
}

func ReadRootColibriSegmentRecs(msg *capnp.Message) (ColibriSegmentRecs, error) {
	root, err := msg.RootPtr()
	return ColibriSegmentRecs{root.Struct()}, err
}

func (s ColibriSegmentRecs) String() string {
	str, _ := text.Marshal(0xd976c211939fcf47, s.Struct)
	return str
}

func (s ColibriSegmentRecs) Entries() (ColibriBlockMeta_List, error) {
	p, err := s.Struct.Ptr(0)
	return ColibriBlockMeta_List{List: p.List()}, err
}

func (s ColibriSegmentRecs) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriSegmentRecs) SetEntries(v ColibriBlockMeta_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ColibriBlockMeta_List, preferring placement in s's segment.
func (s ColibriSegmentRecs) NewEntries(n int32) (ColibriBlockMeta_List, error) {
	l, err := NewColibriBlockMeta_List(s.Struct.Segment(), n)
	if err != nil {
		return ColibriBlockMeta_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ColibriSegmentRecs_List is a list of ColibriSegmentRecs.
type ColibriSegmentRecs_List struct{ capnp.List }

// NewColibriSegmentRecs creates a new list of ColibriSegmentRecs.
func NewColibriSegmentRecs_List(s *capnp.Segment, sz int32) (ColibriSegmentRecs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ColibriSegmentRecs_List{l}, err
}

func (s ColibriSegmentRecs_List) At(i int) ColibriSegmentRecs {
	return ColibriSegmentRecs{s.List.Struct(i)}
}

func (s ColibriSegmentRecs_List) Set(i int, v ColibriSegmentRecs) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ColibriSegmentRecs_List) String() string {
	str, _ := text.MarshalList(0xd976c211939fcf47, s.List)
	return str
}

// ColibriSegmentRecs_Promise is a wrapper for a ColibriSegmentRecs promised by a client call.
type ColibriSegmentRecs_Promise struct{ *capnp.Pipeline }

func (p ColibriSegmentRecs_Promise) Struct() (ColibriSegmentRecs, error) {
	s, err := p.Pipeline.Struct()
	return ColibriSegmentRecs{s}, err
}

type ColibriSegmentRep struct{ capnp.Struct }

// ColibriSegmentRep_TypeID is the unique identifier for the type ColibriSegmentRep.
const ColibriSegmentRep_TypeID = 0xa7348e8aa9627482

func NewColibriSegmentRep(s *capnp.Segment) (ColibriSegmentRep, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ColibriSegmentRep{st}, err
}

func NewRootColibriSegmentRep(s *capnp.Segment) (ColibriSegmentRep, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ColibriSegmentRep{st}, err
}

func ReadRootColibriSegmentRep(msg *capnp.Message) (ColibriSegmentRep, error) {
	root, err := msg.RootPtr()
	return ColibriSegmentRep{root.Struct()}, err
}

func (s ColibriSegmentRep) String() string {
	str, _ := text.Marshal(0xa7348e8aa9627482, s.Struct)
	return str
}

func (s ColibriSegmentRep) Req() (ColibriSegmentReq, error) {
	p, err := s.Struct.Ptr(0)
	return ColibriSegmentReq{Struct: p.Struct()}, err
}

func (s ColibriSegmentRep) HasReq() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriSegmentRep) SetReq(v ColibriSegmentReq) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewReq sets the req field to a newly
// allocated ColibriSegmentReq struct, preferring placement in s's segment.
func (s ColibriSegmentRep) NewReq() (ColibriSegmentReq, error) {
	ss, err := NewColibriSegmentReq(s.Struct.Segment())
	if err != nil {
		return ColibriSegmentReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriSegmentRep) Recs() (ColibriSegmentRecs, error) {
	p, err := s.Struct.Ptr(1)
	return ColibriSegmentRecs{Struct: p.Struct()}, err
}

func (s ColibriSegmentRep) HasRecs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ColibriSegmentRep) SetRecs(v ColibriSegmentRecs) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated ColibriSegmentRecs struct, preferring placement in s's segment.
func (s ColibriSegmentRep) NewRecs() (ColibriSegmentRecs, error) {
	ss, err := NewColibriSegmentRecs(s.Struct.Segment())
	if err != nil {
		return ColibriSegmentRecs{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// ColibriSegmentRep_List is a list of ColibriSegmentRep.
type ColibriSegmentRep_List struct{ capnp.List }

// NewColibriSegmentRep creates a new list of ColibriSegmentRep.
func NewColibriSegmentRep_List(s *capnp.Segment, sz int32) (ColibriSegmentRep_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ColibriSegmentRep_List{l}, err
}

func (s ColibriSegmentRep_List) At(i int) ColibriSegmentRep {
	return ColibriSegmentRep{s.List.Struct(i)}
}

func (s ColibriSegmentRep_List) Set(i int, v ColibriSegmentRep) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ColibriSegmentRep_List) String() string {
	str, _ := text.MarshalList(0xa7348e8aa9627482, s.List)
	return str
}

// ColibriSegmentRep_Promise is a wrapper for a ColibriSegmentRep promised by a client call.
type ColibriSegmentRep_Promise struct{ *capnp.Pipeline }

func (p ColibriSegmentRep_Promise) Struct() (ColibriSegmentRep, error) {
	s, err := p.Pipeline.Struct()
	return ColibriSegmentRep{s}, err
}

func (p ColibriSegmentRep_Promise) Req() ColibriSegmentReq_Promise {
	return ColibriSegmentReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriSegmentRep_Promise) Recs() ColibriSegmentRecs_Promise {
	return ColibriSegmentRecs_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type ColibriSegmentRegRep struct{ capnp.Struct }

// ColibriSegmentRegRep_TypeID is the unique identifier for the type ColibriSegmentRegRep.
const ColibriSegmentRegRep_TypeID = 0xe466d3e1aa9221e2

func NewColibriSegmentRegRep(s *capnp.Segment) (ColibriSegmentRegRep, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ColibriSegmentRegRep{st}, err
}

func NewRootColibriSegmentRegRep(s *capnp.Segment) (ColibriSegmentRegRep, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ColibriSegmentRegRep{st}, err
}

func ReadRootColibriSegmentRegRep(msg *capnp.Message) (ColibriSegmentRegRep, error) {
	root, err := msg.RootPtr()
	return ColibriSegmentRegRep{root.Struct()}, err
}

func (s ColibriSegmentRegRep) String() string {
	str, _ := text.Marshal(0xe466d3e1aa9221e2, s.Struct)
	return str
}

func (s ColibriSegmentRegRep) Ack() (capnp.UInt16List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt16List{List: p.List()}, err
}

func (s ColibriSegmentRegRep) HasAck() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriSegmentRegRep) SetAck(v capnp.UInt16List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAck sets the ack field to a newly
// allocated capnp.UInt16List, preferring placement in s's segment.
func (s ColibriSegmentRegRep) NewAck(n int32) (capnp.UInt16List, error) {
	l, err := capnp.NewUInt16List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt16List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ColibriSegmentRegRep_List is a list of ColibriSegmentRegRep.
type ColibriSegmentRegRep_List struct{ capnp.List }

// NewColibriSegmentRegRep creates a new list of ColibriSegmentRegRep.
func NewColibriSegmentRegRep_List(s *capnp.Segment, sz int32) (ColibriSegmentRegRep_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ColibriSegmentRegRep_List{l}, err
}

func (s ColibriSegmentRegRep_List) At(i int) ColibriSegmentRegRep {
	return ColibriSegmentRegRep{s.List.Struct(i)}
}

func (s ColibriSegmentRegRep_List) Set(i int, v ColibriSegmentRegRep) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ColibriSegmentRegRep_List) String() string {
	str, _ := text.MarshalList(0xe466d3e1aa9221e2, s.List)
	return str
}

// ColibriSegmentRegRep_Promise is a wrapper for a ColibriSegmentRegRep promised by a client call.
type ColibriSegmentRegRep_Promise struct{ *capnp.Pipeline }

func (p ColibriSegmentRegRep_Promise) Struct() (ColibriSegmentRegRep, error) {
	s, err := p.Pipeline.Struct()
	return ColibriSegmentRegRep{s}, err
}

type ColibriBlockMeta struct{ capnp.Struct }

// ColibriBlockMeta_TypeID is the unique identifier for the type ColibriBlockMeta.
const ColibriBlockMeta_TypeID = 0xe755cf2bc650de58

func NewColibriBlockMeta(s *capnp.Segment) (ColibriBlockMeta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return ColibriBlockMeta{st}, err
}

func NewRootColibriBlockMeta(s *capnp.Segment) (ColibriBlockMeta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return ColibriBlockMeta{st}, err
}

func ReadRootColibriBlockMeta(msg *capnp.Message) (ColibriBlockMeta, error) {
	root, err := msg.RootPtr()
	return ColibriBlockMeta{root.Struct()}, err
}

func (s ColibriBlockMeta) String() string {
	str, _ := text.Marshal(0xe755cf2bc650de58, s.Struct)
	return str
}

func (s ColibriBlockMeta) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ColibriBlockMeta) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriBlockMeta) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ColibriBlockMeta) Block() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ColibriBlockMeta) HasBlock() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ColibriBlockMeta) SetBlock(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s ColibriBlockMeta) Creation() uint32 {
	return s.Struct.Uint32(0)
}

func (s ColibriBlockMeta) SetCreation(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ColibriBlockMeta) Interfaces() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ColibriBlockMeta) HasInterfaces() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ColibriBlockMeta) SetInterfaces(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s ColibriBlockMeta) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s ColibriBlockMeta) HasSignature() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ColibriBlockMeta) SetSignature(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s ColibriBlockMeta) WhiteList() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s ColibriBlockMeta) HasWhiteList() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ColibriBlockMeta) SetWhiteList(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s ColibriBlockMeta) Mtu() uint16 {
	return s.Struct.Uint16(4)
}

func (s ColibriBlockMeta) SetMtu(v uint16) {
	s.Struct.SetUint16(4, v)
}

// ColibriBlockMeta_List is a list of ColibriBlockMeta.
type ColibriBlockMeta_List struct{ capnp.List }

// NewColibriBlockMeta creates a new list of ColibriBlockMeta.
func NewColibriBlockMeta_List(s *capnp.Segment, sz int32) (ColibriBlockMeta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return ColibriBlockMeta_List{l}, err
}

func (s ColibriBlockMeta_List) At(i int) ColibriBlockMeta { return ColibriBlockMeta{s.List.Struct(i)} }

func (s ColibriBlockMeta_List) Set(i int, v ColibriBlockMeta) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ColibriBlockMeta_List) String() string {
	str, _ := text.MarshalList(0xe755cf2bc650de58, s.List)
	return str
}

// ColibriBlockMeta_Promise is a wrapper for a ColibriBlockMeta promised by a client call.
type ColibriBlockMeta_Promise struct{ *capnp.Pipeline }

func (p ColibriBlockMeta_Promise) Struct() (ColibriBlockMeta, error) {
	s, err := p.Pipeline.Struct()
	return ColibriBlockMeta{s}, err
}

type ColibriMgmt struct{ capnp.Struct }
type ColibriMgmt_Which uint16

const (
	ColibriMgmt_Which_unset                ColibriMgmt_Which = 0
	ColibriMgmt_Which_colibriExternalPkt   ColibriMgmt_Which = 1
	ColibriMgmt_Which_colibriInstruct      ColibriMgmt_Which = 2
	ColibriMgmt_Which_colibriSegmentReq    ColibriMgmt_Which = 3
	ColibriMgmt_Which_colibriSegmentRep    ColibriMgmt_Which = 4
	ColibriMgmt_Which_colibriSegmentReg    ColibriMgmt_Which = 5
	ColibriMgmt_Which_colibriSegmentRegRep ColibriMgmt_Which = 6
	ColibriMgmt_Which_colibriE2EReq        ColibriMgmt_Which = 7
	ColibriMgmt_Which_colibriE2ERep        ColibriMgmt_Which = 8
)

func (w ColibriMgmt_Which) String() string {
	const s = "unsetcolibriExternalPktcolibriInstructcolibriSegmentReqcolibriSegmentRepcolibriSegmentRegcolibriSegmentRegRepcolibriE2EReqcolibriE2ERep"
	switch w {
	case ColibriMgmt_Which_unset:
		return s[0:5]
	case ColibriMgmt_Which_colibriExternalPkt:
		return s[5:23]
	case ColibriMgmt_Which_colibriInstruct:
		return s[23:38]
	case ColibriMgmt_Which_colibriSegmentReq:
		return s[38:55]
	case ColibriMgmt_Which_colibriSegmentRep:
		return s[55:72]
	case ColibriMgmt_Which_colibriSegmentReg:
		return s[72:89]
	case ColibriMgmt_Which_colibriSegmentRegRep:
		return s[89:109]
	case ColibriMgmt_Which_colibriE2EReq:
		return s[109:122]
	case ColibriMgmt_Which_colibriE2ERep:
		return s[122:135]

	}
	return "ColibriMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ColibriMgmt_TypeID is the unique identifier for the type ColibriMgmt.
const ColibriMgmt_TypeID = 0xf024ac061a82cca1

func NewColibriMgmt(s *capnp.Segment) (ColibriMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColibriMgmt{st}, err
}

func NewRootColibriMgmt(s *capnp.Segment) (ColibriMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColibriMgmt{st}, err
}

func ReadRootColibriMgmt(msg *capnp.Message) (ColibriMgmt, error) {
	root, err := msg.RootPtr()
	return ColibriMgmt{root.Struct()}, err
}

func (s ColibriMgmt) String() string {
	str, _ := text.Marshal(0xf024ac061a82cca1, s.Struct)
	return str
}

func (s ColibriMgmt) Which() ColibriMgmt_Which {
	return ColibriMgmt_Which(s.Struct.Uint16(0))
}
func (s ColibriMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s ColibriMgmt) ColibriExternalPkt() (ColibriExternalPkt, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != colibriExternalPkt")
	}
	p, err := s.Struct.Ptr(0)
	return ColibriExternalPkt{Struct: p.Struct()}, err
}

func (s ColibriMgmt) HasColibriExternalPkt() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriMgmt) SetColibriExternalPkt(v ColibriExternalPkt) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewColibriExternalPkt sets the colibriExternalPkt field to a newly
// allocated ColibriExternalPkt struct, preferring placement in s's segment.
func (s ColibriMgmt) NewColibriExternalPkt() (ColibriExternalPkt, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewColibriExternalPkt(s.Struct.Segment())
	if err != nil {
		return ColibriExternalPkt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriMgmt) ColibriInstruct() (ColibriInstruct, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != colibriInstruct")
	}
	p, err := s.Struct.Ptr(0)
	return ColibriInstruct{Struct: p.Struct()}, err
}

func (s ColibriMgmt) HasColibriInstruct() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriMgmt) SetColibriInstruct(v ColibriInstruct) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewColibriInstruct sets the colibriInstruct field to a newly
// allocated ColibriInstruct struct, preferring placement in s's segment.
func (s ColibriMgmt) NewColibriInstruct() (ColibriInstruct, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewColibriInstruct(s.Struct.Segment())
	if err != nil {
		return ColibriInstruct{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriMgmt) ColibriSegmentReq() (ColibriSegmentReq, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != colibriSegmentReq")
	}
	p, err := s.Struct.Ptr(0)
	return ColibriSegmentReq{Struct: p.Struct()}, err
}

func (s ColibriMgmt) HasColibriSegmentReq() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriMgmt) SetColibriSegmentReq(v ColibriSegmentReq) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewColibriSegmentReq sets the colibriSegmentReq field to a newly
// allocated ColibriSegmentReq struct, preferring placement in s's segment.
func (s ColibriMgmt) NewColibriSegmentReq() (ColibriSegmentReq, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewColibriSegmentReq(s.Struct.Segment())
	if err != nil {
		return ColibriSegmentReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriMgmt) ColibriSegmentRep() (ColibriSegmentRep, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != colibriSegmentRep")
	}
	p, err := s.Struct.Ptr(0)
	return ColibriSegmentRep{Struct: p.Struct()}, err
}

func (s ColibriMgmt) HasColibriSegmentRep() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriMgmt) SetColibriSegmentRep(v ColibriSegmentRep) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewColibriSegmentRep sets the colibriSegmentRep field to a newly
// allocated ColibriSegmentRep struct, preferring placement in s's segment.
func (s ColibriMgmt) NewColibriSegmentRep() (ColibriSegmentRep, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewColibriSegmentRep(s.Struct.Segment())
	if err != nil {
		return ColibriSegmentRep{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriMgmt) ColibriSegmentReg() (ColibriSegmentRecs, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != colibriSegmentReg")
	}
	p, err := s.Struct.Ptr(0)
	return ColibriSegmentRecs{Struct: p.Struct()}, err
}

func (s ColibriMgmt) HasColibriSegmentReg() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriMgmt) SetColibriSegmentReg(v ColibriSegmentRecs) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewColibriSegmentReg sets the colibriSegmentReg field to a newly
// allocated ColibriSegmentRecs struct, preferring placement in s's segment.
func (s ColibriMgmt) NewColibriSegmentReg() (ColibriSegmentRecs, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewColibriSegmentRecs(s.Struct.Segment())
	if err != nil {
		return ColibriSegmentRecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriMgmt) ColibriSegmentRegRep() (ColibriSegmentRegRep, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != colibriSegmentRegRep")
	}
	p, err := s.Struct.Ptr(0)
	return ColibriSegmentRegRep{Struct: p.Struct()}, err
}

func (s ColibriMgmt) HasColibriSegmentRegRep() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriMgmt) SetColibriSegmentRegRep(v ColibriSegmentRegRep) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewColibriSegmentRegRep sets the colibriSegmentRegRep field to a newly
// allocated ColibriSegmentRegRep struct, preferring placement in s's segment.
func (s ColibriMgmt) NewColibriSegmentRegRep() (ColibriSegmentRegRep, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewColibriSegmentRegRep(s.Struct.Segment())
	if err != nil {
		return ColibriSegmentRegRep{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriMgmt) ColibriE2EReq() (ColibriExternalPkt, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != colibriE2EReq")
	}
	p, err := s.Struct.Ptr(0)
	return ColibriExternalPkt{Struct: p.Struct()}, err
}

func (s ColibriMgmt) HasColibriE2EReq() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriMgmt) SetColibriE2EReq(v ColibriExternalPkt) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewColibriE2EReq sets the colibriE2EReq field to a newly
// allocated ColibriExternalPkt struct, preferring placement in s's segment.
func (s ColibriMgmt) NewColibriE2EReq() (ColibriExternalPkt, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewColibriExternalPkt(s.Struct.Segment())
	if err != nil {
		return ColibriExternalPkt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriMgmt) ColibriE2ERep() (ColibriExternalPkt, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != colibriE2ERep")
	}
	p, err := s.Struct.Ptr(0)
	return ColibriExternalPkt{Struct: p.Struct()}, err
}

func (s ColibriMgmt) HasColibriE2ERep() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriMgmt) SetColibriE2ERep(v ColibriExternalPkt) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewColibriE2ERep sets the colibriE2ERep field to a newly
// allocated ColibriExternalPkt struct, preferring placement in s's segment.
func (s ColibriMgmt) NewColibriE2ERep() (ColibriExternalPkt, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewColibriExternalPkt(s.Struct.Segment())
	if err != nil {
		return ColibriExternalPkt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ColibriMgmt_List is a list of ColibriMgmt.
type ColibriMgmt_List struct{ capnp.List }

// NewColibriMgmt creates a new list of ColibriMgmt.
func NewColibriMgmt_List(s *capnp.Segment, sz int32) (ColibriMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ColibriMgmt_List{l}, err
}

func (s ColibriMgmt_List) At(i int) ColibriMgmt { return ColibriMgmt{s.List.Struct(i)} }

func (s ColibriMgmt_List) Set(i int, v ColibriMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s ColibriMgmt_List) String() string {
	str, _ := text.MarshalList(0xf024ac061a82cca1, s.List)
	return str
}

// ColibriMgmt_Promise is a wrapper for a ColibriMgmt promised by a client call.
type ColibriMgmt_Promise struct{ *capnp.Pipeline }

func (p ColibriMgmt_Promise) Struct() (ColibriMgmt, error) {
	s, err := p.Pipeline.Struct()
	return ColibriMgmt{s}, err
}

func (p ColibriMgmt_Promise) ColibriExternalPkt() ColibriExternalPkt_Promise {
	return ColibriExternalPkt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriMgmt_Promise) ColibriInstruct() ColibriInstruct_Promise {
	return ColibriInstruct_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriMgmt_Promise) ColibriSegmentReq() ColibriSegmentReq_Promise {
	return ColibriSegmentReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriMgmt_Promise) ColibriSegmentRep() ColibriSegmentRep_Promise {
	return ColibriSegmentRep_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriMgmt_Promise) ColibriSegmentReg() ColibriSegmentRecs_Promise {
	return ColibriSegmentRecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriMgmt_Promise) ColibriSegmentRegRep() ColibriSegmentRegRep_Promise {
	return ColibriSegmentRegRep_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriMgmt_Promise) ColibriE2EReq() ColibriExternalPkt_Promise {
	return ColibriExternalPkt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriMgmt_Promise) ColibriE2ERep() ColibriExternalPkt_Promise {
	return ColibriExternalPkt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_93f5d82ab0601d9b = "x\xda\x8cU_h\x1c\xd5\x1b\xfd\xce\xbd\xb3\x7f\xc2\xef" +
	"\x17\xb3\xc3\x0c\x82\xa1ec\x88`b-5MAD" +
	"i]]4\xd2@\xeen\x03*\x82\x9dln7C" +
	"v'\x93\x99\x1b\x13\x9f\x82\x01_\x04+\xb6o\xfa " +
	">I\x8b\x0f\x15\x15\x14\x1a\xf0Ok+\xb4TP!" +
	">(*\x85\x16DP\xa8hk\xeb\xc8\xbdiv\x92" +
	"uS}\x9c\xef\x1c\xbes\xee\xf9\xe6~wW\x89\xed" +
	"c\xf7e\xce0\"\xd1\x97\xc9&\xcbj\xf2\xd8K\x87" +
	"G\xde\"\xdbA\xf2\xfa\xf6\x83'\x86V\x7f;J\x19" +
	"\x96#\xda=\x8a!8O!G\xe4L`\x81\x90\x1c" +
	"\xdbyz\xcf\x07\xb7O|J\xc2\xc1F\xb6\xa6\xec~" +
	"\x07\xbdp>6\xec\x15\xc3~w\xdb\x8b\xa7\xc6\xfew" +
	"\xf8l[kC\xbe\x83\x0d\xc3\x19\xd4*\xce]l/" +
	"!y\xec\xc2\x1bG\xedO\x9e\xfb\xa6\x13\xb9\xac\xc9\x13" +
	"\x86,\x0c\xf9\xc7;\x8f\x1c\xff\xe1\xcbC\x17;\x91_" +
	"`%8\xaf\x1a\xf2\xcb\x86\xfc\xe4w\xe3\x9f\xddsa" +
	"\xe2R\xbb\xe9\x8cf\xaf\xb0~8\xe7\xcdi?g\xaf" +
	"\x80\x90,\x94\xf6\x8f\xfct\xf5\xcceM\xe7\xed\xcd=" +
	"k\x08\xce\x9c\xa5\x9b7\xadK\x84\xe4\xcds\xcb\xbd\xd9" +
	"\xb7\x07~ik^F\xae\x8b\xc8)g\xae9\xc2\xe8" +
	"\x8ce\x12\xdd\xbc6\xdb\xf0'#\xffY\xde\xac7\xd5" +
	"\xce\x9a\x17\x06\xe1\x03\x8f\xac\xd5\xaa\xb2\xde\x94A\x8f\xaa" +
	"\xc8p\x1c\x10yn\x11Y \xb2\x07\xfb\x89\xc4\x00\x87" +
	"\xd8\xc5`\x03.t\xf1\xde!\"q7\x87\x18a\xc8" +
	"Er\x0e\x85\xd48\x01\x05BO$k1\x0ai\xb0" +
	"k\xe5[Y\x18\x0db\x15\xcd\xf3\x9aj3\xd0\x9b\x1a" +
	"h\xe9\x97R}\xeeO\xa1\x9b\x18\xba\x09Kr1<" +
	"\xe07%\xba\x88\xa1\xeb\xd6j\xe5E%\xa3\xa0\xe85" +
	"\xc6g\x8c\xa0\xd5\x12\xec\xd6\x87\xcbs\x08\x97\xa1'\x0a" +
	"g\xd4z\xfb\x7f\xcf\xaf\xa8*\xb2\x16\xb7\xb5+\xddl" +
	"7\xc0\xb0$\x03\x15\xf92\xc6m\x84q\x0e\x14\xd2\xdf" +
	"\x83\xa0\x8b-\x09k+\x09U\x91\xf5\x8a\x0c\xa9M\xa4" +
	"?\x15\xc9y\xb5\x99u\x81\x1c\xb1Mm;8/5" +
	"fk3c9\xa9<\xddr[\xab\xe5\xfb:\xf7\x13" +
	"\x1c\xe2\xe4\x86\xc1\x7f8L$\xde\xe3\x10\x1f1\x80\xb9" +
	"`D\xf6\xca\x13D\xe2$\x878\xcb`s\xe6\x82\x13" +
	"\xd9\xa7\x9f&\x12\xa78\xc4\x17\x0c\xb6\xc5]XD\xf6" +
	"\xf9\x0a\x918\xc7!V\x19\xec\x8c\xe5\"Cd\x7f\xad" +
	"\x8b_q\x88\xef\x19\xec,s\x91%\xb2\xbf\xd5\xe7Y" +
	"\xe5\x10\x177\x0d\xb88\xa9\xcd\xa6\xf3\x88\xa4\xa7\xfc\xd9" +
	"\x80\x88\x90'\x86<!\xf1\x03%\xa3C^\x8d\xb8\x8c" +
	"[\xc4\xd8\xaf\x07\x9e\x9a\x8f\x08\xb2U[\x98\xf6\x95\xdc" +
	"\xef\xc7\x84\xd6\x80sM5o\"\xcb\xfd\xd7\xcb2\xa7" +
	"3+\xb42\xf3\xf4\xac\x9f\xe1\x10\xd3\x1b2\x93:\xb3" +
	"\x83\x1c\xa2\x91f\xe6\xeb\xda\x14\x87\x08uf\x85\xb5\xcc" +
	"\x9a:\xc8\x06\x87XdX\x8a\x95\x17\xa9\xd1\x87\xd7\x7f" +
	"\xe5\xa2\x0c\xa66|\xc5\xb2>\xfah\xeb(\xa1\xa7\xa6" +
	"\x0f<\x1fJ\x9dC\x96\x18\xb2\x1b\xec\xb3v\xfb{#" +
	"\x7f\xac\xde4\xff\xfc\x00\xb7\xfe\x9f$\xc6\xf9\xcf\xda\xd0" +
	"e\x0eq\x85\xa1\x1b\x7f%k\xd6\x7f}\x8dH\\\xe1" +
	"\xa8\x80\xa1\x9b\xddH\xd6\xcc\xdfX&\x12\xd79\xaay" +
	"]\xe6\xd7\x13c\xdf\xc9\xe0\x08Q5\x0f\x8e\xaa\xab\x01" +
	"\xeb\xcf\xc4\x8c\xdd\xb1\x0d\xe0j\xa0O\x03\x99k\x89\x19" +
	"\xbd\xb3\xdd\x00}\x1a\xd8\xa1\x81\xec\xd5\xc4\x8c\xdf\x19\xc4" +
	"q\xa2\xea\x0e\x0d\xdc\xaf\x81\xdc\x1f\x89kV\xfb\x1eD" +
	"D\xd5\x11\x0d\xec\xd3@\xfe\xf7\xc4E\x9e\xc8y\xc8\x00" +
	"\x0fj\xe0q0\x14\xe7\x83X*\xca\xae\xc7P\x86\xb9" +
	"\xee^c\x9c\xcf(\x14\xd2\xc7a\xf3Z\x1a\x85\xd9A" +
	"5E(\xa4\xcf\xcdfN\x15\xeb\xf7\x10\x1d\xf6^\x07" +
	"V\x88B\xfa\xcem\xc9\xaao\xbd,SV\x8f\xbe\xfa" +
	"(\xa4/\xd0fb\x99\x8a\xc3\xe5\x8aY\xc7[\x1c\xf0" +
	"&#\xfc'\xe3\xef\x00\x00\x00\xff\xff=\xdf\xec!"

func init() {
	schemas.Register(schema_93f5d82ab0601d9b,
		0xa7348e8aa9627482,
		0xc35516b835c52ea9,
		0xc88e0b4dc4851cb3,
		0xd976c211939fcf47,
		0xe466d3e1aa9221e2,
		0xe755cf2bc650de58,
		0xe8c7f9eb344c4277,
		0xf024ac061a82cca1)
}
