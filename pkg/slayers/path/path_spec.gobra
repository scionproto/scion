//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// +gobra

package path

import "github.com/scionproto/scion/gobra/utils"

// Resource PkgMem() stands for the ownership of the global state of this package.
pred PkgMem() {
	acc(&registeredPaths) &&
	acc(&strictDecoding)  &&
	// for every registered path, the allocator function in its metadata satisfies the contract of NewPathSpec.
	(forall t Type :: { &registeredPaths[t].inUse } (0 <= t && t < maxPathType && registeredPaths[t].inUse) ==>
		registeredPaths[t].Metadata.New implements NewPathSpec)
}

ghost
requires 0 <= t && t < maxPathType
requires PkgMem()
decreases
pure func Registered(t Type) (res bool) {
	return unfolding PkgMem() in registeredPaths[t].inUse
}

// Contract that allocator functions for Path implementations stored in
// registeredPaths must implement.
ensures p != nil && p.PreDecodeMem()
decreases
func NewPathSpec() (p Path)

pred (p *rawPath) PreDecodeMem() {
	acc(p)
}

pred (p *rawPath) Mem() {
	acc(p)
}

ghost
requires p.Mem()
decreases
pure func (p *rawPath) DecodedFrom() []byte {
	return unfolding p.Mem() in p.raw
}