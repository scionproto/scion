// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/lib/addr (interfaces: HostAddr)

// Package mock_addr is a generated GoMock package.
package mock_addr

import (
	gomock "github.com/golang/mock/gomock"
	addr "github.com/scionproto/scion/go/lib/addr"
	common "github.com/scionproto/scion/go/lib/common"
	net "net"
	reflect "reflect"
)

// MockHostAddr is a mock of HostAddr interface
type MockHostAddr struct {
	ctrl     *gomock.Controller
	recorder *MockHostAddrMockRecorder
}

// MockHostAddrMockRecorder is the mock recorder for MockHostAddr
type MockHostAddrMockRecorder struct {
	mock *MockHostAddr
}

// NewMockHostAddr creates a new mock instance
func NewMockHostAddr(ctrl *gomock.Controller) *MockHostAddr {
	mock := &MockHostAddr{ctrl: ctrl}
	mock.recorder = &MockHostAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHostAddr) EXPECT() *MockHostAddrMockRecorder {
	return m.recorder
}

// Copy mocks base method
func (m *MockHostAddr) Copy() addr.HostAddr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(addr.HostAddr)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockHostAddrMockRecorder) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockHostAddr)(nil).Copy))
}

// Equal mocks base method
func (m *MockHostAddr) Equal(arg0 addr.HostAddr) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockHostAddrMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockHostAddr)(nil).Equal), arg0)
}

// IP mocks base method
func (m *MockHostAddr) IP() net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// IP indicates an expected call of IP
func (mr *MockHostAddrMockRecorder) IP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IP", reflect.TypeOf((*MockHostAddr)(nil).IP))
}

// Pack mocks base method
func (m *MockHostAddr) Pack() common.RawBytes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pack")
	ret0, _ := ret[0].(common.RawBytes)
	return ret0
}

// Pack indicates an expected call of Pack
func (mr *MockHostAddrMockRecorder) Pack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pack", reflect.TypeOf((*MockHostAddr)(nil).Pack))
}

// Size mocks base method
func (m *MockHostAddr) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockHostAddrMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockHostAddr)(nil).Size))
}

// String mocks base method
func (m *MockHostAddr) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockHostAddrMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockHostAddr)(nil).String))
}

// Type mocks base method
func (m *MockHostAddr) Type() addr.HostAddrType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(addr.HostAddrType)
	return ret0
}

// Type indicates an expected call of Type
func (mr *MockHostAddrMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockHostAddr)(nil).Type))
}
