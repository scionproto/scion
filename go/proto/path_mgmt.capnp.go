// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SegReq struct{ capnp.Struct }
type SegReq_flags SegReq

// SegReq_TypeID is the unique identifier for the type SegReq.
const SegReq_TypeID = 0x9d0135027d04861e

func NewSegReq(s *capnp.Segment) (SegReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return SegReq{st}, err
}

func NewRootSegReq(s *capnp.Segment) (SegReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return SegReq{st}, err
}

func ReadRootSegReq(msg *capnp.Message) (SegReq, error) {
	root, err := msg.RootPtr()
	return SegReq{root.Struct()}, err
}

func (s SegReq) String() string {
	str, _ := text.Marshal(0x9d0135027d04861e, s.Struct)
	return str
}

func (s SegReq) SrcIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s SegReq) SetSrcIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SegReq) DstIA() uint64 {
	return s.Struct.Uint64(8)
}

func (s SegReq) SetDstIA(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s SegReq) Flags() SegReq_flags { return SegReq_flags(s) }

func (s SegReq_flags) Sibra() bool {
	return s.Struct.Bit(128)
}

func (s SegReq_flags) SetSibra(v bool) {
	s.Struct.SetBit(128, v)
}

func (s SegReq_flags) CacheOnly() bool {
	return s.Struct.Bit(129)
}

func (s SegReq_flags) SetCacheOnly(v bool) {
	s.Struct.SetBit(129, v)
}

// SegReq_List is a list of SegReq.
type SegReq_List struct{ capnp.List }

// NewSegReq creates a new list of SegReq.
func NewSegReq_List(s *capnp.Segment, sz int32) (SegReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return SegReq_List{l}, err
}

func (s SegReq_List) At(i int) SegReq { return SegReq{s.List.Struct(i)} }

func (s SegReq_List) Set(i int, v SegReq) error { return s.List.SetStruct(i, v.Struct) }

func (s SegReq_List) String() string {
	str, _ := text.MarshalList(0x9d0135027d04861e, s.List)
	return str
}

// SegReq_Promise is a wrapper for a SegReq promised by a client call.
type SegReq_Promise struct{ *capnp.Pipeline }

func (p SegReq_Promise) Struct() (SegReq, error) {
	s, err := p.Pipeline.Struct()
	return SegReq{s}, err
}

func (p SegReq_Promise) Flags() SegReq_flags_Promise { return SegReq_flags_Promise{p.Pipeline} }

// SegReq_flags_Promise is a wrapper for a SegReq_flags promised by a client call.
type SegReq_flags_Promise struct{ *capnp.Pipeline }

func (p SegReq_flags_Promise) Struct() (SegReq_flags, error) {
	s, err := p.Pipeline.Struct()
	return SegReq_flags{s}, err
}

type SegRecs struct{ capnp.Struct }

// SegRecs_TypeID is the unique identifier for the type SegRecs.
const SegRecs_TypeID = 0x934ba70bfd144ebd

func NewSegRecs(s *capnp.Segment) (SegRecs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegRecs{st}, err
}

func NewRootSegRecs(s *capnp.Segment) (SegRecs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegRecs{st}, err
}

func ReadRootSegRecs(msg *capnp.Message) (SegRecs, error) {
	root, err := msg.RootPtr()
	return SegRecs{root.Struct()}, err
}

func (s SegRecs) String() string {
	str, _ := text.Marshal(0x934ba70bfd144ebd, s.Struct)
	return str
}

func (s SegRecs) Recs() (PathSegMeta_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegMeta_List{List: p.List()}, err
}

func (s SegRecs) HasRecs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegRecs) SetRecs(v PathSegMeta_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated PathSegMeta_List, preferring placement in s's segment.
func (s SegRecs) NewRecs(n int32) (PathSegMeta_List, error) {
	l, err := NewPathSegMeta_List(s.Struct.Segment(), n)
	if err != nil {
		return PathSegMeta_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SegRecs) SRevInfos() (SignedBlob_List, error) {
	p, err := s.Struct.Ptr(1)
	return SignedBlob_List{List: p.List()}, err
}

func (s SegRecs) HasSRevInfos() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegRecs) SetSRevInfos(v SignedBlob_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSRevInfos sets the sRevInfos field to a newly
// allocated SignedBlob_List, preferring placement in s's segment.
func (s SegRecs) NewSRevInfos(n int32) (SignedBlob_List, error) {
	l, err := NewSignedBlob_List(s.Struct.Segment(), n)
	if err != nil {
		return SignedBlob_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// SegRecs_List is a list of SegRecs.
type SegRecs_List struct{ capnp.List }

// NewSegRecs creates a new list of SegRecs.
func NewSegRecs_List(s *capnp.Segment, sz int32) (SegRecs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegRecs_List{l}, err
}

func (s SegRecs_List) At(i int) SegRecs { return SegRecs{s.List.Struct(i)} }

func (s SegRecs_List) Set(i int, v SegRecs) error { return s.List.SetStruct(i, v.Struct) }

func (s SegRecs_List) String() string {
	str, _ := text.MarshalList(0x934ba70bfd144ebd, s.List)
	return str
}

// SegRecs_Promise is a wrapper for a SegRecs promised by a client call.
type SegRecs_Promise struct{ *capnp.Pipeline }

func (p SegRecs_Promise) Struct() (SegRecs, error) {
	s, err := p.Pipeline.Struct()
	return SegRecs{s}, err
}

type SegReply struct{ capnp.Struct }

// SegReply_TypeID is the unique identifier for the type SegReply.
const SegReply_TypeID = 0x9359e1b2db37dbbb

func NewSegReply(s *capnp.Segment) (SegReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegReply{st}, err
}

func NewRootSegReply(s *capnp.Segment) (SegReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegReply{st}, err
}

func ReadRootSegReply(msg *capnp.Message) (SegReply, error) {
	root, err := msg.RootPtr()
	return SegReply{root.Struct()}, err
}

func (s SegReply) String() string {
	str, _ := text.Marshal(0x9359e1b2db37dbbb, s.Struct)
	return str
}

func (s SegReply) Req() (SegReq, error) {
	p, err := s.Struct.Ptr(0)
	return SegReq{Struct: p.Struct()}, err
}

func (s SegReply) HasReq() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegReply) SetReq(v SegReq) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewReq sets the req field to a newly
// allocated SegReq struct, preferring placement in s's segment.
func (s SegReply) NewReq() (SegReq, error) {
	ss, err := NewSegReq(s.Struct.Segment())
	if err != nil {
		return SegReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegReply) Recs() (SegRecs, error) {
	p, err := s.Struct.Ptr(1)
	return SegRecs{Struct: p.Struct()}, err
}

func (s SegReply) HasRecs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegReply) SetRecs(v SegRecs) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated SegRecs struct, preferring placement in s's segment.
func (s SegReply) NewRecs() (SegRecs, error) {
	ss, err := NewSegRecs(s.Struct.Segment())
	if err != nil {
		return SegRecs{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SegReply_List is a list of SegReply.
type SegReply_List struct{ capnp.List }

// NewSegReply creates a new list of SegReply.
func NewSegReply_List(s *capnp.Segment, sz int32) (SegReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegReply_List{l}, err
}

func (s SegReply_List) At(i int) SegReply { return SegReply{s.List.Struct(i)} }

func (s SegReply_List) Set(i int, v SegReply) error { return s.List.SetStruct(i, v.Struct) }

func (s SegReply_List) String() string {
	str, _ := text.MarshalList(0x9359e1b2db37dbbb, s.List)
	return str
}

// SegReply_Promise is a wrapper for a SegReply promised by a client call.
type SegReply_Promise struct{ *capnp.Pipeline }

func (p SegReply_Promise) Struct() (SegReply, error) {
	s, err := p.Pipeline.Struct()
	return SegReply{s}, err
}

func (p SegReply_Promise) Req() SegReq_Promise {
	return SegReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegReply_Promise) Recs() SegRecs_Promise {
	return SegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type SegChangesIdReq struct{ capnp.Struct }

// SegChangesIdReq_TypeID is the unique identifier for the type SegChangesIdReq.
const SegChangesIdReq_TypeID = 0xc88dfa6be7a1d091

func NewSegChangesIdReq(s *capnp.Segment) (SegChangesIdReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegChangesIdReq{st}, err
}

func NewRootSegChangesIdReq(s *capnp.Segment) (SegChangesIdReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegChangesIdReq{st}, err
}

func ReadRootSegChangesIdReq(msg *capnp.Message) (SegChangesIdReq, error) {
	root, err := msg.RootPtr()
	return SegChangesIdReq{root.Struct()}, err
}

func (s SegChangesIdReq) String() string {
	str, _ := text.Marshal(0xc88dfa6be7a1d091, s.Struct)
	return str
}

func (s SegChangesIdReq) LastCheck() uint32 {
	return s.Struct.Uint32(0)
}

func (s SegChangesIdReq) SetLastCheck(v uint32) {
	s.Struct.SetUint32(0, v)
}

// SegChangesIdReq_List is a list of SegChangesIdReq.
type SegChangesIdReq_List struct{ capnp.List }

// NewSegChangesIdReq creates a new list of SegChangesIdReq.
func NewSegChangesIdReq_List(s *capnp.Segment, sz int32) (SegChangesIdReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return SegChangesIdReq_List{l}, err
}

func (s SegChangesIdReq_List) At(i int) SegChangesIdReq { return SegChangesIdReq{s.List.Struct(i)} }

func (s SegChangesIdReq_List) Set(i int, v SegChangesIdReq) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegChangesIdReq_List) String() string {
	str, _ := text.MarshalList(0xc88dfa6be7a1d091, s.List)
	return str
}

// SegChangesIdReq_Promise is a wrapper for a SegChangesIdReq promised by a client call.
type SegChangesIdReq_Promise struct{ *capnp.Pipeline }

func (p SegChangesIdReq_Promise) Struct() (SegChangesIdReq, error) {
	s, err := p.Pipeline.Struct()
	return SegChangesIdReq{s}, err
}

type SegIds struct{ capnp.Struct }

// SegIds_TypeID is the unique identifier for the type SegIds.
const SegIds_TypeID = 0xabf979c3f68dae4b

func NewSegIds(s *capnp.Segment) (SegIds, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegIds{st}, err
}

func NewRootSegIds(s *capnp.Segment) (SegIds, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegIds{st}, err
}

func ReadRootSegIds(msg *capnp.Message) (SegIds, error) {
	root, err := msg.RootPtr()
	return SegIds{root.Struct()}, err
}

func (s SegIds) String() string {
	str, _ := text.Marshal(0xabf979c3f68dae4b, s.Struct)
	return str
}

func (s SegIds) SegId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SegIds) HasSegId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegIds) SetSegId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SegIds) FullId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SegIds) HasFullId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegIds) SetFullId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SegIds_List is a list of SegIds.
type SegIds_List struct{ capnp.List }

// NewSegIds creates a new list of SegIds.
func NewSegIds_List(s *capnp.Segment, sz int32) (SegIds_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegIds_List{l}, err
}

func (s SegIds_List) At(i int) SegIds { return SegIds{s.List.Struct(i)} }

func (s SegIds_List) Set(i int, v SegIds) error { return s.List.SetStruct(i, v.Struct) }

func (s SegIds_List) String() string {
	str, _ := text.MarshalList(0xabf979c3f68dae4b, s.List)
	return str
}

// SegIds_Promise is a wrapper for a SegIds promised by a client call.
type SegIds_Promise struct{ *capnp.Pipeline }

func (p SegIds_Promise) Struct() (SegIds, error) {
	s, err := p.Pipeline.Struct()
	return SegIds{s}, err
}

type SegChangesIdReply struct{ capnp.Struct }

// SegChangesIdReply_TypeID is the unique identifier for the type SegChangesIdReply.
const SegChangesIdReply_TypeID = 0xbd56ceeaf8c65140

func NewSegChangesIdReply(s *capnp.Segment) (SegChangesIdReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegChangesIdReply{st}, err
}

func NewRootSegChangesIdReply(s *capnp.Segment) (SegChangesIdReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegChangesIdReply{st}, err
}

func ReadRootSegChangesIdReply(msg *capnp.Message) (SegChangesIdReply, error) {
	root, err := msg.RootPtr()
	return SegChangesIdReply{root.Struct()}, err
}

func (s SegChangesIdReply) String() string {
	str, _ := text.Marshal(0xbd56ceeaf8c65140, s.Struct)
	return str
}

func (s SegChangesIdReply) Ids() (SegIds_List, error) {
	p, err := s.Struct.Ptr(0)
	return SegIds_List{List: p.List()}, err
}

func (s SegChangesIdReply) HasIds() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegChangesIdReply) SetIds(v SegIds_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewIds sets the ids field to a newly
// allocated SegIds_List, preferring placement in s's segment.
func (s SegChangesIdReply) NewIds(n int32) (SegIds_List, error) {
	l, err := NewSegIds_List(s.Struct.Segment(), n)
	if err != nil {
		return SegIds_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SegChangesIdReply_List is a list of SegChangesIdReply.
type SegChangesIdReply_List struct{ capnp.List }

// NewSegChangesIdReply creates a new list of SegChangesIdReply.
func NewSegChangesIdReply_List(s *capnp.Segment, sz int32) (SegChangesIdReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegChangesIdReply_List{l}, err
}

func (s SegChangesIdReply_List) At(i int) SegChangesIdReply {
	return SegChangesIdReply{s.List.Struct(i)}
}

func (s SegChangesIdReply_List) Set(i int, v SegChangesIdReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegChangesIdReply_List) String() string {
	str, _ := text.MarshalList(0xbd56ceeaf8c65140, s.List)
	return str
}

// SegChangesIdReply_Promise is a wrapper for a SegChangesIdReply promised by a client call.
type SegChangesIdReply_Promise struct{ *capnp.Pipeline }

func (p SegChangesIdReply_Promise) Struct() (SegChangesIdReply, error) {
	s, err := p.Pipeline.Struct()
	return SegChangesIdReply{s}, err
}

type SegChangesReq struct{ capnp.Struct }

// SegChangesReq_TypeID is the unique identifier for the type SegChangesReq.
const SegChangesReq_TypeID = 0xa7ad0c62a234c68b

func NewSegChangesReq(s *capnp.Segment) (SegChangesReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegChangesReq{st}, err
}

func NewRootSegChangesReq(s *capnp.Segment) (SegChangesReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegChangesReq{st}, err
}

func ReadRootSegChangesReq(msg *capnp.Message) (SegChangesReq, error) {
	root, err := msg.RootPtr()
	return SegChangesReq{root.Struct()}, err
}

func (s SegChangesReq) String() string {
	str, _ := text.Marshal(0xa7ad0c62a234c68b, s.Struct)
	return str
}

func (s SegChangesReq) SegIds() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s SegChangesReq) HasSegIds() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegChangesReq) SetSegIds(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSegIds sets the segIds field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s SegChangesReq) NewSegIds(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SegChangesReq_List is a list of SegChangesReq.
type SegChangesReq_List struct{ capnp.List }

// NewSegChangesReq creates a new list of SegChangesReq.
func NewSegChangesReq_List(s *capnp.Segment, sz int32) (SegChangesReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegChangesReq_List{l}, err
}

func (s SegChangesReq_List) At(i int) SegChangesReq { return SegChangesReq{s.List.Struct(i)} }

func (s SegChangesReq_List) Set(i int, v SegChangesReq) error { return s.List.SetStruct(i, v.Struct) }

func (s SegChangesReq_List) String() string {
	str, _ := text.MarshalList(0xa7ad0c62a234c68b, s.List)
	return str
}

// SegChangesReq_Promise is a wrapper for a SegChangesReq promised by a client call.
type SegChangesReq_Promise struct{ *capnp.Pipeline }

func (p SegChangesReq_Promise) Struct() (SegChangesReq, error) {
	s, err := p.Pipeline.Struct()
	return SegChangesReq{s}, err
}

type PathMgmt struct{ capnp.Struct }
type PathMgmt_Which uint16

const (
	PathMgmt_Which_unset             PathMgmt_Which = 0
	PathMgmt_Which_segReq            PathMgmt_Which = 1
	PathMgmt_Which_segReply          PathMgmt_Which = 2
	PathMgmt_Which_segReg            PathMgmt_Which = 3
	PathMgmt_Which_segSync           PathMgmt_Which = 4
	PathMgmt_Which_sRevInfo          PathMgmt_Which = 5
	PathMgmt_Which_ifStateReq        PathMgmt_Which = 6
	PathMgmt_Which_ifStateInfos      PathMgmt_Which = 7
	PathMgmt_Which_segChangesIdReq   PathMgmt_Which = 8
	PathMgmt_Which_segChangesIdReply PathMgmt_Which = 9
	PathMgmt_Which_segChangesReq     PathMgmt_Which = 10
	PathMgmt_Which_segChangesReply   PathMgmt_Which = 11
)

func (w PathMgmt_Which) String() string {
	const s = "unsetsegReqsegReplysegRegsegSyncsRevInfoifStateReqifStateInfossegChangesIdReqsegChangesIdReplysegChangesReqsegChangesReply"
	switch w {
	case PathMgmt_Which_unset:
		return s[0:5]
	case PathMgmt_Which_segReq:
		return s[5:11]
	case PathMgmt_Which_segReply:
		return s[11:19]
	case PathMgmt_Which_segReg:
		return s[19:25]
	case PathMgmt_Which_segSync:
		return s[25:32]
	case PathMgmt_Which_sRevInfo:
		return s[32:40]
	case PathMgmt_Which_ifStateReq:
		return s[40:50]
	case PathMgmt_Which_ifStateInfos:
		return s[50:62]
	case PathMgmt_Which_segChangesIdReq:
		return s[62:77]
	case PathMgmt_Which_segChangesIdReply:
		return s[77:94]
	case PathMgmt_Which_segChangesReq:
		return s[94:107]
	case PathMgmt_Which_segChangesReply:
		return s[107:122]

	}
	return "PathMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PathMgmt_TypeID is the unique identifier for the type PathMgmt.
const PathMgmt_TypeID = 0xa12cfa420c9ad0ca

func NewPathMgmt(s *capnp.Segment) (PathMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMgmt{st}, err
}

func NewRootPathMgmt(s *capnp.Segment) (PathMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMgmt{st}, err
}

func ReadRootPathMgmt(msg *capnp.Message) (PathMgmt, error) {
	root, err := msg.RootPtr()
	return PathMgmt{root.Struct()}, err
}

func (s PathMgmt) String() string {
	str, _ := text.Marshal(0xa12cfa420c9ad0ca, s.Struct)
	return str
}

func (s PathMgmt) Which() PathMgmt_Which {
	return PathMgmt_Which(s.Struct.Uint16(0))
}
func (s PathMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s PathMgmt) SegReq() (SegReq, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != segReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegReq() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegReq(v SegReq) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegReq sets the segReq field to a newly
// allocated SegReq struct, preferring placement in s's segment.
func (s PathMgmt) NewSegReq() (SegReq, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegReq(s.Struct.Segment())
	if err != nil {
		return SegReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegReply() (SegReply, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != segReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegReply() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegReply(v SegReply) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegReply sets the segReply field to a newly
// allocated SegReply struct, preferring placement in s's segment.
func (s PathMgmt) NewSegReply() (SegReply, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSegReply(s.Struct.Segment())
	if err != nil {
		return SegReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegReg() (SegRecs, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != segReg")
	}
	p, err := s.Struct.Ptr(0)
	return SegRecs{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegReg() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegReg(v SegRecs) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegReg sets the segReg field to a newly
// allocated SegRecs struct, preferring placement in s's segment.
func (s PathMgmt) NewSegReg() (SegRecs, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSegRecs(s.Struct.Segment())
	if err != nil {
		return SegRecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegSync() (SegRecs, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != segSync")
	}
	p, err := s.Struct.Ptr(0)
	return SegRecs{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegSync() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegSync(v SegRecs) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegSync sets the segSync field to a newly
// allocated SegRecs struct, preferring placement in s's segment.
func (s PathMgmt) NewSegSync() (SegRecs, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewSegRecs(s.Struct.Segment())
	if err != nil {
		return SegRecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SRevInfo() (SignedBlob, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != sRevInfo")
	}
	p, err := s.Struct.Ptr(0)
	return SignedBlob{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSRevInfo() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSRevInfo(v SignedBlob) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSRevInfo sets the sRevInfo field to a newly
// allocated SignedBlob struct, preferring placement in s's segment.
func (s PathMgmt) NewSRevInfo() (SignedBlob, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSignedBlob(s.Struct.Segment())
	if err != nil {
		return SignedBlob{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) IfStateReq() (IFStateReq, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != ifStateReq")
	}
	p, err := s.Struct.Ptr(0)
	return IFStateReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasIfStateReq() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetIfStateReq(v IFStateReq) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfStateReq sets the ifStateReq field to a newly
// allocated IFStateReq struct, preferring placement in s's segment.
func (s PathMgmt) NewIfStateReq() (IFStateReq, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewIFStateReq(s.Struct.Segment())
	if err != nil {
		return IFStateReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) IfStateInfos() (IFStateInfos, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != ifStateInfos")
	}
	p, err := s.Struct.Ptr(0)
	return IFStateInfos{Struct: p.Struct()}, err
}

func (s PathMgmt) HasIfStateInfos() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetIfStateInfos(v IFStateInfos) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfStateInfos sets the ifStateInfos field to a newly
// allocated IFStateInfos struct, preferring placement in s's segment.
func (s PathMgmt) NewIfStateInfos() (IFStateInfos, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewIFStateInfos(s.Struct.Segment())
	if err != nil {
		return IFStateInfos{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegChangesIdReq() (SegChangesIdReq, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != segChangesIdReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegChangesIdReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegChangesIdReq() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegChangesIdReq(v SegChangesIdReq) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegChangesIdReq sets the segChangesIdReq field to a newly
// allocated SegChangesIdReq struct, preferring placement in s's segment.
func (s PathMgmt) NewSegChangesIdReq() (SegChangesIdReq, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewSegChangesIdReq(s.Struct.Segment())
	if err != nil {
		return SegChangesIdReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegChangesIdReply() (SegChangesIdReply, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != segChangesIdReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegChangesIdReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegChangesIdReply() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegChangesIdReply(v SegChangesIdReply) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegChangesIdReply sets the segChangesIdReply field to a newly
// allocated SegChangesIdReply struct, preferring placement in s's segment.
func (s PathMgmt) NewSegChangesIdReply() (SegChangesIdReply, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewSegChangesIdReply(s.Struct.Segment())
	if err != nil {
		return SegChangesIdReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegChangesReq() (SegChangesReq, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != segChangesReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegChangesReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegChangesReq() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegChangesReq(v SegChangesReq) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegChangesReq sets the segChangesReq field to a newly
// allocated SegChangesReq struct, preferring placement in s's segment.
func (s PathMgmt) NewSegChangesReq() (SegChangesReq, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewSegChangesReq(s.Struct.Segment())
	if err != nil {
		return SegChangesReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegChangesReply() (SegRecs, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != segChangesReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegRecs{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegChangesReply() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegChangesReply(v SegRecs) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegChangesReply sets the segChangesReply field to a newly
// allocated SegRecs struct, preferring placement in s's segment.
func (s PathMgmt) NewSegChangesReply() (SegRecs, error) {
	s.Struct.SetUint16(0, 11)
	ss, err := NewSegRecs(s.Struct.Segment())
	if err != nil {
		return SegRecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PathMgmt_List is a list of PathMgmt.
type PathMgmt_List struct{ capnp.List }

// NewPathMgmt creates a new list of PathMgmt.
func NewPathMgmt_List(s *capnp.Segment, sz int32) (PathMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMgmt_List{l}, err
}

func (s PathMgmt_List) At(i int) PathMgmt { return PathMgmt{s.List.Struct(i)} }

func (s PathMgmt_List) Set(i int, v PathMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s PathMgmt_List) String() string {
	str, _ := text.MarshalList(0xa12cfa420c9ad0ca, s.List)
	return str
}

// PathMgmt_Promise is a wrapper for a PathMgmt promised by a client call.
type PathMgmt_Promise struct{ *capnp.Pipeline }

func (p PathMgmt_Promise) Struct() (PathMgmt, error) {
	s, err := p.Pipeline.Struct()
	return PathMgmt{s}, err
}

func (p PathMgmt_Promise) SegReq() SegReq_Promise {
	return SegReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegReply() SegReply_Promise {
	return SegReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegReg() SegRecs_Promise {
	return SegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegSync() SegRecs_Promise {
	return SegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SRevInfo() SignedBlob_Promise {
	return SignedBlob_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) IfStateReq() IFStateReq_Promise {
	return IFStateReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) IfStateInfos() IFStateInfos_Promise {
	return IFStateInfos_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegChangesIdReq() SegChangesIdReq_Promise {
	return SegChangesIdReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegChangesIdReply() SegChangesIdReply_Promise {
	return SegChangesIdReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegChangesReq() SegChangesReq_Promise {
	return SegChangesReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegChangesReply() SegRecs_Promise {
	return SegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_8fcd13516850d142 = "x\xda|T_h[\xe5\x1b~\x9f\xef\xa4M\xda\xa6" +
	"\xbf&\xf9\xce/UD+s\x17N\xb6\xd1\xa5\x93i" +
	"\xe9h\xd7\xad\xb8l\xad\xe6\xe4\xe8hE\xd0,9I" +
	"j\xd3,\xc9\xc9V\x82\x13\xff\xe0D\xd0\xe2\xdf\x8b!" +
	"\x8a\xce\x9b2DEa\x17\xabLPajac\xc3" +
	"\xcb\x81 \"\xca`\x17\x8a\x9b[\xb7\xf9\xc9{\xd2\x9d" +
	"d\xa7\x99\xe4\xe6\xe4{\x9e\xf3\xbc\xcf\xf7\x9e\xf7y\xfb" +
	"w\xb5\x8f\x88Mm\xdf\xddCd~\x88\xb6vu\xe2" +
	"a\xfdz\xd7\xc2\xee\xb7)\x1c\x82\x1a=\x9b\xc8\x1b\xf2" +
	"\xd4\xeb\xd4&\xfcD\xf2\x87\xf07\xf2l\x98\x9fN\x85" +
	"\xe7\x08\xea\xcbs[\xce}\xf1\xf3TK\xeeDdI" +
	"NE\xf8\xe9\xb1\x08s\xefz\xd9\xf7\xac\xb8\x1f\xef\x93" +
	"\x11\x82\xd6 \xfb\x98\xf1ydQ\x1ew\xb8\xc7\"\x9f" +
	"\x11\xd4\xd2\x99w\x83\xa3\xcb\xeb\x8f0\xb7Ix\x0c\xfe" +
	" \x91\xdc$\x97\xe4V\xe9'\x1axP.\x08\x82z" +
	"\xf5\xe4\xe6\x8f\xf6\x06?Y\xf0\xd8\x00\x0b\x86\xa3\x7f\xca" +
	";\xa3\xfct{t\x98\xa0v\x7f:\x7f\xe9\xdb\xda\x95" +
	"\x8f[Y\x8eG\x17\xa5\xe1p'\xa2ly\xc48y" +
	"\xf9\xfc\xe9='Z\xe8\x0e\x1c\x8dF \x8f;\xe4c" +
	"\x8e\xf0\x9bg\x8e\xfc6\xb3<\xff\xbd\xc73\xdfo\xe0" +
	"\xd7\xa8\x80\xfc\xc3!_p\xc8\x07\xee\xd8qub\xdd" +
	";?\x91\xd1\x0b\xad\xd1\x1a\xdd\x0f\xb6\xdc{\x9e \xff" +
	"\xdf;Gj\xe5\x17U\xa5T5\xff\xe4lnVT" +
	"7\xa6S\xa5bi\xd0\xb4rI+mS\x020\x02" +
	"\x9a\x8f\xc8\x07\xa2\xf0\xba\xfb\x88\x8c\xb5\x1a\x8c\x11\x810" +
	"\xa0\x83\x0f\xb7&\x89\x8c!\x0d\xc6\xa4@O\xc5J\xdb" +
	"\xf8\x1f!\xa1\x01!\xd5\xb3\xd89\xf4\xcc\x9e\xc3\x1f\x10" +
	"\x81\x0f\x95\x9d\xb4\x0e\xc4\x8b\xd9}\x84&R\xf2\x97\xe5" +
	"-\x87\x1e\x8a\xb9\xa4\xd6^J\x85\x1ay\xdd\xacYq" +
	"\xd3\xdf\xe4f\x03[\xbcW\x83\xb1Y\xc0_\xb1\xca\x08" +
	"5\xeeO@\x88V<\x86\x1a\x93X?v\xeb\xe2F" +
	"\xdda\xa7p\x99\x8b\x06\xdd\xa2c1\"cD\x831" +
	"\xdeT4\xce\x87;4\x18\x09\x01\x084}\x80\xf0D" +
	"\x8cD\x9f]I\xc7\xb7\xa1\x83\x04:\x08}\x19\xbb\xda" +
	"\xf4/[H\xe5\xec\xd5\x97N\xa4\xaa\xf9\x89\xdcl\xb5" +
	"~\xe9~\xcd\x17T\x8a\x0d\xc8m\x88\x11\x99C\xd0`" +
	"\xee\x84@7\xfeQ\x8e\x099\x86A\"s\x84\x81q" +
	"\x06\xc4u\xa5C\xf0\xdca\x17\x91\xb9\x93\x81G\x19\xd0" +
	"\xae)\x1d\x1a\x914\x9c7\xc6\x19\x98d\xc0wU\xe9" +
	"\xf0q\xa40Jd&\x18x\x82\x81\xb6e\xa5\xa3\x8d" +
	"HN9R\x93\x0cd\x18h\xbf\xa2t\xb4\x13\xc9\x14" +
	"\x1e'2\x9fb\xa0\xc0\x80\xff\xb2\xd2\x9d\x80L\xe3i" +
	"\"3\xcf@\x95\x81\xc0\xdfJG\x80H\x96\xf1\"\x91" +
	"Yb\xe0 \x03\x1d\x97\x94\x8e\x0e\"Y\xc3[D\xe6" +
	"A\x06^a\xa0\xf3\xa2\xd2\xd1I$\x0f\xa1Bd\xbe" +
	"\xc4\xc0\x1b\x0ct\xfd\xa5tt\x11\xc9yG\xea5\x06" +
	"\x0eC\xa0o\x7f\xd1\xb6\xaa\xd4>l;\xdfo\xf5\x04" +
	"(\xdb\x9d(B\xa8\xb1f\xeah\xfd\xb5\xdc\xea\x09y" +
	"\xce\xb6rf\xad\x98n1;\xee`;\x82\xcd\x13\xcd" +
	"\xe8t\xd6\xac\xa6\xaaV\x924\xc7\xcd\xd1\xec{_\xcf" +
	"\xcc]\xf8\xdd\x03\xc7\xa9\xa7\x98\xdd\xc7\x93\xf9U\xd7\xb5" +
	"\x8b\xb1\xd3w\xff\xd8dw{>U\xcc\xc1\xb2\xe3\x99" +
	"\xa4U\xe6\x1a\xee>h\xcd)\x15PC\xa8\xb1b<" +
	",\xea\xb3\xeczk\xdc\xe5\xb6Z\xa7\xde\xa2\xffHJ" +
	"sB\x9d\x97\xea\xaa<\xb0>70\xdd\x83DF@" +
	"\x83\xb1V8\xad\x8dg\xdc\xecw\x93\xb8)\xf17%" +
	"/\x9e\xb1=q\x8f\xb5\x8a\xfb`#\xee}\x8e\xba\xa3" +
	"\xdaM\x18\xce\xee/\x14\x1a\x7f\xdd\"\x9a\xd7t\xa3a" +
	"\x1e\xe3k\x1a\xc6\xfd\xd3\x99\xa6\x8d\xe5.y\xcf\xc6\xba" +
	"\x85t\x99<\xc2\xbc0\x83\x1a\x8c\xdb\x04T!eW" +
	"\xb7\xe7\xad4a\x06\x01\x12\x08\xdcr\x03\x967f{" +
	"xWpKB\xcf;\xd1\xf6\xf4\xe4\x05'\xd6\xe1\x0d" +
	"\xac\xbf^\x83\xf1\x00\xf7dzo%\x05\x90\x00\x08*" +
	"\x9dJ\xe7\xadG\x8a\x05B\xed\xc6\xd9\xbf\x01\x00\x00\xff" +
	"\xff\x81O\xe8\xff"

func init() {
	schemas.Register(schema_8fcd13516850d142,
		0x934ba70bfd144ebd,
		0x9359e1b2db37dbbb,
		0x9d0135027d04861e,
		0xa12cfa420c9ad0ca,
		0xa7ad0c62a234c68b,
		0xabf979c3f68dae4b,
		0xbd56ceeaf8c65140,
		0xc88dfa6be7a1d091,
		0xde94294dfb441b76)
}
