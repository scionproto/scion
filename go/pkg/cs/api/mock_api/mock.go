// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/cs/api (interfaces: SegmentsStore)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	query "github.com/scionproto/scion/go/lib/pathdb/query"
)

// MockSegmentsStore is a mock of SegmentsStore interface.
type MockSegmentsStore struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentsStoreMockRecorder
}

// MockSegmentsStoreMockRecorder is the mock recorder for MockSegmentsStore.
type MockSegmentsStoreMockRecorder struct {
	mock *MockSegmentsStore
}

// NewMockSegmentsStore creates a new mock instance.
func NewMockSegmentsStore(ctrl *gomock.Controller) *MockSegmentsStore {
	mock := &MockSegmentsStore{ctrl: ctrl}
	mock.recorder = &MockSegmentsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentsStore) EXPECT() *MockSegmentsStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSegmentsStore) Get(arg0 context.Context, arg1 *query.Params) (query.Results, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(query.Results)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSegmentsStoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSegmentsStore)(nil).Get), arg0, arg1)
}
