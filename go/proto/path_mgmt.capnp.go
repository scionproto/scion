// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SegReq struct{ capnp.Struct }
type SegReq_flags SegReq

// SegReq_TypeID is the unique identifier for the type SegReq.
const SegReq_TypeID = 0x9d0135027d04861e

func NewSegReq(s *capnp.Segment) (SegReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return SegReq{st}, err
}

func NewRootSegReq(s *capnp.Segment) (SegReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return SegReq{st}, err
}

func ReadRootSegReq(msg *capnp.Message) (SegReq, error) {
	root, err := msg.RootPtr()
	return SegReq{root.Struct()}, err
}

func (s SegReq) String() string {
	str, _ := text.Marshal(0x9d0135027d04861e, s.Struct)
	return str
}

func (s SegReq) SrcIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s SegReq) SetSrcIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SegReq) DstIA() uint64 {
	return s.Struct.Uint64(8)
}

func (s SegReq) SetDstIA(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s SegReq) Flags() SegReq_flags { return SegReq_flags(s) }

func (s SegReq_flags) Sibra() bool {
	return s.Struct.Bit(128)
}

func (s SegReq_flags) SetSibra(v bool) {
	s.Struct.SetBit(128, v)
}

func (s SegReq_flags) CacheOnly() bool {
	return s.Struct.Bit(129)
}

func (s SegReq_flags) SetCacheOnly(v bool) {
	s.Struct.SetBit(129, v)
}

// SegReq_List is a list of SegReq.
type SegReq_List struct{ capnp.List }

// NewSegReq creates a new list of SegReq.
func NewSegReq_List(s *capnp.Segment, sz int32) (SegReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return SegReq_List{l}, err
}

func (s SegReq_List) At(i int) SegReq { return SegReq{s.List.Struct(i)} }

func (s SegReq_List) Set(i int, v SegReq) error { return s.List.SetStruct(i, v.Struct) }

func (s SegReq_List) String() string {
	str, _ := text.MarshalList(0x9d0135027d04861e, s.List)
	return str
}

// SegReq_Promise is a wrapper for a SegReq promised by a client call.
type SegReq_Promise struct{ *capnp.Pipeline }

func (p SegReq_Promise) Struct() (SegReq, error) {
	s, err := p.Pipeline.Struct()
	return SegReq{s}, err
}

func (p SegReq_Promise) Flags() SegReq_flags_Promise { return SegReq_flags_Promise{p.Pipeline} }

// SegReq_flags_Promise is a wrapper for a SegReq_flags promised by a client call.
type SegReq_flags_Promise struct{ *capnp.Pipeline }

func (p SegReq_flags_Promise) Struct() (SegReq_flags, error) {
	s, err := p.Pipeline.Struct()
	return SegReq_flags{s}, err
}

type SegRecs struct{ capnp.Struct }

// SegRecs_TypeID is the unique identifier for the type SegRecs.
const SegRecs_TypeID = 0x934ba70bfd144ebd

func NewSegRecs(s *capnp.Segment) (SegRecs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegRecs{st}, err
}

func NewRootSegRecs(s *capnp.Segment) (SegRecs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegRecs{st}, err
}

func ReadRootSegRecs(msg *capnp.Message) (SegRecs, error) {
	root, err := msg.RootPtr()
	return SegRecs{root.Struct()}, err
}

func (s SegRecs) String() string {
	str, _ := text.Marshal(0x934ba70bfd144ebd, s.Struct)
	return str
}

func (s SegRecs) Recs() (PathSegMeta_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathSegMeta_List{List: p.List()}, err
}

func (s SegRecs) HasRecs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegRecs) SetRecs(v PathSegMeta_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated PathSegMeta_List, preferring placement in s's segment.
func (s SegRecs) NewRecs(n int32) (PathSegMeta_List, error) {
	l, err := NewPathSegMeta_List(s.Struct.Segment(), n)
	if err != nil {
		return PathSegMeta_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SegRecs) SRevInfos() (SignedBlob_List, error) {
	p, err := s.Struct.Ptr(1)
	return SignedBlob_List{List: p.List()}, err
}

func (s SegRecs) HasSRevInfos() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegRecs) SetSRevInfos(v SignedBlob_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSRevInfos sets the sRevInfos field to a newly
// allocated SignedBlob_List, preferring placement in s's segment.
func (s SegRecs) NewSRevInfos(n int32) (SignedBlob_List, error) {
	l, err := NewSignedBlob_List(s.Struct.Segment(), n)
	if err != nil {
		return SignedBlob_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// SegRecs_List is a list of SegRecs.
type SegRecs_List struct{ capnp.List }

// NewSegRecs creates a new list of SegRecs.
func NewSegRecs_List(s *capnp.Segment, sz int32) (SegRecs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegRecs_List{l}, err
}

func (s SegRecs_List) At(i int) SegRecs { return SegRecs{s.List.Struct(i)} }

func (s SegRecs_List) Set(i int, v SegRecs) error { return s.List.SetStruct(i, v.Struct) }

func (s SegRecs_List) String() string {
	str, _ := text.MarshalList(0x934ba70bfd144ebd, s.List)
	return str
}

// SegRecs_Promise is a wrapper for a SegRecs promised by a client call.
type SegRecs_Promise struct{ *capnp.Pipeline }

func (p SegRecs_Promise) Struct() (SegRecs, error) {
	s, err := p.Pipeline.Struct()
	return SegRecs{s}, err
}

type SegReply struct{ capnp.Struct }

// SegReply_TypeID is the unique identifier for the type SegReply.
const SegReply_TypeID = 0x9359e1b2db37dbbb

func NewSegReply(s *capnp.Segment) (SegReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegReply{st}, err
}

func NewRootSegReply(s *capnp.Segment) (SegReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegReply{st}, err
}

func ReadRootSegReply(msg *capnp.Message) (SegReply, error) {
	root, err := msg.RootPtr()
	return SegReply{root.Struct()}, err
}

func (s SegReply) String() string {
	str, _ := text.Marshal(0x9359e1b2db37dbbb, s.Struct)
	return str
}

func (s SegReply) Req() (SegReq, error) {
	p, err := s.Struct.Ptr(0)
	return SegReq{Struct: p.Struct()}, err
}

func (s SegReply) HasReq() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegReply) SetReq(v SegReq) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewReq sets the req field to a newly
// allocated SegReq struct, preferring placement in s's segment.
func (s SegReply) NewReq() (SegReq, error) {
	ss, err := NewSegReq(s.Struct.Segment())
	if err != nil {
		return SegReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegReply) Recs() (SegRecs, error) {
	p, err := s.Struct.Ptr(1)
	return SegRecs{Struct: p.Struct()}, err
}

func (s SegReply) HasRecs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegReply) SetRecs(v SegRecs) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated SegRecs struct, preferring placement in s's segment.
func (s SegReply) NewRecs() (SegRecs, error) {
	ss, err := NewSegRecs(s.Struct.Segment())
	if err != nil {
		return SegRecs{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SegReply_List is a list of SegReply.
type SegReply_List struct{ capnp.List }

// NewSegReply creates a new list of SegReply.
func NewSegReply_List(s *capnp.Segment, sz int32) (SegReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegReply_List{l}, err
}

func (s SegReply_List) At(i int) SegReply { return SegReply{s.List.Struct(i)} }

func (s SegReply_List) Set(i int, v SegReply) error { return s.List.SetStruct(i, v.Struct) }

func (s SegReply_List) String() string {
	str, _ := text.MarshalList(0x9359e1b2db37dbbb, s.List)
	return str
}

// SegReply_Promise is a wrapper for a SegReply promised by a client call.
type SegReply_Promise struct{ *capnp.Pipeline }

func (p SegReply_Promise) Struct() (SegReply, error) {
	s, err := p.Pipeline.Struct()
	return SegReply{s}, err
}

func (p SegReply_Promise) Req() SegReq_Promise {
	return SegReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegReply_Promise) Recs() SegRecs_Promise {
	return SegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type SegIds struct{ capnp.Struct }

// SegIds_TypeID is the unique identifier for the type SegIds.
const SegIds_TypeID = 0xabf979c3f68dae4b

func NewSegIds(s *capnp.Segment) (SegIds, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegIds{st}, err
}

func NewRootSegIds(s *capnp.Segment) (SegIds, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegIds{st}, err
}

func ReadRootSegIds(msg *capnp.Message) (SegIds, error) {
	root, err := msg.RootPtr()
	return SegIds{root.Struct()}, err
}

func (s SegIds) String() string {
	str, _ := text.Marshal(0xabf979c3f68dae4b, s.Struct)
	return str
}

func (s SegIds) SegId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SegIds) HasSegId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegIds) SetSegId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SegIds) FullId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SegIds) HasFullId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegIds) SetFullId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SegIds_List is a list of SegIds.
type SegIds_List struct{ capnp.List }

// NewSegIds creates a new list of SegIds.
func NewSegIds_List(s *capnp.Segment, sz int32) (SegIds_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegIds_List{l}, err
}

func (s SegIds_List) At(i int) SegIds { return SegIds{s.List.Struct(i)} }

func (s SegIds_List) Set(i int, v SegIds) error { return s.List.SetStruct(i, v.Struct) }

func (s SegIds_List) String() string {
	str, _ := text.MarshalList(0xabf979c3f68dae4b, s.List)
	return str
}

// SegIds_Promise is a wrapper for a SegIds promised by a client call.
type SegIds_Promise struct{ *capnp.Pipeline }

func (p SegIds_Promise) Struct() (SegIds, error) {
	s, err := p.Pipeline.Struct()
	return SegIds{s}, err
}

type HPGroupId struct{ capnp.Struct }

// HPGroupId_TypeID is the unique identifier for the type HPGroupId.
const HPGroupId_TypeID = 0xba21c7133ee44518

func NewHPGroupId(s *capnp.Segment) (HPGroupId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return HPGroupId{st}, err
}

func NewRootHPGroupId(s *capnp.Segment) (HPGroupId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return HPGroupId{st}, err
}

func ReadRootHPGroupId(msg *capnp.Message) (HPGroupId, error) {
	root, err := msg.RootPtr()
	return HPGroupId{root.Struct()}, err
}

func (s HPGroupId) String() string {
	str, _ := text.Marshal(0xba21c7133ee44518, s.Struct)
	return str
}

func (s HPGroupId) OwnerAS() uint64 {
	return s.Struct.Uint64(0)
}

func (s HPGroupId) SetOwnerAS(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HPGroupId) GroupId() uint16 {
	return s.Struct.Uint16(8)
}

func (s HPGroupId) SetGroupId(v uint16) {
	s.Struct.SetUint16(8, v)
}

// HPGroupId_List is a list of HPGroupId.
type HPGroupId_List struct{ capnp.List }

// NewHPGroupId creates a new list of HPGroupId.
func NewHPGroupId_List(s *capnp.Segment, sz int32) (HPGroupId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return HPGroupId_List{l}, err
}

func (s HPGroupId_List) At(i int) HPGroupId { return HPGroupId{s.List.Struct(i)} }

func (s HPGroupId_List) Set(i int, v HPGroupId) error { return s.List.SetStruct(i, v.Struct) }

func (s HPGroupId_List) String() string {
	str, _ := text.MarshalList(0xba21c7133ee44518, s.List)
	return str
}

// HPGroupId_Promise is a wrapper for a HPGroupId promised by a client call.
type HPGroupId_Promise struct{ *capnp.Pipeline }

func (p HPGroupId_Promise) Struct() (HPGroupId, error) {
	s, err := p.Pipeline.Struct()
	return HPGroupId{s}, err
}

type HPSegReq struct{ capnp.Struct }

// HPSegReq_TypeID is the unique identifier for the type HPSegReq.
const HPSegReq_TypeID = 0x8f51e8717b3fbe1c

func NewHPSegReq(s *capnp.Segment) (HPSegReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HPSegReq{st}, err
}

func NewRootHPSegReq(s *capnp.Segment) (HPSegReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HPSegReq{st}, err
}

func ReadRootHPSegReq(msg *capnp.Message) (HPSegReq, error) {
	root, err := msg.RootPtr()
	return HPSegReq{root.Struct()}, err
}

func (s HPSegReq) String() string {
	str, _ := text.Marshal(0x8f51e8717b3fbe1c, s.Struct)
	return str
}

func (s HPSegReq) DstIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s HPSegReq) SetDstIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HPSegReq) GroupIds() (HPGroupId_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId_List{List: p.List()}, err
}

func (s HPSegReq) HasGroupIds() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPSegReq) SetGroupIds(v HPGroupId_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewGroupIds sets the groupIds field to a newly
// allocated HPGroupId_List, preferring placement in s's segment.
func (s HPSegReq) NewGroupIds(n int32) (HPGroupId_List, error) {
	l, err := NewHPGroupId_List(s.Struct.Segment(), n)
	if err != nil {
		return HPGroupId_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HPSegReq_List is a list of HPSegReq.
type HPSegReq_List struct{ capnp.List }

// NewHPSegReq creates a new list of HPSegReq.
func NewHPSegReq_List(s *capnp.Segment, sz int32) (HPSegReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HPSegReq_List{l}, err
}

func (s HPSegReq_List) At(i int) HPSegReq { return HPSegReq{s.List.Struct(i)} }

func (s HPSegReq_List) Set(i int, v HPSegReq) error { return s.List.SetStruct(i, v.Struct) }

func (s HPSegReq_List) String() string {
	str, _ := text.MarshalList(0x8f51e8717b3fbe1c, s.List)
	return str
}

// HPSegReq_Promise is a wrapper for a HPSegReq promised by a client call.
type HPSegReq_Promise struct{ *capnp.Pipeline }

func (p HPSegReq_Promise) Struct() (HPSegReq, error) {
	s, err := p.Pipeline.Struct()
	return HPSegReq{s}, err
}

type HPSegRecs struct{ capnp.Struct }

// HPSegRecs_TypeID is the unique identifier for the type HPSegRecs.
const HPSegRecs_TypeID = 0xa56b96c8b25ce2e1

func NewHPSegRecs(s *capnp.Segment) (HPSegRecs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HPSegRecs{st}, err
}

func NewRootHPSegRecs(s *capnp.Segment) (HPSegRecs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HPSegRecs{st}, err
}

func ReadRootHPSegRecs(msg *capnp.Message) (HPSegRecs, error) {
	root, err := msg.RootPtr()
	return HPSegRecs{root.Struct()}, err
}

func (s HPSegRecs) String() string {
	str, _ := text.Marshal(0xa56b96c8b25ce2e1, s.Struct)
	return str
}

func (s HPSegRecs) GroupId() (HPGroupId, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId{Struct: p.Struct()}, err
}

func (s HPSegRecs) HasGroupId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPSegRecs) SetGroupId(v HPGroupId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGroupId sets the groupId field to a newly
// allocated HPGroupId struct, preferring placement in s's segment.
func (s HPSegRecs) NewGroupId() (HPGroupId, error) {
	ss, err := NewHPGroupId(s.Struct.Segment())
	if err != nil {
		return HPGroupId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s HPSegRecs) Recs() (PathSegMeta_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathSegMeta_List{List: p.List()}, err
}

func (s HPSegRecs) HasRecs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HPSegRecs) SetRecs(v PathSegMeta_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated PathSegMeta_List, preferring placement in s's segment.
func (s HPSegRecs) NewRecs(n int32) (PathSegMeta_List, error) {
	l, err := NewPathSegMeta_List(s.Struct.Segment(), n)
	if err != nil {
		return PathSegMeta_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s HPSegRecs) Err() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s HPSegRecs) HasErr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s HPSegRecs) ErrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s HPSegRecs) SetErr(v string) error {
	return s.Struct.SetText(2, v)
}

// HPSegRecs_List is a list of HPSegRecs.
type HPSegRecs_List struct{ capnp.List }

// NewHPSegRecs creates a new list of HPSegRecs.
func NewHPSegRecs_List(s *capnp.Segment, sz int32) (HPSegRecs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return HPSegRecs_List{l}, err
}

func (s HPSegRecs_List) At(i int) HPSegRecs { return HPSegRecs{s.List.Struct(i)} }

func (s HPSegRecs_List) Set(i int, v HPSegRecs) error { return s.List.SetStruct(i, v.Struct) }

func (s HPSegRecs_List) String() string {
	str, _ := text.MarshalList(0xa56b96c8b25ce2e1, s.List)
	return str
}

// HPSegRecs_Promise is a wrapper for a HPSegRecs promised by a client call.
type HPSegRecs_Promise struct{ *capnp.Pipeline }

func (p HPSegRecs_Promise) Struct() (HPSegRecs, error) {
	s, err := p.Pipeline.Struct()
	return HPSegRecs{s}, err
}

func (p HPSegRecs_Promise) GroupId() HPGroupId_Promise {
	return HPGroupId_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type HPSegReply struct{ capnp.Struct }

// HPSegReply_TypeID is the unique identifier for the type HPSegReply.
const HPSegReply_TypeID = 0xaaf7fd9241668ed6

func NewHPSegReply(s *capnp.Segment) (HPSegReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPSegReply{st}, err
}

func NewRootHPSegReply(s *capnp.Segment) (HPSegReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPSegReply{st}, err
}

func ReadRootHPSegReply(msg *capnp.Message) (HPSegReply, error) {
	root, err := msg.RootPtr()
	return HPSegReply{root.Struct()}, err
}

func (s HPSegReply) String() string {
	str, _ := text.Marshal(0xaaf7fd9241668ed6, s.Struct)
	return str
}

func (s HPSegReply) Recs() (HPSegRecs_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPSegRecs_List{List: p.List()}, err
}

func (s HPSegReply) HasRecs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPSegReply) SetRecs(v HPSegRecs_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated HPSegRecs_List, preferring placement in s's segment.
func (s HPSegReply) NewRecs(n int32) (HPSegRecs_List, error) {
	l, err := NewHPSegRecs_List(s.Struct.Segment(), n)
	if err != nil {
		return HPSegRecs_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HPSegReply_List is a list of HPSegReply.
type HPSegReply_List struct{ capnp.List }

// NewHPSegReply creates a new list of HPSegReply.
func NewHPSegReply_List(s *capnp.Segment, sz int32) (HPSegReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HPSegReply_List{l}, err
}

func (s HPSegReply_List) At(i int) HPSegReply { return HPSegReply{s.List.Struct(i)} }

func (s HPSegReply_List) Set(i int, v HPSegReply) error { return s.List.SetStruct(i, v.Struct) }

func (s HPSegReply_List) String() string {
	str, _ := text.MarshalList(0xaaf7fd9241668ed6, s.List)
	return str
}

// HPSegReply_Promise is a wrapper for a HPSegReply promised by a client call.
type HPSegReply_Promise struct{ *capnp.Pipeline }

func (p HPSegReply_Promise) Struct() (HPSegReply, error) {
	s, err := p.Pipeline.Struct()
	return HPSegReply{s}, err
}

type HPCfg struct{ capnp.Struct }

// HPCfg_TypeID is the unique identifier for the type HPCfg.
const HPCfg_TypeID = 0xf307100ab87a1963

func NewHPCfg(s *capnp.Segment) (HPCfg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return HPCfg{st}, err
}

func NewRootHPCfg(s *capnp.Segment) (HPCfg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return HPCfg{st}, err
}

func ReadRootHPCfg(msg *capnp.Message) (HPCfg, error) {
	root, err := msg.RootPtr()
	return HPCfg{root.Struct()}, err
}

func (s HPCfg) String() string {
	str, _ := text.Marshal(0xf307100ab87a1963, s.Struct)
	return str
}

func (s HPCfg) GroupId() (HPGroupId, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId{Struct: p.Struct()}, err
}

func (s HPCfg) HasGroupId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetGroupId(v HPGroupId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGroupId sets the groupId field to a newly
// allocated HPGroupId struct, preferring placement in s's segment.
func (s HPCfg) NewGroupId() (HPGroupId, error) {
	ss, err := NewHPGroupId(s.Struct.Segment())
	if err != nil {
		return HPGroupId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s HPCfg) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s HPCfg) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s HPCfg) OwnerISD() uint16 {
	return s.Struct.Uint16(4)
}

func (s HPCfg) SetOwnerISD(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s HPCfg) Writers() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.UInt64List{List: p.List()}, err
}

func (s HPCfg) HasWriters() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetWriters(v capnp.UInt64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewWriters sets the writers field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s HPCfg) NewWriters(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s HPCfg) Readers() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.UInt64List{List: p.List()}, err
}

func (s HPCfg) HasReaders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetReaders(v capnp.UInt64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewReaders sets the readers field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s HPCfg) NewReaders(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s HPCfg) Registries() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.UInt64List{List: p.List()}, err
}

func (s HPCfg) HasRegistries() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetRegistries(v capnp.UInt64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewRegistries sets the registries field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s HPCfg) NewRegistries(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// HPCfg_List is a list of HPCfg.
type HPCfg_List struct{ capnp.List }

// NewHPCfg creates a new list of HPCfg.
func NewHPCfg_List(s *capnp.Segment, sz int32) (HPCfg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return HPCfg_List{l}, err
}

func (s HPCfg_List) At(i int) HPCfg { return HPCfg{s.List.Struct(i)} }

func (s HPCfg_List) Set(i int, v HPCfg) error { return s.List.SetStruct(i, v.Struct) }

func (s HPCfg_List) String() string {
	str, _ := text.MarshalList(0xf307100ab87a1963, s.List)
	return str
}

// HPCfg_Promise is a wrapper for a HPCfg promised by a client call.
type HPCfg_Promise struct{ *capnp.Pipeline }

func (p HPCfg_Promise) Struct() (HPCfg, error) {
	s, err := p.Pipeline.Struct()
	return HPCfg{s}, err
}

func (p HPCfg_Promise) GroupId() HPGroupId_Promise {
	return HPGroupId_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type HPCfgReq struct{ capnp.Struct }

// HPCfgReq_TypeID is the unique identifier for the type HPCfgReq.
const HPCfgReq_TypeID = 0xd24bad15bb2bab5e

func NewHPCfgReq(s *capnp.Segment) (HPCfgReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return HPCfgReq{st}, err
}

func NewRootHPCfgReq(s *capnp.Segment) (HPCfgReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return HPCfgReq{st}, err
}

func ReadRootHPCfgReq(msg *capnp.Message) (HPCfgReq, error) {
	root, err := msg.RootPtr()
	return HPCfgReq{root.Struct()}, err
}

func (s HPCfgReq) String() string {
	str, _ := text.Marshal(0xd24bad15bb2bab5e, s.Struct)
	return str
}

func (s HPCfgReq) ChangedSince() uint32 {
	return s.Struct.Uint32(0)
}

func (s HPCfgReq) SetChangedSince(v uint32) {
	s.Struct.SetUint32(0, v)
}

// HPCfgReq_List is a list of HPCfgReq.
type HPCfgReq_List struct{ capnp.List }

// NewHPCfgReq creates a new list of HPCfgReq.
func NewHPCfgReq_List(s *capnp.Segment, sz int32) (HPCfgReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return HPCfgReq_List{l}, err
}

func (s HPCfgReq_List) At(i int) HPCfgReq { return HPCfgReq{s.List.Struct(i)} }

func (s HPCfgReq_List) Set(i int, v HPCfgReq) error { return s.List.SetStruct(i, v.Struct) }

func (s HPCfgReq_List) String() string {
	str, _ := text.MarshalList(0xd24bad15bb2bab5e, s.List)
	return str
}

// HPCfgReq_Promise is a wrapper for a HPCfgReq promised by a client call.
type HPCfgReq_Promise struct{ *capnp.Pipeline }

func (p HPCfgReq_Promise) Struct() (HPCfgReq, error) {
	s, err := p.Pipeline.Struct()
	return HPCfgReq{s}, err
}

type HPCfgReply struct{ capnp.Struct }

// HPCfgReply_TypeID is the unique identifier for the type HPCfgReply.
const HPCfgReply_TypeID = 0xb27bf6e10de2aa8c

func NewHPCfgReply(s *capnp.Segment) (HPCfgReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPCfgReply{st}, err
}

func NewRootHPCfgReply(s *capnp.Segment) (HPCfgReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPCfgReply{st}, err
}

func ReadRootHPCfgReply(msg *capnp.Message) (HPCfgReply, error) {
	root, err := msg.RootPtr()
	return HPCfgReply{root.Struct()}, err
}

func (s HPCfgReply) String() string {
	str, _ := text.Marshal(0xb27bf6e10de2aa8c, s.Struct)
	return str
}

func (s HPCfgReply) Cfgs() (HPCfg_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPCfg_List{List: p.List()}, err
}

func (s HPCfgReply) HasCfgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPCfgReply) SetCfgs(v HPCfg_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCfgs sets the cfgs field to a newly
// allocated HPCfg_List, preferring placement in s's segment.
func (s HPCfgReply) NewCfgs(n int32) (HPCfg_List, error) {
	l, err := NewHPCfg_List(s.Struct.Segment(), n)
	if err != nil {
		return HPCfg_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HPCfgReply_List is a list of HPCfgReply.
type HPCfgReply_List struct{ capnp.List }

// NewHPCfgReply creates a new list of HPCfgReply.
func NewHPCfgReply_List(s *capnp.Segment, sz int32) (HPCfgReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HPCfgReply_List{l}, err
}

func (s HPCfgReply_List) At(i int) HPCfgReply { return HPCfgReply{s.List.Struct(i)} }

func (s HPCfgReply_List) Set(i int, v HPCfgReply) error { return s.List.SetStruct(i, v.Struct) }

func (s HPCfgReply_List) String() string {
	str, _ := text.MarshalList(0xb27bf6e10de2aa8c, s.List)
	return str
}

// HPCfgReply_Promise is a wrapper for a HPCfgReply promised by a client call.
type HPCfgReply_Promise struct{ *capnp.Pipeline }

func (p HPCfgReply_Promise) Struct() (HPCfgReply, error) {
	s, err := p.Pipeline.Struct()
	return HPCfgReply{s}, err
}

type PathMgmt struct{ capnp.Struct }
type PathMgmt_Which uint16

const (
	PathMgmt_Which_unset        PathMgmt_Which = 0
	PathMgmt_Which_segReq       PathMgmt_Which = 1
	PathMgmt_Which_segReply     PathMgmt_Which = 2
	PathMgmt_Which_segReg       PathMgmt_Which = 3
	PathMgmt_Which_sRevInfo     PathMgmt_Which = 4
	PathMgmt_Which_ifStateReq   PathMgmt_Which = 5
	PathMgmt_Which_ifStateInfos PathMgmt_Which = 6
	PathMgmt_Which_hpSegReq     PathMgmt_Which = 7
	PathMgmt_Which_hpSegReply   PathMgmt_Which = 8
	PathMgmt_Which_hpSegReg     PathMgmt_Which = 9
	PathMgmt_Which_hpCfgReq     PathMgmt_Which = 10
	PathMgmt_Which_hpCfgReply   PathMgmt_Which = 11
)

func (w PathMgmt_Which) String() string {
	const s = "unsetsegReqsegReplysegRegsRevInfoifStateReqifStateInfoshpSegReqhpSegReplyhpSegReghpCfgReqhpCfgReply"
	switch w {
	case PathMgmt_Which_unset:
		return s[0:5]
	case PathMgmt_Which_segReq:
		return s[5:11]
	case PathMgmt_Which_segReply:
		return s[11:19]
	case PathMgmt_Which_segReg:
		return s[19:25]
	case PathMgmt_Which_sRevInfo:
		return s[25:33]
	case PathMgmt_Which_ifStateReq:
		return s[33:43]
	case PathMgmt_Which_ifStateInfos:
		return s[43:55]
	case PathMgmt_Which_hpSegReq:
		return s[55:63]
	case PathMgmt_Which_hpSegReply:
		return s[63:73]
	case PathMgmt_Which_hpSegReg:
		return s[73:81]
	case PathMgmt_Which_hpCfgReq:
		return s[81:89]
	case PathMgmt_Which_hpCfgReply:
		return s[89:99]

	}
	return "PathMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PathMgmt_TypeID is the unique identifier for the type PathMgmt.
const PathMgmt_TypeID = 0xa12cfa420c9ad0ca

func NewPathMgmt(s *capnp.Segment) (PathMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMgmt{st}, err
}

func NewRootPathMgmt(s *capnp.Segment) (PathMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMgmt{st}, err
}

func ReadRootPathMgmt(msg *capnp.Message) (PathMgmt, error) {
	root, err := msg.RootPtr()
	return PathMgmt{root.Struct()}, err
}

func (s PathMgmt) String() string {
	str, _ := text.Marshal(0xa12cfa420c9ad0ca, s.Struct)
	return str
}

func (s PathMgmt) Which() PathMgmt_Which {
	return PathMgmt_Which(s.Struct.Uint16(0))
}
func (s PathMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s PathMgmt) SegReq() (SegReq, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != segReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegReq() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegReq(v SegReq) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegReq sets the segReq field to a newly
// allocated SegReq struct, preferring placement in s's segment.
func (s PathMgmt) NewSegReq() (SegReq, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegReq(s.Struct.Segment())
	if err != nil {
		return SegReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegReply() (SegReply, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != segReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegReply() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegReply(v SegReply) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegReply sets the segReply field to a newly
// allocated SegReply struct, preferring placement in s's segment.
func (s PathMgmt) NewSegReply() (SegReply, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSegReply(s.Struct.Segment())
	if err != nil {
		return SegReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SegReg() (SegRecs, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != segReg")
	}
	p, err := s.Struct.Ptr(0)
	return SegRecs{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSegReg() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSegReg(v SegRecs) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegReg sets the segReg field to a newly
// allocated SegRecs struct, preferring placement in s's segment.
func (s PathMgmt) NewSegReg() (SegRecs, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSegRecs(s.Struct.Segment())
	if err != nil {
		return SegRecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) SRevInfo() (SignedBlob, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != sRevInfo")
	}
	p, err := s.Struct.Ptr(0)
	return SignedBlob{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSRevInfo() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSRevInfo(v SignedBlob) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSRevInfo sets the sRevInfo field to a newly
// allocated SignedBlob struct, preferring placement in s's segment.
func (s PathMgmt) NewSRevInfo() (SignedBlob, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewSignedBlob(s.Struct.Segment())
	if err != nil {
		return SignedBlob{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) IfStateReq() (IFStateReq, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != ifStateReq")
	}
	p, err := s.Struct.Ptr(0)
	return IFStateReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasIfStateReq() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetIfStateReq(v IFStateReq) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfStateReq sets the ifStateReq field to a newly
// allocated IFStateReq struct, preferring placement in s's segment.
func (s PathMgmt) NewIfStateReq() (IFStateReq, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewIFStateReq(s.Struct.Segment())
	if err != nil {
		return IFStateReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) IfStateInfos() (IFStateInfos, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != ifStateInfos")
	}
	p, err := s.Struct.Ptr(0)
	return IFStateInfos{Struct: p.Struct()}, err
}

func (s PathMgmt) HasIfStateInfos() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetIfStateInfos(v IFStateInfos) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfStateInfos sets the ifStateInfos field to a newly
// allocated IFStateInfos struct, preferring placement in s's segment.
func (s PathMgmt) NewIfStateInfos() (IFStateInfos, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewIFStateInfos(s.Struct.Segment())
	if err != nil {
		return IFStateInfos{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpSegReq() (HPSegReq, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != hpSegReq")
	}
	p, err := s.Struct.Ptr(0)
	return HPSegReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpSegReq() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpSegReq(v HPSegReq) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpSegReq sets the hpSegReq field to a newly
// allocated HPSegReq struct, preferring placement in s's segment.
func (s PathMgmt) NewHpSegReq() (HPSegReq, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewHPSegReq(s.Struct.Segment())
	if err != nil {
		return HPSegReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpSegReply() (HPSegReply, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != hpSegReply")
	}
	p, err := s.Struct.Ptr(0)
	return HPSegReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpSegReply() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpSegReply(v HPSegReply) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpSegReply sets the hpSegReply field to a newly
// allocated HPSegReply struct, preferring placement in s's segment.
func (s PathMgmt) NewHpSegReply() (HPSegReply, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewHPSegReply(s.Struct.Segment())
	if err != nil {
		return HPSegReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpSegReg() (HPSegRecs, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != hpSegReg")
	}
	p, err := s.Struct.Ptr(0)
	return HPSegRecs{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpSegReg() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpSegReg(v HPSegRecs) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpSegReg sets the hpSegReg field to a newly
// allocated HPSegRecs struct, preferring placement in s's segment.
func (s PathMgmt) NewHpSegReg() (HPSegRecs, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewHPSegRecs(s.Struct.Segment())
	if err != nil {
		return HPSegRecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpCfgReq() (HPCfgReq, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != hpCfgReq")
	}
	p, err := s.Struct.Ptr(0)
	return HPCfgReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpCfgReq() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpCfgReq(v HPCfgReq) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpCfgReq sets the hpCfgReq field to a newly
// allocated HPCfgReq struct, preferring placement in s's segment.
func (s PathMgmt) NewHpCfgReq() (HPCfgReq, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewHPCfgReq(s.Struct.Segment())
	if err != nil {
		return HPCfgReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpCfgReply() (HPCfgReply, error) {
	if s.Struct.Uint16(0) != 11 {
		panic("Which() != hpCfgReply")
	}
	p, err := s.Struct.Ptr(0)
	return HPCfgReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpCfgReply() bool {
	if s.Struct.Uint16(0) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpCfgReply(v HPCfgReply) error {
	s.Struct.SetUint16(0, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpCfgReply sets the hpCfgReply field to a newly
// allocated HPCfgReply struct, preferring placement in s's segment.
func (s PathMgmt) NewHpCfgReply() (HPCfgReply, error) {
	s.Struct.SetUint16(0, 11)
	ss, err := NewHPCfgReply(s.Struct.Segment())
	if err != nil {
		return HPCfgReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PathMgmt_List is a list of PathMgmt.
type PathMgmt_List struct{ capnp.List }

// NewPathMgmt creates a new list of PathMgmt.
func NewPathMgmt_List(s *capnp.Segment, sz int32) (PathMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMgmt_List{l}, err
}

func (s PathMgmt_List) At(i int) PathMgmt { return PathMgmt{s.List.Struct(i)} }

func (s PathMgmt_List) Set(i int, v PathMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s PathMgmt_List) String() string {
	str, _ := text.MarshalList(0xa12cfa420c9ad0ca, s.List)
	return str
}

// PathMgmt_Promise is a wrapper for a PathMgmt promised by a client call.
type PathMgmt_Promise struct{ *capnp.Pipeline }

func (p PathMgmt_Promise) Struct() (PathMgmt, error) {
	s, err := p.Pipeline.Struct()
	return PathMgmt{s}, err
}

func (p PathMgmt_Promise) SegReq() SegReq_Promise {
	return SegReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegReply() SegReply_Promise {
	return SegReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SegReg() SegRecs_Promise {
	return SegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) SRevInfo() SignedBlob_Promise {
	return SignedBlob_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) IfStateReq() IFStateReq_Promise {
	return IFStateReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) IfStateInfos() IFStateInfos_Promise {
	return IFStateInfos_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpSegReq() HPSegReq_Promise {
	return HPSegReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpSegReply() HPSegReply_Promise {
	return HPSegReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpSegReg() HPSegRecs_Promise {
	return HPSegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpCfgReq() HPCfgReq_Promise {
	return HPCfgReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpCfgReply() HPCfgReply_Promise {
	return HPCfgReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_8fcd13516850d142 = "x\xda|U[lT\xd5\x1a\xfe\xff\xb5\xa6\xdd3\xed" +
	"\x94\xced\xcd\xc9\xe1\xe4\x9c\x9c\x8a\xc1D\x90\x12\xa8\x10" +
	"\x94\xa0\xbdHC\x87\x8b\xce\xea\xa0\x02\x01e\x9c\xd9s" +
	"\x81\xe9t\xba\xf7\x94Z\x91\x14\x131\x9a\x80\x18E\x83" +
	"F\x02M \x04\xf0\x92\xf4\x89\x94@\xbc<\xa8M0" +
	"\x14\xc5\x07HL@M\x88\x91\x07\xa3\x80\xdc\xdc\xe6_" +
	"3\xb3\xf7tO\xdb\xb7\xbd\xd7\xf7_\xbe\xf5_\xbe\xb5" +
	"@\xf26\xb6\xb0f\xc8\x03 \x17\xd5\xd4Z\xff;\xd3" +
	"\xba\xbd\xef\xaa\xdc\x0b2\x80hu\x8cG\xd2R\x9c\xdd" +
	"\x0b5\xa8\x01\x88\x07\xd8\x98X\xc8\xe8\xab\x99\x0d\x00Z" +
	"\xa7\x9f\x0c\xdd\xab?\xba\xea\x1d\x08\x06*m\x95\xc5\x01" +
	"\xf6\x858\xa2\xbe\x86\x95\xed\xa9KK.\x8d\\^?" +
	"\xa9\xed,>&\x9a9}\xcd\xe1d\xfb\xff\xd7<;" +
	"\xd8b<@$\xb8c\xec!\x8b]|T\xecQ\xb6" +
	"o\xf0O\x01\xad\xb1s\x1f\xf8;n\xcf\x1bv\x11\xee" +
	"D\xcd\x0f j<c\"H~\x0f7x\x8e2@" +
	"\xeb\xf2\x95\x8d#_\xbf\xb7\xf5\x88\x8b\x86\x0a\xf8K\xed" +
	"y\xf1{-}]\xab\xa5\xd0?\xbc\x99l\x7f\xfb\xde" +
	"\xcd\xe3.[U\x8aw\xb5\x8bbXS\x17\xd5Z\x01" +
	"\xadU\x9f\xec\xb9\xf1\xe5\xe0\xad\x13\x93]\xef\xac6*" +
	".(\xdbq\x8d\xae\xb7\xfb\xf8\x95\x86\xcb7\xb6\x8fL" +
	"\x16\xb7\xd9{Q<\xea\xa5\xaf\xc5^\x8a;\xb3\xf3\xe7" +
	"\xc7\xc5W\xb3F\xe9z\xccU\x0a\xdd{^\xf4)\xdb" +
	"\x1e/\xc5}\xee\xc4C\xa7\xfe\xf5\xf1\xaa\xf3\xaeR(" +
	"\xdbo\xbcc\xe2\x82\xb2\x1dWq\xb7\xfdw\xf9\x9d5" +
	"s\xf6\xfd\x08\xf2\xdf\xc8\x9d\x82\x874\x04\x10\xd7\xbd\xbf" +
	"\x02\x8a[*h\xfc?/\x9d\xac\x0bh\x7f\xb8\x07B" +
	"E]\xef\x1b\x111\x1f\x95w\x93\xefY\x04\xb4\xf2\xb1" +
	"B\xfa\xf9\x9eT\x0f+\xcc\x8f\xc7\xf2\xb9\xfc\xd2\xaeH" +
	"TOu\xeb}\x00\x11D\xe9\xe5\x1e\x00\x0f\x02\x04\xe7" +
	"\xb4\x00\xc8\xd9\x1c\xe5\x02\x86\x88!\xa4\xb3\xe6\x95\x00r" +
	"\x1eG\xd9\xc5\xb0)a\x16\xc2\xed\xe8\x03\x86>@+" +
	"e\xf4\xf6\xe7\xc3\x09\x13\x00p\x06`\x84#\x06\x9c\xda" +
	"\x00\xd2aur\x95:n\xbaS\xcf-\xa5nc\x18" +
	",\xe7~\xac\x1b@.\xe3(\xd71l4\xf4\xb8\xe9" +
	"\xa4i\x1c\xad[\xb6\xfd\x99\xfd\x07\xcbi\xccn}[" +
	"8\x97\xec\x05\xac0\xea\xfe\xe9\xf6\x92]+Z\x0eN" +
	"\xcf%\x9f\x1d\xac*\xc4\xfdN!l6\xcdD\xf1A" +
	"\x8er\x11C\xcd\xd0\xfb0\xe0\xb4\x08\x10\x03P\xe2\x18" +
	"pV\xb0xl\xe7\xc5r\xde\xd6b\xfd)\xa9\xdfN" +
	"\xdaI\xd5o\xe3(WW$\x0d\xd3\xe1r\x8e2\xc2" +
	"\x10\x19V\xccHpM\x0b\xb0&\xd3\x88;\x1d\x99\xd8" +
	"\x9f\xa6d6\x962\xab/\x1d\x89\x15\xd2kR=\x85" +
	"\xe2\xa5\x17p\x8f\xdf\xb2\x88\x80h\xc7\x16\x80\xe82\xe4" +
	"\x18\xedB\x86\x0d\xf8\xb7\xa5H\x88N\\\x0a\x10m#" +
	"`5\x01\xec\x9e\x15B\x06 \xc2\xb8\x12 \xdaE\xc0" +
	"Z\x02\xf8]+\x84\x1c@H\xe5\xb1\x9a\x80u\x04x" +
	"\xeeX!\xf4\x00\x88\xa7\x95\xc7Z\x026\x13Ps\xdb" +
	"\x0aa\x0d\x80\xd8\x84\x1b\x00\xa2\x1b\x09H\x13P{\xcb" +
	"\x0aa--\x14n\x01\x88&\x08\xc8\x13\xa0\xfde\x85" +
	"\xd4V\xf6\xa8PY\x02^$\xc0{\xd3\x0a\xa1\x17@" +
	"\xf4\xabP\x05\x02v\x12\xe0\xbba\x85\xd0\x07 v(" +
	"\x8f\x97\x09x\x9d\x80\xba\xebV\x08\xebH\xbf\x14\xf0*" +
	"\x01o\x11P\xff\xa7\x15\xc2z\x00\xb1G\x85\xdaM\xc0" +
	"~d\xd8\xd4\x9f3\xf5\x02\xd4\xb6\x9a\xaa\x7f\xd5\x13`" +
	"\x99\xf6D\x01\x06\x1c}-\xa2E\xb7\xd4$\x13b\x8f" +
	"\xafr\xab\x9c[B3\xc9h!V\xd0\xbb\x81\xab\x9c" +
	"\xc7\x92\x1f~\xbeu\xe0\xdaU\x17\x1c\x86\xc6\\\xb2\x97" +
	"\xe6\xefL\xfd\xdd\xeb-\xdf\xde\xf7]\xd9 \x9d/\xef" +
	";E\xb7_\x93\x89h\x1exv\x10\x03\x8e\xc0N\x84" +
	"SEg[\xaam\xf4\x89\xa4\x13\xda\x16\xbb\x89h9" +
	"\xb4\xad\xb1\xae\xbdp\x0bS\x1cM\xd7jtL\xb6\x1a" +
	"sK\xab\xb1\x99a\x9015\x91\xc1M\xb4\xb9\xeb8" +
	"\xca\x04\xc3\xa1\x92@\xb9T\xc9^\xd4\xa9\xc4D\xd3\x0d" +
	"\x03\xfd\xc0\xd0?\x0d\xc7<\xcf\x0e\x12I\x8fM\xb2\x81" +
	"\xf8x9\xca\xd9UjUY\xb5\x19S\x09B8a" +
	"N-\xc7\x8e\x0a-uT\xa8\xc9$/l\x00\x86\x0d" +
	"\x80\xad\xc9\xfel\xd6\xf9\x9d\x8cy\xb1\x1b\xd33\x8f'" +
	"S\x15\xcc\xed\x97f*\x09\xed\x8a\xacPU\xc6\x84\x8b" +
	"|G%yO\x89|\x87C~\xa8w \xa7\x1b\xed" +
	"\xd1\xb2\\\xd9\xdd\xd2\x80\xa16\x0d\xff\xd2\xb3UA\x7f" +
	"\x0b\x80\xf4s\x943\x19Z\xf1t,\x97\xd2\x13Qh" +
	"\xcc\xe4\xe2:z\x81\xa1wJ\xe9\xef\x9b\x9fl$\x91" +
	"$\xde\x81\x9d\xc5\x09\x9aX\xf5W\x94\x9e\x05\x9b\xbbK" +
	"\xaf\xe0#T\xf5\xcc\x0bF\x0c\x11\x18\xd2\xeb\x1a\x8f\xc5" +
	"\xd3\xfaS\xb9,\xe0\xa0}V\xd5\xdf&\xc5\x9dh\xcf" +
	"\xb4i\xbfO\xc5\xd8\xc7Q\x1er^\xdb\x03t\xb6\x9f" +
	"\xa3<\\1\xd3\xc3\xf4\x04\x1f\xe2(?b\x18\xe4X" +
	"dt\x8c,\x0fs\x94\x9f1\x0cz\x98R\xd7\xe0i" +
	":<\xc9Q~\xcf0X\xc3\x95\xb2\x06\xc77\x00\xc8" +
	"s\x1c\xe5o\xd3\xad\xc4\xd06\xdd03\xbd9\xbbb" +
	"\xaa=\xe1\xe8r\xda\xecRK\x86\x06\x8cLA7\xec" +
	"\xf1\xa0\xce\xcd\x00\x1c2\xf4X\xa2\xfa\xd82\xf4T\xc6" +
	",\x18\x19\xe0\xba\x1b\xfb'\x00\x00\xff\xff\x16\xfe\x95\x8d"

func init() {
	schemas.Register(schema_8fcd13516850d142,
		0x8f51e8717b3fbe1c,
		0x934ba70bfd144ebd,
		0x9359e1b2db37dbbb,
		0x9d0135027d04861e,
		0xa12cfa420c9ad0ca,
		0xa56b96c8b25ce2e1,
		0xaaf7fd9241668ed6,
		0xabf979c3f68dae4b,
		0xb27bf6e10de2aa8c,
		0xba21c7133ee44518,
		0xd24bad15bb2bab5e,
		0xde94294dfb441b76,
		0xf307100ab87a1963)
}
