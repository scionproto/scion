# GENERATED FILE DO NOT EDIT
openapi: 3.0.3
info:
  title: CA Service
  version: 0.1.0
  description: API for renewing SCION certificates.
servers:
  - url: 'https://api.server.test/v1'
    description: Server endpoints need to be defined yet
tags:
  - name: Registration Authority
    description: Registration Authority related endpoints
  - name: Authentication
    description: Service authentication related endpoints
  - name: Process
    description: Process related information
paths:
  '/ra/isds/{isd-number}/ases/{as-number}/certificates/renewal':
    parameters:
      - name: isd-number
        in: path
        required: true
        description: >-
          ISD number of the Autonomous System requesting the certificate chain
          renewal.
        schema:
          type: integer
        example: '1'
      - name: as-number
        in: path
        required: true
        description: >-
          AS Number of the Autonomous System requesting the certificate chain
          renewal.
        schema:
          $ref: '#/components/schemas/AS'
    post:
      summary: Renew an existing AS certificate
      description: Request the renewal of an existing AS certificate.
      security:
        - BearerAuth: []
      operationId: post-certificate-renewal
      tags:
        - Registration Authority
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenewalRequest'
      responses:
        '200':
          description: Renewed certificate chain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenewalResponse'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-UnauthorizedError'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /auth/token:
    post:
      summary: Authenticate the SCION control service
      description: |
        Authenticates the calling control service and returns the JWT access
        token. Alternatively, the Control Service can create the JWT access
        token directly by signing it with the shared secret.
      operationId: post-auth-token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessCredentials'
      responses:
        '200':
          description: JWT Access Token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-UnauthorizedError'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /healthcheck:
    get:
      summary: Test the availability of the CA service
      operationId: get-healthcheck
      tags:
        - Process
      responses:
        '200':
          description: Service health status
          headers:
            Cache-Control:
              description: Disable caching for health checks.
              schema:
                type: string
                enum:
                  - no-store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckStatus'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AS:
      title: AS Identifier
      type: string
      pattern: '^([a-f0-9]{1,4}:){2}([a-f0-9]{1,4})|\d+$'
      example: 'ff00:0:110'
    RenewalRequest:
      type: object
      properties:
        csr:
          type: string
          format: byte
          description: |
            Base64 encoded renewal request as described below.

            The renewal requests consists of a CMS SignedData structure that
            contains a PKCS#10 defining the parameters of the requested
            certificate.

            The following must hold for the CMS structure:

            - The `certificates` field in `SignedData` MUST contain an existing
              and verifiable certificate chain that authenticates the private
              key that was used to sign the CMS structure. It MUST NOT contain
              any other certificates.

            - The `eContentType` is set to `id-data`. The contents of `eContent`
              is the ASN.1 DER encoded PKCS#10. This ensures backwards
              compatibility with PKCS#7, as described in
              [RFC5652](https://tools.ietf.org/html/rfc5652#section-5.2.1)

            - The `SignerIdentifier` MUST be the choice `IssuerAndSerialNumber`,
              thus, `version` in `SignerInfo` must be 1, as required by
              [RFC5652](https://tools.ietf.org/html/rfc5652#section-5.3)
      required:
        - csr
    CertificateChain:
      type: object
      properties:
        as_certificate:
          type: string
          format: byte
          description: |
            Base64 encoded AS certificate.
        ca_certificate:
          type: string
          format: byte
          description: |
            Base64 encoded CA certificate.
      required:
        - as_certificate
        - ca_certificate
    RenewalResponse:
      type: object
      properties:
        certificate_chain:
          $ref: '#/components/schemas/CertificateChain'
      required:
        - certificate_chain
    Problem:
      type: object
      description: |
        Error message encoded as specified in
        [RFC7807](https://tools.ietf.org/html/rfc7807)
      properties:
        type:
          type: string
          format: uri-reference
          description: >-
            A URI reference that uniquely identifies the problem type in the
            context of the provided API.
          default: 'about:blank'
          example: /problem/policy-violation
        title:
          type: string
          description: >-
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: Policy Violation
        status:
          type: integer
          description: >-
            The HTTP status code generated by the server for this occurrence of
            the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 400
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem that is helpful to locate the problem and give advice on how
            to proceed. Written in English and readable for engineers, usually
            not suited for non technical stakeholders and not localized.
          example: >-
            The CSR sent violates the certification policy of the issuing CA.
            Field CN must not contain underscore characters.
        instance:
          type: string
          format: uri-reference
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem, e.g. by adding a fragment identifier or sub-path to the
            problem type.
          example: /problem/policy-violation#cn-malformed
        correlation_id:
          type: string
          format: uuid
          description: Identifier to correlate multiple error messages to the same case.
          example: 7D99A76F-9BA5-4C15-A1C9-114A54D9B1F1
      required:
        - type
        - title
        - status
    AccessCredentials:
      type: object
      properties:
        client_id:
          type: string
          description: ID of the control service requesting authentication.
        client_secret:
          type: string
          description: Secret that authenticates the control service.
      required:
        - client_id
        - client_secret
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
          description: The encoded JWT token
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        token_type:
          description: Type of returned access token. Currently always Bearer.
          type: string
          enum:
            - Bearer
          example: Bearer
        expires_in:
          type: integer
          description: Validity duration of this token in seconds.
          example: 3600
      required:
        - access_token
        - token_type
        - expires_in
    HealthCheckStatus:
      type: object
      properties:
        status:
          type: string
          enum:
            - available
            - starting
            - stopping
            - unavailable
      required:
        - status
  responses:
    400-BadRequest:
      description: >
        The request is malformed or lacks required information.

        - Incomplete request structure (protocol error)

        - Request information violates PKI policy requirements (application
        error)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    401-UnauthorizedError:
      description: |
        Authorization information missing or invalid.
          - No authentication information available (protocol error)
          - Authentication token unknown. Meaning, the Control Service has no
            access (application error)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    404-NotFound:
      description: >
        The requested resource does not exist.

        - Request acts on an unknown resource like an unknown AS (application
        error)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    500-InternalServerError:
      description: Unexpected internal server error.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    503-ServiceUnavailable:
      description: Service unavailable due to maintenance work.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
