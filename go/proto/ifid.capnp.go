// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type IFID struct{ capnp.Struct }

// IFID_TypeID is the unique identifier for the type IFID.
const IFID_TypeID = 0x9d95fb13f80529b9

func NewIFID(s *capnp.Segment) (IFID, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IFID{st}, err
}

func NewRootIFID(s *capnp.Segment) (IFID, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return IFID{st}, err
}

func ReadRootIFID(msg *capnp.Message) (IFID, error) {
	root, err := msg.RootPtr()
	return IFID{root.Struct()}, err
}

func (s IFID) String() string {
	str, _ := text.Marshal(0x9d95fb13f80529b9, s.Struct)
	return str
}

func (s IFID) OrigIF() uint64 {
	return s.Struct.Uint64(0)
}

func (s IFID) SetOrigIF(v uint64) {
	s.Struct.SetUint64(0, v)
}

// IFID_List is a list of IFID.
type IFID_List struct{ capnp.List }

// NewIFID creates a new list of IFID.
func NewIFID_List(s *capnp.Segment, sz int32) (IFID_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return IFID_List{l}, err
}

func (s IFID_List) At(i int) IFID { return IFID{s.List.Struct(i)} }

func (s IFID_List) Set(i int, v IFID) error { return s.List.SetStruct(i, v.Struct) }

func (s IFID_List) String() string {
	str, _ := text.MarshalList(0x9d95fb13f80529b9, s.List)
	return str
}

// IFID_Promise is a wrapper for a IFID promised by a client call.
type IFID_Promise struct{ *capnp.Pipeline }

func (p IFID_Promise) Struct() (IFID, error) {
	s, err := p.Pipeline.Struct()
	return IFID{s}, err
}

const schema_9cb1ca08a160c787 = "x\xda\x12Pr`\x12d\x8dg`\x08dae\xfb" +
	"\xbfS\x93\xf5\x87\xf0\xef\xa9s\x19\x02\xb9\x19\x19\xff\xb7" +
	"\x1fOX\xc8qj\xe3\x1c\x06\x16v\x06\x06A\xd1&" +
	"AI0m\xcf\xc0\xf8?3-3E/9\xb1\x80" +
	"1\xaf\xc0\xca\xd3\xcd\xd3\x85!\x80\x911\x90\x85\x99\x85" +
	"\x81\x81\x85\x91\x81A\x90\xd7\x8a\x81!\x90\x83\x991P" +
	"\x84\x89\xd1>\xbf(3\xdd\xd3\x8d\x91\x93\x81\x89\x91\x93" +
	"\x81\x11\x10\x00\x00\xff\xffD\x9f\x18\x15"

func init() {
	schemas.Register(schema_9cb1ca08a160c787,
		0x9d95fb13f80529b9)
}
