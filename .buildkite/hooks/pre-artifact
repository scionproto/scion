#!/bin/bash

set -eo pipefail

# Now we build the artifact name next, for this we first need TARGET and BUILD,
# see below.
#
# For PRs the target is the pull request, otherwise it is the branch.
TARGET="$BUILDKITE_PULL_REQUEST"
if [ "$BUILDKITE_PULL_REQUEST" == "false" ]; then
    TARGET="$BUILDKITE_BRANCH"
fi
TARGET="${TARGET//\//_}"
echo "\$TARGET=$TARGET"

# For nightly builds instead of the build number print nightly and the date.
BUILD="build-${BUILDKITE_BUILD_NUMBER}"
[ -n "$NIGHTLY" ] && BUILD=nightly-"$(date +%s)"
echo "\$BUILD=$BUILD"

ARTIFACTS="buildkite.${BUILDKITE_ORGANIZATION_SLUG}.${TARGET}.${BUILD}.${BUILDKITE_STEP_KEY:-unset}.${BUILDKITE_JOB_ID}"
mkdir -p "artifacts/$ARTIFACTS" artifacts.out

function save {
    if [ -d "$1" ]; then
        echo Found artifacts: "$1"
        cp -R "$1" "artifacts/$ARTIFACTS"
    fi
}

# Also store remote cache logs
cache_ctr=$(docker ps -aq -f "name=bazel-remote-cache")
if [ ! -z "$cache_ctr" ]; then
    mkdir -p logs/docker
    docker logs bazel-remote-cache > logs/docker/bazel-remote-cache.log
fi

save "bazel-testlogs"
save "logs"
save "traces"
save "gen"
save "gen-cache"
save "/tmp/test-artifacts"

tar chaf "artifacts.out/$ARTIFACTS.tar.gz" -C artifacts "$ARTIFACTS"
rm -rf artifacts

echo "Output tar= artifacts.out/$ARTIFACTS.tar.gz"
