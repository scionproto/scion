// Copyright 2018 Anapaya Systems
// Copyright 2025 SCION Association
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"fmt"
	"io"
	"sort"
	"strings"

	"github.com/scionproto/scion/pkg/private/xtest/graph"
)

func writeLinks(w io.Writer) (int, error) {
	total := 0
	lines := []string{
		"// Code generated by graphupdater tool, DO NOT EDIT.",
		"// To update this file, run:",
		"// bazel run //pkg/private/xtest/graph:write_files",
		"package graph",
		fmt.Sprintf("const (\n%s\n)\n", strings.Join(interfaces(graph.StaticIfaceIdMapping), "\n")),
	}
	n, err := w.Write([]byte(strings.Join(lines, "\n")))
	total += n
	if err != nil {
		return total, err
	}
	return total, nil
}

func interfaces(staticIfaceIds map[string]int) []string {
	var res []string

	keys := sortedKeys(staticIfaceIds)

	for _, srcName := range keys {
		for _, dstName := range keys {
			if srcName == dstName {
				continue
			}
			res = append(res,
				fmt.Sprintf("If_%s_%s = uint16(%d%d)", srcName, dstName,
					staticIfaceIds[srcName], staticIfaceIds[dstName]))
		}
	}
	return res
}

func sortedKeys(m map[string]int) []string {
	var res []string
	for k := range m {
		res = append(res, k)
	}
	sort.Strings(res)
	return res
}
