# This build file is layered onto the openwrt build tree which is
# imported as an external dependency. It is a shell script with
# basel hooks.

load("@@//dist:openwrt_package.bzl", "ipk_pkg")
load("@@//dist:musl_toolchain/musl_cc_toolchain_config.bzl", "musl_cc_toolchain_config")
load("@rules_cc//cc:defs.bzl", "cc_toolchain")

package(default_visibility = ["//visibility:public"])

ipk_pkg(
    name = "router_ipk",
    pkg = "router",
    executables = ["@@//router/cmd/router:router"],
    initds = ["@@//dist:openwrt_initds/router"],
    configsroot = "@@//dist:openwrt_configs",
    configs = [
        "@@//dist:openwrt_configs/router.toml",
        "@@//dist:openwrt_configs/topology.json",
        "@@//dist:openwrt_configs/keys/master0.key",
        "@@//dist:openwrt_configs/keys/master1.key",
    ],
    visibility = ["//visibility:public"],
)

# This exports the useful portions of the buildroot to be used as a toolchain.
#
# Adapated from illicitonion's unreleased work: 
# https://github.com/bazel-contrib/musl-toolchain
# Merit is his, mistakes are mine.

filegroup(
    name = "all_toolchain_files",
    # The following matches everything except lib, lib32, and lib64 symlinks because they cause
    # cycles. Lib32 is just skipped but the lib and lib64 are partially duplicated. There's not
    # way to get bazel to create directory symlinks inside a sandbox by matching the link alone.
    # This cannot be done with an exclude pattern as exclusions are applied after full traversal.
    srcs = glob([
    	 "staging_dir/host/**",
    	 "staging_dir/target*/**",
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/bin/**",
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/include/**",
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/info.mk",
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/lib/b*/**", # Everything but the lib64 link
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/lib/ld*/**",
    	 # "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/lib/lib64/*", # Link. Dupe the files.
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/lib/*.*",
    	 # "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/lib64/*", # Link. Dupe the files.
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/lib/g*/**",
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/libexec/**",
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/share/**",
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/usr/i*/**",
    	 # "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/usr/lib/*", # Link. Dupe the files.
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/x86_64*/bin/**",
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/x86_64*/include/**",
	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/x86_64*/lib/*.*",  # Link. Dupe the files. <- BUT WE NEED THIS!
    	 # "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/x86_64*/lib64/*", # Link. Dupe the files.
    	 "staging_dir/toolchain-x86_64_gcc-12.3.0_musl/x86_64*/sys-include/*", # Link. Dupe the files.
    ]),
    visibility = ["//visibility:public"],
)

[
    filegroup(
        name = "musl_" + bin + "_files",
        srcs = ["staging_dir/toolchain-x86_64_gcc-12.3.0_musl/bin/x86_64-linux-musl-" + bin],
    )
    for bin in [
        "ar",
        "ld",
        "objcopy",
        "strip",
        "objdump",
    ]
]

filegroup(name = "empty")

musl_cc_toolchain_config(name = "k8_musl_toolchain_config", target_arch = "x86_64")

cc_toolchain(
    name = "amd64_musl_toolchain",
    all_files = ":all_toolchain_files",
    ar_files = ":musl_ar_files",
    as_files = ":all_files",
    compiler_files = ":all_toolchain_files",
    coverage_files = ":all_toolchain_files",
    dwp_files = ":empty",
    linker_files = ":all_toolchain_files",
    objcopy_files = ":musl_objcopy_files",
    strip_files = ":musl_strip_files",
    supports_param_files = 0,
    toolchain_config = ":k8_musl_toolchain_config",
    toolchain_identifier = "k8-musl-toolchain",
)

