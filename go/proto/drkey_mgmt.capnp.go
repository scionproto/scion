// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type DRKeyReq struct{ capnp.Struct }
type DRKeyReq_flags DRKeyReq

// DRKeyReq_TypeID is the unique identifier for the type DRKeyReq.
const DRKeyReq_TypeID = 0x9f50d21c9d4ce7ef

func NewDRKeyReq(s *capnp.Segment) (DRKeyReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return DRKeyReq{st}, err
}

func NewRootDRKeyReq(s *capnp.Segment) (DRKeyReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return DRKeyReq{st}, err
}

func ReadRootDRKeyReq(msg *capnp.Message) (DRKeyReq, error) {
	root, err := msg.RootPtr()
	return DRKeyReq{root.Struct()}, err
}

func (s DRKeyReq) String() string {
	str, _ := text.Marshal(0x9f50d21c9d4ce7ef, s.Struct)
	return str
}

func (s DRKeyReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s DRKeyReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s DRKeyReq) Timestamp() uint32 {
	return s.Struct.Uint32(8)
}

func (s DRKeyReq) SetTimestamp(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s DRKeyReq) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s DRKeyReq) HasSignature() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DRKeyReq) SetSignature(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s DRKeyReq) CertVer() uint32 {
	return s.Struct.Uint32(12)
}

func (s DRKeyReq) SetCertVer(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s DRKeyReq) TrcVer() uint32 {
	return s.Struct.Uint32(16)
}

func (s DRKeyReq) SetTrcVer(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s DRKeyReq) Flags() DRKeyReq_flags { return DRKeyReq_flags(s) }

func (s DRKeyReq_flags) Prefetch() bool {
	return s.Struct.Bit(160)
}

func (s DRKeyReq_flags) SetPrefetch(v bool) {
	s.Struct.SetBit(160, v)
}

// DRKeyReq_List is a list of DRKeyReq.
type DRKeyReq_List struct{ capnp.List }

// NewDRKeyReq creates a new list of DRKeyReq.
func NewDRKeyReq_List(s *capnp.Segment, sz int32) (DRKeyReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return DRKeyReq_List{l}, err
}

func (s DRKeyReq_List) At(i int) DRKeyReq { return DRKeyReq{s.List.Struct(i)} }

func (s DRKeyReq_List) Set(i int, v DRKeyReq) error { return s.List.SetStruct(i, v.Struct) }

func (s DRKeyReq_List) String() string {
	str, _ := text.MarshalList(0x9f50d21c9d4ce7ef, s.List)
	return str
}

// DRKeyReq_Promise is a wrapper for a DRKeyReq promised by a client call.
type DRKeyReq_Promise struct{ *capnp.Pipeline }

func (p DRKeyReq_Promise) Struct() (DRKeyReq, error) {
	s, err := p.Pipeline.Struct()
	return DRKeyReq{s}, err
}

func (p DRKeyReq_Promise) Flags() DRKeyReq_flags_Promise { return DRKeyReq_flags_Promise{p.Pipeline} }

// DRKeyReq_flags_Promise is a wrapper for a DRKeyReq_flags promised by a client call.
type DRKeyReq_flags_Promise struct{ *capnp.Pipeline }

func (p DRKeyReq_flags_Promise) Struct() (DRKeyReq_flags, error) {
	s, err := p.Pipeline.Struct()
	return DRKeyReq_flags{s}, err
}

type DRKeyRep struct{ capnp.Struct }

// DRKeyRep_TypeID is the unique identifier for the type DRKeyRep.
const DRKeyRep_TypeID = 0xc3fe25dd82681d64

func NewDRKeyRep(s *capnp.Segment) (DRKeyRep, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return DRKeyRep{st}, err
}

func NewRootDRKeyRep(s *capnp.Segment) (DRKeyRep, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return DRKeyRep{st}, err
}

func ReadRootDRKeyRep(msg *capnp.Message) (DRKeyRep, error) {
	root, err := msg.RootPtr()
	return DRKeyRep{root.Struct()}, err
}

func (s DRKeyRep) String() string {
	str, _ := text.Marshal(0xc3fe25dd82681d64, s.Struct)
	return str
}

func (s DRKeyRep) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s DRKeyRep) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s DRKeyRep) Timestamp() uint32 {
	return s.Struct.Uint32(8)
}

func (s DRKeyRep) SetTimestamp(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s DRKeyRep) ExpTime() uint32 {
	return s.Struct.Uint32(12)
}

func (s DRKeyRep) SetExpTime(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s DRKeyRep) Cipher() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s DRKeyRep) HasCipher() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DRKeyRep) SetCipher(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s DRKeyRep) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s DRKeyRep) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s DRKeyRep) SetSignature(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s DRKeyRep) CertVerSrc() uint32 {
	return s.Struct.Uint32(16)
}

func (s DRKeyRep) SetCertVerSrc(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s DRKeyRep) CertVerDst() uint32 {
	return s.Struct.Uint32(20)
}

func (s DRKeyRep) SetCertVerDst(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s DRKeyRep) TrcVer() uint32 {
	return s.Struct.Uint32(24)
}

func (s DRKeyRep) SetTrcVer(v uint32) {
	s.Struct.SetUint32(24, v)
}

// DRKeyRep_List is a list of DRKeyRep.
type DRKeyRep_List struct{ capnp.List }

// NewDRKeyRep creates a new list of DRKeyRep.
func NewDRKeyRep_List(s *capnp.Segment, sz int32) (DRKeyRep_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return DRKeyRep_List{l}, err
}

func (s DRKeyRep_List) At(i int) DRKeyRep { return DRKeyRep{s.List.Struct(i)} }

func (s DRKeyRep_List) Set(i int, v DRKeyRep) error { return s.List.SetStruct(i, v.Struct) }

func (s DRKeyRep_List) String() string {
	str, _ := text.MarshalList(0xc3fe25dd82681d64, s.List)
	return str
}

// DRKeyRep_Promise is a wrapper for a DRKeyRep promised by a client call.
type DRKeyRep_Promise struct{ *capnp.Pipeline }

func (p DRKeyRep_Promise) Struct() (DRKeyRep, error) {
	s, err := p.Pipeline.Struct()
	return DRKeyRep{s}, err
}

type DRKeyMgmt struct{ capnp.Struct }
type DRKeyMgmt_Which uint16

const (
	DRKeyMgmt_Which_unset    DRKeyMgmt_Which = 0
	DRKeyMgmt_Which_drkeyReq DRKeyMgmt_Which = 1
	DRKeyMgmt_Which_drkeyRep DRKeyMgmt_Which = 2
)

func (w DRKeyMgmt_Which) String() string {
	const s = "unsetdrkeyReqdrkeyRep"
	switch w {
	case DRKeyMgmt_Which_unset:
		return s[0:5]
	case DRKeyMgmt_Which_drkeyReq:
		return s[5:13]
	case DRKeyMgmt_Which_drkeyRep:
		return s[13:21]

	}
	return "DRKeyMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// DRKeyMgmt_TypeID is the unique identifier for the type DRKeyMgmt.
const DRKeyMgmt_TypeID = 0xb1bdb7d6fb13f1ca

func NewDRKeyMgmt(s *capnp.Segment) (DRKeyMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DRKeyMgmt{st}, err
}

func NewRootDRKeyMgmt(s *capnp.Segment) (DRKeyMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DRKeyMgmt{st}, err
}

func ReadRootDRKeyMgmt(msg *capnp.Message) (DRKeyMgmt, error) {
	root, err := msg.RootPtr()
	return DRKeyMgmt{root.Struct()}, err
}

func (s DRKeyMgmt) String() string {
	str, _ := text.Marshal(0xb1bdb7d6fb13f1ca, s.Struct)
	return str
}

func (s DRKeyMgmt) Which() DRKeyMgmt_Which {
	return DRKeyMgmt_Which(s.Struct.Uint16(0))
}
func (s DRKeyMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s DRKeyMgmt) DrkeyReq() (DRKeyReq, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != drkeyReq")
	}
	p, err := s.Struct.Ptr(0)
	return DRKeyReq{Struct: p.Struct()}, err
}

func (s DRKeyMgmt) HasDrkeyReq() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DRKeyMgmt) SetDrkeyReq(v DRKeyReq) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyReq sets the drkeyReq field to a newly
// allocated DRKeyReq struct, preferring placement in s's segment.
func (s DRKeyMgmt) NewDrkeyReq() (DRKeyReq, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewDRKeyReq(s.Struct.Segment())
	if err != nil {
		return DRKeyReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s DRKeyMgmt) DrkeyRep() (DRKeyRep, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != drkeyRep")
	}
	p, err := s.Struct.Ptr(0)
	return DRKeyRep{Struct: p.Struct()}, err
}

func (s DRKeyMgmt) HasDrkeyRep() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s DRKeyMgmt) SetDrkeyRep(v DRKeyRep) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyRep sets the drkeyRep field to a newly
// allocated DRKeyRep struct, preferring placement in s's segment.
func (s DRKeyMgmt) NewDrkeyRep() (DRKeyRep, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewDRKeyRep(s.Struct.Segment())
	if err != nil {
		return DRKeyRep{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// DRKeyMgmt_List is a list of DRKeyMgmt.
type DRKeyMgmt_List struct{ capnp.List }

// NewDRKeyMgmt creates a new list of DRKeyMgmt.
func NewDRKeyMgmt_List(s *capnp.Segment, sz int32) (DRKeyMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return DRKeyMgmt_List{l}, err
}

func (s DRKeyMgmt_List) At(i int) DRKeyMgmt { return DRKeyMgmt{s.List.Struct(i)} }

func (s DRKeyMgmt_List) Set(i int, v DRKeyMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s DRKeyMgmt_List) String() string {
	str, _ := text.MarshalList(0xb1bdb7d6fb13f1ca, s.List)
	return str
}

// DRKeyMgmt_Promise is a wrapper for a DRKeyMgmt promised by a client call.
type DRKeyMgmt_Promise struct{ *capnp.Pipeline }

func (p DRKeyMgmt_Promise) Struct() (DRKeyMgmt, error) {
	s, err := p.Pipeline.Struct()
	return DRKeyMgmt{s}, err
}

func (p DRKeyMgmt_Promise) DrkeyReq() DRKeyReq_Promise {
	return DRKeyReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p DRKeyMgmt_Promise) DrkeyRep() DRKeyRep_Promise {
	return DRKeyRep_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_f85d2602085656c1 = "x\xda\x84\x92OHT]\x18\xc6\x9f\xe7\x9c{g\x14" +
	"\x1c\xf0pg@>\xbe0\x88\x846R\xbas\xa3\x84" +
	"B\x7f\x14<\xa3\x18D\x11\xc3x\x1d\x87\x1a\xb9\xde{" +
	"\x85\xdc$\xb4o\x11\xb4\x09\x92\x84\x0a\\\x14%\x14\x15" +
	"\xe4\"ZH\xd1\xc6!C\"\xa1\xc0\xa8ERA\x81" +
	"\x10z\xe3x\xc7q\x08%\xee\xea>\xefs\xde\xf3>" +
	"\xe7\xf7\x1e\xbeew\x89#\xf6\xc2\x01``\x86v\"" +
	"\xfa\xf6\xb9w\xfa\xffr\xffMhE\x19=\x1f\x1a\xaa" +
	"\x13-g\xd7a3\x098/U\xd9YRI\xa0}" +
	"Q\x9d\"\x18\xbd\xfa\xe1\xfc~\xfbx~\xce\xb8\xb9\xe3" +
	"\xeeaR\x02N\xbd\xf3\xce\xc98\xe6\xa0r\xee\x83\xd1" +
	"\xf0\xbe\xd1\xcb+\x077_\x18\xb7U\xd3[\x18\xcb\x9c" +
	"Sv\xe6\x8d\xb9\xfd\xa9\xb3`z?k9\x14\\Z" +
	"\x9b-C\xffG\xb93W\x86I\x02\xedW2\x82\xa0" +
	"s5\xd3\x89\xa8\xf2\xf5E\xc3\xfeyw\xf2\\\xa9 " +
	"Jak>\xe7\x8dy\x1d\xdd\xd9\x93\xeed\xd6\xe5x" +
	"?\xa9\x9b\xa4\x05X\x04\xd4\xf56@_\x93\xd43\x82" +
	"\x8a\"M#Ng\x01}CR\xcf\x0a\x1aM\x00\xea" +
	"\x8e\xd1nK\xea\x07\x82J\xca4%\xa0\xee\x1d\x05\xf4" +
	"\xac\xa4~(\xa8,+M\x0bPs\x1d\x80\xbe+\xa9" +
	"\x9f\x08\xd2f\xcd\xfc\xeaQ\x1bDs1\x18\xce\x05\xac" +
	"\x87`=\x18\x85\xc5\x92\x1b\x84\xb9\x12\xe8\xb1\x0e\x82u" +
	"`\x14\x14\x0bc\xb9p\xc2\x07]\xa6 \x98\x02\xa7\xf2" +
	"\xae\x1f\x0e\xb9\xfe\xb6\xa73\xf4\xf35\xbf\xcd#\x17r" +
	"\x85`\xaf\xd8}\x05Y\x0aM\xee\x06i5D\xd1V" +
	"\xf0\x1e\x13\xbcKR\xf7\x0a\xa6\xb8\x19\xc5\xc9\x8f\x9f\x00" +
	"\xf41I=(\x98\x12\x1bQ\x9c]\x1b\xb5_R\x9f" +
	"\x11l\x9e\x18\x0b\xdc\x10\x89\xf8\xae\xac;\x0e\x80\x8d;" +
	"T@6\x1a\xc2q\xd5\x8b\xabU\xde\xb5\xd5]\xf1x" +
	"f\xcc\xfdU<\x8bf\xca\xd7\x92z\xb9\x06\xcf\x92A" +
	"\xf1FR\x7f\x10TB\xc63\xae\x18\x14\xcb\x92zU" +
	"\x90\x15<\x1f\x0d\x89\xf7\x92\xfa\x8b\xc1\xc3\x18\xcf's" +
	"zUR\x7f\x17T\xb6\x95\xa6\x0d\xa8\xb5\xd3\x80\xfe*" +
	"\xa9\xd7\x05U\xc2N3\x01\xa8_F\xfc)\x99\xa5\xa0" +
	"J&\xd2f\xf3\xd5\x86\xe9\xb9.9`Q\xf0\xdf," +
	"\xa7\xdc\x8b\xde`\xb1\xe4V\xb9\xe5\x8b\xde\xa8\xeboc" +
	"\xdd\x0duTA=\x00\xe9\xe7\xab;Q\x11\xbb!\x83" +
	"p\x8f%\xa8>\xab\xfc\xfbY\xc7[\xb7\xf6\x03\xda\x92" +
	"V\xe3L\x1c9e\xa06H\xea&\xc1\xc8\xf3\xdd\x11" +
	"7\xcc\x8f\x1a\\\x84 \xc1?\x01\x00\x00\xff\xffz\x02" +
	"\xfd6"

func init() {
	schemas.Register(schema_f85d2602085656c1,
		0x9f50d21c9d4ce7ef,
		0xb1bdb7d6fb13f1ca,
		0xc3fe25dd82681d64,
		0xd2a8ed7e732926bc)
}
