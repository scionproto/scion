// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the certificate chains
	// (GET /certificates)
	GetCertificates(w http.ResponseWriter, r *http.Request, params GetCertificatesParams)
	// Get the certificate chain
	// (GET /certificates/{chain-id})
	GetCertificate(w http.ResponseWriter, r *http.Request, chainId ChainID)
	// Get the certificate chain blob
	// (GET /certificates/{chain-id}/blob)
	GetCertificateBlob(w http.ResponseWriter, r *http.Request, chainId ChainID)
	// List the TRCs
	// (GET /trcs)
	GetTrcs(w http.ResponseWriter, r *http.Request, params GetTrcsParams)
	// Get the TRC
	// (GET /trcs/isd{isd}-b{base}-s{serial})
	GetTrc(w http.ResponseWriter, r *http.Request, isd int, base int, serial int)
	// Get the TRC blob
	// (GET /trcs/isd{isd}-b{base}-s{serial}/blob)
	GetTrcBlob(w http.ResponseWriter, r *http.Request, isd int, base int, serial int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetCertificates operation middleware
func (siw *ServerInterfaceWrapper) GetCertificates(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCertificatesParams

	// ------------- Optional query parameter "isd_as" -------------
	if paramValue := r.URL.Query().Get("isd_as"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "isd_as", r.URL.Query(), &params.IsdAs)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter isd_as: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "valid_at" -------------
	if paramValue := r.URL.Query().Get("valid_at"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "valid_at", r.URL.Query(), &params.ValidAt)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter valid_at: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "all" -------------
	if paramValue := r.URL.Query().Get("all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter all: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCertificates(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCertificate operation middleware
func (siw *ServerInterfaceWrapper) GetCertificate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "chain-id" -------------
	var chainId ChainID

	err = runtime.BindStyledParameter("simple", false, "chain-id", chi.URLParam(r, "chain-id"), &chainId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter chain-id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCertificate(w, r, chainId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCertificateBlob operation middleware
func (siw *ServerInterfaceWrapper) GetCertificateBlob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "chain-id" -------------
	var chainId ChainID

	err = runtime.BindStyledParameter("simple", false, "chain-id", chi.URLParam(r, "chain-id"), &chainId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter chain-id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCertificateBlob(w, r, chainId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTrcs operation middleware
func (siw *ServerInterfaceWrapper) GetTrcs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrcsParams

	// ------------- Optional query parameter "isd" -------------
	if paramValue := r.URL.Query().Get("isd"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "isd", r.URL.Query(), &params.Isd)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter isd: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "all" -------------
	if paramValue := r.URL.Query().Get("all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter all: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrcs(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTrc operation middleware
func (siw *ServerInterfaceWrapper) GetTrc(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "isd" -------------
	var isd int

	err = runtime.BindStyledParameter("simple", false, "isd", chi.URLParam(r, "isd"), &isd)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter isd: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "base" -------------
	var base int

	err = runtime.BindStyledParameter("simple", false, "base", chi.URLParam(r, "base"), &base)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter base: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "serial" -------------
	var serial int

	err = runtime.BindStyledParameter("simple", false, "serial", chi.URLParam(r, "serial"), &serial)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter serial: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrc(w, r, isd, base, serial)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTrcBlob operation middleware
func (siw *ServerInterfaceWrapper) GetTrcBlob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "isd" -------------
	var isd int

	err = runtime.BindStyledParameter("simple", false, "isd", chi.URLParam(r, "isd"), &isd)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter isd: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "base" -------------
	var base int

	err = runtime.BindStyledParameter("simple", false, "base", chi.URLParam(r, "base"), &base)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter base: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "serial" -------------
	var serial int

	err = runtime.BindStyledParameter("simple", false, "serial", chi.URLParam(r, "serial"), &serial)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter serial: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTrcBlob(w, r, isd, base, serial)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/certificates", wrapper.GetCertificates)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/certificates/{chain-id}", wrapper.GetCertificate)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/certificates/{chain-id}/blob", wrapper.GetCertificateBlob)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trcs", wrapper.GetTrcs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trcs/isd{isd}-b{base}-s{serial}", wrapper.GetTrc)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/trcs/isd{isd}-b{base}-s{serial}/blob", wrapper.GetTrcBlob)
	})

	return r
}
