// Copyright 2017 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package trc

import (
	"fmt"
	"net"
	"sort"
	"testing"
	"time"

	. "github.com/smartystreets/goconvey/convey"

	"github.com/netsec-ethz/scion/go/lib/addr"
	"github.com/netsec-ethz/scion/go/lib/common"
	"github.com/netsec-ethz/scion/go/lib/crypto"
)

// Interface assertions
var _ fmt.Stringer = (*TRC)(nil)

func Test_TRCFromRaw(t *testing.T) {
	Convey("ChainFromRaw should parse bytes correctly", t, func() {
		trc, err := TRCFromRaw(rawTRC, false)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("CreationTime", trc.CreationTime, ShouldEqual, 1510146554)
		SoMsg("Description", trc.Description, ShouldEqual, "ISD 1")
		SoMsg("ExpirationTime", trc.ExpirationTime, ShouldEqual, 1541682554)
		SoMsg("GracePeriod", trc.GracePeriod, ShouldEqual, 18000)
		SoMsg("ISD", trc.ISD, ShouldEqual, 1)
		SoMsg("Quarantine", trc.Quarantine, ShouldBeFalse)
		SoMsg("QuorumCAs", trc.QuorumCAs, ShouldEqual, 3)
		SoMsg("QuorumTRC", trc.QuorumTRC, ShouldEqual, 2)
		SoMsg("ThresholdEEPKI", trc.ThresholdEEPKI, ShouldEqual, 2)
		SoMsg("Version", trc.Version, ShouldEqual, 0)

		Convey("CertLogs parsed correctly", func() {
			SoMsg("Log1", trc.CertLogs["Log1"], ShouldNotBeNil)
			SoMsg("Log2", trc.CertLogs["Log2"], ShouldNotBeNil)
			ip := net.ParseIP("127.0.0.75")
			SoMsg("Log1 addr", trc.CertLogs["Log1"].Addr, ShouldResemble,
				&Addr{IA: &addr.ISD_AS{I: 1, A: 11}, IP: &ip})
			SoMsg("Log1 cert", trc.CertLogs["Log1"].Certificate, ShouldResemble,
				common.RawBytes{0xe3, 0x48, 0x78, 0xbc, 0xee, 0x40, 0x28, 0x71,
					0x87, 0x93, 0x72, 0x31, 0xa3, 0x7d, 0xaf, 0xcb, 0xf0, 0x07,
					0x76, 0xae, 0xe2, 0x3b, 0x77, 0x69, 0x71, 0x0c, 0x68, 0x34,
					0xf7, 0xf5, 0x17, 0x0e})
		})

		Convey("CoreASes parsed correctly", func() {
			SoMsg("1-11", trc.CoreASes["1-11"], ShouldNotBeNil)
			SoMsg("1-12", trc.CoreASes["1-12"], ShouldNotBeNil)
			SoMsg("1-13", trc.CoreASes["1-13"], ShouldNotBeNil)
			entry := &CoreAS{OfflineKeyAlg: crypto.Ed25519, OnlineKeyAlg: crypto.Ed25519}
			entry.OfflineKey = []byte{0x2b, 0x75, 0x84, 0xd7, 0xb4, 0x3d, 0xb3, 0xff,
				0x38, 0x76, 0x38, 0x9d, 0xd3, 0x44, 0x51, 0x12, 0x77, 0xba, 0x48,
				0x93, 0xd0, 0x0b, 0xb8, 0x29, 0x61, 0x20, 0x0b, 0x47, 0x69, 0xaf,
				0x3c, 0x58}
			entry.OnlineKey = []byte{0x26, 0xf8, 0x1a, 0x38, 0x34, 0xc6, 0x88, 0xef,
				0x38, 0x3b, 0x75, 0xdd, 0xa1, 0x4e, 0x27, 0x00, 0x55, 0x10, 0x3b,
				0x8d, 0xee, 0x4c, 0xf7, 0xc3, 0x70, 0xd5, 0x98, 0xf7, 0x0e, 0x42,
				0x91, 0xd4}

			SoMsg("CoreAS 1-11", trc.CoreASes["1-11"], ShouldResemble, entry)
		})

		Convey("RAINS parsed correctly", func() {
			SoMsg("OnlineKey", trc.RAINS.OnlineKey, ShouldResemble, common.RawBytes{0xc6,
				0xba, 0xca, 0x6e, 0x3f, 0xb5, 0x49, 0x54, 0x21, 0xbd, 0x4f, 0x02,
				0x7d, 0x6d, 0xbc, 0xc6, 0x41, 0xd9, 0xf5, 0x83, 0x05, 0x65, 0x1b,
				0x12, 0x31, 0xff, 0x7c, 0x51, 0xdc, 0x2b, 0xfa, 0xc1})
			SoMsg("OnlineKeyAlg", trc.RAINS.OnlineKeyAlg, ShouldResemble, crypto.Ed25519)
			SoMsg("RootRAINSKey", trc.RAINS.RootRAINSKey, ShouldResemble,
				common.RawBytes{0x23, 0xbe, 0x50, 0x51, 0x7d, 0x67, 0x7a, 0x71,
					0xfe, 0x2c, 0x18, 0x91, 0xe2, 0x50, 0x5e, 0x8f, 0x7f, 0x72,
					0x05, 0x7a, 0x67, 0x50, 0xb6, 0x6e, 0x4e, 0xb4, 0x7c, 0xc0,
					0x8b, 0xdc, 0x0c, 0x78})
			ip := net.ParseIP("127.0.0.107")
			SoMsg("TRCSrv", trc.RAINS.TRCSrv[0], ShouldResemble,
				&Addr{IA: &addr.ISD_AS{I: 1, A: 12}, IP: &ip})
			SoMsg("TRCSrv size", len(trc.RAINS.TRCSrv), ShouldEqual, 3)
		})

		Convey("RootCAs parsed correctly", func() {
			SoMsg("CA1-1", trc.RootCAs["CA1-1"], ShouldNotBeNil)
			SoMsg("CA1-2", trc.RootCAs["CA1-2"], ShouldNotBeNil)
			SoMsg("CA1-3", trc.RootCAs["CA1-3"], ShouldNotBeNil)
			entry := &RootCA{OnlineKeyAlg: crypto.Ed25519}
			entry.ARPKIKey = []byte{0x20, 0x88, 0xbe, 0xac, 0xd2, 0xd7, 0xc7, 0x66,
				0x38, 0xe8, 0x7d, 0xf0, 0x16, 0x2b, 0x7c, 0x25, 0xda, 0x23, 0x3d,
				0xca, 0x8a, 0xea, 0x16, 0x9c, 0xd6, 0x24, 0x3e, 0x22, 0x9e, 0x1a,
				0x63, 0xdf}
			entry.Certificate = []byte{0x30, 0x82, 0x02, 0xe0, 0x30, 0x82, 0x01, 0xc8, 0xa0, 0x03, 0x02, 0x01, 0x03, 0x02, 0x01, 0x01, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x10, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x05, 0x43, 0x41, 0x31, 0x2d, 0x31, 0x30, 0x1e, 0x17, 0x0d, 0x31, 0x37, 0x31, 0x31, 0x30, 0x38, 0x31, 0x33, 0x30, 0x39, 0x31, 0x32, 0x5a, 0x17, 0x0d, 0x32, 0x32, 0x31, 0x31, 0x30, 0x37, 0x31, 0x33, 0x30, 0x39, 0x31, 0x32, 0x5a, 0x30, 0x10, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x05, 0x43, 0x41, 0x31, 0x2d, 0x31, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xf8, 0x7d, 0x82, 0x4b, 0xf1, 0xda, 0x92, 0xbd, 0xc2, 0x51, 0x03, 0x5d, 0xd1, 0xda, 0x19, 0x05, 0x80, 0xe6, 0x80, 0xb9, 0x35, 0x65, 0x49, 0x4f, 0x70, 0x6c, 0x55, 0x6c, 0xbe, 0x7f, 0xa2, 0x33, 0xd7, 0x9c, 0x6e, 0xdd, 0xf9, 0x52, 0xa3, 0x25, 0xc1, 0x89, 0x64, 0x11, 0x95, 0xc7, 0x4e, 0x16, 0x8e, 0xff, 0xfb, 0x8d, 0x8b, 0x43, 0x4a, 0xf5, 0xe1, 0x00, 0x0d, 0xe7, 0xfc, 0xaa, 0x50, 0x77, 0xf1, 0x56, 0xb3, 0xd9, 0xbf, 0xf3, 0x36, 0xb9, 0x00, 0x82, 0xd9, 0x24, 0xbf, 0x84, 0x20, 0x11, 0xe2, 0x5d, 0x0e, 0x93, 0x77, 0x49, 0x8f, 0xcf, 0x37, 0x68, 0x0d, 0x5c, 0x25, 0xd0, 0x1e, 0x9d, 0xfe, 0x7f, 0xac, 0xa5, 0x80, 0x60, 0x9b, 0x00, 0xe7, 0x21, 0x54, 0x26, 0x9c, 0x9a, 0xdd, 0x47, 0xac, 0x97, 0xaf, 0x6a, 0xf7, 0x91, 0x2b, 0xf3, 0xee, 0x59, 0xbe, 0x57, 0x52, 0x88, 0x9d, 0xc6, 0xd0, 0xf0, 0xe5, 0x18, 0x22, 0xd9, 0x19, 0x5c, 0xad, 0xab, 0x23, 0x28, 0x6f, 0xd6, 0x09, 0x2c, 0xdc, 0x80, 0x2c, 0x5f, 0x8c, 0x86, 0x7a, 0xbb, 0x3c, 0xb8, 0x33, 0x61, 0xa1, 0x7e, 0xa6, 0xdd, 0x4c, 0x62, 0x7c, 0x54, 0xc1, 0xd9, 0x04, 0x1a, 0xe0, 0x5a, 0x53, 0x4b, 0x6b, 0xc3, 0x29, 0x79, 0xb6, 0x3a, 0x16, 0x53, 0xb9, 0x65, 0x05, 0xf4, 0x5e, 0xae, 0x87, 0x25, 0xf7, 0xa0, 0x94, 0x5c, 0xbb, 0x70, 0xa7, 0xfd, 0xde, 0x0c, 0x03, 0x6b, 0xbd, 0x20, 0xc2, 0x9a, 0xae, 0x81, 0x64, 0x7a, 0xb9, 0x09, 0x1a, 0xf5, 0xf8, 0x99, 0x88, 0x0f, 0x89, 0xb2, 0x94, 0xf5, 0x00, 0x32, 0xf3, 0x17, 0xdd, 0x13, 0xda, 0x05, 0x49, 0xca, 0x51, 0x92, 0x61, 0x77, 0x36, 0x79, 0xc5, 0x0d, 0x6a, 0xb7, 0x45, 0x0c, 0xb3, 0x17, 0x6c, 0x51, 0x60, 0xb8, 0xc9, 0x2d, 0x52, 0xa9, 0xe2, 0xea, 0xe0, 0x67, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x45, 0x30, 0x43, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xff, 0x02, 0x01, 0x01, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x66, 0x98, 0xea, 0xea, 0xa2, 0xe6, 0x4c, 0x4d, 0x70, 0x0a, 0x67, 0xd5, 0x15, 0xe7, 0x7f, 0x1e, 0x22, 0xa3, 0x3c, 0x17, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0xd2, 0x76, 0x13, 0x5e, 0xbb, 0x43, 0x45, 0x83, 0x4e, 0xb8, 0xc9, 0xb0, 0x1e, 0x90, 0x92, 0x33, 0xd1, 0x30, 0xf1, 0x78, 0xbf, 0x41, 0x3b, 0x59, 0xf6, 0x6e, 0x69, 0xea, 0xd6, 0xfa, 0xad, 0x49, 0x1e, 0x55, 0x96, 0xed, 0xb4, 0xc1, 0xd8, 0x43, 0x57, 0xee, 0x22, 0x9a, 0x0d, 0x5a, 0xc9, 0x90, 0x91, 0x32, 0x68, 0x97, 0x05, 0xd7, 0x1e, 0xed, 0x39, 0x0f, 0x3d, 0xd4, 0x95, 0xc2, 0xdb, 0x53, 0xd7, 0x06, 0x75, 0xa5, 0x93, 0xb2, 0x31, 0x64, 0x9c, 0xec, 0xd6, 0x90, 0x2f, 0x05, 0x45, 0xa0, 0xd2, 0x82, 0xcd, 0x72, 0xbc, 0x4c, 0xa0, 0x98, 0x72, 0xa8, 0x17, 0xe2, 0x53, 0x9e, 0x64, 0x1f, 0x8e, 0xa0, 0x61, 0xdc, 0x2d, 0xd5, 0x52, 0x57, 0x82, 0xe0, 0x31, 0x79, 0xa6, 0xfe, 0xcd, 0x4c, 0x70, 0x76, 0x61, 0x36, 0x85, 0xe4, 0x90, 0x3d, 0x57, 0xbd, 0xc9, 0xa4, 0xce, 0xe4, 0x09, 0xe6, 0x88, 0x47, 0x49, 0xef, 0x90, 0x78, 0x34, 0x3e, 0x6a, 0x76, 0x6e, 0x0b, 0xf2, 0x66, 0x6e, 0x5a, 0x0c, 0xd0, 0x25, 0x5c, 0x98, 0x2e, 0xc5, 0x7f, 0xde, 0x0b, 0xbb, 0x18, 0xa5, 0xe7, 0xc9, 0x9e, 0xec, 0x4f, 0xad, 0x14, 0xa9, 0xda, 0x93, 0x77, 0x6d, 0x1e, 0x72, 0x9b, 0x34, 0x79, 0xca, 0x0d, 0xc0, 0xb0, 0xcb, 0x15, 0x4f, 0xc2, 0xef, 0xe4, 0xa8, 0xd6, 0x01, 0x52, 0x2e, 0xc3, 0x68, 0xfc, 0xf2, 0xe9, 0x68, 0xb9, 0x5f, 0xc8, 0x6b, 0x40, 0xca, 0x07, 0xae, 0x7a, 0xca, 0xd2, 0x59, 0xea, 0x65, 0x80, 0x0c, 0xfe, 0x11, 0x05, 0x3d, 0xa6, 0x8a, 0x69, 0x90, 0xf6, 0xa4, 0x3a, 0x5a, 0x2b, 0x6f, 0xbd, 0x01, 0x8d, 0x45, 0x7d, 0x82, 0xa8, 0xfa, 0x20, 0xc4, 0x5d, 0x95, 0xde, 0xe7, 0x2f, 0x7c, 0x32, 0xfb, 0xc6, 0x67, 0xc3, 0x9f, 0x1d, 0x44, 0x59, 0x0c, 0x6c, 0xcf, 0xaa, 0x1c, 0xc1}
			entry.OnlineKey = []byte{0xb6, 0x2f, 0x12, 0xf6, 0xb9, 0x9c, 0xc8, 0x73,
				0xe0, 0xac, 0xe3, 0x97, 0x04, 0x67, 0x90, 0x86, 0x63, 0xcf, 0xdf,
				0x98, 0x15, 0xaa, 0x0f, 0x2f, 0x52, 0x53, 0x41, 0xb5, 0x55, 0x40,
				0x1f, 0xad}
			ipA := net.ParseIP("127.0.0.70")
			ipT := net.ParseIP("127.0.0.71")
			entry.ARPKISrv = []*Addr{{IA: &addr.ISD_AS{I: 1, A: 11}, IP: &ipA}}
			entry.TRCSrv = []*Addr{{IA: &addr.ISD_AS{I: 1, A: 11}, IP: &ipT}}
			SoMsg("RootCA CA1-1", trc.RootCAs["CA1-1"], ShouldResemble, entry)
		})

		Convey("Signatures parsed correctly", func() {
			SoMsg("1-11", trc.Signatures["1-11"], ShouldNotBeNil)
			SoMsg("1-12", trc.Signatures["1-12"], ShouldNotBeNil)
			SoMsg("1-13", trc.Signatures["1-13"], ShouldNotBeNil)
			SoMsg("Signature 1-11", trc.Signatures["1-11"], ShouldResemble,
				common.RawBytes{0x90, 0xf3, 0x9f, 0xc1, 0x71, 0x31, 0x19, 0xfa,
					0xc0, 0xbb, 0xbe, 0xa0, 0x7c, 0x2e, 0x79, 0x03, 0x7f, 0x60,
					0xa5, 0xc3, 0x02, 0xd8, 0xf1, 0xaa, 0x19, 0x3c, 0x66, 0x09,
					0xa9, 0x2e, 0x87, 0xec, 0x18, 0x95, 0x95, 0x64, 0x0d, 0xd5,
					0xf3, 0xe5, 0x64, 0x2c, 0x24, 0xfc, 0x3f, 0xa2, 0x8f, 0x63,
					0xf5, 0xb8, 0x8d, 0x2a, 0xf9, 0x2c, 0xe7, 0x26, 0xf4, 0x97,
					0x2a, 0xf8, 0x70, 0xf8, 0x0e, 0x0e})
		})

	})

	Convey("TRCFromRaw should avoid unpack bombs", t, func() {
		raw := []byte{0xFF, 0xFF, 0xFF, 0xFF}
		_, err := TRCFromRaw(raw, true)
		SoMsg("err", err, ShouldNotBeNil)
	})
}

type ISDAS []*addr.ISD_AS

func (i ISDAS) Len() int           { return len(i) }
func (i ISDAS) Swap(k, j int)      { i[k], i[j] = i[j], i[k] }
func (i ISDAS) Less(k, j int) bool { return i[k].I <= i[j].I && i[k].A < i[j].A }

func Test_TRC_CoreASList(t *testing.T) {
	Convey("CoreASList should return CoreASes correctly", t, func() {
		trc, err := TRCFromRaw(rawTRC, false)
		list, err := trc.CoreASList()
		SoMsg("err", err, ShouldBeNil)

		sort.Sort(ISDAS(list))
		SoMsg("CoreASList", list, ShouldResemble, []*addr.ISD_AS{{I: 1, A: 11}, {I: 1, A: 12}, {I: 1, A: 13}})
	})
}

func Test_TRC_Sign(t *testing.T) {
	Convey("Sign should sign TRC correctly", t, func() {
		trc, err := TRCFromRaw(rawTRC, false)
		packd, _ := trc.sigPack()
		err = crypto.Verify(packd, trc.Signatures["1-11"], trc.CoreASes["1-11"].OnlineKey, crypto.Ed25519)
		SoMsg("err", err, ShouldBeNil)
		key := []byte{0xaf, 0x00, 0x0e, 0xb6, 0x26, 0x4f, 0xbd, 0x20, 0xd1, 0x36, 0xed,
			0xae, 0x42, 0x65, 0xeb, 0x29, 0x15, 0x8e, 0xa6, 0x35, 0xef, 0x3d, 0x2a,
			0xac, 0xa2, 0xfd, 0x17, 0x2d, 0x4c, 0x42, 0x19, 0x5e, 0x26, 0xf8, 0x1a,
			0x38, 0x34, 0xc6, 0x88, 0xef, 0x38, 0x3b, 0x75, 0xdd, 0xa1, 0x4e, 0x27,
			0x00, 0x55, 0x10, 0x3b, 0x8d, 0xee, 0x4c, 0xf7, 0xc3, 0x70, 0xd5, 0x98,
			0xf7, 0x0e, 0x42, 0x91, 0xd4}
		orig := trc.Signatures["1-11"]
		_ = orig
		delete(trc.Signatures, "1-11")
		trc.Sign("1-11", key, crypto.Ed25519)
		SoMsg("Equal signature", trc.Signatures["1-11"], ShouldResemble, orig)
	})
}

func Test_TRC_CheckActive(t *testing.T) {
	Convey("Check active should report correctly", t, func() {
		t1, _ := TRCFromRaw(rawTRC, false)
		t2, _ := TRCFromRaw(rawTRC, false)
		t2.Version += 1

		t1.CreationTime = time.Now().Unix()
		t1.ExpirationTime = t1.CreationTime + 1<<20
		t1.CreationTime = time.Now().Unix()
		t1.ExpirationTime = t2.CreationTime + 1<<20

		Convey("TRC is active", func() {
			err := t1.CheckActive(t2)
			SoMsg("err", err, ShouldBeNil)
		})
		Convey("Early usage", func() {
			t1.CreationTime = time.Now().Unix() + 1<<20
			err := t1.CheckActive(t2)
			SoMsg("err", err, ShouldNotBeNil)
		})
		Convey("Late usage", func() {
			t1.ExpirationTime = time.Now().Unix() - 1<<20
			err := t1.CheckActive(t2)
			SoMsg("err", err, ShouldNotBeNil)
		})
		Convey("Outdated version", func() {
			t2.Version += 1
			err := t1.CheckActive(t2)
			SoMsg("err", err, ShouldNotBeNil)
		})
		Convey("Grace period passed", func() {
			t2.GracePeriod = 0
			err := t1.CheckActive(t2)
			SoMsg("err", err, ShouldNotBeNil)
		})
	})
}

func Test_TRC_Compress(t *testing.T) {
	Convey("TRC is compressed correctly", t, func() {
		trc, _ := TRCFromRaw(rawTRC, false)
		comp, err := trc.Compress()
		SoMsg("err", err, ShouldBeNil)
		pTRC, _ := TRCFromRaw(comp, true)
		SoMsg("Compare", pTRC, ShouldResemble, trc)
	})
}

func Test_TRC_String(t *testing.T) {
	Convey("TRC is returned as String correctly", t, func() {
		trc, err := TRCFromRaw(rawTRC, false)
		SoMsg("err", err, ShouldBeNil)
		SoMsg("Compare", trc.String(), ShouldEqual, "TRC 1v0")

	})
}

func Test_TRC_JSON(t *testing.T) {
	Convey("TRC is returned as Json correctly", t, func() {
		trc, err := TRCFromRaw(rawTRC, false)
		j, err := trc.JSON(false)
		SoMsg("err", err, ShouldEqual, nil)
		trcJ, err := TRCFromRaw(j, false)
		SoMsg("Eq", trc, ShouldResemble, trcJ)
	})
}

func Test_TRC_IsdVer(t *testing.T) {
	Convey("ISD version tuple is returned correctly", t, func() {
		trc, err := TRCFromRaw(rawTRC, false)
		SoMsg("err", err, ShouldBeNil)
		isd, ver := trc.IsdVer()
		SoMsg("IA", isd, ShouldEqual, 1)
		SoMsg("Ver", ver, ShouldEqual, 0)
	})
}

func Test_TRC_Key(t *testing.T) {
	Convey("Key is returned correctly", t, func() {
		trc, err := TRCFromRaw(rawTRC, false)
		SoMsg("err", err, ShouldBeNil)
		key := *trc.Key()
		SoMsg("Key", key, ShouldResemble, Key{ISD: 1, Ver: 0})
		SoMsg("String", (&key).String(), ShouldResemble, (&Key{ISD: 1, Ver: 0}).String())

	})
}

var (
	rawTRC = []byte(`
{
    "CertLogs": {
        "Log1": {
            "1-11 127.0.0.75": "40h4vO5AKHGHk3Ixo32vy/AHdq7iO3dpcQxoNPf1Fw4="
        },
        "Log2": {
            "1-13 127.0.0.140": "psPiZHP9RRQ9zSkLf72/ESDMdNpzS7eviMLXimY8OfM="
        }
    },
    "CoreASes": {
        "1-11": {
            "OfflineKey": "K3WE17Q9s/84djid00RREne6SJPQC7gpYSALR2mvPFg=",
            "OfflineKeyAlg": "ed25519",
            "OnlineKey": "JvgaODTGiO84O3XdoU4nAFUQO43uTPfDcNWY9w5CkdQ=",
            "OnlineKeyAlg": "ed25519"
        },
        "1-12": {
            "OfflineKey": "+XjIxmREKXId2cu9cNEvqMeVjvfBhFMu66SVO3eBJuI=",
            "OfflineKeyAlg": "ed25519",
            "OnlineKey": "0xlIsyTRewuHAhtnj2Gt3hVbnNF2wb+0rSQsPaP2+cQ=",
            "OnlineKeyAlg": "ed25519"
        },
        "1-13": {
            "OfflineKey": "po9V50Hja2ajyyJYRcAEjrcYCzty+iZFE2dhIoPJQa4=",
            "OfflineKeyAlg": "ed25519",
            "OnlineKey": "6OLFSvUjWEdYpGj/1X3Pku5ORTXc41b7PCKGxKhdaY4=",
            "OnlineKeyAlg": "ed25519"
        }
    },
    "CreationTime": 1510146554,
    "Description": "ISD 1",
    "ExpirationTime": 1541682554,
    "GracePeriod": 18000,
    "ISD": 1,
    "Quarantine": false,
    "QuorumCAs": 3,
    "QuorumTRC": 2,
    "RAINS": {
        "OnlineKey": "xrrKbj+1SVQhvU8CfW28xkHZ9YMFZRsSMf98Udwr+sE=",
        "OnlineKeyAlg": "ed25519",
        "RootRAINSKey": "I75QUX1nenH+LBiR4lBej39yBXpnULZuTrR8wIvcDHg=",
        "TRCSrv": [
            "1-12 127.0.0.107",
            "1-12 127.0.0.108",
            "1-12 127.0.0.79"
        ]
    },
    "RootCAs": {
        "CA1-1": {
            "ARPKIKey": "IIi+rNLXx2Y46H3wFit8JdojPcqK6hac1iQ+Ip4aY98=",
            "ARPKISrv": [
                "1-11 127.0.0.70"
            ],
            "Certificate": "MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMTAeFw0xNzExMDgxMzA5MTJaFw0yMjExMDcxMzA5MTJaMBAxDjAMBgNVBAMMBUNBMS0xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA+H2CS/Hakr3CUQNd0doZBYDmgLk1ZUlPcGxVbL5/ojPXnG7d+VKjJcGJZBGVx04Wjv/7jYtDSvXhAA3n/KpQd/FWs9m/8za5AILZJL+EIBHiXQ6Td0mPzzdoDVwl0B6d/n+spYBgmwDnIVQmnJrdR6yXr2r3kSvz7lm+V1KIncbQ8OUYItkZXK2rIyhv1gks3IAsX4yGers8uDNhoX6m3UxifFTB2QQa4FpTS2vDKXm2OhZTuWUF9F6uhyX3oJRcu3Cn/d4MA2u9IMKaroFkerkJGvX4mYgPibKU9QAy8xfdE9oFScpRkmF3NnnFDWq3RQyzF2xRYLjJLVKp4urgZwIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUZpjq6qLmTE1wCmfVFed/HiKjPBcwDQYJKoZIhvcNAQELBQADggEBANJ2E167Q0WDTrjJsB6QkjPRMPF4v0E7WfZuaerW+q1JHlWW7bTB2ENX7iKaDVrJkJEyaJcF1x7tOQ891JXC21PXBnWlk7IxZJzs1pAvBUWg0oLNcrxMoJhyqBfiU55kH46gYdwt1VJXguAxeab+zUxwdmE2heSQPVe9yaTO5AnmiEdJ75B4ND5qdm4L8mZuWgzQJVyYLsV/3gu7GKXnyZ7sT60UqdqTd20ecps0ecoNwLDLFU/C7+So1gFSLsNo/PLpaLlfyGtAygeuesrSWeplgAz+EQU9poppkPakOlorb70BjUV9gqj6IMRdld7nL3wy+8Znw58dRFkMbM+qHME=",
            "OnlineKey": "ti8S9rmcyHPgrOOXBGeQhmPP35gVqg8vUlNBtVVAH60=",
            "OnlineKeyAlg": "ed25519",
            "TRCSrv": [
                "1-11 127.0.0.71"
            ]
        },
        "CA1-2": {
            "ARPKIKey": "Siqbe5E3GivoXBBZdILruUAcVVxGC25h13322kf6PLM=",
            "ARPKISrv": [
                "1-12 127.0.0.102",
                "1-12 127.0.0.103"
            ],
            "Certificate": "MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMjAeFw0xNzExMDgxMzA5MTJaFw0yMjExMDcxMzA5MTJaMBAxDjAMBgNVBAMMBUNBMS0yMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0aSOf6Dc+Y/Gh4Gg5fNmVfkvVsbK6gNWVw6H4fl6Vpg71V+/47/FYpJCwShgJUl1TLRfOfAs//gyRF8M8rbQD6Q3lCkeGygwj3KFHM9iAWyLvz+kRbdVCSQ2qZCv6E6VhMOOB2TyAgRv//VpM+bNj7AnpAUafiZwyI7tS17MHf15FdasfzcYInn5EUTVq3MkhCD68ntsuUs5VXMiWpW8JVBAYtBq05eRChPfSFfbVCTV0T+k7KXSiDkuavvjf0tRqHT4sRjtCCPRMq7PcsHLGAXthWcD+kv67m+ILnV6Bt3fk+LHyyP/j7sXgQOjsx2yQpo0sQ4gTgONz/KJOu4WVQIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUica3fEN9DVN+sQ+dqGue/7s4fTQwDQYJKoZIhvcNAQELBQADggEBAALGHshRda2sEyNfVCZhWWbft5m1MHhjDmgvBjyo/7GGsntos4r68CapK6heH+OAgjBtFXyG6xTSSwrLL8QfiL6V/DbZLfChnHV9ZlDnwyizaDt5pqJjjpNP3ozAfgRBrPcSjDSPGxjy4IFnGpg0aTQnSZ56ivQJOVVhjitHh5CmPq8CoO6RDaR6el4OuwR3m5m/gfu33YEW0qszhdtpWb+pJUO/ziEAUHw2nOjFw8yqeCsK9xO0Nh/f7e7JUu3kM76V+vZT4fgTPUe9f6/PXv84tIGw+gr4lBHC0+KsKVaYad5ZSfMlrb2qEoqFAZD4ItCycE8HaCViBp8sZXzK1bc=",
            "OnlineKey": "4PBYtsTZO9UpDo/VoobLNvrAR74Ijt1ORz+tX1vaDfU=",
            "OnlineKeyAlg": "ed25519",
            "TRCSrv": [
                "1-12 127.0.0.104"
            ]
        },
        "CA1-3": {
            "ARPKIKey": "fKJ2KB0ZxpzAVHpLPTuY7rYtIo42v5JHvfr7YUhCzI8=",
            "ARPKISrv": [
                "1-13 127.0.0.134"
            ],
            "Certificate": "MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMzAeFw0xNzExMDgxMzA5MTJaFw0yMjExMDcxMzA5MTJaMBAxDjAMBgNVBAMMBUNBMS0zMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwRQXsaoJxp6Dr/ETKuZoSf4cBxOkSkw+gPgdahHDcUNTrEZ3z/U18UHsvTbAVsMBepU4SBy10VQp5VUnn9GfsfWqahvPDBh3hcTbP8dqVFnK3f9GSpFJKqFK1paJZW9DfBlrlKKRIKJMK5TC5Fobt3SpGa2OFJE9gSWNjYv1Be0EKyNKAlSVsuduS3Pcx38lkDQvk7WKqCXxxeIXDNbgACS9M9o9YaaiFI+Rb8XVpUVlqMVv9IKXm/DYfwoePA4rDjIc9BKYUo4bSWUersVBJqv0uxz7h0yI//O5jPXQCOXj/YrRaqV8Z5tjY1i9o6PdYOLoqWzfz8K/N3itfDEjkwIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUcFqxwFO0iu6tO9WCl1LsmD8twU0wDQYJKoZIhvcNAQELBQADggEBABFA7c7xYnjWjSG7XzvDXUa64EMPbk27vhh2VAbM8dqkNT/etmWDQiy+xg1hW/PUUpK4+Bl935ELxI1uvvicXpV+/6uWQxLkYkYBbm0o9sJoDaVAHvZgwEa/lQqPrbULUFKslenxJ9xvQBO3jRMM3m6luz7E5TtbWKrtH/knEYwnJ+0KP2Y1JzhLFoobtHV1vztlGFWrjTxFROLhOrDBXE9OTRAWhHd/Hcdntl73V3Kw6s13NRGIW2Cah6513waF6QhszUnh6Pks/P82JPkHQyVwGWR5+fNtIpAjnKxiEA6y0nd2OLpukMIYI0yPnCg8P+QtOUcoMdFejQdoJpJPJSE=",
            "OnlineKey": "tqnJ1EDSGNqxnl5j9g/6j+/J5Bv/N/dz3Si+Qqp+Nek=",
            "OnlineKeyAlg": "ed25519",
            "TRCSrv": [
                "1-13 127.0.0.135",
                "1-13 127.0.0.136"
            ]
        }
    },
    "Signatures": {
        "1-11": "kPOfwXExGfrAu76gfC55A39gpcMC2PGqGTxmCakuh+wYlZVkDdXz5WQsJPw/oo9j9biNKvks5yb0lyr4cPgODg==",
        "1-12": "7J+ZcBRkIMUZqZZrHImOjBT+eM0sBZp4ItJaD+Tc0Ts3McJ98eLag/N5/b0ks2k5c/R/gGVHM7b2eytp/VICDQ==",
        "1-13": "Nw+PaoyC4I7K2Sm36RUvEyzNhXYJt5UMj+QOO8j5gJcRj70/oxgPpPyEZ4J9CME5v4AwcUJnAf5aL/EbjNVwAg=="
    },
    "ThresholdEEPKI": 2,
    "Version": 0
}`)
)
