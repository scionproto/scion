// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List the SCION path segments
	// (GET /segments)
	GetSegments(w http.ResponseWriter, r *http.Request, params GetSegmentsParams)
	// Get the SCION path segment description
	// (GET /segments/{segment-id})
	GetSegment(w http.ResponseWriter, r *http.Request, segmentId SegmentIDs)
	// Get the SCION path segment blob
	// (GET /segments/{segment-id}/blob)
	GetSegmentBlob(w http.ResponseWriter, r *http.Request, segmentId SegmentIDs)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetSegments operation middleware
func (siw *ServerInterfaceWrapper) GetSegments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSegmentsParams

	// ------------- Optional query parameter "start_isd_as" -------------
	if paramValue := r.URL.Query().Get("start_isd_as"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "start_isd_as", r.URL.Query(), &params.StartIsdAs)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter start_isd_as: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "end_isd_as" -------------
	if paramValue := r.URL.Query().Get("end_isd_as"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "end_isd_as", r.URL.Query(), &params.EndIsdAs)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter end_isd_as: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSegments(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSegment operation middleware
func (siw *ServerInterfaceWrapper) GetSegment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "segment-id" -------------
	var segmentId SegmentIDs

	err = runtime.BindStyledParameter("simple", false, "segment-id", chi.URLParam(r, "segment-id"), &segmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter segment-id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSegment(w, r, segmentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSegmentBlob operation middleware
func (siw *ServerInterfaceWrapper) GetSegmentBlob(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "segment-id" -------------
	var segmentId SegmentIDs

	err = runtime.BindStyledParameter("simple", false, "segment-id", chi.URLParam(r, "segment-id"), &segmentId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter segment-id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSegmentBlob(w, r, segmentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/segments", wrapper.GetSegments)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/segments/{segment-id}", wrapper.GetSegment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/segments/{segment-id}/blob", wrapper.GetSegmentBlob)
	})

	return r
}
