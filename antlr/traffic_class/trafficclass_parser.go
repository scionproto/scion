// File generated by ANTLR. DO NOT EDIT.

package traffic_class // TrafficClass
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type TrafficClassParser struct {
	*antlr.BaseParser
}

var TrafficClassParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func trafficclassParserInit() {
	staticData := &TrafficClassParserStaticData
	staticData.LiteralNames = []string{
		"", "'='", "'=0x'", "'-'", "'cls='", "'('", "','", "')'", "'true'",
		"'false'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "WHITESPACE", "DIGITS", "HEX_DIGITS",
		"NET", "ANY", "ALL", "NOT", "BOOL", "SRC", "DST", "DSCP", "TOS", "PROTOCOL",
		"SRCPORT", "DSTPORT", "STRING",
	}
	staticData.RuleNames = []string{
		"matchSrc", "matchDst", "matchDSCP", "matchTOS", "matchProtocol", "matchSrcPort",
		"matchSrcPortRange", "matchDstPort", "matchDstPortRange", "condCls",
		"condAny", "condAll", "condNot", "condBool", "condIPv4", "condPort",
		"cond", "trafficClass",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 25, 138, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1,
		4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1,
		7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1,
		10, 1, 10, 1, 10, 1, 10, 1, 10, 5, 10, 85, 8, 10, 10, 10, 12, 10, 88, 9,
		10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 5, 11, 97, 8, 11,
		10, 11, 12, 11, 100, 9, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1,
		12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14,
		118, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 124, 8, 15, 1, 16, 1, 16,
		1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 133, 8, 16, 1, 17, 1, 17, 1,
		17, 1, 17, 0, 0, 18, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26,
		28, 30, 32, 34, 0, 2, 1, 0, 11, 12, 1, 0, 8, 9, 134, 0, 36, 1, 0, 0, 0,
		2, 40, 1, 0, 0, 0, 4, 44, 1, 0, 0, 0, 6, 48, 1, 0, 0, 0, 8, 52, 1, 0, 0,
		0, 10, 56, 1, 0, 0, 0, 12, 60, 1, 0, 0, 0, 14, 66, 1, 0, 0, 0, 16, 70,
		1, 0, 0, 0, 18, 76, 1, 0, 0, 0, 20, 79, 1, 0, 0, 0, 22, 91, 1, 0, 0, 0,
		24, 103, 1, 0, 0, 0, 26, 108, 1, 0, 0, 0, 28, 117, 1, 0, 0, 0, 30, 123,
		1, 0, 0, 0, 32, 132, 1, 0, 0, 0, 34, 134, 1, 0, 0, 0, 36, 37, 5, 18, 0,
		0, 37, 38, 5, 1, 0, 0, 38, 39, 5, 13, 0, 0, 39, 1, 1, 0, 0, 0, 40, 41,
		5, 19, 0, 0, 41, 42, 5, 1, 0, 0, 42, 43, 5, 13, 0, 0, 43, 3, 1, 0, 0, 0,
		44, 45, 5, 20, 0, 0, 45, 46, 5, 2, 0, 0, 46, 47, 7, 0, 0, 0, 47, 5, 1,
		0, 0, 0, 48, 49, 5, 21, 0, 0, 49, 50, 5, 2, 0, 0, 50, 51, 7, 0, 0, 0, 51,
		7, 1, 0, 0, 0, 52, 53, 5, 22, 0, 0, 53, 54, 5, 1, 0, 0, 54, 55, 5, 25,
		0, 0, 55, 9, 1, 0, 0, 0, 56, 57, 5, 23, 0, 0, 57, 58, 5, 1, 0, 0, 58, 59,
		5, 11, 0, 0, 59, 11, 1, 0, 0, 0, 60, 61, 5, 23, 0, 0, 61, 62, 5, 1, 0,
		0, 62, 63, 5, 11, 0, 0, 63, 64, 5, 3, 0, 0, 64, 65, 5, 11, 0, 0, 65, 13,
		1, 0, 0, 0, 66, 67, 5, 24, 0, 0, 67, 68, 5, 1, 0, 0, 68, 69, 5, 11, 0,
		0, 69, 15, 1, 0, 0, 0, 70, 71, 5, 24, 0, 0, 71, 72, 5, 1, 0, 0, 72, 73,
		5, 11, 0, 0, 73, 74, 5, 3, 0, 0, 74, 75, 5, 11, 0, 0, 75, 17, 1, 0, 0,
		0, 76, 77, 5, 4, 0, 0, 77, 78, 5, 11, 0, 0, 78, 19, 1, 0, 0, 0, 79, 80,
		5, 14, 0, 0, 80, 81, 5, 5, 0, 0, 81, 86, 3, 32, 16, 0, 82, 83, 5, 6, 0,
		0, 83, 85, 3, 32, 16, 0, 84, 82, 1, 0, 0, 0, 85, 88, 1, 0, 0, 0, 86, 84,
		1, 0, 0, 0, 86, 87, 1, 0, 0, 0, 87, 89, 1, 0, 0, 0, 88, 86, 1, 0, 0, 0,
		89, 90, 5, 7, 0, 0, 90, 21, 1, 0, 0, 0, 91, 92, 5, 15, 0, 0, 92, 93, 5,
		5, 0, 0, 93, 98, 3, 32, 16, 0, 94, 95, 5, 6, 0, 0, 95, 97, 3, 32, 16, 0,
		96, 94, 1, 0, 0, 0, 97, 100, 1, 0, 0, 0, 98, 96, 1, 0, 0, 0, 98, 99, 1,
		0, 0, 0, 99, 101, 1, 0, 0, 0, 100, 98, 1, 0, 0, 0, 101, 102, 5, 7, 0, 0,
		102, 23, 1, 0, 0, 0, 103, 104, 5, 16, 0, 0, 104, 105, 5, 5, 0, 0, 105,
		106, 3, 32, 16, 0, 106, 107, 5, 7, 0, 0, 107, 25, 1, 0, 0, 0, 108, 109,
		5, 17, 0, 0, 109, 110, 5, 1, 0, 0, 110, 111, 7, 1, 0, 0, 111, 27, 1, 0,
		0, 0, 112, 118, 3, 0, 0, 0, 113, 118, 3, 2, 1, 0, 114, 118, 3, 4, 2, 0,
		115, 118, 3, 6, 3, 0, 116, 118, 3, 8, 4, 0, 117, 112, 1, 0, 0, 0, 117,
		113, 1, 0, 0, 0, 117, 114, 1, 0, 0, 0, 117, 115, 1, 0, 0, 0, 117, 116,
		1, 0, 0, 0, 118, 29, 1, 0, 0, 0, 119, 124, 3, 10, 5, 0, 120, 124, 3, 12,
		6, 0, 121, 124, 3, 14, 7, 0, 122, 124, 3, 16, 8, 0, 123, 119, 1, 0, 0,
		0, 123, 120, 1, 0, 0, 0, 123, 121, 1, 0, 0, 0, 123, 122, 1, 0, 0, 0, 124,
		31, 1, 0, 0, 0, 125, 133, 3, 22, 11, 0, 126, 133, 3, 20, 10, 0, 127, 133,
		3, 24, 12, 0, 128, 133, 3, 28, 14, 0, 129, 133, 3, 30, 15, 0, 130, 133,
		3, 18, 9, 0, 131, 133, 3, 26, 13, 0, 132, 125, 1, 0, 0, 0, 132, 126, 1,
		0, 0, 0, 132, 127, 1, 0, 0, 0, 132, 128, 1, 0, 0, 0, 132, 129, 1, 0, 0,
		0, 132, 130, 1, 0, 0, 0, 132, 131, 1, 0, 0, 0, 133, 33, 1, 0, 0, 0, 134,
		135, 3, 32, 16, 0, 135, 136, 5, 0, 0, 1, 136, 35, 1, 0, 0, 0, 5, 86, 98,
		117, 123, 132,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// TrafficClassParserInit initializes any static state used to implement TrafficClassParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewTrafficClassParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func TrafficClassParserInit() {
	staticData := &TrafficClassParserStaticData
	staticData.once.Do(trafficclassParserInit)
}

// NewTrafficClassParser produces a new parser instance for the optional input antlr.TokenStream.
func NewTrafficClassParser(input antlr.TokenStream) *TrafficClassParser {
	TrafficClassParserInit()
	this := new(TrafficClassParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &TrafficClassParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "TrafficClass.g4"

	return this
}

// TrafficClassParser tokens.
const (
	TrafficClassParserEOF        = antlr.TokenEOF
	TrafficClassParserT__0       = 1
	TrafficClassParserT__1       = 2
	TrafficClassParserT__2       = 3
	TrafficClassParserT__3       = 4
	TrafficClassParserT__4       = 5
	TrafficClassParserT__5       = 6
	TrafficClassParserT__6       = 7
	TrafficClassParserT__7       = 8
	TrafficClassParserT__8       = 9
	TrafficClassParserWHITESPACE = 10
	TrafficClassParserDIGITS     = 11
	TrafficClassParserHEX_DIGITS = 12
	TrafficClassParserNET        = 13
	TrafficClassParserANY        = 14
	TrafficClassParserALL        = 15
	TrafficClassParserNOT        = 16
	TrafficClassParserBOOL       = 17
	TrafficClassParserSRC        = 18
	TrafficClassParserDST        = 19
	TrafficClassParserDSCP       = 20
	TrafficClassParserTOS        = 21
	TrafficClassParserPROTOCOL   = 22
	TrafficClassParserSRCPORT    = 23
	TrafficClassParserDSTPORT    = 24
	TrafficClassParserSTRING     = 25
)

// TrafficClassParser rules.
const (
	TrafficClassParserRULE_matchSrc          = 0
	TrafficClassParserRULE_matchDst          = 1
	TrafficClassParserRULE_matchDSCP         = 2
	TrafficClassParserRULE_matchTOS          = 3
	TrafficClassParserRULE_matchProtocol     = 4
	TrafficClassParserRULE_matchSrcPort      = 5
	TrafficClassParserRULE_matchSrcPortRange = 6
	TrafficClassParserRULE_matchDstPort      = 7
	TrafficClassParserRULE_matchDstPortRange = 8
	TrafficClassParserRULE_condCls           = 9
	TrafficClassParserRULE_condAny           = 10
	TrafficClassParserRULE_condAll           = 11
	TrafficClassParserRULE_condNot           = 12
	TrafficClassParserRULE_condBool          = 13
	TrafficClassParserRULE_condIPv4          = 14
	TrafficClassParserRULE_condPort          = 15
	TrafficClassParserRULE_cond              = 16
	TrafficClassParserRULE_trafficClass      = 17
)

// IMatchSrcContext is an interface to support dynamic dispatch.
type IMatchSrcContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SRC() antlr.TerminalNode
	NET() antlr.TerminalNode

	// IsMatchSrcContext differentiates from other interfaces.
	IsMatchSrcContext()
}

type MatchSrcContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchSrcContext() *MatchSrcContext {
	var p = new(MatchSrcContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchSrc
	return p
}

func InitEmptyMatchSrcContext(p *MatchSrcContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchSrc
}

func (*MatchSrcContext) IsMatchSrcContext() {}

func NewMatchSrcContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchSrcContext {
	var p = new(MatchSrcContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_matchSrc

	return p
}

func (s *MatchSrcContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchSrcContext) SRC() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserSRC, 0)
}

func (s *MatchSrcContext) NET() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserNET, 0)
}

func (s *MatchSrcContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchSrcContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchSrcContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterMatchSrc(s)
	}
}

func (s *MatchSrcContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitMatchSrc(s)
	}
}

func (p *TrafficClassParser) MatchSrc() (localctx IMatchSrcContext) {
	localctx = NewMatchSrcContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, TrafficClassParserRULE_matchSrc)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(36)
		p.Match(TrafficClassParserSRC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(37)
		p.Match(TrafficClassParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(38)
		p.Match(TrafficClassParserNET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchDstContext is an interface to support dynamic dispatch.
type IMatchDstContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DST() antlr.TerminalNode
	NET() antlr.TerminalNode

	// IsMatchDstContext differentiates from other interfaces.
	IsMatchDstContext()
}

type MatchDstContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchDstContext() *MatchDstContext {
	var p = new(MatchDstContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchDst
	return p
}

func InitEmptyMatchDstContext(p *MatchDstContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchDst
}

func (*MatchDstContext) IsMatchDstContext() {}

func NewMatchDstContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchDstContext {
	var p = new(MatchDstContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_matchDst

	return p
}

func (s *MatchDstContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchDstContext) DST() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDST, 0)
}

func (s *MatchDstContext) NET() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserNET, 0)
}

func (s *MatchDstContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchDstContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchDstContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterMatchDst(s)
	}
}

func (s *MatchDstContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitMatchDst(s)
	}
}

func (p *TrafficClassParser) MatchDst() (localctx IMatchDstContext) {
	localctx = NewMatchDstContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, TrafficClassParserRULE_matchDst)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(40)
		p.Match(TrafficClassParserDST)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(41)
		p.Match(TrafficClassParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(42)
		p.Match(TrafficClassParserNET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchDSCPContext is an interface to support dynamic dispatch.
type IMatchDSCPContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DSCP() antlr.TerminalNode
	HEX_DIGITS() antlr.TerminalNode
	DIGITS() antlr.TerminalNode

	// IsMatchDSCPContext differentiates from other interfaces.
	IsMatchDSCPContext()
}

type MatchDSCPContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchDSCPContext() *MatchDSCPContext {
	var p = new(MatchDSCPContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchDSCP
	return p
}

func InitEmptyMatchDSCPContext(p *MatchDSCPContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchDSCP
}

func (*MatchDSCPContext) IsMatchDSCPContext() {}

func NewMatchDSCPContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchDSCPContext {
	var p = new(MatchDSCPContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_matchDSCP

	return p
}

func (s *MatchDSCPContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchDSCPContext) DSCP() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDSCP, 0)
}

func (s *MatchDSCPContext) HEX_DIGITS() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserHEX_DIGITS, 0)
}

func (s *MatchDSCPContext) DIGITS() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDIGITS, 0)
}

func (s *MatchDSCPContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchDSCPContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchDSCPContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterMatchDSCP(s)
	}
}

func (s *MatchDSCPContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitMatchDSCP(s)
	}
}

func (p *TrafficClassParser) MatchDSCP() (localctx IMatchDSCPContext) {
	localctx = NewMatchDSCPContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, TrafficClassParserRULE_matchDSCP)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(44)
		p.Match(TrafficClassParserDSCP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(45)
		p.Match(TrafficClassParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(46)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TrafficClassParserDIGITS || _la == TrafficClassParserHEX_DIGITS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchTOSContext is an interface to support dynamic dispatch.
type IMatchTOSContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TOS() antlr.TerminalNode
	HEX_DIGITS() antlr.TerminalNode
	DIGITS() antlr.TerminalNode

	// IsMatchTOSContext differentiates from other interfaces.
	IsMatchTOSContext()
}

type MatchTOSContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchTOSContext() *MatchTOSContext {
	var p = new(MatchTOSContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchTOS
	return p
}

func InitEmptyMatchTOSContext(p *MatchTOSContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchTOS
}

func (*MatchTOSContext) IsMatchTOSContext() {}

func NewMatchTOSContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchTOSContext {
	var p = new(MatchTOSContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_matchTOS

	return p
}

func (s *MatchTOSContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchTOSContext) TOS() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserTOS, 0)
}

func (s *MatchTOSContext) HEX_DIGITS() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserHEX_DIGITS, 0)
}

func (s *MatchTOSContext) DIGITS() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDIGITS, 0)
}

func (s *MatchTOSContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchTOSContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchTOSContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterMatchTOS(s)
	}
}

func (s *MatchTOSContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitMatchTOS(s)
	}
}

func (p *TrafficClassParser) MatchTOS() (localctx IMatchTOSContext) {
	localctx = NewMatchTOSContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, TrafficClassParserRULE_matchTOS)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(48)
		p.Match(TrafficClassParserTOS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(49)
		p.Match(TrafficClassParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(50)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TrafficClassParserDIGITS || _la == TrafficClassParserHEX_DIGITS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchProtocolContext is an interface to support dynamic dispatch.
type IMatchProtocolContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PROTOCOL() antlr.TerminalNode
	STRING() antlr.TerminalNode

	// IsMatchProtocolContext differentiates from other interfaces.
	IsMatchProtocolContext()
}

type MatchProtocolContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchProtocolContext() *MatchProtocolContext {
	var p = new(MatchProtocolContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchProtocol
	return p
}

func InitEmptyMatchProtocolContext(p *MatchProtocolContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchProtocol
}

func (*MatchProtocolContext) IsMatchProtocolContext() {}

func NewMatchProtocolContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchProtocolContext {
	var p = new(MatchProtocolContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_matchProtocol

	return p
}

func (s *MatchProtocolContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchProtocolContext) PROTOCOL() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserPROTOCOL, 0)
}

func (s *MatchProtocolContext) STRING() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserSTRING, 0)
}

func (s *MatchProtocolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchProtocolContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchProtocolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterMatchProtocol(s)
	}
}

func (s *MatchProtocolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitMatchProtocol(s)
	}
}

func (p *TrafficClassParser) MatchProtocol() (localctx IMatchProtocolContext) {
	localctx = NewMatchProtocolContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, TrafficClassParserRULE_matchProtocol)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(52)
		p.Match(TrafficClassParserPROTOCOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(53)
		p.Match(TrafficClassParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(54)
		p.Match(TrafficClassParserSTRING)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchSrcPortContext is an interface to support dynamic dispatch.
type IMatchSrcPortContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SRCPORT() antlr.TerminalNode
	DIGITS() antlr.TerminalNode

	// IsMatchSrcPortContext differentiates from other interfaces.
	IsMatchSrcPortContext()
}

type MatchSrcPortContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchSrcPortContext() *MatchSrcPortContext {
	var p = new(MatchSrcPortContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchSrcPort
	return p
}

func InitEmptyMatchSrcPortContext(p *MatchSrcPortContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchSrcPort
}

func (*MatchSrcPortContext) IsMatchSrcPortContext() {}

func NewMatchSrcPortContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchSrcPortContext {
	var p = new(MatchSrcPortContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_matchSrcPort

	return p
}

func (s *MatchSrcPortContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchSrcPortContext) SRCPORT() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserSRCPORT, 0)
}

func (s *MatchSrcPortContext) DIGITS() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDIGITS, 0)
}

func (s *MatchSrcPortContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchSrcPortContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchSrcPortContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterMatchSrcPort(s)
	}
}

func (s *MatchSrcPortContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitMatchSrcPort(s)
	}
}

func (p *TrafficClassParser) MatchSrcPort() (localctx IMatchSrcPortContext) {
	localctx = NewMatchSrcPortContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, TrafficClassParserRULE_matchSrcPort)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(56)
		p.Match(TrafficClassParserSRCPORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(57)
		p.Match(TrafficClassParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(58)
		p.Match(TrafficClassParserDIGITS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchSrcPortRangeContext is an interface to support dynamic dispatch.
type IMatchSrcPortRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SRCPORT() antlr.TerminalNode
	AllDIGITS() []antlr.TerminalNode
	DIGITS(i int) antlr.TerminalNode

	// IsMatchSrcPortRangeContext differentiates from other interfaces.
	IsMatchSrcPortRangeContext()
}

type MatchSrcPortRangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchSrcPortRangeContext() *MatchSrcPortRangeContext {
	var p = new(MatchSrcPortRangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchSrcPortRange
	return p
}

func InitEmptyMatchSrcPortRangeContext(p *MatchSrcPortRangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchSrcPortRange
}

func (*MatchSrcPortRangeContext) IsMatchSrcPortRangeContext() {}

func NewMatchSrcPortRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchSrcPortRangeContext {
	var p = new(MatchSrcPortRangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_matchSrcPortRange

	return p
}

func (s *MatchSrcPortRangeContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchSrcPortRangeContext) SRCPORT() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserSRCPORT, 0)
}

func (s *MatchSrcPortRangeContext) AllDIGITS() []antlr.TerminalNode {
	return s.GetTokens(TrafficClassParserDIGITS)
}

func (s *MatchSrcPortRangeContext) DIGITS(i int) antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDIGITS, i)
}

func (s *MatchSrcPortRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchSrcPortRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchSrcPortRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterMatchSrcPortRange(s)
	}
}

func (s *MatchSrcPortRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitMatchSrcPortRange(s)
	}
}

func (p *TrafficClassParser) MatchSrcPortRange() (localctx IMatchSrcPortRangeContext) {
	localctx = NewMatchSrcPortRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, TrafficClassParserRULE_matchSrcPortRange)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(60)
		p.Match(TrafficClassParserSRCPORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(61)
		p.Match(TrafficClassParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(62)
		p.Match(TrafficClassParserDIGITS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(63)
		p.Match(TrafficClassParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(64)
		p.Match(TrafficClassParserDIGITS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchDstPortContext is an interface to support dynamic dispatch.
type IMatchDstPortContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DSTPORT() antlr.TerminalNode
	DIGITS() antlr.TerminalNode

	// IsMatchDstPortContext differentiates from other interfaces.
	IsMatchDstPortContext()
}

type MatchDstPortContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchDstPortContext() *MatchDstPortContext {
	var p = new(MatchDstPortContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchDstPort
	return p
}

func InitEmptyMatchDstPortContext(p *MatchDstPortContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchDstPort
}

func (*MatchDstPortContext) IsMatchDstPortContext() {}

func NewMatchDstPortContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchDstPortContext {
	var p = new(MatchDstPortContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_matchDstPort

	return p
}

func (s *MatchDstPortContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchDstPortContext) DSTPORT() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDSTPORT, 0)
}

func (s *MatchDstPortContext) DIGITS() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDIGITS, 0)
}

func (s *MatchDstPortContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchDstPortContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchDstPortContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterMatchDstPort(s)
	}
}

func (s *MatchDstPortContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitMatchDstPort(s)
	}
}

func (p *TrafficClassParser) MatchDstPort() (localctx IMatchDstPortContext) {
	localctx = NewMatchDstPortContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, TrafficClassParserRULE_matchDstPort)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(66)
		p.Match(TrafficClassParserDSTPORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(67)
		p.Match(TrafficClassParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(68)
		p.Match(TrafficClassParserDIGITS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMatchDstPortRangeContext is an interface to support dynamic dispatch.
type IMatchDstPortRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DSTPORT() antlr.TerminalNode
	AllDIGITS() []antlr.TerminalNode
	DIGITS(i int) antlr.TerminalNode

	// IsMatchDstPortRangeContext differentiates from other interfaces.
	IsMatchDstPortRangeContext()
}

type MatchDstPortRangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchDstPortRangeContext() *MatchDstPortRangeContext {
	var p = new(MatchDstPortRangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchDstPortRange
	return p
}

func InitEmptyMatchDstPortRangeContext(p *MatchDstPortRangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_matchDstPortRange
}

func (*MatchDstPortRangeContext) IsMatchDstPortRangeContext() {}

func NewMatchDstPortRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchDstPortRangeContext {
	var p = new(MatchDstPortRangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_matchDstPortRange

	return p
}

func (s *MatchDstPortRangeContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchDstPortRangeContext) DSTPORT() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDSTPORT, 0)
}

func (s *MatchDstPortRangeContext) AllDIGITS() []antlr.TerminalNode {
	return s.GetTokens(TrafficClassParserDIGITS)
}

func (s *MatchDstPortRangeContext) DIGITS(i int) antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDIGITS, i)
}

func (s *MatchDstPortRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchDstPortRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchDstPortRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterMatchDstPortRange(s)
	}
}

func (s *MatchDstPortRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitMatchDstPortRange(s)
	}
}

func (p *TrafficClassParser) MatchDstPortRange() (localctx IMatchDstPortRangeContext) {
	localctx = NewMatchDstPortRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, TrafficClassParserRULE_matchDstPortRange)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(70)
		p.Match(TrafficClassParserDSTPORT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(71)
		p.Match(TrafficClassParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(72)
		p.Match(TrafficClassParserDIGITS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(73)
		p.Match(TrafficClassParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(74)
		p.Match(TrafficClassParserDIGITS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICondClsContext is an interface to support dynamic dispatch.
type ICondClsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DIGITS() antlr.TerminalNode

	// IsCondClsContext differentiates from other interfaces.
	IsCondClsContext()
}

type CondClsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondClsContext() *CondClsContext {
	var p = new(CondClsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condCls
	return p
}

func InitEmptyCondClsContext(p *CondClsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condCls
}

func (*CondClsContext) IsCondClsContext() {}

func NewCondClsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CondClsContext {
	var p = new(CondClsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_condCls

	return p
}

func (s *CondClsContext) GetParser() antlr.Parser { return s.parser }

func (s *CondClsContext) DIGITS() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserDIGITS, 0)
}

func (s *CondClsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CondClsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CondClsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterCondCls(s)
	}
}

func (s *CondClsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitCondCls(s)
	}
}

func (p *TrafficClassParser) CondCls() (localctx ICondClsContext) {
	localctx = NewCondClsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, TrafficClassParserRULE_condCls)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(76)
		p.Match(TrafficClassParserT__3)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(77)
		p.Match(TrafficClassParserDIGITS)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICondAnyContext is an interface to support dynamic dispatch.
type ICondAnyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ANY() antlr.TerminalNode
	AllCond() []ICondContext
	Cond(i int) ICondContext

	// IsCondAnyContext differentiates from other interfaces.
	IsCondAnyContext()
}

type CondAnyContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondAnyContext() *CondAnyContext {
	var p = new(CondAnyContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condAny
	return p
}

func InitEmptyCondAnyContext(p *CondAnyContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condAny
}

func (*CondAnyContext) IsCondAnyContext() {}

func NewCondAnyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CondAnyContext {
	var p = new(CondAnyContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_condAny

	return p
}

func (s *CondAnyContext) GetParser() antlr.Parser { return s.parser }

func (s *CondAnyContext) ANY() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserANY, 0)
}

func (s *CondAnyContext) AllCond() []ICondContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICondContext); ok {
			len++
		}
	}

	tst := make([]ICondContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICondContext); ok {
			tst[i] = t.(ICondContext)
			i++
		}
	}

	return tst
}

func (s *CondAnyContext) Cond(i int) ICondContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondContext)
}

func (s *CondAnyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CondAnyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CondAnyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterCondAny(s)
	}
}

func (s *CondAnyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitCondAny(s)
	}
}

func (p *TrafficClassParser) CondAny() (localctx ICondAnyContext) {
	localctx = NewCondAnyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, TrafficClassParserRULE_condAny)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(79)
		p.Match(TrafficClassParserANY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(80)
		p.Match(TrafficClassParserT__4)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(81)
		p.Cond()
	}
	p.SetState(86)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == TrafficClassParserT__5 {
		{
			p.SetState(82)
			p.Match(TrafficClassParserT__5)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(83)
			p.Cond()
		}

		p.SetState(88)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(89)
		p.Match(TrafficClassParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICondAllContext is an interface to support dynamic dispatch.
type ICondAllContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ALL() antlr.TerminalNode
	AllCond() []ICondContext
	Cond(i int) ICondContext

	// IsCondAllContext differentiates from other interfaces.
	IsCondAllContext()
}

type CondAllContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondAllContext() *CondAllContext {
	var p = new(CondAllContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condAll
	return p
}

func InitEmptyCondAllContext(p *CondAllContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condAll
}

func (*CondAllContext) IsCondAllContext() {}

func NewCondAllContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CondAllContext {
	var p = new(CondAllContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_condAll

	return p
}

func (s *CondAllContext) GetParser() antlr.Parser { return s.parser }

func (s *CondAllContext) ALL() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserALL, 0)
}

func (s *CondAllContext) AllCond() []ICondContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICondContext); ok {
			len++
		}
	}

	tst := make([]ICondContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICondContext); ok {
			tst[i] = t.(ICondContext)
			i++
		}
	}

	return tst
}

func (s *CondAllContext) Cond(i int) ICondContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondContext)
}

func (s *CondAllContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CondAllContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CondAllContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterCondAll(s)
	}
}

func (s *CondAllContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitCondAll(s)
	}
}

func (p *TrafficClassParser) CondAll() (localctx ICondAllContext) {
	localctx = NewCondAllContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, TrafficClassParserRULE_condAll)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(91)
		p.Match(TrafficClassParserALL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(92)
		p.Match(TrafficClassParserT__4)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(93)
		p.Cond()
	}
	p.SetState(98)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == TrafficClassParserT__5 {
		{
			p.SetState(94)
			p.Match(TrafficClassParserT__5)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(95)
			p.Cond()
		}

		p.SetState(100)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(101)
		p.Match(TrafficClassParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICondNotContext is an interface to support dynamic dispatch.
type ICondNotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NOT() antlr.TerminalNode
	Cond() ICondContext

	// IsCondNotContext differentiates from other interfaces.
	IsCondNotContext()
}

type CondNotContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondNotContext() *CondNotContext {
	var p = new(CondNotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condNot
	return p
}

func InitEmptyCondNotContext(p *CondNotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condNot
}

func (*CondNotContext) IsCondNotContext() {}

func NewCondNotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CondNotContext {
	var p = new(CondNotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_condNot

	return p
}

func (s *CondNotContext) GetParser() antlr.Parser { return s.parser }

func (s *CondNotContext) NOT() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserNOT, 0)
}

func (s *CondNotContext) Cond() ICondContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondContext)
}

func (s *CondNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CondNotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CondNotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterCondNot(s)
	}
}

func (s *CondNotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitCondNot(s)
	}
}

func (p *TrafficClassParser) CondNot() (localctx ICondNotContext) {
	localctx = NewCondNotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, TrafficClassParserRULE_condNot)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(103)
		p.Match(TrafficClassParserNOT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(104)
		p.Match(TrafficClassParserT__4)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(105)
		p.Cond()
	}
	{
		p.SetState(106)
		p.Match(TrafficClassParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICondBoolContext is an interface to support dynamic dispatch.
type ICondBoolContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BOOL() antlr.TerminalNode

	// IsCondBoolContext differentiates from other interfaces.
	IsCondBoolContext()
}

type CondBoolContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondBoolContext() *CondBoolContext {
	var p = new(CondBoolContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condBool
	return p
}

func InitEmptyCondBoolContext(p *CondBoolContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condBool
}

func (*CondBoolContext) IsCondBoolContext() {}

func NewCondBoolContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CondBoolContext {
	var p = new(CondBoolContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_condBool

	return p
}

func (s *CondBoolContext) GetParser() antlr.Parser { return s.parser }

func (s *CondBoolContext) BOOL() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserBOOL, 0)
}

func (s *CondBoolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CondBoolContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CondBoolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterCondBool(s)
	}
}

func (s *CondBoolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitCondBool(s)
	}
}

func (p *TrafficClassParser) CondBool() (localctx ICondBoolContext) {
	localctx = NewCondBoolContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, TrafficClassParserRULE_condBool)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(108)
		p.Match(TrafficClassParserBOOL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(109)
		p.Match(TrafficClassParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(110)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TrafficClassParserT__7 || _la == TrafficClassParserT__8) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICondIPv4Context is an interface to support dynamic dispatch.
type ICondIPv4Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MatchSrc() IMatchSrcContext
	MatchDst() IMatchDstContext
	MatchDSCP() IMatchDSCPContext
	MatchTOS() IMatchTOSContext
	MatchProtocol() IMatchProtocolContext

	// IsCondIPv4Context differentiates from other interfaces.
	IsCondIPv4Context()
}

type CondIPv4Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondIPv4Context() *CondIPv4Context {
	var p = new(CondIPv4Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condIPv4
	return p
}

func InitEmptyCondIPv4Context(p *CondIPv4Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condIPv4
}

func (*CondIPv4Context) IsCondIPv4Context() {}

func NewCondIPv4Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CondIPv4Context {
	var p = new(CondIPv4Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_condIPv4

	return p
}

func (s *CondIPv4Context) GetParser() antlr.Parser { return s.parser }

func (s *CondIPv4Context) MatchSrc() IMatchSrcContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchSrcContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchSrcContext)
}

func (s *CondIPv4Context) MatchDst() IMatchDstContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchDstContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchDstContext)
}

func (s *CondIPv4Context) MatchDSCP() IMatchDSCPContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchDSCPContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchDSCPContext)
}

func (s *CondIPv4Context) MatchTOS() IMatchTOSContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchTOSContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchTOSContext)
}

func (s *CondIPv4Context) MatchProtocol() IMatchProtocolContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchProtocolContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchProtocolContext)
}

func (s *CondIPv4Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CondIPv4Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CondIPv4Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterCondIPv4(s)
	}
}

func (s *CondIPv4Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitCondIPv4(s)
	}
}

func (p *TrafficClassParser) CondIPv4() (localctx ICondIPv4Context) {
	localctx = NewCondIPv4Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, TrafficClassParserRULE_condIPv4)
	p.SetState(117)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case TrafficClassParserSRC:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(112)
			p.MatchSrc()
		}

	case TrafficClassParserDST:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(113)
			p.MatchDst()
		}

	case TrafficClassParserDSCP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(114)
			p.MatchDSCP()
		}

	case TrafficClassParserTOS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(115)
			p.MatchTOS()
		}

	case TrafficClassParserPROTOCOL:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(116)
			p.MatchProtocol()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICondPortContext is an interface to support dynamic dispatch.
type ICondPortContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MatchSrcPort() IMatchSrcPortContext
	MatchSrcPortRange() IMatchSrcPortRangeContext
	MatchDstPort() IMatchDstPortContext
	MatchDstPortRange() IMatchDstPortRangeContext

	// IsCondPortContext differentiates from other interfaces.
	IsCondPortContext()
}

type CondPortContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondPortContext() *CondPortContext {
	var p = new(CondPortContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condPort
	return p
}

func InitEmptyCondPortContext(p *CondPortContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_condPort
}

func (*CondPortContext) IsCondPortContext() {}

func NewCondPortContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CondPortContext {
	var p = new(CondPortContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_condPort

	return p
}

func (s *CondPortContext) GetParser() antlr.Parser { return s.parser }

func (s *CondPortContext) MatchSrcPort() IMatchSrcPortContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchSrcPortContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchSrcPortContext)
}

func (s *CondPortContext) MatchSrcPortRange() IMatchSrcPortRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchSrcPortRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchSrcPortRangeContext)
}

func (s *CondPortContext) MatchDstPort() IMatchDstPortContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchDstPortContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchDstPortContext)
}

func (s *CondPortContext) MatchDstPortRange() IMatchDstPortRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchDstPortRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchDstPortRangeContext)
}

func (s *CondPortContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CondPortContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CondPortContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterCondPort(s)
	}
}

func (s *CondPortContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitCondPort(s)
	}
}

func (p *TrafficClassParser) CondPort() (localctx ICondPortContext) {
	localctx = NewCondPortContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, TrafficClassParserRULE_condPort)
	p.SetState(123)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(119)
			p.MatchSrcPort()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(120)
			p.MatchSrcPortRange()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(121)
			p.MatchDstPort()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(122)
			p.MatchDstPortRange()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICondContext is an interface to support dynamic dispatch.
type ICondContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CondAll() ICondAllContext
	CondAny() ICondAnyContext
	CondNot() ICondNotContext
	CondIPv4() ICondIPv4Context
	CondPort() ICondPortContext
	CondCls() ICondClsContext
	CondBool() ICondBoolContext

	// IsCondContext differentiates from other interfaces.
	IsCondContext()
}

type CondContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondContext() *CondContext {
	var p = new(CondContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_cond
	return p
}

func InitEmptyCondContext(p *CondContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_cond
}

func (*CondContext) IsCondContext() {}

func NewCondContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CondContext {
	var p = new(CondContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_cond

	return p
}

func (s *CondContext) GetParser() antlr.Parser { return s.parser }

func (s *CondContext) CondAll() ICondAllContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondAllContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondAllContext)
}

func (s *CondContext) CondAny() ICondAnyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondAnyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondAnyContext)
}

func (s *CondContext) CondNot() ICondNotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondNotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondNotContext)
}

func (s *CondContext) CondIPv4() ICondIPv4Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondIPv4Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondIPv4Context)
}

func (s *CondContext) CondPort() ICondPortContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondPortContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondPortContext)
}

func (s *CondContext) CondCls() ICondClsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondClsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondClsContext)
}

func (s *CondContext) CondBool() ICondBoolContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondBoolContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondBoolContext)
}

func (s *CondContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CondContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CondContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterCond(s)
	}
}

func (s *CondContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitCond(s)
	}
}

func (p *TrafficClassParser) Cond() (localctx ICondContext) {
	localctx = NewCondContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, TrafficClassParserRULE_cond)
	p.SetState(132)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case TrafficClassParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(125)
			p.CondAll()
		}

	case TrafficClassParserANY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(126)
			p.CondAny()
		}

	case TrafficClassParserNOT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(127)
			p.CondNot()
		}

	case TrafficClassParserSRC, TrafficClassParserDST, TrafficClassParserDSCP, TrafficClassParserTOS, TrafficClassParserPROTOCOL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(128)
			p.CondIPv4()
		}

	case TrafficClassParserSRCPORT, TrafficClassParserDSTPORT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(129)
			p.CondPort()
		}

	case TrafficClassParserT__3:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(130)
			p.CondCls()
		}

	case TrafficClassParserBOOL:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(131)
			p.CondBool()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITrafficClassContext is an interface to support dynamic dispatch.
type ITrafficClassContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Cond() ICondContext
	EOF() antlr.TerminalNode

	// IsTrafficClassContext differentiates from other interfaces.
	IsTrafficClassContext()
}

type TrafficClassContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrafficClassContext() *TrafficClassContext {
	var p = new(TrafficClassContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_trafficClass
	return p
}

func InitEmptyTrafficClassContext(p *TrafficClassContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = TrafficClassParserRULE_trafficClass
}

func (*TrafficClassContext) IsTrafficClassContext() {}

func NewTrafficClassContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrafficClassContext {
	var p = new(TrafficClassContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = TrafficClassParserRULE_trafficClass

	return p
}

func (s *TrafficClassContext) GetParser() antlr.Parser { return s.parser }

func (s *TrafficClassContext) Cond() ICondContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICondContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICondContext)
}

func (s *TrafficClassContext) EOF() antlr.TerminalNode {
	return s.GetToken(TrafficClassParserEOF, 0)
}

func (s *TrafficClassContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrafficClassContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrafficClassContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.EnterTrafficClass(s)
	}
}

func (s *TrafficClassContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TrafficClassListener); ok {
		listenerT.ExitTrafficClass(s)
	}
}

func (p *TrafficClassParser) TrafficClass() (localctx ITrafficClassContext) {
	localctx = NewTrafficClassContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, TrafficClassParserRULE_trafficClass)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(134)
		p.Cond()
	}
	{
		p.SetState(135)
		p.Match(TrafficClassParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}
