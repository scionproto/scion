// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SignedCtrlPld struct{ capnp.Struct }

// SignedCtrlPld_TypeID is the unique identifier for the type SignedCtrlPld.
const SignedCtrlPld_TypeID = 0xc34ac578b174f099

func NewSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func NewRootSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func ReadRootSignedCtrlPld(msg *capnp.Message) (SignedCtrlPld, error) {
	root, err := msg.RootPtr()
	return SignedCtrlPld{root.Struct()}, err
}

func (s SignedCtrlPld) String() string {
	str, _ := text.Marshal(0xc34ac578b174f099, s.Struct)
	return str
}

func (s SignedCtrlPld) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedCtrlPld) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SignedCtrlPld) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s SignedCtrlPld) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s SignedCtrlPld) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SignedCtrlPld_List is a list of SignedCtrlPld.
type SignedCtrlPld_List struct{ capnp.List }

// NewSignedCtrlPld creates a new list of SignedCtrlPld.
func NewSignedCtrlPld_List(s *capnp.Segment, sz int32) (SignedCtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SignedCtrlPld_List{l}, err
}

func (s SignedCtrlPld_List) At(i int) SignedCtrlPld { return SignedCtrlPld{s.List.Struct(i)} }

func (s SignedCtrlPld_List) Set(i int, v SignedCtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedCtrlPld_List) String() string {
	str, _ := text.MarshalList(0xc34ac578b174f099, s.List)
	return str
}

// SignedCtrlPld_Promise is a wrapper for a SignedCtrlPld promised by a client call.
type SignedCtrlPld_Promise struct{ *capnp.Pipeline }

func (p SignedCtrlPld_Promise) Struct() (SignedCtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return SignedCtrlPld{s}, err
}

func (p SignedCtrlPld_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type CtrlPld struct{ capnp.Struct }
type CtrlPld_Which uint16

const (
	CtrlPld_Which_unset     CtrlPld_Which = 0
	CtrlPld_Which_pcb       CtrlPld_Which = 1
	CtrlPld_Which_ifid      CtrlPld_Which = 2
	CtrlPld_Which_certMgmt  CtrlPld_Which = 3
	CtrlPld_Which_pathMgmt  CtrlPld_Which = 4
	CtrlPld_Which_sibra     CtrlPld_Which = 5
	CtrlPld_Which_drkeyMgmt CtrlPld_Which = 6
	CtrlPld_Which_sig       CtrlPld_Which = 7
	CtrlPld_Which_extn      CtrlPld_Which = 8
	CtrlPld_Which_ack       CtrlPld_Which = 9
)

func (w CtrlPld_Which) String() string {
	const s = "unsetpcbifidcertMgmtpathMgmtsibradrkeyMgmtsigextnack"
	switch w {
	case CtrlPld_Which_unset:
		return s[0:5]
	case CtrlPld_Which_pcb:
		return s[5:8]
	case CtrlPld_Which_ifid:
		return s[8:12]
	case CtrlPld_Which_certMgmt:
		return s[12:20]
	case CtrlPld_Which_pathMgmt:
		return s[20:28]
	case CtrlPld_Which_sibra:
		return s[28:33]
	case CtrlPld_Which_drkeyMgmt:
		return s[33:42]
	case CtrlPld_Which_sig:
		return s[42:45]
	case CtrlPld_Which_extn:
		return s[45:49]
	case CtrlPld_Which_ack:
		return s[49:52]

	}
	return "CtrlPld_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CtrlPld_TypeID is the unique identifier for the type CtrlPld.
const CtrlPld_TypeID = 0x8e6af2c877489f54

func NewCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func NewRootCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func ReadRootCtrlPld(msg *capnp.Message) (CtrlPld, error) {
	root, err := msg.RootPtr()
	return CtrlPld{root.Struct()}, err
}

func (s CtrlPld) String() string {
	str, _ := text.Marshal(0x8e6af2c877489f54, s.Struct)
	return str
}

func (s CtrlPld) Which() CtrlPld_Which {
	return CtrlPld_Which(s.Struct.Uint16(0))
}
func (s CtrlPld) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CtrlPld) Pcb() (PCB, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != pcb")
	}
	p, err := s.Struct.Ptr(0)
	return PCB{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPcb() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPcb(v PCB) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPcb sets the pcb field to a newly
// allocated PCB struct, preferring placement in s's segment.
func (s CtrlPld) NewPcb() (PCB, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPCB(s.Struct.Segment())
	if err != nil {
		return PCB{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ifid() (IFID, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != ifid")
	}
	p, err := s.Struct.Ptr(0)
	return IFID{Struct: p.Struct()}, err
}

func (s CtrlPld) HasIfid() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetIfid(v IFID) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfid sets the ifid field to a newly
// allocated IFID struct, preferring placement in s's segment.
func (s CtrlPld) NewIfid() (IFID, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewIFID(s.Struct.Segment())
	if err != nil {
		return IFID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) CertMgmt() (CertMgmt, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != certMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return CertMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasCertMgmt() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetCertMgmt(v CertMgmt) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertMgmt sets the certMgmt field to a newly
// allocated CertMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewCertMgmt() (CertMgmt, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewCertMgmt(s.Struct.Segment())
	if err != nil {
		return CertMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) PathMgmt() (PathMgmt, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != pathMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return PathMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPathMgmt() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPathMgmt(v PathMgmt) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathMgmt sets the pathMgmt field to a newly
// allocated PathMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewPathMgmt() (PathMgmt, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewPathMgmt(s.Struct.Segment())
	if err != nil {
		return PathMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sibra() (SibraPayload, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != sibra")
	}
	p, err := s.Struct.Ptr(0)
	return SibraPayload{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSibra() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSibra(v SibraPayload) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSibra sets the sibra field to a newly
// allocated SibraPayload struct, preferring placement in s's segment.
func (s CtrlPld) NewSibra() (SibraPayload, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSibraPayload(s.Struct.Segment())
	if err != nil {
		return SibraPayload{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) DrkeyMgmt() (DRKeyMgmt, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != drkeyMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return DRKeyMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasDrkeyMgmt() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetDrkeyMgmt(v DRKeyMgmt) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyMgmt sets the drkeyMgmt field to a newly
// allocated DRKeyMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewDrkeyMgmt() (DRKeyMgmt, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewDRKeyMgmt(s.Struct.Segment())
	if err != nil {
		return DRKeyMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sig() (SIGCtrl, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != sig")
	}
	p, err := s.Struct.Ptr(0)
	return SIGCtrl{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSig() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSig(v SIGCtrl) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSig sets the sig field to a newly
// allocated SIGCtrl struct, preferring placement in s's segment.
func (s CtrlPld) NewSig() (SIGCtrl, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSIGCtrl(s.Struct.Segment())
	if err != nil {
		return SIGCtrl{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Extn() (CtrlExtnDataList, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != extn")
	}
	p, err := s.Struct.Ptr(0)
	return CtrlExtnDataList{Struct: p.Struct()}, err
}

func (s CtrlPld) HasExtn() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetExtn(v CtrlExtnDataList) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExtn sets the extn field to a newly
// allocated CtrlExtnDataList struct, preferring placement in s's segment.
func (s CtrlPld) NewExtn() (CtrlExtnDataList, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewCtrlExtnDataList(s.Struct.Segment())
	if err != nil {
		return CtrlExtnDataList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ack() (Ack, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != ack")
	}
	p, err := s.Struct.Ptr(0)
	return Ack{Struct: p.Struct()}, err
}

func (s CtrlPld) HasAck() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetAck(v Ack) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAck sets the ack field to a newly
// allocated Ack struct, preferring placement in s's segment.
func (s CtrlPld) NewAck() (Ack, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewAck(s.Struct.Segment())
	if err != nil {
		return Ack{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) ReqId() uint64 {
	return s.Struct.Uint64(8)
}

func (s CtrlPld) SetReqId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CtrlPld) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s CtrlPld) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// CtrlPld_List is a list of CtrlPld.
type CtrlPld_List struct{ capnp.List }

// NewCtrlPld creates a new list of CtrlPld.
func NewCtrlPld_List(s *capnp.Segment, sz int32) (CtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return CtrlPld_List{l}, err
}

func (s CtrlPld_List) At(i int) CtrlPld { return CtrlPld{s.List.Struct(i)} }

func (s CtrlPld_List) Set(i int, v CtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s CtrlPld_List) String() string {
	str, _ := text.MarshalList(0x8e6af2c877489f54, s.List)
	return str
}

// CtrlPld_Promise is a wrapper for a CtrlPld promised by a client call.
type CtrlPld_Promise struct{ *capnp.Pipeline }

func (p CtrlPld_Promise) Struct() (CtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return CtrlPld{s}, err
}

func (p CtrlPld_Promise) Pcb() PCB_Promise {
	return PCB_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ifid() IFID_Promise {
	return IFID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) CertMgmt() CertMgmt_Promise {
	return CertMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) PathMgmt() PathMgmt_Promise {
	return PathMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sibra() SibraPayload_Promise {
	return SibraPayload_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) DrkeyMgmt() DRKeyMgmt_Promise {
	return DRKeyMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sig() SIGCtrl_Promise {
	return SIGCtrl_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Extn() CtrlExtnDataList_Promise {
	return CtrlExtnDataList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ack() Ack_Promise {
	return Ack_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_df42b02816bdc1bf = "x\xdaD\xd2MHTk\x1c\x06\xf0\xe7y\xcf|\xeb" +
	"0\xe7p\x0eww\x11..T\xee\xbd\xa8\x08\x97+" +
	"\xf7r\xfd\xb8\x92#N8\x1d\x037\xa53s\xc6q" +
	"r\x9c\x8eg\x8e\xa8\x10T .\xc3EA\x05\x11\xad" +
	"Z\x15\x09\x81\x14X\x89\x04\x12\x04\xd1BZ\x04\xd1\xa2" +
	"M\xb40\xe9\xc3\xb4z\xe3\x1dfrw\xf8\xff\xce\xfb" +
	">\xff\x17\x1e}\xbfG\x18\xc15 \x1d\x09\x86\xe4\xe8" +
	"\xf5\xc1\xf9\xad\xddS\x17\x90NP\xc8\x87\x1b\xeb\xbf\xb4" +
	"\xdc\xe9{\x85\x01\x11\x8e\x01F\xef}#\x19\x06:\x06" +
	"n\x0aP^\xd9\xf1W\x17\x1e\x0fm\xc2H\xf0\xf0\xd7" +
	"\xa0\x08\x03fP{k\x1a\x9a\xfa\x8ak\xf3\xa0\xcc\xf9" +
	"^i\xdc-9\xfc3\x97q\xcbnw\xff\x7f\xbeW" +
	"\x1a)9#d\xba]\x0b4J\x19 `\xf6\xb2\x13" +
	"\xb0\xff\xa1F{\x90\x82q~\x97\x16\x15\x0c\xf07\xc0" +
	"\xeeQ0\xac@|\x93\x16\x05`&\xd9\x06\xd8\xff+" +
	"\x18Q\xa0}\x95\x165\xc0Lq\x08\xb0\x87\x15\x8c)" +
	"\x08\x1cH\x8b\x01\xc0<^\x85Q\x05\x13\x0a\x82\xfb\xd2" +
	"b\x100OT\xc3\xc7\x148\x0aB_\xa4\xc5\x10`" +
	"fx\x0c\xb0'\x14\x94\x14\x84\xf7\xa4E\xf5\xb6bu" +
	"+G\x81\xab \xf2YZ\x8c\x00\xe6Lu\xab)\x05" +
	">\x05\x8d\x18-F\x01s\xb6\x1aQR\xf3\x055o" +
	"\xa0\xc5\x18`\xce\xb1\x0f\xb0]5?\xa3.\x8a~\x92" +
	"\x16\x1b\x00s\xb1\x9a\xe0+8G\xc1\xa6\xb9r%\xef" +
	"#\x14vsY\xea\xf2Mz\xf1\xaf\xdc\x91G\xdb\x00" +
	"\xa9\x83\x89\xe2d\xd1\xa1.\xef\xb5\x06\xf7\xcc\x83K\xd7" +
	"jc\x99\xcb{~\xaa0\xe3\x03\xa0.\xff~\xf1n" +
	"\xf9\xae\xbbr\xa3\xaen\xc6\x9f:\xd4'\xcf\xae6\xf6" +
	"\xed\xff^\xd7\xa6J1\xebe\xa8\xcb\x95\xcd\xa5\xf1\x8f" +
	"[\x1d\xbb\xf5S\x8e7\x9d_L\x15f@_\x9dz" +
	"o\x1el\xaf\xad\xaf\xd64\\)\x16\xa8\xcb\xc8\xbf\x9d" +
	"\x95\xd6\xe6\x93\xaf\xeb\xeb\xe5\x17\xfc2u9\xb9!\x96" +
	"\x1f\xfc:\xf1\xb4\x1e\xe1\xe5g\x93\x0e\xa3\x10\x8c\x82g" +
	"}/\x93\xcb'\x1d\xc6!\x18\x07\xc3\x99\xdc4u\xf9" +
	"\xf2v\xd7\xf3\xee\xcb\xb7v~>\xa9\xd6'Q\xeb\x93" +
	"],\x94\xf3N\xbf\xef%\xea\xad\x8ah\x01@\x95\xca" +
	"hm\x03\xd2\xcd\x1a\xd3\xed\x82\x06Y-\x94\xf1\x87\x1a" +
	"\xb6hLw\x09&\xb2\xa5\xd3\xd9z`\xa2R,\xa8" +
	"-c\xe7\x8f~p.\xa6\x96j\x89?\x02\x00\x00\xff" +
	"\xff\xf6\xaa\xbf\x18"

func init() {
	schemas.Register(schema_df42b02816bdc1bf,
		0x8e6af2c877489f54,
		0xc34ac578b174f099)
}
