// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SCIONDMsg struct{ capnp.Struct }
type SCIONDMsg_Which uint16

const (
	SCIONDMsg_Which_unset              SCIONDMsg_Which = 0
	SCIONDMsg_Which_pathReq            SCIONDMsg_Which = 1
	SCIONDMsg_Which_pathReply          SCIONDMsg_Which = 2
	SCIONDMsg_Which_asInfoReq          SCIONDMsg_Which = 3
	SCIONDMsg_Which_asInfoReply        SCIONDMsg_Which = 4
	SCIONDMsg_Which_revNotification    SCIONDMsg_Which = 5
	SCIONDMsg_Which_ifInfoRequest      SCIONDMsg_Which = 6
	SCIONDMsg_Which_ifInfoReply        SCIONDMsg_Which = 7
	SCIONDMsg_Which_serviceInfoRequest SCIONDMsg_Which = 8
	SCIONDMsg_Which_serviceInfoReply   SCIONDMsg_Which = 9
	SCIONDMsg_Which_revReply           SCIONDMsg_Which = 10
	SCIONDMsg_Which_segTypeHopReq      SCIONDMsg_Which = 11
	SCIONDMsg_Which_segTypeHopReply    SCIONDMsg_Which = 12
)

func (w SCIONDMsg_Which) String() string {
	const s = "unsetpathReqpathReplyasInfoReqasInfoReplyrevNotificationifInfoRequestifInfoReplyserviceInfoRequestserviceInfoReplyrevReplysegTypeHopReqsegTypeHopReply"
	switch w {
	case SCIONDMsg_Which_unset:
		return s[0:5]
	case SCIONDMsg_Which_pathReq:
		return s[5:12]
	case SCIONDMsg_Which_pathReply:
		return s[12:21]
	case SCIONDMsg_Which_asInfoReq:
		return s[21:30]
	case SCIONDMsg_Which_asInfoReply:
		return s[30:41]
	case SCIONDMsg_Which_revNotification:
		return s[41:56]
	case SCIONDMsg_Which_ifInfoRequest:
		return s[56:69]
	case SCIONDMsg_Which_ifInfoReply:
		return s[69:80]
	case SCIONDMsg_Which_serviceInfoRequest:
		return s[80:98]
	case SCIONDMsg_Which_serviceInfoReply:
		return s[98:114]
	case SCIONDMsg_Which_revReply:
		return s[114:122]
	case SCIONDMsg_Which_segTypeHopReq:
		return s[122:135]
	case SCIONDMsg_Which_segTypeHopReply:
		return s[135:150]

	}
	return "SCIONDMsg_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SCIONDMsg_TypeID is the unique identifier for the type SCIONDMsg.
const SCIONDMsg_TypeID = 0x91ea9bb47f46c346

func NewSCIONDMsg(s *capnp.Segment) (SCIONDMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return SCIONDMsg{st}, err
}

func NewRootSCIONDMsg(s *capnp.Segment) (SCIONDMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return SCIONDMsg{st}, err
}

func ReadRootSCIONDMsg(msg *capnp.Message) (SCIONDMsg, error) {
	root, err := msg.RootPtr()
	return SCIONDMsg{root.Struct()}, err
}

func (s SCIONDMsg) String() string {
	str, _ := text.Marshal(0x91ea9bb47f46c346, s.Struct)
	return str
}

func (s SCIONDMsg) Which() SCIONDMsg_Which {
	return SCIONDMsg_Which(s.Struct.Uint16(8))
}
func (s SCIONDMsg) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s SCIONDMsg) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SCIONDMsg) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s SCIONDMsg) PathReq() (PathReq, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != pathReq")
	}
	p, err := s.Struct.Ptr(0)
	return PathReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasPathReq() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetPathReq(v PathReq) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathReq sets the pathReq field to a newly
// allocated PathReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewPathReq() (PathReq, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewPathReq(s.Struct.Segment())
	if err != nil {
		return PathReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) PathReply() (PathReply, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != pathReply")
	}
	p, err := s.Struct.Ptr(0)
	return PathReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasPathReply() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetPathReply(v PathReply) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathReply sets the pathReply field to a newly
// allocated PathReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewPathReply() (PathReply, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewPathReply(s.Struct.Segment())
	if err != nil {
		return PathReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) AsInfoReq() (ASInfoReq, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != asInfoReq")
	}
	p, err := s.Struct.Ptr(0)
	return ASInfoReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasAsInfoReq() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetAsInfoReq(v ASInfoReq) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsInfoReq sets the asInfoReq field to a newly
// allocated ASInfoReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewAsInfoReq() (ASInfoReq, error) {
	s.Struct.SetUint16(8, 3)
	ss, err := NewASInfoReq(s.Struct.Segment())
	if err != nil {
		return ASInfoReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) AsInfoReply() (ASInfoReply, error) {
	if s.Struct.Uint16(8) != 4 {
		panic("Which() != asInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return ASInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasAsInfoReply() bool {
	if s.Struct.Uint16(8) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetAsInfoReply(v ASInfoReply) error {
	s.Struct.SetUint16(8, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsInfoReply sets the asInfoReply field to a newly
// allocated ASInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewAsInfoReply() (ASInfoReply, error) {
	s.Struct.SetUint16(8, 4)
	ss, err := NewASInfoReply(s.Struct.Segment())
	if err != nil {
		return ASInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) RevNotification() (RevNotification, error) {
	if s.Struct.Uint16(8) != 5 {
		panic("Which() != revNotification")
	}
	p, err := s.Struct.Ptr(0)
	return RevNotification{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasRevNotification() bool {
	if s.Struct.Uint16(8) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetRevNotification(v RevNotification) error {
	s.Struct.SetUint16(8, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRevNotification sets the revNotification field to a newly
// allocated RevNotification struct, preferring placement in s's segment.
func (s SCIONDMsg) NewRevNotification() (RevNotification, error) {
	s.Struct.SetUint16(8, 5)
	ss, err := NewRevNotification(s.Struct.Segment())
	if err != nil {
		return RevNotification{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) IfInfoRequest() (IFInfoRequest, error) {
	if s.Struct.Uint16(8) != 6 {
		panic("Which() != ifInfoRequest")
	}
	p, err := s.Struct.Ptr(0)
	return IFInfoRequest{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasIfInfoRequest() bool {
	if s.Struct.Uint16(8) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetIfInfoRequest(v IFInfoRequest) error {
	s.Struct.SetUint16(8, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfInfoRequest sets the ifInfoRequest field to a newly
// allocated IFInfoRequest struct, preferring placement in s's segment.
func (s SCIONDMsg) NewIfInfoRequest() (IFInfoRequest, error) {
	s.Struct.SetUint16(8, 6)
	ss, err := NewIFInfoRequest(s.Struct.Segment())
	if err != nil {
		return IFInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) IfInfoReply() (IFInfoReply, error) {
	if s.Struct.Uint16(8) != 7 {
		panic("Which() != ifInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return IFInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasIfInfoReply() bool {
	if s.Struct.Uint16(8) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetIfInfoReply(v IFInfoReply) error {
	s.Struct.SetUint16(8, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfInfoReply sets the ifInfoReply field to a newly
// allocated IFInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewIfInfoReply() (IFInfoReply, error) {
	s.Struct.SetUint16(8, 7)
	ss, err := NewIFInfoReply(s.Struct.Segment())
	if err != nil {
		return IFInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) ServiceInfoRequest() (ServiceInfoRequest, error) {
	if s.Struct.Uint16(8) != 8 {
		panic("Which() != serviceInfoRequest")
	}
	p, err := s.Struct.Ptr(0)
	return ServiceInfoRequest{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasServiceInfoRequest() bool {
	if s.Struct.Uint16(8) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetServiceInfoRequest(v ServiceInfoRequest) error {
	s.Struct.SetUint16(8, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceInfoRequest sets the serviceInfoRequest field to a newly
// allocated ServiceInfoRequest struct, preferring placement in s's segment.
func (s SCIONDMsg) NewServiceInfoRequest() (ServiceInfoRequest, error) {
	s.Struct.SetUint16(8, 8)
	ss, err := NewServiceInfoRequest(s.Struct.Segment())
	if err != nil {
		return ServiceInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) ServiceInfoReply() (ServiceInfoReply, error) {
	if s.Struct.Uint16(8) != 9 {
		panic("Which() != serviceInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return ServiceInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasServiceInfoReply() bool {
	if s.Struct.Uint16(8) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetServiceInfoReply(v ServiceInfoReply) error {
	s.Struct.SetUint16(8, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceInfoReply sets the serviceInfoReply field to a newly
// allocated ServiceInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewServiceInfoReply() (ServiceInfoReply, error) {
	s.Struct.SetUint16(8, 9)
	ss, err := NewServiceInfoReply(s.Struct.Segment())
	if err != nil {
		return ServiceInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) RevReply() (RevReply, error) {
	if s.Struct.Uint16(8) != 10 {
		panic("Which() != revReply")
	}
	p, err := s.Struct.Ptr(0)
	return RevReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasRevReply() bool {
	if s.Struct.Uint16(8) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetRevReply(v RevReply) error {
	s.Struct.SetUint16(8, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRevReply sets the revReply field to a newly
// allocated RevReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewRevReply() (RevReply, error) {
	s.Struct.SetUint16(8, 10)
	ss, err := NewRevReply(s.Struct.Segment())
	if err != nil {
		return RevReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) SegTypeHopReq() (SegTypeHopReq, error) {
	if s.Struct.Uint16(8) != 11 {
		panic("Which() != segTypeHopReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasSegTypeHopReq() bool {
	if s.Struct.Uint16(8) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetSegTypeHopReq(v SegTypeHopReq) error {
	s.Struct.SetUint16(8, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegTypeHopReq sets the segTypeHopReq field to a newly
// allocated SegTypeHopReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewSegTypeHopReq() (SegTypeHopReq, error) {
	s.Struct.SetUint16(8, 11)
	ss, err := NewSegTypeHopReq(s.Struct.Segment())
	if err != nil {
		return SegTypeHopReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) SegTypeHopReply() (SegTypeHopReply, error) {
	if s.Struct.Uint16(8) != 12 {
		panic("Which() != segTypeHopReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasSegTypeHopReply() bool {
	if s.Struct.Uint16(8) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetSegTypeHopReply(v SegTypeHopReply) error {
	s.Struct.SetUint16(8, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegTypeHopReply sets the segTypeHopReply field to a newly
// allocated SegTypeHopReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewSegTypeHopReply() (SegTypeHopReply, error) {
	s.Struct.SetUint16(8, 12)
	ss, err := NewSegTypeHopReply(s.Struct.Segment())
	if err != nil {
		return SegTypeHopReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SCIONDMsg) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SCIONDMsg_List is a list of SCIONDMsg.
type SCIONDMsg_List struct{ capnp.List }

// NewSCIONDMsg creates a new list of SCIONDMsg.
func NewSCIONDMsg_List(s *capnp.Segment, sz int32) (SCIONDMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return SCIONDMsg_List{l}, err
}

func (s SCIONDMsg_List) At(i int) SCIONDMsg { return SCIONDMsg{s.List.Struct(i)} }

func (s SCIONDMsg_List) Set(i int, v SCIONDMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s SCIONDMsg_List) String() string {
	str, _ := text.MarshalList(0x91ea9bb47f46c346, s.List)
	return str
}

// SCIONDMsg_Promise is a wrapper for a SCIONDMsg promised by a client call.
type SCIONDMsg_Promise struct{ *capnp.Pipeline }

func (p SCIONDMsg_Promise) Struct() (SCIONDMsg, error) {
	s, err := p.Pipeline.Struct()
	return SCIONDMsg{s}, err
}

func (p SCIONDMsg_Promise) PathReq() PathReq_Promise {
	return PathReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) PathReply() PathReply_Promise {
	return PathReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) AsInfoReq() ASInfoReq_Promise {
	return ASInfoReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) AsInfoReply() ASInfoReply_Promise {
	return ASInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) RevNotification() RevNotification_Promise {
	return RevNotification_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) IfInfoRequest() IFInfoRequest_Promise {
	return IFInfoRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) IfInfoReply() IFInfoReply_Promise {
	return IFInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) ServiceInfoRequest() ServiceInfoRequest_Promise {
	return ServiceInfoRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) ServiceInfoReply() ServiceInfoReply_Promise {
	return ServiceInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) RevReply() RevReply_Promise {
	return RevReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) SegTypeHopReq() SegTypeHopReq_Promise {
	return SegTypeHopReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) SegTypeHopReply() SegTypeHopReply_Promise {
	return SegTypeHopReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathReq struct{ capnp.Struct }
type PathReq_flags PathReq

// PathReq_TypeID is the unique identifier for the type PathReq.
const PathReq_TypeID = 0xc4c61531dcc4a3eb

func NewPathReq(s *capnp.Segment) (PathReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PathReq{st}, err
}

func NewRootPathReq(s *capnp.Segment) (PathReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PathReq{st}, err
}

func ReadRootPathReq(msg *capnp.Message) (PathReq, error) {
	root, err := msg.RootPtr()
	return PathReq{root.Struct()}, err
}

func (s PathReq) String() string {
	str, _ := text.Marshal(0xc4c61531dcc4a3eb, s.Struct)
	return str
}

func (s PathReq) Dst() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathReq) SetDst(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PathReq) Src() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathReq) SetSrc(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s PathReq) MaxPaths() uint16 {
	return s.Struct.Uint16(16)
}

func (s PathReq) SetMaxPaths(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s PathReq) Flags() PathReq_flags { return PathReq_flags(s) }

func (s PathReq_flags) Refresh() bool {
	return s.Struct.Bit(144)
}

func (s PathReq_flags) SetRefresh(v bool) {
	s.Struct.SetBit(144, v)
}

func (s PathReq_flags) Hidden() bool {
	return s.Struct.Bit(145)
}

func (s PathReq_flags) SetHidden(v bool) {
	s.Struct.SetBit(145, v)
}

func (s PathReq) HpCfgs() (HPGroupId_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId_List{List: p.List()}, err
}

func (s PathReq) HasHpCfgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReq) SetHpCfgs(v HPGroupId_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHpCfgs sets the hpCfgs field to a newly
// allocated HPGroupId_List, preferring placement in s's segment.
func (s PathReq) NewHpCfgs(n int32) (HPGroupId_List, error) {
	l, err := NewHPGroupId_List(s.Struct.Segment(), n)
	if err != nil {
		return HPGroupId_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PathReq_List is a list of PathReq.
type PathReq_List struct{ capnp.List }

// NewPathReq creates a new list of PathReq.
func NewPathReq_List(s *capnp.Segment, sz int32) (PathReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PathReq_List{l}, err
}

func (s PathReq_List) At(i int) PathReq { return PathReq{s.List.Struct(i)} }

func (s PathReq_List) Set(i int, v PathReq) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReq_List) String() string {
	str, _ := text.MarshalList(0xc4c61531dcc4a3eb, s.List)
	return str
}

// PathReq_Promise is a wrapper for a PathReq promised by a client call.
type PathReq_Promise struct{ *capnp.Pipeline }

func (p PathReq_Promise) Struct() (PathReq, error) {
	s, err := p.Pipeline.Struct()
	return PathReq{s}, err
}

func (p PathReq_Promise) Flags() PathReq_flags_Promise { return PathReq_flags_Promise{p.Pipeline} }

// PathReq_flags_Promise is a wrapper for a PathReq_flags promised by a client call.
type PathReq_flags_Promise struct{ *capnp.Pipeline }

func (p PathReq_flags_Promise) Struct() (PathReq_flags, error) {
	s, err := p.Pipeline.Struct()
	return PathReq_flags{s}, err
}

type PathReply struct{ capnp.Struct }

// PathReply_TypeID is the unique identifier for the type PathReply.
const PathReply_TypeID = 0xf10fe9b6293ee63f

func NewPathReply(s *capnp.Segment) (PathReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathReply{st}, err
}

func NewRootPathReply(s *capnp.Segment) (PathReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathReply{st}, err
}

func ReadRootPathReply(msg *capnp.Message) (PathReply, error) {
	root, err := msg.RootPtr()
	return PathReply{root.Struct()}, err
}

func (s PathReply) String() string {
	str, _ := text.Marshal(0xf10fe9b6293ee63f, s.Struct)
	return str
}

func (s PathReply) ErrorCode() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathReply) SetErrorCode(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathReply) Entries() (PathReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathReplyEntry_List{List: p.List()}, err
}

func (s PathReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReply) SetEntries(v PathReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated PathReplyEntry_List, preferring placement in s's segment.
func (s PathReply) NewEntries(n int32) (PathReplyEntry_List, error) {
	l, err := NewPathReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return PathReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PathReply_List is a list of PathReply.
type PathReply_List struct{ capnp.List }

// NewPathReply creates a new list of PathReply.
func NewPathReply_List(s *capnp.Segment, sz int32) (PathReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathReply_List{l}, err
}

func (s PathReply_List) At(i int) PathReply { return PathReply{s.List.Struct(i)} }

func (s PathReply_List) Set(i int, v PathReply) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReply_List) String() string {
	str, _ := text.MarshalList(0xf10fe9b6293ee63f, s.List)
	return str
}

// PathReply_Promise is a wrapper for a PathReply promised by a client call.
type PathReply_Promise struct{ *capnp.Pipeline }

func (p PathReply_Promise) Struct() (PathReply, error) {
	s, err := p.Pipeline.Struct()
	return PathReply{s}, err
}

type PathReplyEntry struct{ capnp.Struct }

// PathReplyEntry_TypeID is the unique identifier for the type PathReplyEntry.
const PathReplyEntry_TypeID = 0xc5ff2e54709776ec

func NewPathReplyEntry(s *capnp.Segment) (PathReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PathReplyEntry{st}, err
}

func NewRootPathReplyEntry(s *capnp.Segment) (PathReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PathReplyEntry{st}, err
}

func ReadRootPathReplyEntry(msg *capnp.Message) (PathReplyEntry, error) {
	root, err := msg.RootPtr()
	return PathReplyEntry{root.Struct()}, err
}

func (s PathReplyEntry) String() string {
	str, _ := text.Marshal(0xc5ff2e54709776ec, s.Struct)
	return str
}

func (s PathReplyEntry) Path() (FwdPathMeta, error) {
	p, err := s.Struct.Ptr(0)
	return FwdPathMeta{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetPath(v FwdPathMeta) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPath sets the path field to a newly
// allocated FwdPathMeta struct, preferring placement in s's segment.
func (s PathReplyEntry) NewPath() (FwdPathMeta, error) {
	ss, err := NewFwdPathMeta(s.Struct.Segment())
	if err != nil {
		return FwdPathMeta{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathReplyEntry) HostInfo() (HostInfo, error) {
	p, err := s.Struct.Ptr(1)
	return HostInfo{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasHostInfo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetHostInfo(v HostInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewHostInfo sets the hostInfo field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s PathReplyEntry) NewHostInfo() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s PathReplyEntry) PathStaticInfo() (PathMetadata, error) {
	p, err := s.Struct.Ptr(2)
	return PathMetadata{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasPathStaticInfo() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetPathStaticInfo(v PathMetadata) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewPathStaticInfo sets the pathStaticInfo field to a newly
// allocated PathMetadata struct, preferring placement in s's segment.
func (s PathReplyEntry) NewPathStaticInfo() (PathMetadata, error) {
	ss, err := NewPathMetadata(s.Struct.Segment())
	if err != nil {
		return PathMetadata{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// PathReplyEntry_List is a list of PathReplyEntry.
type PathReplyEntry_List struct{ capnp.List }

// NewPathReplyEntry creates a new list of PathReplyEntry.
func NewPathReplyEntry_List(s *capnp.Segment, sz int32) (PathReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return PathReplyEntry_List{l}, err
}

func (s PathReplyEntry_List) At(i int) PathReplyEntry { return PathReplyEntry{s.List.Struct(i)} }

func (s PathReplyEntry_List) Set(i int, v PathReplyEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xc5ff2e54709776ec, s.List)
	return str
}

// PathReplyEntry_Promise is a wrapper for a PathReplyEntry promised by a client call.
type PathReplyEntry_Promise struct{ *capnp.Pipeline }

func (p PathReplyEntry_Promise) Struct() (PathReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return PathReplyEntry{s}, err
}

func (p PathReplyEntry_Promise) Path() FwdPathMeta_Promise {
	return FwdPathMeta_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathReplyEntry_Promise) HostInfo() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p PathReplyEntry_Promise) PathStaticInfo() PathMetadata_Promise {
	return PathMetadata_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type HostInfo struct{ capnp.Struct }
type HostInfo_addrs HostInfo

// HostInfo_TypeID is the unique identifier for the type HostInfo.
const HostInfo_TypeID = 0xb21a270577932520

func NewHostInfo(s *capnp.Segment) (HostInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HostInfo{st}, err
}

func NewRootHostInfo(s *capnp.Segment) (HostInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HostInfo{st}, err
}

func ReadRootHostInfo(msg *capnp.Message) (HostInfo, error) {
	root, err := msg.RootPtr()
	return HostInfo{root.Struct()}, err
}

func (s HostInfo) String() string {
	str, _ := text.Marshal(0xb21a270577932520, s.Struct)
	return str
}

func (s HostInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HostInfo) Addrs() HostInfo_addrs { return HostInfo_addrs(s) }

func (s HostInfo_addrs) Ipv4() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s HostInfo_addrs) HasIpv4() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HostInfo_addrs) SetIpv4(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s HostInfo_addrs) Ipv6() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s HostInfo_addrs) HasIpv6() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HostInfo_addrs) SetIpv6(v []byte) error {
	return s.Struct.SetData(1, v)
}

// HostInfo_List is a list of HostInfo.
type HostInfo_List struct{ capnp.List }

// NewHostInfo creates a new list of HostInfo.
func NewHostInfo_List(s *capnp.Segment, sz int32) (HostInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return HostInfo_List{l}, err
}

func (s HostInfo_List) At(i int) HostInfo { return HostInfo{s.List.Struct(i)} }

func (s HostInfo_List) Set(i int, v HostInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s HostInfo_List) String() string {
	str, _ := text.MarshalList(0xb21a270577932520, s.List)
	return str
}

// HostInfo_Promise is a wrapper for a HostInfo promised by a client call.
type HostInfo_Promise struct{ *capnp.Pipeline }

func (p HostInfo_Promise) Struct() (HostInfo, error) {
	s, err := p.Pipeline.Struct()
	return HostInfo{s}, err
}

func (p HostInfo_Promise) Addrs() HostInfo_addrs_Promise { return HostInfo_addrs_Promise{p.Pipeline} }

// HostInfo_addrs_Promise is a wrapper for a HostInfo_addrs promised by a client call.
type HostInfo_addrs_Promise struct{ *capnp.Pipeline }

func (p HostInfo_addrs_Promise) Struct() (HostInfo_addrs, error) {
	s, err := p.Pipeline.Struct()
	return HostInfo_addrs{s}, err
}

type PathMetadata struct{ capnp.Struct }

// PathMetadata_TypeID is the unique identifier for the type PathMetadata.
const PathMetadata_TypeID = 0xa5cff7314a4335e5

func NewPathMetadata(s *capnp.Segment) (PathMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PathMetadata{st}, err
}

func NewRootPathMetadata(s *capnp.Segment) (PathMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PathMetadata{st}, err
}

func ReadRootPathMetadata(msg *capnp.Message) (PathMetadata, error) {
	root, err := msg.RootPtr()
	return PathMetadata{root.Struct()}, err
}

func (s PathMetadata) String() string {
	str, _ := text.Marshal(0xa5cff7314a4335e5, s.Struct)
	return str
}

func (s PathMetadata) TotalLatency() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathMetadata) SetTotalLatency(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathMetadata) TotalHops() uint8 {
	return s.Struct.Uint8(2)
}

func (s PathMetadata) SetTotalHops(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s PathMetadata) MinimalBandwidth() uint32 {
	return s.Struct.Uint32(4)
}

func (s PathMetadata) SetMinimalBandwidth(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s PathMetadata) LinkTypes() (PathMetadata_InterfaceLinkType_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathMetadata_InterfaceLinkType_List{List: p.List()}, err
}

func (s PathMetadata) HasLinkTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata) SetLinkTypes(v PathMetadata_InterfaceLinkType_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLinkTypes sets the linkTypes field to a newly
// allocated PathMetadata_InterfaceLinkType_List, preferring placement in s's segment.
func (s PathMetadata) NewLinkTypes(n int32) (PathMetadata_InterfaceLinkType_List, error) {
	l, err := NewPathMetadata_InterfaceLinkType_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_InterfaceLinkType_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s PathMetadata) AsLocations() (PathMetadata_Geo_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathMetadata_Geo_List{List: p.List()}, err
}

func (s PathMetadata) HasAsLocations() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathMetadata) SetAsLocations(v PathMetadata_Geo_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAsLocations sets the asLocations field to a newly
// allocated PathMetadata_Geo_List, preferring placement in s's segment.
func (s PathMetadata) NewAsLocations(n int32) (PathMetadata_Geo_List, error) {
	l, err := NewPathMetadata_Geo_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_Geo_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s PathMetadata) Notes() (PathMetadata_Note_List, error) {
	p, err := s.Struct.Ptr(2)
	return PathMetadata_Note_List{List: p.List()}, err
}

func (s PathMetadata) HasNotes() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PathMetadata) SetNotes(v PathMetadata_Note_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewNotes sets the notes field to a newly
// allocated PathMetadata_Note_List, preferring placement in s's segment.
func (s PathMetadata) NewNotes(n int32) (PathMetadata_Note_List, error) {
	l, err := NewPathMetadata_Note_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_Note_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// PathMetadata_List is a list of PathMetadata.
type PathMetadata_List struct{ capnp.List }

// NewPathMetadata creates a new list of PathMetadata.
func NewPathMetadata_List(s *capnp.Segment, sz int32) (PathMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return PathMetadata_List{l}, err
}

func (s PathMetadata_List) At(i int) PathMetadata { return PathMetadata{s.List.Struct(i)} }

func (s PathMetadata_List) Set(i int, v PathMetadata) error { return s.List.SetStruct(i, v.Struct) }

func (s PathMetadata_List) String() string {
	str, _ := text.MarshalList(0xa5cff7314a4335e5, s.List)
	return str
}

// PathMetadata_Promise is a wrapper for a PathMetadata promised by a client call.
type PathMetadata_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Promise) Struct() (PathMetadata, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata{s}, err
}

type PathMetadata_InterfaceLinkType struct{ capnp.Struct }

// PathMetadata_InterfaceLinkType_TypeID is the unique identifier for the type PathMetadata_InterfaceLinkType.
const PathMetadata_InterfaceLinkType_TypeID = 0xd7c92876b75c115d

func NewPathMetadata_InterfaceLinkType(s *capnp.Segment) (PathMetadata_InterfaceLinkType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathMetadata_InterfaceLinkType{st}, err
}

func NewRootPathMetadata_InterfaceLinkType(s *capnp.Segment) (PathMetadata_InterfaceLinkType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathMetadata_InterfaceLinkType{st}, err
}

func ReadRootPathMetadata_InterfaceLinkType(msg *capnp.Message) (PathMetadata_InterfaceLinkType, error) {
	root, err := msg.RootPtr()
	return PathMetadata_InterfaceLinkType{root.Struct()}, err
}

func (s PathMetadata_InterfaceLinkType) String() string {
	str, _ := text.Marshal(0xd7c92876b75c115d, s.Struct)
	return str
}

func (s PathMetadata_InterfaceLinkType) InterLinkType() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathMetadata_InterfaceLinkType) SetInterLinkType(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathMetadata_InterfaceLinkType) PeerLinkType() uint16 {
	return s.Struct.Uint16(2)
}

func (s PathMetadata_InterfaceLinkType) SetPeerLinkType(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s PathMetadata_InterfaceLinkType) Isdas() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathMetadata_InterfaceLinkType) SetIsdas(v uint64) {
	s.Struct.SetUint64(8, v)
}

// PathMetadata_InterfaceLinkType_List is a list of PathMetadata_InterfaceLinkType.
type PathMetadata_InterfaceLinkType_List struct{ capnp.List }

// NewPathMetadata_InterfaceLinkType creates a new list of PathMetadata_InterfaceLinkType.
func NewPathMetadata_InterfaceLinkType_List(s *capnp.Segment, sz int32) (PathMetadata_InterfaceLinkType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return PathMetadata_InterfaceLinkType_List{l}, err
}

func (s PathMetadata_InterfaceLinkType_List) At(i int) PathMetadata_InterfaceLinkType {
	return PathMetadata_InterfaceLinkType{s.List.Struct(i)}
}

func (s PathMetadata_InterfaceLinkType_List) Set(i int, v PathMetadata_InterfaceLinkType) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_InterfaceLinkType_List) String() string {
	str, _ := text.MarshalList(0xd7c92876b75c115d, s.List)
	return str
}

// PathMetadata_InterfaceLinkType_Promise is a wrapper for a PathMetadata_InterfaceLinkType promised by a client call.
type PathMetadata_InterfaceLinkType_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_InterfaceLinkType_Promise) Struct() (PathMetadata_InterfaceLinkType, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_InterfaceLinkType{s}, err
}

type PathMetadata_Geo struct{ capnp.Struct }

// PathMetadata_Geo_TypeID is the unique identifier for the type PathMetadata_Geo.
const PathMetadata_Geo_TypeID = 0xb47c95e958cccfff

func NewPathMetadata_Geo(s *capnp.Segment) (PathMetadata_Geo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo{st}, err
}

func NewRootPathMetadata_Geo(s *capnp.Segment) (PathMetadata_Geo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo{st}, err
}

func ReadRootPathMetadata_Geo(msg *capnp.Message) (PathMetadata_Geo, error) {
	root, err := msg.RootPtr()
	return PathMetadata_Geo{root.Struct()}, err
}

func (s PathMetadata_Geo) String() string {
	str, _ := text.Marshal(0xb47c95e958cccfff, s.Struct)
	return str
}

func (s PathMetadata_Geo) RouterLocations() (PathMetadata_Geo_GPSData_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathMetadata_Geo_GPSData_List{List: p.List()}, err
}

func (s PathMetadata_Geo) HasRouterLocations() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata_Geo) SetRouterLocations(v PathMetadata_Geo_GPSData_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRouterLocations sets the routerLocations field to a newly
// allocated PathMetadata_Geo_GPSData_List, preferring placement in s's segment.
func (s PathMetadata_Geo) NewRouterLocations(n int32) (PathMetadata_Geo_GPSData_List, error) {
	l, err := NewPathMetadata_Geo_GPSData_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_Geo_GPSData_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s PathMetadata_Geo) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathMetadata_Geo) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PathMetadata_Geo_List is a list of PathMetadata_Geo.
type PathMetadata_Geo_List struct{ capnp.List }

// NewPathMetadata_Geo creates a new list of PathMetadata_Geo.
func NewPathMetadata_Geo_List(s *capnp.Segment, sz int32) (PathMetadata_Geo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMetadata_Geo_List{l}, err
}

func (s PathMetadata_Geo_List) At(i int) PathMetadata_Geo { return PathMetadata_Geo{s.List.Struct(i)} }

func (s PathMetadata_Geo_List) Set(i int, v PathMetadata_Geo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_Geo_List) String() string {
	str, _ := text.MarshalList(0xb47c95e958cccfff, s.List)
	return str
}

// PathMetadata_Geo_Promise is a wrapper for a PathMetadata_Geo promised by a client call.
type PathMetadata_Geo_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Geo_Promise) Struct() (PathMetadata_Geo, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_Geo{s}, err
}

type PathMetadata_Geo_GPSData struct{ capnp.Struct }

// PathMetadata_Geo_GPSData_TypeID is the unique identifier for the type PathMetadata_Geo_GPSData.
const PathMetadata_Geo_GPSData_TypeID = 0xb7cede732308e432

func NewPathMetadata_Geo_GPSData(s *capnp.Segment) (PathMetadata_Geo_GPSData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo_GPSData{st}, err
}

func NewRootPathMetadata_Geo_GPSData(s *capnp.Segment) (PathMetadata_Geo_GPSData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo_GPSData{st}, err
}

func ReadRootPathMetadata_Geo_GPSData(msg *capnp.Message) (PathMetadata_Geo_GPSData, error) {
	root, err := msg.RootPtr()
	return PathMetadata_Geo_GPSData{root.Struct()}, err
}

func (s PathMetadata_Geo_GPSData) String() string {
	str, _ := text.Marshal(0xb7cede732308e432, s.Struct)
	return str
}

func (s PathMetadata_Geo_GPSData) Latitude() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s PathMetadata_Geo_GPSData) SetLatitude(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s PathMetadata_Geo_GPSData) Longitude() float32 {
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s PathMetadata_Geo_GPSData) SetLongitude(v float32) {
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s PathMetadata_Geo_GPSData) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PathMetadata_Geo_GPSData) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata_Geo_GPSData) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PathMetadata_Geo_GPSData) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

// PathMetadata_Geo_GPSData_List is a list of PathMetadata_Geo_GPSData.
type PathMetadata_Geo_GPSData_List struct{ capnp.List }

// NewPathMetadata_Geo_GPSData creates a new list of PathMetadata_Geo_GPSData.
func NewPathMetadata_Geo_GPSData_List(s *capnp.Segment, sz int32) (PathMetadata_Geo_GPSData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMetadata_Geo_GPSData_List{l}, err
}

func (s PathMetadata_Geo_GPSData_List) At(i int) PathMetadata_Geo_GPSData {
	return PathMetadata_Geo_GPSData{s.List.Struct(i)}
}

func (s PathMetadata_Geo_GPSData_List) Set(i int, v PathMetadata_Geo_GPSData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_Geo_GPSData_List) String() string {
	str, _ := text.MarshalList(0xb7cede732308e432, s.List)
	return str
}

// PathMetadata_Geo_GPSData_Promise is a wrapper for a PathMetadata_Geo_GPSData promised by a client call.
type PathMetadata_Geo_GPSData_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Geo_GPSData_Promise) Struct() (PathMetadata_Geo_GPSData, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_Geo_GPSData{s}, err
}

type PathMetadata_Note struct{ capnp.Struct }

// PathMetadata_Note_TypeID is the unique identifier for the type PathMetadata_Note.
const PathMetadata_Note_TypeID = 0x88b4277fa83dde2d

func NewPathMetadata_Note(s *capnp.Segment) (PathMetadata_Note, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Note{st}, err
}

func NewRootPathMetadata_Note(s *capnp.Segment) (PathMetadata_Note, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Note{st}, err
}

func ReadRootPathMetadata_Note(msg *capnp.Message) (PathMetadata_Note, error) {
	root, err := msg.RootPtr()
	return PathMetadata_Note{root.Struct()}, err
}

func (s PathMetadata_Note) String() string {
	str, _ := text.Marshal(0x88b4277fa83dde2d, s.Struct)
	return str
}

func (s PathMetadata_Note) Note() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PathMetadata_Note) HasNote() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata_Note) NoteBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PathMetadata_Note) SetNote(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PathMetadata_Note) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathMetadata_Note) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PathMetadata_Note_List is a list of PathMetadata_Note.
type PathMetadata_Note_List struct{ capnp.List }

// NewPathMetadata_Note creates a new list of PathMetadata_Note.
func NewPathMetadata_Note_List(s *capnp.Segment, sz int32) (PathMetadata_Note_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMetadata_Note_List{l}, err
}

func (s PathMetadata_Note_List) At(i int) PathMetadata_Note {
	return PathMetadata_Note{s.List.Struct(i)}
}

func (s PathMetadata_Note_List) Set(i int, v PathMetadata_Note) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_Note_List) String() string {
	str, _ := text.MarshalList(0x88b4277fa83dde2d, s.List)
	return str
}

// PathMetadata_Note_Promise is a wrapper for a PathMetadata_Note promised by a client call.
type PathMetadata_Note_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Note_Promise) Struct() (PathMetadata_Note, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_Note{s}, err
}

type FwdPathMeta struct{ capnp.Struct }

// FwdPathMeta_TypeID is the unique identifier for the type FwdPathMeta.
const FwdPathMeta_TypeID = 0x8adfcabe5ff9daf4

func NewFwdPathMeta(s *capnp.Segment) (FwdPathMeta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FwdPathMeta{st}, err
}

func NewRootFwdPathMeta(s *capnp.Segment) (FwdPathMeta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FwdPathMeta{st}, err
}

func ReadRootFwdPathMeta(msg *capnp.Message) (FwdPathMeta, error) {
	root, err := msg.RootPtr()
	return FwdPathMeta{root.Struct()}, err
}

func (s FwdPathMeta) String() string {
	str, _ := text.Marshal(0x8adfcabe5ff9daf4, s.Struct)
	return str
}

func (s FwdPathMeta) FwdPath() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s FwdPathMeta) HasFwdPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetFwdPath(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s FwdPathMeta) Mtu() uint16 {
	return s.Struct.Uint16(0)
}

func (s FwdPathMeta) SetMtu(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s FwdPathMeta) Interfaces() (PathInterface_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathInterface_List{List: p.List()}, err
}

func (s FwdPathMeta) HasInterfaces() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetInterfaces(v PathInterface_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewInterfaces sets the interfaces field to a newly
// allocated PathInterface_List, preferring placement in s's segment.
func (s FwdPathMeta) NewInterfaces(n int32) (PathInterface_List, error) {
	l, err := NewPathInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return PathInterface_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s FwdPathMeta) ExpTime() uint32 {
	return s.Struct.Uint32(4)
}

func (s FwdPathMeta) SetExpTime(v uint32) {
	s.Struct.SetUint32(4, v)
}

// FwdPathMeta_List is a list of FwdPathMeta.
type FwdPathMeta_List struct{ capnp.List }

// NewFwdPathMeta creates a new list of FwdPathMeta.
func NewFwdPathMeta_List(s *capnp.Segment, sz int32) (FwdPathMeta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return FwdPathMeta_List{l}, err
}

func (s FwdPathMeta_List) At(i int) FwdPathMeta { return FwdPathMeta{s.List.Struct(i)} }

func (s FwdPathMeta_List) Set(i int, v FwdPathMeta) error { return s.List.SetStruct(i, v.Struct) }

func (s FwdPathMeta_List) String() string {
	str, _ := text.MarshalList(0x8adfcabe5ff9daf4, s.List)
	return str
}

// FwdPathMeta_Promise is a wrapper for a FwdPathMeta promised by a client call.
type FwdPathMeta_Promise struct{ *capnp.Pipeline }

func (p FwdPathMeta_Promise) Struct() (FwdPathMeta, error) {
	s, err := p.Pipeline.Struct()
	return FwdPathMeta{s}, err
}

type PathInterface struct{ capnp.Struct }

// PathInterface_TypeID is the unique identifier for the type PathInterface.
const PathInterface_TypeID = 0x95794035a80b7da1

func NewPathInterface(s *capnp.Segment) (PathInterface, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathInterface{st}, err
}

func NewRootPathInterface(s *capnp.Segment) (PathInterface, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathInterface{st}, err
}

func ReadRootPathInterface(msg *capnp.Message) (PathInterface, error) {
	root, err := msg.RootPtr()
	return PathInterface{root.Struct()}, err
}

func (s PathInterface) String() string {
	str, _ := text.Marshal(0x95794035a80b7da1, s.Struct)
	return str
}

func (s PathInterface) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathInterface) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PathInterface) IfID() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathInterface) SetIfID(v uint64) {
	s.Struct.SetUint64(8, v)
}

// PathInterface_List is a list of PathInterface.
type PathInterface_List struct{ capnp.List }

// NewPathInterface creates a new list of PathInterface.
func NewPathInterface_List(s *capnp.Segment, sz int32) (PathInterface_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return PathInterface_List{l}, err
}

func (s PathInterface_List) At(i int) PathInterface { return PathInterface{s.List.Struct(i)} }

func (s PathInterface_List) Set(i int, v PathInterface) error { return s.List.SetStruct(i, v.Struct) }

func (s PathInterface_List) String() string {
	str, _ := text.MarshalList(0x95794035a80b7da1, s.List)
	return str
}

// PathInterface_Promise is a wrapper for a PathInterface promised by a client call.
type PathInterface_Promise struct{ *capnp.Pipeline }

func (p PathInterface_Promise) Struct() (PathInterface, error) {
	s, err := p.Pipeline.Struct()
	return PathInterface{s}, err
}

type ASInfoReq struct{ capnp.Struct }

// ASInfoReq_TypeID is the unique identifier for the type ASInfoReq.
const ASInfoReq_TypeID = 0xcc65a2a89c24e6a5

func NewASInfoReq(s *capnp.Segment) (ASInfoReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ASInfoReq{st}, err
}

func NewRootASInfoReq(s *capnp.Segment) (ASInfoReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ASInfoReq{st}, err
}

func ReadRootASInfoReq(msg *capnp.Message) (ASInfoReq, error) {
	root, err := msg.RootPtr()
	return ASInfoReq{root.Struct()}, err
}

func (s ASInfoReq) String() string {
	str, _ := text.Marshal(0xcc65a2a89c24e6a5, s.Struct)
	return str
}

func (s ASInfoReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASInfoReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ASInfoReq_List is a list of ASInfoReq.
type ASInfoReq_List struct{ capnp.List }

// NewASInfoReq creates a new list of ASInfoReq.
func NewASInfoReq_List(s *capnp.Segment, sz int32) (ASInfoReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ASInfoReq_List{l}, err
}

func (s ASInfoReq_List) At(i int) ASInfoReq { return ASInfoReq{s.List.Struct(i)} }

func (s ASInfoReq_List) Set(i int, v ASInfoReq) error { return s.List.SetStruct(i, v.Struct) }

func (s ASInfoReq_List) String() string {
	str, _ := text.MarshalList(0xcc65a2a89c24e6a5, s.List)
	return str
}

// ASInfoReq_Promise is a wrapper for a ASInfoReq promised by a client call.
type ASInfoReq_Promise struct{ *capnp.Pipeline }

func (p ASInfoReq_Promise) Struct() (ASInfoReq, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReq{s}, err
}

type ASInfoReply struct{ capnp.Struct }

// ASInfoReply_TypeID is the unique identifier for the type ASInfoReply.
const ASInfoReply_TypeID = 0x947e1828e214e89d

func NewASInfoReply(s *capnp.Segment) (ASInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ASInfoReply{st}, err
}

func NewRootASInfoReply(s *capnp.Segment) (ASInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ASInfoReply{st}, err
}

func ReadRootASInfoReply(msg *capnp.Message) (ASInfoReply, error) {
	root, err := msg.RootPtr()
	return ASInfoReply{root.Struct()}, err
}

func (s ASInfoReply) String() string {
	str, _ := text.Marshal(0x947e1828e214e89d, s.Struct)
	return str
}

func (s ASInfoReply) Entries() (ASInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ASInfoReplyEntry_List{List: p.List()}, err
}

func (s ASInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASInfoReply) SetEntries(v ASInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ASInfoReplyEntry_List, preferring placement in s's segment.
func (s ASInfoReply) NewEntries(n int32) (ASInfoReplyEntry_List, error) {
	l, err := NewASInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ASInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ASInfoReply_List is a list of ASInfoReply.
type ASInfoReply_List struct{ capnp.List }

// NewASInfoReply creates a new list of ASInfoReply.
func NewASInfoReply_List(s *capnp.Segment, sz int32) (ASInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ASInfoReply_List{l}, err
}

func (s ASInfoReply_List) At(i int) ASInfoReply { return ASInfoReply{s.List.Struct(i)} }

func (s ASInfoReply_List) Set(i int, v ASInfoReply) error { return s.List.SetStruct(i, v.Struct) }

func (s ASInfoReply_List) String() string {
	str, _ := text.MarshalList(0x947e1828e214e89d, s.List)
	return str
}

// ASInfoReply_Promise is a wrapper for a ASInfoReply promised by a client call.
type ASInfoReply_Promise struct{ *capnp.Pipeline }

func (p ASInfoReply_Promise) Struct() (ASInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReply{s}, err
}

type ASInfoReplyEntry struct{ capnp.Struct }

// ASInfoReplyEntry_TypeID is the unique identifier for the type ASInfoReplyEntry.
const ASInfoReplyEntry_TypeID = 0xfab1a3b4477ab6b3

func NewASInfoReplyEntry(s *capnp.Segment) (ASInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ASInfoReplyEntry{st}, err
}

func NewRootASInfoReplyEntry(s *capnp.Segment) (ASInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ASInfoReplyEntry{st}, err
}

func ReadRootASInfoReplyEntry(msg *capnp.Message) (ASInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return ASInfoReplyEntry{root.Struct()}, err
}

func (s ASInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xfab1a3b4477ab6b3, s.Struct)
	return str
}

func (s ASInfoReplyEntry) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASInfoReplyEntry) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASInfoReplyEntry) Mtu() uint16 {
	return s.Struct.Uint16(8)
}

func (s ASInfoReplyEntry) SetMtu(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s ASInfoReplyEntry) IsCore() bool {
	return s.Struct.Bit(80)
}

func (s ASInfoReplyEntry) SetIsCore(v bool) {
	s.Struct.SetBit(80, v)
}

// ASInfoReplyEntry_List is a list of ASInfoReplyEntry.
type ASInfoReplyEntry_List struct{ capnp.List }

// NewASInfoReplyEntry creates a new list of ASInfoReplyEntry.
func NewASInfoReplyEntry_List(s *capnp.Segment, sz int32) (ASInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return ASInfoReplyEntry_List{l}, err
}

func (s ASInfoReplyEntry_List) At(i int) ASInfoReplyEntry { return ASInfoReplyEntry{s.List.Struct(i)} }

func (s ASInfoReplyEntry_List) Set(i int, v ASInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ASInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xfab1a3b4477ab6b3, s.List)
	return str
}

// ASInfoReplyEntry_Promise is a wrapper for a ASInfoReplyEntry promised by a client call.
type ASInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p ASInfoReplyEntry_Promise) Struct() (ASInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReplyEntry{s}, err
}

type RevNotification struct{ capnp.Struct }

// RevNotification_TypeID is the unique identifier for the type RevNotification.
const RevNotification_TypeID = 0x9b0685a785df42e9

func NewRevNotification(s *capnp.Segment) (RevNotification, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RevNotification{st}, err
}

func NewRootRevNotification(s *capnp.Segment) (RevNotification, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RevNotification{st}, err
}

func ReadRootRevNotification(msg *capnp.Message) (RevNotification, error) {
	root, err := msg.RootPtr()
	return RevNotification{root.Struct()}, err
}

func (s RevNotification) String() string {
	str, _ := text.Marshal(0x9b0685a785df42e9, s.Struct)
	return str
}

func (s RevNotification) SRevInfo() (SignedBlob, error) {
	p, err := s.Struct.Ptr(0)
	return SignedBlob{Struct: p.Struct()}, err
}

func (s RevNotification) HasSRevInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RevNotification) SetSRevInfo(v SignedBlob) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSRevInfo sets the sRevInfo field to a newly
// allocated SignedBlob struct, preferring placement in s's segment.
func (s RevNotification) NewSRevInfo() (SignedBlob, error) {
	ss, err := NewSignedBlob(s.Struct.Segment())
	if err != nil {
		return SignedBlob{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RevNotification_List is a list of RevNotification.
type RevNotification_List struct{ capnp.List }

// NewRevNotification creates a new list of RevNotification.
func NewRevNotification_List(s *capnp.Segment, sz int32) (RevNotification_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RevNotification_List{l}, err
}

func (s RevNotification_List) At(i int) RevNotification { return RevNotification{s.List.Struct(i)} }

func (s RevNotification_List) Set(i int, v RevNotification) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RevNotification_List) String() string {
	str, _ := text.MarshalList(0x9b0685a785df42e9, s.List)
	return str
}

// RevNotification_Promise is a wrapper for a RevNotification promised by a client call.
type RevNotification_Promise struct{ *capnp.Pipeline }

func (p RevNotification_Promise) Struct() (RevNotification, error) {
	s, err := p.Pipeline.Struct()
	return RevNotification{s}, err
}

func (p RevNotification_Promise) SRevInfo() SignedBlob_Promise {
	return SignedBlob_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type RevReply struct{ capnp.Struct }

// RevReply_TypeID is the unique identifier for the type RevReply.
const RevReply_TypeID = 0x8f8172e4469c111a

func NewRevReply(s *capnp.Segment) (RevReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RevReply{st}, err
}

func NewRootRevReply(s *capnp.Segment) (RevReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RevReply{st}, err
}

func ReadRootRevReply(msg *capnp.Message) (RevReply, error) {
	root, err := msg.RootPtr()
	return RevReply{root.Struct()}, err
}

func (s RevReply) String() string {
	str, _ := text.Marshal(0x8f8172e4469c111a, s.Struct)
	return str
}

func (s RevReply) Result() uint16 {
	return s.Struct.Uint16(0)
}

func (s RevReply) SetResult(v uint16) {
	s.Struct.SetUint16(0, v)
}

// RevReply_List is a list of RevReply.
type RevReply_List struct{ capnp.List }

// NewRevReply creates a new list of RevReply.
func NewRevReply_List(s *capnp.Segment, sz int32) (RevReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RevReply_List{l}, err
}

func (s RevReply_List) At(i int) RevReply { return RevReply{s.List.Struct(i)} }

func (s RevReply_List) Set(i int, v RevReply) error { return s.List.SetStruct(i, v.Struct) }

func (s RevReply_List) String() string {
	str, _ := text.MarshalList(0x8f8172e4469c111a, s.List)
	return str
}

// RevReply_Promise is a wrapper for a RevReply promised by a client call.
type RevReply_Promise struct{ *capnp.Pipeline }

func (p RevReply_Promise) Struct() (RevReply, error) {
	s, err := p.Pipeline.Struct()
	return RevReply{s}, err
}

type IFInfoRequest struct{ capnp.Struct }

// IFInfoRequest_TypeID is the unique identifier for the type IFInfoRequest.
const IFInfoRequest_TypeID = 0x877af4eba6adb0f3

func NewIFInfoRequest(s *capnp.Segment) (IFInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoRequest{st}, err
}

func NewRootIFInfoRequest(s *capnp.Segment) (IFInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoRequest{st}, err
}

func ReadRootIFInfoRequest(msg *capnp.Message) (IFInfoRequest, error) {
	root, err := msg.RootPtr()
	return IFInfoRequest{root.Struct()}, err
}

func (s IFInfoRequest) String() string {
	str, _ := text.Marshal(0x877af4eba6adb0f3, s.Struct)
	return str
}

func (s IFInfoRequest) IfIDs() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s IFInfoRequest) HasIfIDs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoRequest) SetIfIDs(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewIfIDs sets the ifIDs field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s IFInfoRequest) NewIfIDs(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFInfoRequest_List is a list of IFInfoRequest.
type IFInfoRequest_List struct{ capnp.List }

// NewIFInfoRequest creates a new list of IFInfoRequest.
func NewIFInfoRequest_List(s *capnp.Segment, sz int32) (IFInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFInfoRequest_List{l}, err
}

func (s IFInfoRequest_List) At(i int) IFInfoRequest { return IFInfoRequest{s.List.Struct(i)} }

func (s IFInfoRequest_List) Set(i int, v IFInfoRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s IFInfoRequest_List) String() string {
	str, _ := text.MarshalList(0x877af4eba6adb0f3, s.List)
	return str
}

// IFInfoRequest_Promise is a wrapper for a IFInfoRequest promised by a client call.
type IFInfoRequest_Promise struct{ *capnp.Pipeline }

func (p IFInfoRequest_Promise) Struct() (IFInfoRequest, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoRequest{s}, err
}

type IFInfoReply struct{ capnp.Struct }

// IFInfoReply_TypeID is the unique identifier for the type IFInfoReply.
const IFInfoReply_TypeID = 0xe7f7d11a5652e06c

func NewIFInfoReply(s *capnp.Segment) (IFInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoReply{st}, err
}

func NewRootIFInfoReply(s *capnp.Segment) (IFInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoReply{st}, err
}

func ReadRootIFInfoReply(msg *capnp.Message) (IFInfoReply, error) {
	root, err := msg.RootPtr()
	return IFInfoReply{root.Struct()}, err
}

func (s IFInfoReply) String() string {
	str, _ := text.Marshal(0xe7f7d11a5652e06c, s.Struct)
	return str
}

func (s IFInfoReply) Entries() (IFInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return IFInfoReplyEntry_List{List: p.List()}, err
}

func (s IFInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoReply) SetEntries(v IFInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated IFInfoReplyEntry_List, preferring placement in s's segment.
func (s IFInfoReply) NewEntries(n int32) (IFInfoReplyEntry_List, error) {
	l, err := NewIFInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return IFInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFInfoReply_List is a list of IFInfoReply.
type IFInfoReply_List struct{ capnp.List }

// NewIFInfoReply creates a new list of IFInfoReply.
func NewIFInfoReply_List(s *capnp.Segment, sz int32) (IFInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFInfoReply_List{l}, err
}

func (s IFInfoReply_List) At(i int) IFInfoReply { return IFInfoReply{s.List.Struct(i)} }

func (s IFInfoReply_List) Set(i int, v IFInfoReply) error { return s.List.SetStruct(i, v.Struct) }

func (s IFInfoReply_List) String() string {
	str, _ := text.MarshalList(0xe7f7d11a5652e06c, s.List)
	return str
}

// IFInfoReply_Promise is a wrapper for a IFInfoReply promised by a client call.
type IFInfoReply_Promise struct{ *capnp.Pipeline }

func (p IFInfoReply_Promise) Struct() (IFInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoReply{s}, err
}

type IFInfoReplyEntry struct{ capnp.Struct }

// IFInfoReplyEntry_TypeID is the unique identifier for the type IFInfoReplyEntry.
const IFInfoReplyEntry_TypeID = 0xf0c5156786d72738

func NewIFInfoReplyEntry(s *capnp.Segment) (IFInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IFInfoReplyEntry{st}, err
}

func NewRootIFInfoReplyEntry(s *capnp.Segment) (IFInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IFInfoReplyEntry{st}, err
}

func ReadRootIFInfoReplyEntry(msg *capnp.Message) (IFInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return IFInfoReplyEntry{root.Struct()}, err
}

func (s IFInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xf0c5156786d72738, s.Struct)
	return str
}

func (s IFInfoReplyEntry) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s IFInfoReplyEntry) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s IFInfoReplyEntry) HostInfo() (HostInfo, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo{Struct: p.Struct()}, err
}

func (s IFInfoReplyEntry) HasHostInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoReplyEntry) SetHostInfo(v HostInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHostInfo sets the hostInfo field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s IFInfoReplyEntry) NewHostInfo() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IFInfoReplyEntry_List is a list of IFInfoReplyEntry.
type IFInfoReplyEntry_List struct{ capnp.List }

// NewIFInfoReplyEntry creates a new list of IFInfoReplyEntry.
func NewIFInfoReplyEntry_List(s *capnp.Segment, sz int32) (IFInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IFInfoReplyEntry_List{l}, err
}

func (s IFInfoReplyEntry_List) At(i int) IFInfoReplyEntry { return IFInfoReplyEntry{s.List.Struct(i)} }

func (s IFInfoReplyEntry_List) Set(i int, v IFInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IFInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xf0c5156786d72738, s.List)
	return str
}

// IFInfoReplyEntry_Promise is a wrapper for a IFInfoReplyEntry promised by a client call.
type IFInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p IFInfoReplyEntry_Promise) Struct() (IFInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoReplyEntry{s}, err
}

func (p IFInfoReplyEntry_Promise) HostInfo() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ServiceInfoRequest struct{ capnp.Struct }

// ServiceInfoRequest_TypeID is the unique identifier for the type ServiceInfoRequest.
const ServiceInfoRequest_TypeID = 0xa94f085c31a03112

func NewServiceInfoRequest(s *capnp.Segment) (ServiceInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoRequest{st}, err
}

func NewRootServiceInfoRequest(s *capnp.Segment) (ServiceInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoRequest{st}, err
}

func ReadRootServiceInfoRequest(msg *capnp.Message) (ServiceInfoRequest, error) {
	root, err := msg.RootPtr()
	return ServiceInfoRequest{root.Struct()}, err
}

func (s ServiceInfoRequest) String() string {
	str, _ := text.Marshal(0xa94f085c31a03112, s.Struct)
	return str
}

func (s ServiceInfoRequest) ServiceTypes() (ServiceType_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceType_List{List: p.List()}, err
}

func (s ServiceInfoRequest) HasServiceTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoRequest) SetServiceTypes(v ServiceType_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewServiceTypes sets the serviceTypes field to a newly
// allocated ServiceType_List, preferring placement in s's segment.
func (s ServiceInfoRequest) NewServiceTypes(n int32) (ServiceType_List, error) {
	l, err := NewServiceType_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceType_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoRequest_List is a list of ServiceInfoRequest.
type ServiceInfoRequest_List struct{ capnp.List }

// NewServiceInfoRequest creates a new list of ServiceInfoRequest.
func NewServiceInfoRequest_List(s *capnp.Segment, sz int32) (ServiceInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ServiceInfoRequest_List{l}, err
}

func (s ServiceInfoRequest_List) At(i int) ServiceInfoRequest {
	return ServiceInfoRequest{s.List.Struct(i)}
}

func (s ServiceInfoRequest_List) Set(i int, v ServiceInfoRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoRequest_List) String() string {
	str, _ := text.MarshalList(0xa94f085c31a03112, s.List)
	return str
}

// ServiceInfoRequest_Promise is a wrapper for a ServiceInfoRequest promised by a client call.
type ServiceInfoRequest_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoRequest_Promise) Struct() (ServiceInfoRequest, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoRequest{s}, err
}

type ServiceInfoReply struct{ capnp.Struct }

// ServiceInfoReply_TypeID is the unique identifier for the type ServiceInfoReply.
const ServiceInfoReply_TypeID = 0xf7a6d78ba978beb9

func NewServiceInfoReply(s *capnp.Segment) (ServiceInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoReply{st}, err
}

func NewRootServiceInfoReply(s *capnp.Segment) (ServiceInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoReply{st}, err
}

func ReadRootServiceInfoReply(msg *capnp.Message) (ServiceInfoReply, error) {
	root, err := msg.RootPtr()
	return ServiceInfoReply{root.Struct()}, err
}

func (s ServiceInfoReply) String() string {
	str, _ := text.Marshal(0xf7a6d78ba978beb9, s.Struct)
	return str
}

func (s ServiceInfoReply) Entries() (ServiceInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceInfoReplyEntry_List{List: p.List()}, err
}

func (s ServiceInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoReply) SetEntries(v ServiceInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ServiceInfoReplyEntry_List, preferring placement in s's segment.
func (s ServiceInfoReply) NewEntries(n int32) (ServiceInfoReplyEntry_List, error) {
	l, err := NewServiceInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoReply_List is a list of ServiceInfoReply.
type ServiceInfoReply_List struct{ capnp.List }

// NewServiceInfoReply creates a new list of ServiceInfoReply.
func NewServiceInfoReply_List(s *capnp.Segment, sz int32) (ServiceInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ServiceInfoReply_List{l}, err
}

func (s ServiceInfoReply_List) At(i int) ServiceInfoReply { return ServiceInfoReply{s.List.Struct(i)} }

func (s ServiceInfoReply_List) Set(i int, v ServiceInfoReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoReply_List) String() string {
	str, _ := text.MarshalList(0xf7a6d78ba978beb9, s.List)
	return str
}

// ServiceInfoReply_Promise is a wrapper for a ServiceInfoReply promised by a client call.
type ServiceInfoReply_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoReply_Promise) Struct() (ServiceInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoReply{s}, err
}

type ServiceInfoReplyEntry struct{ capnp.Struct }

// ServiceInfoReplyEntry_TypeID is the unique identifier for the type ServiceInfoReplyEntry.
const ServiceInfoReplyEntry_TypeID = 0xe7279389a6bbe1dc

func NewServiceInfoReplyEntry(s *capnp.Segment) (ServiceInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfoReplyEntry{st}, err
}

func NewRootServiceInfoReplyEntry(s *capnp.Segment) (ServiceInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfoReplyEntry{st}, err
}

func ReadRootServiceInfoReplyEntry(msg *capnp.Message) (ServiceInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return ServiceInfoReplyEntry{root.Struct()}, err
}

func (s ServiceInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xe7279389a6bbe1dc, s.Struct)
	return str
}

func (s ServiceInfoReplyEntry) ServiceType() ServiceType {
	return ServiceType(s.Struct.Uint16(0))
}

func (s ServiceInfoReplyEntry) SetServiceType(v ServiceType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s ServiceInfoReplyEntry) Ttl() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfoReplyEntry) SetTtl(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s ServiceInfoReplyEntry) HostInfos() (HostInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo_List{List: p.List()}, err
}

func (s ServiceInfoReplyEntry) HasHostInfos() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoReplyEntry) SetHostInfos(v HostInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHostInfos sets the hostInfos field to a newly
// allocated HostInfo_List, preferring placement in s's segment.
func (s ServiceInfoReplyEntry) NewHostInfos(n int32) (HostInfo_List, error) {
	l, err := NewHostInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return HostInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoReplyEntry_List is a list of ServiceInfoReplyEntry.
type ServiceInfoReplyEntry_List struct{ capnp.List }

// NewServiceInfoReplyEntry creates a new list of ServiceInfoReplyEntry.
func NewServiceInfoReplyEntry_List(s *capnp.Segment, sz int32) (ServiceInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfoReplyEntry_List{l}, err
}

func (s ServiceInfoReplyEntry_List) At(i int) ServiceInfoReplyEntry {
	return ServiceInfoReplyEntry{s.List.Struct(i)}
}

func (s ServiceInfoReplyEntry_List) Set(i int, v ServiceInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xe7279389a6bbe1dc, s.List)
	return str
}

// ServiceInfoReplyEntry_Promise is a wrapper for a ServiceInfoReplyEntry promised by a client call.
type ServiceInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoReplyEntry_Promise) Struct() (ServiceInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoReplyEntry{s}, err
}

type SegTypeHopReq struct{ capnp.Struct }

// SegTypeHopReq_TypeID is the unique identifier for the type SegTypeHopReq.
const SegTypeHopReq_TypeID = 0xca1e844241cf650f

func NewSegTypeHopReq(s *capnp.Segment) (SegTypeHopReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegTypeHopReq{st}, err
}

func NewRootSegTypeHopReq(s *capnp.Segment) (SegTypeHopReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegTypeHopReq{st}, err
}

func ReadRootSegTypeHopReq(msg *capnp.Message) (SegTypeHopReq, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReq{root.Struct()}, err
}

func (s SegTypeHopReq) String() string {
	str, _ := text.Marshal(0xca1e844241cf650f, s.Struct)
	return str
}

func (s SegTypeHopReq) Type() PathSegType {
	return PathSegType(s.Struct.Uint16(0))
}

func (s SegTypeHopReq) SetType(v PathSegType) {
	s.Struct.SetUint16(0, uint16(v))
}

// SegTypeHopReq_List is a list of SegTypeHopReq.
type SegTypeHopReq_List struct{ capnp.List }

// NewSegTypeHopReq creates a new list of SegTypeHopReq.
func NewSegTypeHopReq_List(s *capnp.Segment, sz int32) (SegTypeHopReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return SegTypeHopReq_List{l}, err
}

func (s SegTypeHopReq_List) At(i int) SegTypeHopReq { return SegTypeHopReq{s.List.Struct(i)} }

func (s SegTypeHopReq_List) Set(i int, v SegTypeHopReq) error { return s.List.SetStruct(i, v.Struct) }

func (s SegTypeHopReq_List) String() string {
	str, _ := text.MarshalList(0xca1e844241cf650f, s.List)
	return str
}

// SegTypeHopReq_Promise is a wrapper for a SegTypeHopReq promised by a client call.
type SegTypeHopReq_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReq_Promise) Struct() (SegTypeHopReq, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReq{s}, err
}

type SegTypeHopReply struct{ capnp.Struct }

// SegTypeHopReply_TypeID is the unique identifier for the type SegTypeHopReply.
const SegTypeHopReply_TypeID = 0xc340ede57616f2e8

func NewSegTypeHopReply(s *capnp.Segment) (SegTypeHopReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegTypeHopReply{st}, err
}

func NewRootSegTypeHopReply(s *capnp.Segment) (SegTypeHopReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegTypeHopReply{st}, err
}

func ReadRootSegTypeHopReply(msg *capnp.Message) (SegTypeHopReply, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReply{root.Struct()}, err
}

func (s SegTypeHopReply) String() string {
	str, _ := text.Marshal(0xc340ede57616f2e8, s.Struct)
	return str
}

func (s SegTypeHopReply) Entries() (SegTypeHopReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReplyEntry_List{List: p.List()}, err
}

func (s SegTypeHopReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegTypeHopReply) SetEntries(v SegTypeHopReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated SegTypeHopReplyEntry_List, preferring placement in s's segment.
func (s SegTypeHopReply) NewEntries(n int32) (SegTypeHopReplyEntry_List, error) {
	l, err := NewSegTypeHopReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return SegTypeHopReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SegTypeHopReply_List is a list of SegTypeHopReply.
type SegTypeHopReply_List struct{ capnp.List }

// NewSegTypeHopReply creates a new list of SegTypeHopReply.
func NewSegTypeHopReply_List(s *capnp.Segment, sz int32) (SegTypeHopReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegTypeHopReply_List{l}, err
}

func (s SegTypeHopReply_List) At(i int) SegTypeHopReply { return SegTypeHopReply{s.List.Struct(i)} }

func (s SegTypeHopReply_List) Set(i int, v SegTypeHopReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegTypeHopReply_List) String() string {
	str, _ := text.MarshalList(0xc340ede57616f2e8, s.List)
	return str
}

// SegTypeHopReply_Promise is a wrapper for a SegTypeHopReply promised by a client call.
type SegTypeHopReply_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReply_Promise) Struct() (SegTypeHopReply, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReply{s}, err
}

type SegTypeHopReplyEntry struct{ capnp.Struct }

// SegTypeHopReplyEntry_TypeID is the unique identifier for the type SegTypeHopReplyEntry.
const SegTypeHopReplyEntry_TypeID = 0xacf8185a51a9f1b4

func NewSegTypeHopReplyEntry(s *capnp.Segment) (SegTypeHopReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegTypeHopReplyEntry{st}, err
}

func NewRootSegTypeHopReplyEntry(s *capnp.Segment) (SegTypeHopReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegTypeHopReplyEntry{st}, err
}

func ReadRootSegTypeHopReplyEntry(msg *capnp.Message) (SegTypeHopReplyEntry, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReplyEntry{root.Struct()}, err
}

func (s SegTypeHopReplyEntry) String() string {
	str, _ := text.Marshal(0xacf8185a51a9f1b4, s.Struct)
	return str
}

func (s SegTypeHopReplyEntry) Interfaces() (PathInterface_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathInterface_List{List: p.List()}, err
}

func (s SegTypeHopReplyEntry) HasInterfaces() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegTypeHopReplyEntry) SetInterfaces(v PathInterface_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInterfaces sets the interfaces field to a newly
// allocated PathInterface_List, preferring placement in s's segment.
func (s SegTypeHopReplyEntry) NewInterfaces(n int32) (PathInterface_List, error) {
	l, err := NewPathInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return PathInterface_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SegTypeHopReplyEntry) Timestamp() uint32 {
	return s.Struct.Uint32(0)
}

func (s SegTypeHopReplyEntry) SetTimestamp(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SegTypeHopReplyEntry) ExpTime() uint32 {
	return s.Struct.Uint32(4)
}

func (s SegTypeHopReplyEntry) SetExpTime(v uint32) {
	s.Struct.SetUint32(4, v)
}

// SegTypeHopReplyEntry_List is a list of SegTypeHopReplyEntry.
type SegTypeHopReplyEntry_List struct{ capnp.List }

// NewSegTypeHopReplyEntry creates a new list of SegTypeHopReplyEntry.
func NewSegTypeHopReplyEntry_List(s *capnp.Segment, sz int32) (SegTypeHopReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegTypeHopReplyEntry_List{l}, err
}

func (s SegTypeHopReplyEntry_List) At(i int) SegTypeHopReplyEntry {
	return SegTypeHopReplyEntry{s.List.Struct(i)}
}

func (s SegTypeHopReplyEntry_List) Set(i int, v SegTypeHopReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegTypeHopReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xacf8185a51a9f1b4, s.List)
	return str
}

// SegTypeHopReplyEntry_Promise is a wrapper for a SegTypeHopReplyEntry promised by a client call.
type SegTypeHopReplyEntry_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReplyEntry_Promise) Struct() (SegTypeHopReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReplyEntry{s}, err
}

const schema_8f4bd412642c9517 = "x\xda\x94X}l\x1c\xe5\xd1\x9fy\xf6|\xe78>" +
	"\xdfmv\x0d\x91_\xbd\\\x9b\x82\xf2!ba\x87\x14" +
	"\x14\x01\x8e\x9d\xcfKm\xf0s\x97\xb4\x80\x12\x95\x8d\xef" +
	"\xb1\xbdp\xbe\xbb\xdc\xae\x9d\x18A\xdd \xd2\xd2\xb4\x15" +
	"P\x88\x0a\x85\xa8\x09\x10\x88\xdbD%\xd4|\xa5-*" +
	"\x82\xb4%J\xf9\xa8\xa8P#\x0a!%\x90\x00\x95H" +
	"\x08\x0dNC\xb7\x9a\xdd\xbd\xdd\xcd\xfa\x1c\xe8\x7f{;" +
	"\xb3\xf3\xcc\xfcf\xe67\xf3\xdc%\xf7D\x17\xb2\x96\x9a" +
	"\xc7\xa6\x00\xf0RM\xd4\xfa\xe4\xf1\xdd\x8f~x\xf2\xe6" +
	"\xef\x83\x1cG\xeb\xfc-\x17\xe7\xa6\xbd\xfe\x8d;\xa1\x06" +
	"c\x00\xca\xb3\x91\x83\xca\xbe\x08==\x1fi\x03\xb4\xe6" +
	"\xbeu\xe5\xce\x91\x99cw\x00oB\xb4\x8e\xcc_\xb4" +
	"\xa2\xe5\xd4+;\\\xe5\xe3\x91\xd3\xca\xe7\xb6\xf2xd" +
	"=\xa0u\xf2\xe0\xf8\xb7\x9f\xdb\xff\xf6f\xe0q\x0cZ" +
	"f\xa4\xb2\xaaf\xbf\xa2\xd5\xd0\xd3\x9a\x9a\xf7\x01\xad&" +
	"\xf9\xc1\xa5\xef\x967\xde\x19R\xb6\xcd-\x89>\xa1t" +
	"E\xe9)\x1d%/\x96\xbe\xb0td\xec\x81\x0f\xee&" +
	"]\xe6\xeb.a\xb18F\x14=\xbaWYG\xda\xf3" +
	"\x06\xa2\xd7H\x80\xd6\xd6\xa3\xea\xe1Y\xd3\xbfso\xb5" +
	"\x00\xa7\xd4\xedW\x1a\xeb\xe8I\xae#\xd3\xdbo\x9d\xba" +
	"s\xfe\xc2\xe1-!\xd3\xb6\x1b\xedu\x07\x95.[7" +
	"]G\xf1\x1d\xebx{\xd3c\x9b\xa2\x0fT\xb3\xbb\xa3" +
	"\xee\x03e\x8f\xad\xbb\xdb\xb6{\xf0o\x9b\x8f\xbeS\xf3" +
	"\xf2\x03\xc0\x1bQ\xb2>|\xf8\xc57[\x1a\xff\xf0\"" +
	"4b\x0c\x01\x94\xd7\xea\x0e\x02*\x7f\xb5\xadz\xa0\x86" +
	"P\x93\xc8X\xcb\xd4\xbf(WN\xbd\x0c`\x9e\x98\xfa" +
	"-\x04\xb4\xa6\xb5lkY]{\xcdh\x15\x1f\xe6\x8d" +
	"\xd73Tj\xe2\xf4\x1d\xc6\xc9\x89\xb1\xe3\xa3\xfc\xfa\xe9" +
	"\x9f\xed\x0a\x9b\xb6\xb5\xe7\xc7\xa7\xa1\xb2\xc4\xd6n\x8f\xff" +
	"\x0a\xd0\xfa\xcaE\xf7\xac\xaf\x99\xd9\xf4D\xd5\xf4\x1d\x8f" +
	"?\xa1\x8c\xdb\xca\x9f\xc6\xc9k\xeb\x95\x03\xd7\x1e\xdbr" +
	"\xcbX\xd5\xc2\x98\xdfpBio8\x9f\x80k \xe5" +
	"\xd6wk\xbff\xbc\xf5\xf2\xd3\xc0/\xc0\xc0\xa7\x8e\x1f" +
	"\xcf6\xb4\xa2\xf2R\x03}\xb7\xaf\x81\xfc8z\xe2\xbc" +
	"\xa1#\xff\\\xf8B5\x98E\xe2\x03e]\x82\x9e\x06" +
	"\x12\x14\xa1\x07,\x8f\xa3\x14V\xde\x9a\xf8\x85\xb2\x83\x94" +
	"\xe7mO\xa4\x08\xbc\x8f\x86~ZZ\xd9l\xed\x0bY" +
	"\xb6\x91\x1eM\x1eV\x9eL\xd2\xd3\x9e$y\x91\x10\xaf" +
	"\xb4w\xdc~\xc1\xfej\xf5\xc9\xe5\x83\xca\x1a\x99\x9e\xae" +
	"\x93\xc9\x8b\x1d\xef]\xf8\xe0\xce\x87\xc4\x81j\xba\xc3\xf2" +
	"^e\xa3\xad{\xab\xad\xbbF^\xfd\xf4\xd0\xac\x97\xde" +
	" \xe0\x98\x0f\x1c\xe9\xce\xdb*\xafEe\x8f\xad\xbc[" +
	"&'\xde|\xe77\x8f\xfe\xe0\x9e\x99\xefWM`\xd7" +
	"\xb4&T\xd6L\xb3\xdd\x98F\xda\xf9C\x99o6\xbd" +
	"v\xea\xfd\xaau\xaf\xecW\x1a\x15\xbb\xee\x15r\xe3\xf2" +
	"\x99o|\xaf\xafq\xdf\xc7\xd5,+\xed\xca\x09\xa5\xcb" +
	"VN+\x94\xbf\xb6\xf7\xae\x9a\xfd\xd4\xb1\xc4\xf1\xaa\xca" +
	"\xa3\xca^e\x8f\xad\xbc\xdbV~\xf6\xb9\x0d\xa3?|" +
	"\xe3\xd1S\xd5\xbc\xf8\x7f\xf5\x842[\xa5\xa7\x8bT\xf2" +
	"\xa2\xbe\xe9\xad_\xf6]td\x1c\xf8y\x18(\xc0F" +
	"fw\xc9*\xf50\xa0r\x9dJV\x7f\xfd\xd4\xcd\xcb" +
	"\xc6\x1e\xdes\xbaZ\x9f>\xa9\x9eP\x9e\xb7\xad\xfeN" +
	"%\x1c\x8c\x1e\xbdX\xc85\xf70\xadT(-H/" +
	"M\x17z\x8b\x19\xb1nPH\x86\xd9\x8d\xc8#R\x04" +
	" \x82\x00r\xbc\x15\x80\xd7J\xc8/d\x98\xd2{\xd3" +
	"\x8b\x0dl\x00\xec\x96\x10\xa7\x00\xa3\xc7\x90\xadn\xcd\xec" +
	"\xef\x12\xa6\x96\xd3\xcc6\xad\xf9\xea\xa2)\xc8^\xadg" +
	"o\xf6\x1c\x00~\xa1\x84\xfc\x12\x86\x88*\xd2\xbb\xb9t" +
	"\xc6,\x09\xf9\xa5\x0c\x13\x85\xa2)\xb0\x1e\x18\xd6\x03\xa6" +
	"t#\xa7\x19\xf6IS&\x9c\xb4t}\xaer\x18\x00" +
	"\x1d\x92\xf4\x0e\xd1:\x00\xf8j\x09y\xbf\x7f\x88\x98\x01" +
	"\xc0o\x90\x90\xe7\x19\xca\x0cUd\x00\xb2~=\x00\xef" +
	"\x97\x90\xdf\xceP\x96PE\x09@\xdeH_\xdf\"!" +
	"\xbf\x83\xe1H\xafs\x0a\xc6\x81a\x1c06`\x0eb" +
	"\x0c\x18\xc6\x00-\xbd`\x8ar\xaf\xd6\x03\x92\xf0PI" +
	"\xfa|\x09H/G\xc4\x86\xd2J}@`-0\xac" +
	"\x0dD\x81v\x14\x191\x94\xca\x88R~8\x04\xfb\x02" +
	"\x17v\x95a[Y\x18\x83y\xd3;\xf6l\x03\xd9E" +
	"\xe9\xb6k\xae^\xdce\xf4\x91\x85+*\x16\x94-\xd8" +
	"\x04\x90\xbd\x0b%\xcc>\x88\x0c\xe3hY6\x10\xca\xfd" +
	"\xd8\x0a\x90\xbd\x97\x04\xdbH\xc0\xfec\xd9`([\xb1" +
	"\x03 {\x1f\x09\x1e!\x81\xf4\xb9e\x03\xa2l\xc7\x0c" +
	"@v\x1b\x09v\x91 r\xc6R1B\x85m\x0bv" +
	"\x92`\x8c\x045\xff\xb6T\xac!\x82\xc0\xb5\x00\xd9\xc7" +
	"I\xf0[\x12DO[*Fiz\xe2m\x00\xd9g" +
	"H\xf0\"\x09b\xe3\x96j\xd7\xfd\xf3X\x06\xc8\xfe\x9e" +
	"\x04\x07HP\xfb\x99\xa5b-\x80\xf2\x92m\xeaO$" +
	"x\x9d\x04SNY*N\xa1\x09\x81?\x03\xc8\xbeN" +
	"\x82C$\xa8\xfb\x97\xa5b\x1d\x80\xf2w\xdc\x0c\x90=" +
	"D\x82\x8fH0\xf5SK\xc5\xa9\x00\xca1\\\x01\x90" +
	"=J\x82\x93$\xa8?i\xa9XO\xd4m\x1f\xfe1" +
	"\x09\xce\x90 \xfe\x89\xa5b\x9c\xa6\xb6\xed\xeeg$\x88" +
	"0\x86r\x03\xaa\xd8@\xc3\x83\x11Tg\xe8}-c" +
	"(\xe9\xb9J\x91\xa6\x06\x0b\x860!:R\xd2\xcc\xfe" +
	"\x8cX\x87I\x9f\x81\x011\x09h9\x92R\x1ep\x18" +
	"\x93>s\xb8R\xcdp\x9a\x11\x90\xbe\xf5x3,\x8d" +
	"\x95\xf2\xf4\xb57\xc8]yY\x0c]]4\xf5^\xd4" +
	"{4S/\x16\x00\x93\xfePvu\xf4^\xd7Fj" +
	"\xdd\xa00LL\xfa\xfbNX\xc3=\xc5\xa3MWn" +
	"\x88\xf2\x90\xde#\xd2\x18\xa0\x0dL\xfa\x93\xb7\xaaZ)" +
	"?\x0c\xe4\x8e\xc7~\xbe\xcb\xae\x90\xa4\xde\xd2\xe3\xd9\xe8" +
	"[9\\\x12\xcb!U,9pzc'\xa4\x81\xa4" +
	"@v0\xe9\x0fHGg\xc4,k=\"\x9d\xabt" +
	"q\x88I\xda\xb3i\xdf\xc3P\x1fv\xf8\xf47\"\x0a" +
	"fY\x0f\xb6\xbaG\xb9N\xabW\xa1\xc2\xb4C\x11R" +
	"O\x98\x06[}\x1a\x94=\x1e\x9c\xe3\xf3\xe0\xd9\xd4\x97" +
	" \xe6\x9d\x84\x073n\xca\xf5\x1e-A)\x0f\x05\xb0" +
	"\x02\x80\xd7K\xc8\xa73\xb4\x8c\x8c\x18\xa2P\x1d\xa83" +
	"\xff8}\xd9\xa6e\xad?\xf7\x80\x9c\xe0}F\xack" +
	"\xee\xcdkR\x9fA\xae'\xefr\xf8qvG\xd0\xf7" +
	"\xbbm*\x90\xe7.\xf0}\x1f)\x8b\xde\xb20\xfa\x11" +
	"\x81!\x02\xb6\xf5\xeb\xb9\x9c(T~N>1P\xe3" +
	"\xf5\x18X\x00d\xf9'\xfe.$7\xce\xf0\x97mY" +
	"\x9ec\xb9\xd8\xf6\xa0\xe8\xd4\x0b7\xad\x1c.\xa1\x88-" +
	"\x13\xc5\x04\x0d\x1d>\xddC\xe0\xfe\x1b\x01\xf8}\x12\xf2" +
	"G\xc8]\xe6@\xbd=\x03\xc0\xb7I\xc8w\x05\xa6\xc1" +
	"\xe8f\x00\xbeKB\xfe\x0cC\x94\x9c`\x9f$\xc51" +
	"\x09\xf9\xab\x0c\xe5\x08:\xc1\xfey-\x00? !?" +
	"\xcaP\xaea6\xe7\xc9G(\xa5\x87$\xe4g\x18Z" +
	"f\xd1\xd4\xf2\x9d\x9a\x09\x09Q\xe8\x19\xf6\xa8\xdb~\xbd" +
	"\xbcX\x0240\x0a\x0c\xa3\x80\xd6\x80^\xd0\x07\xb4|" +
	"\x07j\x85\xdcz=g\xf6\x03x\xb3\"\xef\x04&H" +
	"\xdf\xab:\x0f\x1e\xb7\xea4\xa3\xb3H\xdd\x0e\xb1b!" +
	"\xa0\xe6\x01\xe7\xa8\xa5h\xb0\x06\xc4\x1e\x94\xa1\xda\x95\x9c" +
	"\xa9\xe2\xb6n\xa5\xc1\x0d3\xdc\x187\xbau5\x8by" +
	"\x8d\xbe\x12\x12\xc3%\xff\x8c\x84e\xf6\xbd\xfa\x7f\xb3\xe7" +
	"f\x0eOv\x86\xd3\xb8n\xdf.)\x98e\xb4\xc7`" +
	"\xbdw\xca\x12\x9a\xcf\x8b%\xe47\xf8\x83|M\xc6\x1f" +
	"\xee^\xeaD\x87?\xdd\xbf\xdc\\\xb6L}@\x18\xa6" +
	"6\x00X\xaa\xe0\xfd\x05\xb3zy\xd1H\x99\x04\xc9\xb9" +
	"V\x1a\x0c\xecl\xb4\xd9\xb0D\xa9X\xf6\x86wJ\xcb" +
	"\xe5\xca\xc6\xe4\x1d\x90\xd2\x9a\x97\x89\"\x8f`\xe0J " +
	"c\xc7\xc8\xb2\xee\xecb\xcd\xd4\x82\xa7\xde\xe66\xdcb" +
	"\x1f\x9av*\xc1+$\xe4\xcb\x19Z\xe5\xe2\xa0)\xca" +
	"\x9dEt&\x81\x01>\x14\x9ei\xb74\xaa\xafYR" +
	"\xd89\xdb\xb7\xe6e\xdd)\xdb\x97P\xa6V\xb8\x99\xea" +
	"\x0e\x10Z\x17\xa5\xaaSB~-C\xea<\xca\xd4*" +
	"\xcaT\xb7\x84|5C+\xaf\x99\xba9\x98\x13DH" +
	"u\xc0\xb0\x8ej\xbeX\xe8\xa3\x97\x80\xa2\xf2n\x84P" +
	"\x13\x86Q\xd9\x0bC\xf8\x05\x0a)Qe\x95:'\x85" +
	"{\x17\xc0P\x89b%\xf8\x04\xb1 YT=\x8b\xb7" +
	"\xd2*\xb9\xc1\xdd\x1a+\xb1n\x9c\xe1o\x8d2\xabu" +
	"\x82\xddD\xa8\xdc.!\xbf\x8b\x18\x05\x03\x97^\xf9\xc7" +
	"\xad\xc00\xe2P\xc7 \x91gIB\xfe#\x86\xb1\x9c" +
	"aVR\x113\xca=^Z\x06\xb4\x0d\x94\x0b\x83\xb0" +
	"\xaaTSo^\xeb3\xda\xfaK\x8bz\xfb\x021M" +
	"_\xf2\xeeU\xca\x1f\xbf\xbaw\xf2\xb1\xe46\\\xcc," +
	"\x87\x1b\x8ejy\xa1\x84\xbc3\x10Z\x9a\xa2X.!" +
	"_I\xa1\xb9y\xe47\xfbyL\xd0J\x83I\xff\xef" +
	"\x0dw\xa2\xf4\x17\x0d\xd3\x9f7\xde\xe5%\xb0\x07eM" +
	"\xcd\x846\xbd\x87\xb40\xe9_\xf6\xaa\x8e\xa4@\x9e%" +
	"''\x81,\xcf\xf1\x17\xe6\x849\\\x12\x98\xb0\xbe{" +
	"\xf9Cub\xf4\xd4v\xb2\x96\x98\x90\xdb\xf6l\xba\xcd" +
	"\xa1\xb7In<*\x9b\xac3\"\x13;\xa32\x8c\x9c" +
	"Y\x14\x1b.\x89\x10\xb0\xe5j\xfdq\xa3\xdf\x1f\x1e\x95" +
	"\xadj\x0d4\x88Me\x9dz\x01R\xf6\x1c\xf0\x06I" +
	"I\xd8\xafo\x82D\xf0\xf59\x1b\xf9,Jw\xf8V" +
	"\x9a\x90\xfe\xb5\xd5\xbc\x9c\xe1\xa7\xbf\xd2\xc5<\xe3:\x99" +
	"\x0f\xd2\x7f\xcc\xc1=H\xfb\x09\xc0\x98i\xe6=F\xf5" +
	"J\"8\xd1\x82\x95\xd10\xe9\xf5\xf4\x7f^\xcf\xbc\x1b" +
	"\xfc\x17\x99M\xd1\xec\x19\xfe\x12\x17Uj\x84\x8b%\xe4" +
	"\x97\xb3\xd0Jv\xeeJ\x9f@*m\xfd\xde\x9d/p" +
	"b\xc6_\xa1*'\xb6t\xb8'\x12\xa3\x8br\xb9X" +
	"^T\xb4\x99\xd1\xcd\xf8\xc4\xa0\xbd\x7fp\xaa\x06\x1d(" +
	"\x82\xaa\xd7\xces\xe2\xe9\xfd\xd7R\xd5\xf4r\x17\x82f" +
	"-\x17\xcb\x95\x0d'0'\x8a \x96vY\xb1\xd0\xb6" +
	"\x9b\xd0KC\x97V\xb6s\xfa\xf1\xf5/^\xd5\xfd\xa4" +
	"\x05\xea\xb75H_\x11\x97\xbef\x04\x8a\x9au;\xa7" +
	"w-\xf0\x8b\xfa\xec\xb6\x09^\xf1\xdbtcQ\xb1," +
	"*\x9b\xeb\x7f\x03\x00\x00\xff\xff`M\x86\xd5"

func init() {
	schemas.Register(schema_8f4bd412642c9517,
		0x877af4eba6adb0f3,
		0x88b4277fa83dde2d,
		0x8adfcabe5ff9daf4,
		0x8f8172e4469c111a,
		0x91ea9bb47f46c346,
		0x947e1828e214e89d,
		0x95794035a80b7da1,
		0x9b0685a785df42e9,
		0x9bce05e1e88ad9da,
		0xa5cff7314a4335e5,
		0xa94f085c31a03112,
		0xacf8185a51a9f1b4,
		0xb21a270577932520,
		0xb47c95e958cccfff,
		0xb7cede732308e432,
		0xc340ede57616f2e8,
		0xc4c61531dcc4a3eb,
		0xc5ff2e54709776ec,
		0xca1e844241cf650f,
		0xcc65a2a89c24e6a5,
		0xd7c92876b75c115d,
		0xe7279389a6bbe1dc,
		0xe7f7d11a5652e06c,
		0xf0c5156786d72738,
		0xf10fe9b6293ee63f,
		0xf7a6d78ba978beb9,
		0xf9e52567abde1a0c,
		0xfab1a3b4477ab6b3)
}
