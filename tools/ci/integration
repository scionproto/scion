#!/bin/bash

. tools/ci/common.sh

go_integration() {
    ./docker.sh exec "set -eo pipefail; integration/go_integration |& tee -a logs/integration.run"
}

revocation() {
    echo "========> ($(date -u --rfc-3339=seconds)) End2end: starting"
    ./docker.sh exec "set -eo pipefail; time bin/end2end_integration -log.console error $DOCKER_BE |& tee -a logs/integration.run"
    [ "$?" -eq 0 ] || return 1
    echo "========> ($(date -u --rfc-3339=seconds)) End2end: success"
    ./docker.sh exec "set -eo pipefail; integration/revocation_test.sh |& tee -a logs/integration.run"
}

e2e_integration() {
    ./docker.sh exec "set -eo pipefail; integration/e2e_integration $1 |& tee -a logs/integration.run"
}

run_tests() {
    result=0
    go_integration
    result=$((result+$?))
    revocation
    result=$((result+$?))
    if [ $result -eq 0 ]; then
        echo "========> ($(date -u --rfc-3339=seconds)) All integration tests successful"
    else
        echo "========> ($(date -u --rfc-3339=seconds)) $result integration tests failed"
    fi
    return $result
}

stop_containers() {
    # Make sure all compose controlled containers are stopped
    if [ -n "$DOCKER_BE" ]; then
        ./docker.sh exec "set -eo pipefail; ./tools/dc down |& tee -a logs/integration.run"
    fi

    if ./docker.sh exec "test -e gen/jaeger-dc.yml"; then
        ./docker.sh exec "./tools/dc collect_logs jaeger logs/docker"
        ./docker.sh exec "./tools/dc jaeger down"
    fi
}

./docker.sh exec "set -x; ./scion.sh topology -t ${DOCKER_BE:+ -d -n 172.21.0.0/16 -c topology/Tiny.topo}" ||\
    { echo "Failed to create topology"; stop_containers; exit 1; }
./docker.sh exec "set -eo pipefail; ./scion.sh run nobuild | grep -v "started" |& tee logs/integration.run"
./docker.sh exec "set -eo pipefail; ./scion.sh status |& tee logs/integration.run"

if [ -n "$DOCKER_BE" ]; then
    ./docker.sh exec "set -eo pipefail; ./tools/dc start tester* |& tee -a logs/integration.run"
fi

sleep 5

COMMAND="$1"
shift
case "$COMMAND" in
    go_integration|revocation)
        "$COMMAND"; result=$? ;;
    e2e_integration)
        e2e_integration $1; result=$? ;;
    *) run_tests; result=$? ;;
esac

# Collect metrics from scion processes.
if [ -n "$DOCKER_BE" ]; then
    echo "Metrics collection for Docker Backend not implemented"
else
    ./docker.sh exec ./tools/ci/get_metrics
    result=$((result+$?))
fi
# Stop scion
./docker.sh exec "set -eo pipefail; { ./scion.sh status && ./scion.sh stop; } |& tee -a logs/integration.run"

stop_containers

exit $result
