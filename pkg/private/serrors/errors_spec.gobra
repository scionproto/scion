// Copyright 2025 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file provides a specification to the function 'New'.
// The specification cannot currently be added to the file 'errors.go'
// where the original definition of 'New' is because that file tries to
// import a third-party package for which we do not yet provide
// specification ("go.uber.org/zap/zapcore").

// +gobra

package serrors

import "github.com/scionproto/scion/gobra/utils"

// New creates a new error with the given message and context.
preserves forall i int :: { &errCtx[i] } 0 <= i && i < len(errCtx) ==>
	acc(&errCtx[i], utils.ReadPerm)
ensures   res != nil && res.ErrorMem()
ensures   res.IsDuplicableMem()
ensures   isComparable(res)
decreases
func New(msg string, errCtx ...interface{}) (res error)

// Wrap wraps the cause with the msg error and adds context to the resulting
// error. The returned error implements Is and Is(msg) and Is(cause) returns
// true.
requires  cause.ErrorMem()
preserves forall i int :: { &errCtx[i] } 0 <= i && i < len(errCtx) ==>
	acc(&errCtx[i], utils.ReadPerm)
ensures   res != nil && res.ErrorMem()
ensures   res.ErrorMem() --* cause.ErrorMem()
decreases
func Wrap(msg string, cause error, errCtx ...interface{}) (res error)