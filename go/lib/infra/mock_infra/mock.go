// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/lib/infra (interfaces: Verifier)

// Package mock_infra is a generated GoMock package.
package mock_infra

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	addr "github.com/scionproto/scion/go/lib/addr"
	infra "github.com/scionproto/scion/go/lib/infra"
	signed "github.com/scionproto/scion/go/lib/scrypto/signed"
	crypto "github.com/scionproto/scion/go/pkg/proto/crypto"
)

// MockVerifier is a mock of Verifier interface.
type MockVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockVerifierMockRecorder
}

// MockVerifierMockRecorder is the mock recorder for MockVerifier.
type MockVerifierMockRecorder struct {
	mock *MockVerifier
}

// NewMockVerifier creates a new mock instance.
func NewMockVerifier(ctrl *gomock.Controller) *MockVerifier {
	mock := &MockVerifier{ctrl: ctrl}
	mock.recorder = &MockVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifier) EXPECT() *MockVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockVerifier) Verify(arg0 context.Context, arg1 *crypto.SignedMessage, arg2 ...[]byte) (*signed.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Verify", varargs...)
	ret0, _ := ret[0].(*signed.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockVerifierMockRecorder) Verify(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVerifier)(nil).Verify), varargs...)
}

// WithIA mocks base method.
func (m *MockVerifier) WithIA(arg0 addr.IA) infra.Verifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithIA", arg0)
	ret0, _ := ret[0].(infra.Verifier)
	return ret0
}

// WithIA indicates an expected call of WithIA.
func (mr *MockVerifierMockRecorder) WithIA(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithIA", reflect.TypeOf((*MockVerifier)(nil).WithIA), arg0)
}

// WithServer mocks base method.
func (m *MockVerifier) WithServer(arg0 net.Addr) infra.Verifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithServer", arg0)
	ret0, _ := ret[0].(infra.Verifier)
	return ret0
}

// WithServer indicates an expected call of WithServer.
func (mr *MockVerifierMockRecorder) WithServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithServer", reflect.TypeOf((*MockVerifier)(nil).WithServer), arg0)
}
