# This build file is layered onto the openwrt_<target>_SDK tree which is
# imported as an external dependency. It takes care of:
# * Wrapping SCION binaries from the SCION build, into ipk packages.
# * Exporting the musl-gcc compiler suite as a bazel toolchain.

load("@@//dist/openwrt:ipk.bzl", "ipk_pkg")
load("@@//dist/openwrt:musl_toolchain.bzl", "musl_cc_toolchain")

package(default_visibility = ["//visibility:public"])

# Wrap scion binaries and configs into ipk. See rule in ipk.bzl
ipk_pkg(
    name = "common_ipk",
    pkg = "common",
    executables = [],
    initds = [],
    configsroot = "@@//dist/openwrt:configs",
    configs = [
        "@@//dist/openwrt:configs/topology.json",
        "@@//dist/openwrt:configs/keys/master0.key",
        "@@//dist/openwrt:configs/keys/master1.key",
    ],
    visibility = ["//visibility:public"],
)

ipk_pkg(
    name = "router_ipk",
    pkg = "router",
    executables = ["@@//router/cmd/router:router"],
    initds = ["@@//dist/openwrt:initds/router"],
    configsroot = "@@//dist/openwrt:configs",
    configs = [
        "@@//dist/openwrt:configs/router.toml",
    ],
    visibility = ["//visibility:public"],
    deps = ["common_ipk"], # Force sequential build; openwrt make isn't reentrant.
)

ipk_pkg(
    name = "gateway_ipk",
    pkg = "gateway",
    executables = ["@@//gateway/cmd/gateway:gateway"],
    initds = ["@@//dist/openwrt:initds/gateway"],
    configsroot = "@@//dist/openwrt:configs",
    configs = [
        "@@//dist/openwrt:configs/gateway.toml",
        "@@//dist/openwrt:configs/gateway.json",
    ],
    visibility = ["//visibility:public"],
    deps = ["router_ipk"], # Force sequential build; openwrt make isn't reentrant.
)

ipk_pkg(
    name = "control_ipk",
    pkg = "control",
    executables = ["@@//control/cmd/control:control"],
    initds = ["@@//dist/openwrt:initds/control"],
    configsroot = "@@//dist/openwrt:configs",
    configs = [
    	    "@@//dist/openwrt:configs/control.toml",
	    "@@//dist/openwrt:configs/crypto/as/README",
	    "@@//dist/openwrt:configs/certs/README",
    ],
    visibility = ["//visibility:public"],
    deps = ["gateway_ipk"], # Force sequential build; openwrt make isn't reentrant.
)

ipk_pkg(
    name = "dispatcher_ipk",
    pkg = "dispatcher",
    executables = ["@@//dispatcher/cmd/dispatcher:dispatcher"],
    initds = ["@@//dist/openwrt:initds/dispatcher"],
    configsroot = "@@//dist/openwrt:configs",
    configs = ["@@//dist/openwrt:configs/dispatcher.toml"],
    visibility = ["//visibility:public"],
    deps = ["control_ipk"], # Force sequential build; openwrt make isn't reentrant.
)

ipk_pkg(
    name = "daemon_ipk",
    pkg = "daemon",
    executables = ["@@//daemon/cmd/daemon:daemon"],
    initds = ["@@//dist/openwrt:initds/daemon"],
    configsroot = "@@//dist/openwrt:configs",
    configs = ["@@//dist/openwrt:configs/daemon.toml"],
    visibility = ["//visibility:public"],
    deps = ["dispatcher_ipk"], # Force sequential build; openwrt make isn't reentrant.
)

ipk_pkg(
    name = "tools_ipk",
    pkg = "tools",
    executables = ["@@//scion/cmd/scion:scion", "@@//scion-pki/cmd/scion-pki:scion-pki"],
    initds = [],
    configsroot = "@@//dist/openwrt:configs",
    configs = [],
    visibility = ["//visibility:public"],
    deps = ["daemon_ipk"], # Force sequential build; openwrt make isn't reentrant.
)

# Assemble a bazel toolchain out of the openwrt sdk binaries.
musl_cc_toolchain(target_arch = "x86_64")
