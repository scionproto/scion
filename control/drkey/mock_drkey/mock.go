// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/control/drkey (interfaces: Fetcher,Level1PrefetchListKeeper,ServiceEngine)

// Package mock_drkey is a generated GoMock package.
package mock_drkey

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	drkey "github.com/scionproto/scion/control/drkey"
	drkey0 "github.com/scionproto/scion/pkg/drkey"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// Level1 mocks base method.
func (m *MockFetcher) Level1(arg0 context.Context, arg1 drkey0.Level1Meta) (drkey0.Level1Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level1", arg0, arg1)
	ret0, _ := ret[0].(drkey0.Level1Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Level1 indicates an expected call of Level1.
func (mr *MockFetcherMockRecorder) Level1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level1", reflect.TypeOf((*MockFetcher)(nil).Level1), arg0, arg1)
}

// MockLevel1PrefetchListKeeper is a mock of Level1PrefetchListKeeper interface.
type MockLevel1PrefetchListKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockLevel1PrefetchListKeeperMockRecorder
}

// MockLevel1PrefetchListKeeperMockRecorder is the mock recorder for MockLevel1PrefetchListKeeper.
type MockLevel1PrefetchListKeeperMockRecorder struct {
	mock *MockLevel1PrefetchListKeeper
}

// NewMockLevel1PrefetchListKeeper creates a new mock instance.
func NewMockLevel1PrefetchListKeeper(ctrl *gomock.Controller) *MockLevel1PrefetchListKeeper {
	mock := &MockLevel1PrefetchListKeeper{ctrl: ctrl}
	mock.recorder = &MockLevel1PrefetchListKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLevel1PrefetchListKeeper) EXPECT() *MockLevel1PrefetchListKeeperMockRecorder {
	return m.recorder
}

// GetLevel1InfoArray mocks base method.
func (m *MockLevel1PrefetchListKeeper) GetLevel1InfoArray() []drkey.Level1PrefetchInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel1InfoArray")
	ret0, _ := ret[0].([]drkey.Level1PrefetchInfo)
	return ret0
}

// GetLevel1InfoArray indicates an expected call of GetLevel1InfoArray.
func (mr *MockLevel1PrefetchListKeeperMockRecorder) GetLevel1InfoArray() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel1InfoArray", reflect.TypeOf((*MockLevel1PrefetchListKeeper)(nil).GetLevel1InfoArray))
}

// Update mocks base method.
func (m *MockLevel1PrefetchListKeeper) Update(arg0 drkey.Level1PrefetchInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MockLevel1PrefetchListKeeperMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLevel1PrefetchListKeeper)(nil).Update), arg0)
}

// MockServiceEngine is a mock of ServiceEngine interface.
type MockServiceEngine struct {
	ctrl     *gomock.Controller
	recorder *MockServiceEngineMockRecorder
}

// MockServiceEngineMockRecorder is the mock recorder for MockServiceEngine.
type MockServiceEngineMockRecorder struct {
	mock *MockServiceEngine
}

// NewMockServiceEngine creates a new mock instance.
func NewMockServiceEngine(ctrl *gomock.Controller) *MockServiceEngine {
	mock := &MockServiceEngine{ctrl: ctrl}
	mock.recorder = &MockServiceEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceEngine) EXPECT() *MockServiceEngineMockRecorder {
	return m.recorder
}

// DeleteExpiredLevel1Keys mocks base method.
func (m *MockServiceEngine) DeleteExpiredLevel1Keys(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredLevel1Keys", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpiredLevel1Keys indicates an expected call of DeleteExpiredLevel1Keys.
func (mr *MockServiceEngineMockRecorder) DeleteExpiredLevel1Keys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredLevel1Keys", reflect.TypeOf((*MockServiceEngine)(nil).DeleteExpiredLevel1Keys), arg0)
}

// DeleteExpiredSecrets mocks base method.
func (m *MockServiceEngine) DeleteExpiredSecrets(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredSecrets", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpiredSecrets indicates an expected call of DeleteExpiredSecrets.
func (mr *MockServiceEngineMockRecorder) DeleteExpiredSecrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredSecrets", reflect.TypeOf((*MockServiceEngine)(nil).DeleteExpiredSecrets), arg0)
}

// DeriveASHost mocks base method.
func (m *MockServiceEngine) DeriveASHost(arg0 context.Context, arg1 drkey0.ASHostMeta) (drkey0.ASHostKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveASHost", arg0, arg1)
	ret0, _ := ret[0].(drkey0.ASHostKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveASHost indicates an expected call of DeriveASHost.
func (mr *MockServiceEngineMockRecorder) DeriveASHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveASHost", reflect.TypeOf((*MockServiceEngine)(nil).DeriveASHost), arg0, arg1)
}

// DeriveHostAS mocks base method.
func (m *MockServiceEngine) DeriveHostAS(arg0 context.Context, arg1 drkey0.HostASMeta) (drkey0.HostASKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveHostAS", arg0, arg1)
	ret0, _ := ret[0].(drkey0.HostASKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveHostAS indicates an expected call of DeriveHostAS.
func (mr *MockServiceEngineMockRecorder) DeriveHostAS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveHostAS", reflect.TypeOf((*MockServiceEngine)(nil).DeriveHostAS), arg0, arg1)
}

// DeriveHostHost mocks base method.
func (m *MockServiceEngine) DeriveHostHost(arg0 context.Context, arg1 drkey0.HostHostMeta) (drkey0.HostHostKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveHostHost", arg0, arg1)
	ret0, _ := ret[0].(drkey0.HostHostKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveHostHost indicates an expected call of DeriveHostHost.
func (mr *MockServiceEngineMockRecorder) DeriveHostHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveHostHost", reflect.TypeOf((*MockServiceEngine)(nil).DeriveHostHost), arg0, arg1)
}

// DeriveLevel1 mocks base method.
func (m *MockServiceEngine) DeriveLevel1(arg0 drkey0.Level1Meta) (drkey0.Level1Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveLevel1", arg0)
	ret0, _ := ret[0].(drkey0.Level1Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveLevel1 indicates an expected call of DeriveLevel1.
func (mr *MockServiceEngineMockRecorder) DeriveLevel1(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveLevel1", reflect.TypeOf((*MockServiceEngine)(nil).DeriveLevel1), arg0)
}

// GetLevel1Key mocks base method.
func (m *MockServiceEngine) GetLevel1Key(arg0 context.Context, arg1 drkey0.Level1Meta) (drkey0.Level1Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel1Key", arg0, arg1)
	ret0, _ := ret[0].(drkey0.Level1Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLevel1Key indicates an expected call of GetLevel1Key.
func (mr *MockServiceEngineMockRecorder) GetLevel1Key(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel1Key", reflect.TypeOf((*MockServiceEngine)(nil).GetLevel1Key), arg0, arg1)
}

// GetLevel1PrefetchInfo mocks base method.
func (m *MockServiceEngine) GetLevel1PrefetchInfo() []drkey.Level1PrefetchInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel1PrefetchInfo")
	ret0, _ := ret[0].([]drkey.Level1PrefetchInfo)
	return ret0
}

// GetLevel1PrefetchInfo indicates an expected call of GetLevel1PrefetchInfo.
func (mr *MockServiceEngineMockRecorder) GetLevel1PrefetchInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel1PrefetchInfo", reflect.TypeOf((*MockServiceEngine)(nil).GetLevel1PrefetchInfo))
}

// GetSecretValue mocks base method.
func (m *MockServiceEngine) GetSecretValue(arg0 context.Context, arg1 drkey0.SecretValueMeta) (drkey0.SecretValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1)
	ret0, _ := ret[0].(drkey0.SecretValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockServiceEngineMockRecorder) GetSecretValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockServiceEngine)(nil).GetSecretValue), arg0, arg1)
}
