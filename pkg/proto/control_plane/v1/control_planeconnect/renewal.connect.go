// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/control_plane/v1/renewal.proto

package control_planeconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	control_plane "github.com/scionproto/scion/pkg/proto/control_plane"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChainRenewalServiceName is the fully-qualified name of the ChainRenewalService service.
	ChainRenewalServiceName = "proto.control_plane.v1.ChainRenewalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChainRenewalServiceChainRenewalProcedure is the fully-qualified name of the ChainRenewalService's
	// ChainRenewal RPC.
	ChainRenewalServiceChainRenewalProcedure = "/proto.control_plane.v1.ChainRenewalService/ChainRenewal"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	chainRenewalServiceServiceDescriptor            = control_plane.File_proto_control_plane_v1_renewal_proto.Services().ByName("ChainRenewalService")
	chainRenewalServiceChainRenewalMethodDescriptor = chainRenewalServiceServiceDescriptor.Methods().ByName("ChainRenewal")
)

// ChainRenewalServiceClient is a client for the proto.control_plane.v1.ChainRenewalService service.
type ChainRenewalServiceClient interface {
	// RenewChain creates a chain from the chain request.
	ChainRenewal(context.Context, *connect.Request[control_plane.ChainRenewalRequest]) (*connect.Response[control_plane.ChainRenewalResponse], error)
}

// NewChainRenewalServiceClient constructs a client for the
// proto.control_plane.v1.ChainRenewalService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChainRenewalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChainRenewalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chainRenewalServiceClient{
		chainRenewal: connect.NewClient[control_plane.ChainRenewalRequest, control_plane.ChainRenewalResponse](
			httpClient,
			baseURL+ChainRenewalServiceChainRenewalProcedure,
			connect.WithSchema(chainRenewalServiceChainRenewalMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// chainRenewalServiceClient implements ChainRenewalServiceClient.
type chainRenewalServiceClient struct {
	chainRenewal *connect.Client[control_plane.ChainRenewalRequest, control_plane.ChainRenewalResponse]
}

// ChainRenewal calls proto.control_plane.v1.ChainRenewalService.ChainRenewal.
func (c *chainRenewalServiceClient) ChainRenewal(ctx context.Context, req *connect.Request[control_plane.ChainRenewalRequest]) (*connect.Response[control_plane.ChainRenewalResponse], error) {
	return c.chainRenewal.CallUnary(ctx, req)
}

// ChainRenewalServiceHandler is an implementation of the proto.control_plane.v1.ChainRenewalService
// service.
type ChainRenewalServiceHandler interface {
	// RenewChain creates a chain from the chain request.
	ChainRenewal(context.Context, *connect.Request[control_plane.ChainRenewalRequest]) (*connect.Response[control_plane.ChainRenewalResponse], error)
}

// NewChainRenewalServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChainRenewalServiceHandler(svc ChainRenewalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chainRenewalServiceChainRenewalHandler := connect.NewUnaryHandler(
		ChainRenewalServiceChainRenewalProcedure,
		svc.ChainRenewal,
		connect.WithSchema(chainRenewalServiceChainRenewalMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.control_plane.v1.ChainRenewalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChainRenewalServiceChainRenewalProcedure:
			chainRenewalServiceChainRenewalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChainRenewalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChainRenewalServiceHandler struct{}

func (UnimplementedChainRenewalServiceHandler) ChainRenewal(context.Context, *connect.Request[control_plane.ChainRenewalRequest]) (*connect.Response[control_plane.ChainRenewalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.control_plane.v1.ChainRenewalService.ChainRenewal is not implemented"))
}
