// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SCIONDMsg struct{ capnp.Struct }
type SCIONDMsg_Which uint16

const (
	SCIONDMsg_Which_unset              SCIONDMsg_Which = 0
	SCIONDMsg_Which_pathReq            SCIONDMsg_Which = 1
	SCIONDMsg_Which_pathReply          SCIONDMsg_Which = 2
	SCIONDMsg_Which_asInfoReq          SCIONDMsg_Which = 3
	SCIONDMsg_Which_asInfoReply        SCIONDMsg_Which = 4
	SCIONDMsg_Which_revNotification    SCIONDMsg_Which = 5
	SCIONDMsg_Which_ifInfoRequest      SCIONDMsg_Which = 6
	SCIONDMsg_Which_ifInfoReply        SCIONDMsg_Which = 7
	SCIONDMsg_Which_serviceInfoRequest SCIONDMsg_Which = 8
	SCIONDMsg_Which_serviceInfoReply   SCIONDMsg_Which = 9
	SCIONDMsg_Which_revReply           SCIONDMsg_Which = 10
	SCIONDMsg_Which_segTypeHopReq      SCIONDMsg_Which = 11
	SCIONDMsg_Which_segTypeHopReply    SCIONDMsg_Which = 12
)

func (w SCIONDMsg_Which) String() string {
	const s = "unsetpathReqpathReplyasInfoReqasInfoReplyrevNotificationifInfoRequestifInfoReplyserviceInfoRequestserviceInfoReplyrevReplysegTypeHopReqsegTypeHopReply"
	switch w {
	case SCIONDMsg_Which_unset:
		return s[0:5]
	case SCIONDMsg_Which_pathReq:
		return s[5:12]
	case SCIONDMsg_Which_pathReply:
		return s[12:21]
	case SCIONDMsg_Which_asInfoReq:
		return s[21:30]
	case SCIONDMsg_Which_asInfoReply:
		return s[30:41]
	case SCIONDMsg_Which_revNotification:
		return s[41:56]
	case SCIONDMsg_Which_ifInfoRequest:
		return s[56:69]
	case SCIONDMsg_Which_ifInfoReply:
		return s[69:80]
	case SCIONDMsg_Which_serviceInfoRequest:
		return s[80:98]
	case SCIONDMsg_Which_serviceInfoReply:
		return s[98:114]
	case SCIONDMsg_Which_revReply:
		return s[114:122]
	case SCIONDMsg_Which_segTypeHopReq:
		return s[122:135]
	case SCIONDMsg_Which_segTypeHopReply:
		return s[135:150]

	}
	return "SCIONDMsg_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SCIONDMsg_TypeID is the unique identifier for the type SCIONDMsg.
const SCIONDMsg_TypeID = 0x91ea9bb47f46c346

func NewSCIONDMsg(s *capnp.Segment) (SCIONDMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return SCIONDMsg{st}, err
}

func NewRootSCIONDMsg(s *capnp.Segment) (SCIONDMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return SCIONDMsg{st}, err
}

func ReadRootSCIONDMsg(msg *capnp.Message) (SCIONDMsg, error) {
	root, err := msg.RootPtr()
	return SCIONDMsg{root.Struct()}, err
}

func (s SCIONDMsg) String() string {
	str, _ := text.Marshal(0x91ea9bb47f46c346, s.Struct)
	return str
}

func (s SCIONDMsg) Which() SCIONDMsg_Which {
	return SCIONDMsg_Which(s.Struct.Uint16(8))
}
func (s SCIONDMsg) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s SCIONDMsg) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SCIONDMsg) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s SCIONDMsg) PathReq() (PathReq, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != pathReq")
	}
	p, err := s.Struct.Ptr(0)
	return PathReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasPathReq() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetPathReq(v PathReq) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathReq sets the pathReq field to a newly
// allocated PathReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewPathReq() (PathReq, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewPathReq(s.Struct.Segment())
	if err != nil {
		return PathReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) PathReply() (PathReply, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != pathReply")
	}
	p, err := s.Struct.Ptr(0)
	return PathReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasPathReply() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetPathReply(v PathReply) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathReply sets the pathReply field to a newly
// allocated PathReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewPathReply() (PathReply, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewPathReply(s.Struct.Segment())
	if err != nil {
		return PathReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) AsInfoReq() (ASInfoReq, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != asInfoReq")
	}
	p, err := s.Struct.Ptr(0)
	return ASInfoReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasAsInfoReq() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetAsInfoReq(v ASInfoReq) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsInfoReq sets the asInfoReq field to a newly
// allocated ASInfoReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewAsInfoReq() (ASInfoReq, error) {
	s.Struct.SetUint16(8, 3)
	ss, err := NewASInfoReq(s.Struct.Segment())
	if err != nil {
		return ASInfoReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) AsInfoReply() (ASInfoReply, error) {
	if s.Struct.Uint16(8) != 4 {
		panic("Which() != asInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return ASInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasAsInfoReply() bool {
	if s.Struct.Uint16(8) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetAsInfoReply(v ASInfoReply) error {
	s.Struct.SetUint16(8, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsInfoReply sets the asInfoReply field to a newly
// allocated ASInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewAsInfoReply() (ASInfoReply, error) {
	s.Struct.SetUint16(8, 4)
	ss, err := NewASInfoReply(s.Struct.Segment())
	if err != nil {
		return ASInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) RevNotification() (RevNotification, error) {
	if s.Struct.Uint16(8) != 5 {
		panic("Which() != revNotification")
	}
	p, err := s.Struct.Ptr(0)
	return RevNotification{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasRevNotification() bool {
	if s.Struct.Uint16(8) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetRevNotification(v RevNotification) error {
	s.Struct.SetUint16(8, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRevNotification sets the revNotification field to a newly
// allocated RevNotification struct, preferring placement in s's segment.
func (s SCIONDMsg) NewRevNotification() (RevNotification, error) {
	s.Struct.SetUint16(8, 5)
	ss, err := NewRevNotification(s.Struct.Segment())
	if err != nil {
		return RevNotification{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) IfInfoRequest() (IFInfoRequest, error) {
	if s.Struct.Uint16(8) != 6 {
		panic("Which() != ifInfoRequest")
	}
	p, err := s.Struct.Ptr(0)
	return IFInfoRequest{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasIfInfoRequest() bool {
	if s.Struct.Uint16(8) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetIfInfoRequest(v IFInfoRequest) error {
	s.Struct.SetUint16(8, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfInfoRequest sets the ifInfoRequest field to a newly
// allocated IFInfoRequest struct, preferring placement in s's segment.
func (s SCIONDMsg) NewIfInfoRequest() (IFInfoRequest, error) {
	s.Struct.SetUint16(8, 6)
	ss, err := NewIFInfoRequest(s.Struct.Segment())
	if err != nil {
		return IFInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) IfInfoReply() (IFInfoReply, error) {
	if s.Struct.Uint16(8) != 7 {
		panic("Which() != ifInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return IFInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasIfInfoReply() bool {
	if s.Struct.Uint16(8) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetIfInfoReply(v IFInfoReply) error {
	s.Struct.SetUint16(8, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfInfoReply sets the ifInfoReply field to a newly
// allocated IFInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewIfInfoReply() (IFInfoReply, error) {
	s.Struct.SetUint16(8, 7)
	ss, err := NewIFInfoReply(s.Struct.Segment())
	if err != nil {
		return IFInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) ServiceInfoRequest() (ServiceInfoRequest, error) {
	if s.Struct.Uint16(8) != 8 {
		panic("Which() != serviceInfoRequest")
	}
	p, err := s.Struct.Ptr(0)
	return ServiceInfoRequest{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasServiceInfoRequest() bool {
	if s.Struct.Uint16(8) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetServiceInfoRequest(v ServiceInfoRequest) error {
	s.Struct.SetUint16(8, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceInfoRequest sets the serviceInfoRequest field to a newly
// allocated ServiceInfoRequest struct, preferring placement in s's segment.
func (s SCIONDMsg) NewServiceInfoRequest() (ServiceInfoRequest, error) {
	s.Struct.SetUint16(8, 8)
	ss, err := NewServiceInfoRequest(s.Struct.Segment())
	if err != nil {
		return ServiceInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) ServiceInfoReply() (ServiceInfoReply, error) {
	if s.Struct.Uint16(8) != 9 {
		panic("Which() != serviceInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return ServiceInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasServiceInfoReply() bool {
	if s.Struct.Uint16(8) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetServiceInfoReply(v ServiceInfoReply) error {
	s.Struct.SetUint16(8, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceInfoReply sets the serviceInfoReply field to a newly
// allocated ServiceInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewServiceInfoReply() (ServiceInfoReply, error) {
	s.Struct.SetUint16(8, 9)
	ss, err := NewServiceInfoReply(s.Struct.Segment())
	if err != nil {
		return ServiceInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) RevReply() (RevReply, error) {
	if s.Struct.Uint16(8) != 10 {
		panic("Which() != revReply")
	}
	p, err := s.Struct.Ptr(0)
	return RevReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasRevReply() bool {
	if s.Struct.Uint16(8) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetRevReply(v RevReply) error {
	s.Struct.SetUint16(8, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRevReply sets the revReply field to a newly
// allocated RevReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewRevReply() (RevReply, error) {
	s.Struct.SetUint16(8, 10)
	ss, err := NewRevReply(s.Struct.Segment())
	if err != nil {
		return RevReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) SegTypeHopReq() (SegTypeHopReq, error) {
	if s.Struct.Uint16(8) != 11 {
		panic("Which() != segTypeHopReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasSegTypeHopReq() bool {
	if s.Struct.Uint16(8) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetSegTypeHopReq(v SegTypeHopReq) error {
	s.Struct.SetUint16(8, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegTypeHopReq sets the segTypeHopReq field to a newly
// allocated SegTypeHopReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewSegTypeHopReq() (SegTypeHopReq, error) {
	s.Struct.SetUint16(8, 11)
	ss, err := NewSegTypeHopReq(s.Struct.Segment())
	if err != nil {
		return SegTypeHopReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) SegTypeHopReply() (SegTypeHopReply, error) {
	if s.Struct.Uint16(8) != 12 {
		panic("Which() != segTypeHopReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasSegTypeHopReply() bool {
	if s.Struct.Uint16(8) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetSegTypeHopReply(v SegTypeHopReply) error {
	s.Struct.SetUint16(8, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegTypeHopReply sets the segTypeHopReply field to a newly
// allocated SegTypeHopReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewSegTypeHopReply() (SegTypeHopReply, error) {
	s.Struct.SetUint16(8, 12)
	ss, err := NewSegTypeHopReply(s.Struct.Segment())
	if err != nil {
		return SegTypeHopReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SCIONDMsg) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SCIONDMsg_List is a list of SCIONDMsg.
type SCIONDMsg_List struct{ capnp.List }

// NewSCIONDMsg creates a new list of SCIONDMsg.
func NewSCIONDMsg_List(s *capnp.Segment, sz int32) (SCIONDMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return SCIONDMsg_List{l}, err
}

func (s SCIONDMsg_List) At(i int) SCIONDMsg { return SCIONDMsg{s.List.Struct(i)} }

func (s SCIONDMsg_List) Set(i int, v SCIONDMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s SCIONDMsg_List) String() string {
	str, _ := text.MarshalList(0x91ea9bb47f46c346, s.List)
	return str
}

// SCIONDMsg_Promise is a wrapper for a SCIONDMsg promised by a client call.
type SCIONDMsg_Promise struct{ *capnp.Pipeline }

func (p SCIONDMsg_Promise) Struct() (SCIONDMsg, error) {
	s, err := p.Pipeline.Struct()
	return SCIONDMsg{s}, err
}

func (p SCIONDMsg_Promise) PathReq() PathReq_Promise {
	return PathReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) PathReply() PathReply_Promise {
	return PathReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) AsInfoReq() ASInfoReq_Promise {
	return ASInfoReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) AsInfoReply() ASInfoReply_Promise {
	return ASInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) RevNotification() RevNotification_Promise {
	return RevNotification_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) IfInfoRequest() IFInfoRequest_Promise {
	return IFInfoRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) IfInfoReply() IFInfoReply_Promise {
	return IFInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) ServiceInfoRequest() ServiceInfoRequest_Promise {
	return ServiceInfoRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) ServiceInfoReply() ServiceInfoReply_Promise {
	return ServiceInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) RevReply() RevReply_Promise {
	return RevReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) SegTypeHopReq() SegTypeHopReq_Promise {
	return SegTypeHopReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) SegTypeHopReply() SegTypeHopReply_Promise {
	return SegTypeHopReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathReq struct{ capnp.Struct }
type PathReq_flags PathReq

// PathReq_TypeID is the unique identifier for the type PathReq.
const PathReq_TypeID = 0xc4c61531dcc4a3eb

func NewPathReq(s *capnp.Segment) (PathReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PathReq{st}, err
}

func NewRootPathReq(s *capnp.Segment) (PathReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PathReq{st}, err
}

func ReadRootPathReq(msg *capnp.Message) (PathReq, error) {
	root, err := msg.RootPtr()
	return PathReq{root.Struct()}, err
}

func (s PathReq) String() string {
	str, _ := text.Marshal(0xc4c61531dcc4a3eb, s.Struct)
	return str
}

func (s PathReq) Dst() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathReq) SetDst(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PathReq) Src() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathReq) SetSrc(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s PathReq) MaxPaths() uint16 {
	return s.Struct.Uint16(16)
}

func (s PathReq) SetMaxPaths(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s PathReq) Flags() PathReq_flags { return PathReq_flags(s) }

func (s PathReq_flags) Refresh() bool {
	return s.Struct.Bit(144)
}

func (s PathReq_flags) SetRefresh(v bool) {
	s.Struct.SetBit(144, v)
}

func (s PathReq_flags) Hidden() bool {
	return s.Struct.Bit(145)
}

func (s PathReq_flags) SetHidden(v bool) {
	s.Struct.SetBit(145, v)
}

func (s PathReq) HpCfgs() (HPGroupId_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId_List{List: p.List()}, err
}

func (s PathReq) HasHpCfgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReq) SetHpCfgs(v HPGroupId_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHpCfgs sets the hpCfgs field to a newly
// allocated HPGroupId_List, preferring placement in s's segment.
func (s PathReq) NewHpCfgs(n int32) (HPGroupId_List, error) {
	l, err := NewHPGroupId_List(s.Struct.Segment(), n)
	if err != nil {
		return HPGroupId_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PathReq_List is a list of PathReq.
type PathReq_List struct{ capnp.List }

// NewPathReq creates a new list of PathReq.
func NewPathReq_List(s *capnp.Segment, sz int32) (PathReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PathReq_List{l}, err
}

func (s PathReq_List) At(i int) PathReq { return PathReq{s.List.Struct(i)} }

func (s PathReq_List) Set(i int, v PathReq) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReq_List) String() string {
	str, _ := text.MarshalList(0xc4c61531dcc4a3eb, s.List)
	return str
}

// PathReq_Promise is a wrapper for a PathReq promised by a client call.
type PathReq_Promise struct{ *capnp.Pipeline }

func (p PathReq_Promise) Struct() (PathReq, error) {
	s, err := p.Pipeline.Struct()
	return PathReq{s}, err
}

func (p PathReq_Promise) Flags() PathReq_flags_Promise { return PathReq_flags_Promise{p.Pipeline} }

// PathReq_flags_Promise is a wrapper for a PathReq_flags promised by a client call.
type PathReq_flags_Promise struct{ *capnp.Pipeline }

func (p PathReq_flags_Promise) Struct() (PathReq_flags, error) {
	s, err := p.Pipeline.Struct()
	return PathReq_flags{s}, err
}

type PathReply struct{ capnp.Struct }

// PathReply_TypeID is the unique identifier for the type PathReply.
const PathReply_TypeID = 0xf10fe9b6293ee63f

func NewPathReply(s *capnp.Segment) (PathReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathReply{st}, err
}

func NewRootPathReply(s *capnp.Segment) (PathReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathReply{st}, err
}

func ReadRootPathReply(msg *capnp.Message) (PathReply, error) {
	root, err := msg.RootPtr()
	return PathReply{root.Struct()}, err
}

func (s PathReply) String() string {
	str, _ := text.Marshal(0xf10fe9b6293ee63f, s.Struct)
	return str
}

func (s PathReply) ErrorCode() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathReply) SetErrorCode(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathReply) Entries() (PathReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathReplyEntry_List{List: p.List()}, err
}

func (s PathReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReply) SetEntries(v PathReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated PathReplyEntry_List, preferring placement in s's segment.
func (s PathReply) NewEntries(n int32) (PathReplyEntry_List, error) {
	l, err := NewPathReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return PathReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PathReply_List is a list of PathReply.
type PathReply_List struct{ capnp.List }

// NewPathReply creates a new list of PathReply.
func NewPathReply_List(s *capnp.Segment, sz int32) (PathReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathReply_List{l}, err
}

func (s PathReply_List) At(i int) PathReply { return PathReply{s.List.Struct(i)} }

func (s PathReply_List) Set(i int, v PathReply) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReply_List) String() string {
	str, _ := text.MarshalList(0xf10fe9b6293ee63f, s.List)
	return str
}

// PathReply_Promise is a wrapper for a PathReply promised by a client call.
type PathReply_Promise struct{ *capnp.Pipeline }

func (p PathReply_Promise) Struct() (PathReply, error) {
	s, err := p.Pipeline.Struct()
	return PathReply{s}, err
}

type PathReplyEntry struct{ capnp.Struct }

// PathReplyEntry_TypeID is the unique identifier for the type PathReplyEntry.
const PathReplyEntry_TypeID = 0xc5ff2e54709776ec

func NewPathReplyEntry(s *capnp.Segment) (PathReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PathReplyEntry{st}, err
}

func NewRootPathReplyEntry(s *capnp.Segment) (PathReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return PathReplyEntry{st}, err
}

func ReadRootPathReplyEntry(msg *capnp.Message) (PathReplyEntry, error) {
	root, err := msg.RootPtr()
	return PathReplyEntry{root.Struct()}, err
}

func (s PathReplyEntry) String() string {
	str, _ := text.Marshal(0xc5ff2e54709776ec, s.Struct)
	return str
}

func (s PathReplyEntry) Path() (FwdPathMeta, error) {
	p, err := s.Struct.Ptr(0)
	return FwdPathMeta{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetPath(v FwdPathMeta) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPath sets the path field to a newly
// allocated FwdPathMeta struct, preferring placement in s's segment.
func (s PathReplyEntry) NewPath() (FwdPathMeta, error) {
	ss, err := NewFwdPathMeta(s.Struct.Segment())
	if err != nil {
		return FwdPathMeta{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathReplyEntry) HostInfo() (HostInfo, error) {
	p, err := s.Struct.Ptr(1)
	return HostInfo{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasHostInfo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetHostInfo(v HostInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewHostInfo sets the hostInfo field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s PathReplyEntry) NewHostInfo() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s PathReplyEntry) PathStaticInfo() (PathMetadata, error) {
	p, err := s.Struct.Ptr(2)
	return PathMetadata{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasPathStaticInfo() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetPathStaticInfo(v PathMetadata) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewPathStaticInfo sets the pathStaticInfo field to a newly
// allocated PathMetadata struct, preferring placement in s's segment.
func (s PathReplyEntry) NewPathStaticInfo() (PathMetadata, error) {
	ss, err := NewPathMetadata(s.Struct.Segment())
	if err != nil {
		return PathMetadata{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// PathReplyEntry_List is a list of PathReplyEntry.
type PathReplyEntry_List struct{ capnp.List }

// NewPathReplyEntry creates a new list of PathReplyEntry.
func NewPathReplyEntry_List(s *capnp.Segment, sz int32) (PathReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return PathReplyEntry_List{l}, err
}

func (s PathReplyEntry_List) At(i int) PathReplyEntry { return PathReplyEntry{s.List.Struct(i)} }

func (s PathReplyEntry_List) Set(i int, v PathReplyEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xc5ff2e54709776ec, s.List)
	return str
}

// PathReplyEntry_Promise is a wrapper for a PathReplyEntry promised by a client call.
type PathReplyEntry_Promise struct{ *capnp.Pipeline }

func (p PathReplyEntry_Promise) Struct() (PathReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return PathReplyEntry{s}, err
}

func (p PathReplyEntry_Promise) Path() FwdPathMeta_Promise {
	return FwdPathMeta_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathReplyEntry_Promise) HostInfo() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p PathReplyEntry_Promise) PathStaticInfo() PathMetadata_Promise {
	return PathMetadata_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type HostInfo struct{ capnp.Struct }
type HostInfo_addrs HostInfo

// HostInfo_TypeID is the unique identifier for the type HostInfo.
const HostInfo_TypeID = 0xb21a270577932520

func NewHostInfo(s *capnp.Segment) (HostInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HostInfo{st}, err
}

func NewRootHostInfo(s *capnp.Segment) (HostInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HostInfo{st}, err
}

func ReadRootHostInfo(msg *capnp.Message) (HostInfo, error) {
	root, err := msg.RootPtr()
	return HostInfo{root.Struct()}, err
}

func (s HostInfo) String() string {
	str, _ := text.Marshal(0xb21a270577932520, s.Struct)
	return str
}

func (s HostInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HostInfo) Addrs() HostInfo_addrs { return HostInfo_addrs(s) }

func (s HostInfo_addrs) Ipv4() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s HostInfo_addrs) HasIpv4() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HostInfo_addrs) SetIpv4(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s HostInfo_addrs) Ipv6() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s HostInfo_addrs) HasIpv6() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HostInfo_addrs) SetIpv6(v []byte) error {
	return s.Struct.SetData(1, v)
}

// HostInfo_List is a list of HostInfo.
type HostInfo_List struct{ capnp.List }

// NewHostInfo creates a new list of HostInfo.
func NewHostInfo_List(s *capnp.Segment, sz int32) (HostInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return HostInfo_List{l}, err
}

func (s HostInfo_List) At(i int) HostInfo { return HostInfo{s.List.Struct(i)} }

func (s HostInfo_List) Set(i int, v HostInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s HostInfo_List) String() string {
	str, _ := text.MarshalList(0xb21a270577932520, s.List)
	return str
}

// HostInfo_Promise is a wrapper for a HostInfo promised by a client call.
type HostInfo_Promise struct{ *capnp.Pipeline }

func (p HostInfo_Promise) Struct() (HostInfo, error) {
	s, err := p.Pipeline.Struct()
	return HostInfo{s}, err
}

func (p HostInfo_Promise) Addrs() HostInfo_addrs_Promise { return HostInfo_addrs_Promise{p.Pipeline} }

// HostInfo_addrs_Promise is a wrapper for a HostInfo_addrs promised by a client call.
type HostInfo_addrs_Promise struct{ *capnp.Pipeline }

func (p HostInfo_addrs_Promise) Struct() (HostInfo_addrs, error) {
	s, err := p.Pipeline.Struct()
	return HostInfo_addrs{s}, err
}

type PathMetadata struct{ capnp.Struct }

// PathMetadata_TypeID is the unique identifier for the type PathMetadata.
const PathMetadata_TypeID = 0xa5cff7314a4335e5

func NewPathMetadata(s *capnp.Segment) (PathMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PathMetadata{st}, err
}

func NewRootPathMetadata(s *capnp.Segment) (PathMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PathMetadata{st}, err
}

func ReadRootPathMetadata(msg *capnp.Message) (PathMetadata, error) {
	root, err := msg.RootPtr()
	return PathMetadata{root.Struct()}, err
}

func (s PathMetadata) String() string {
	str, _ := text.Marshal(0xa5cff7314a4335e5, s.Struct)
	return str
}

func (s PathMetadata) TotalLatency() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathMetadata) SetTotalLatency(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathMetadata) TotalHops() uint8 {
	return s.Struct.Uint8(2)
}

func (s PathMetadata) SetTotalHops(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s PathMetadata) MinimalBandwidth() uint32 {
	return s.Struct.Uint32(4)
}

func (s PathMetadata) SetMinimalBandwidth(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s PathMetadata) LinkTypes() (PathMetadata_InterfaceLinkType_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathMetadata_InterfaceLinkType_List{List: p.List()}, err
}

func (s PathMetadata) HasLinkTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata) SetLinkTypes(v PathMetadata_InterfaceLinkType_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLinkTypes sets the linkTypes field to a newly
// allocated PathMetadata_InterfaceLinkType_List, preferring placement in s's segment.
func (s PathMetadata) NewLinkTypes(n int32) (PathMetadata_InterfaceLinkType_List, error) {
	l, err := NewPathMetadata_InterfaceLinkType_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_InterfaceLinkType_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s PathMetadata) AsLocations() (PathMetadata_Geo_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathMetadata_Geo_List{List: p.List()}, err
}

func (s PathMetadata) HasAsLocations() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathMetadata) SetAsLocations(v PathMetadata_Geo_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAsLocations sets the asLocations field to a newly
// allocated PathMetadata_Geo_List, preferring placement in s's segment.
func (s PathMetadata) NewAsLocations(n int32) (PathMetadata_Geo_List, error) {
	l, err := NewPathMetadata_Geo_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_Geo_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s PathMetadata) Notes() (PathMetadata_Note_List, error) {
	p, err := s.Struct.Ptr(2)
	return PathMetadata_Note_List{List: p.List()}, err
}

func (s PathMetadata) HasNotes() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s PathMetadata) SetNotes(v PathMetadata_Note_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewNotes sets the notes field to a newly
// allocated PathMetadata_Note_List, preferring placement in s's segment.
func (s PathMetadata) NewNotes(n int32) (PathMetadata_Note_List, error) {
	l, err := NewPathMetadata_Note_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_Note_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// PathMetadata_List is a list of PathMetadata.
type PathMetadata_List struct{ capnp.List }

// NewPathMetadata creates a new list of PathMetadata.
func NewPathMetadata_List(s *capnp.Segment, sz int32) (PathMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return PathMetadata_List{l}, err
}

func (s PathMetadata_List) At(i int) PathMetadata { return PathMetadata{s.List.Struct(i)} }

func (s PathMetadata_List) Set(i int, v PathMetadata) error { return s.List.SetStruct(i, v.Struct) }

func (s PathMetadata_List) String() string {
	str, _ := text.MarshalList(0xa5cff7314a4335e5, s.List)
	return str
}

// PathMetadata_Promise is a wrapper for a PathMetadata promised by a client call.
type PathMetadata_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Promise) Struct() (PathMetadata, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata{s}, err
}

type PathMetadata_InterfaceLinkType struct{ capnp.Struct }

// PathMetadata_InterfaceLinkType_TypeID is the unique identifier for the type PathMetadata_InterfaceLinkType.
const PathMetadata_InterfaceLinkType_TypeID = 0xd7c92876b75c115d

func NewPathMetadata_InterfaceLinkType(s *capnp.Segment) (PathMetadata_InterfaceLinkType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathMetadata_InterfaceLinkType{st}, err
}

func NewRootPathMetadata_InterfaceLinkType(s *capnp.Segment) (PathMetadata_InterfaceLinkType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathMetadata_InterfaceLinkType{st}, err
}

func ReadRootPathMetadata_InterfaceLinkType(msg *capnp.Message) (PathMetadata_InterfaceLinkType, error) {
	root, err := msg.RootPtr()
	return PathMetadata_InterfaceLinkType{root.Struct()}, err
}

func (s PathMetadata_InterfaceLinkType) String() string {
	str, _ := text.Marshal(0xd7c92876b75c115d, s.Struct)
	return str
}

func (s PathMetadata_InterfaceLinkType) InterLinkType() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathMetadata_InterfaceLinkType) SetInterLinkType(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathMetadata_InterfaceLinkType) PeerLinkType() uint16 {
	return s.Struct.Uint16(2)
}

func (s PathMetadata_InterfaceLinkType) SetPeerLinkType(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s PathMetadata_InterfaceLinkType) Isdas() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathMetadata_InterfaceLinkType) SetIsdas(v uint64) {
	s.Struct.SetUint64(8, v)
}

// PathMetadata_InterfaceLinkType_List is a list of PathMetadata_InterfaceLinkType.
type PathMetadata_InterfaceLinkType_List struct{ capnp.List }

// NewPathMetadata_InterfaceLinkType creates a new list of PathMetadata_InterfaceLinkType.
func NewPathMetadata_InterfaceLinkType_List(s *capnp.Segment, sz int32) (PathMetadata_InterfaceLinkType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return PathMetadata_InterfaceLinkType_List{l}, err
}

func (s PathMetadata_InterfaceLinkType_List) At(i int) PathMetadata_InterfaceLinkType {
	return PathMetadata_InterfaceLinkType{s.List.Struct(i)}
}

func (s PathMetadata_InterfaceLinkType_List) Set(i int, v PathMetadata_InterfaceLinkType) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_InterfaceLinkType_List) String() string {
	str, _ := text.MarshalList(0xd7c92876b75c115d, s.List)
	return str
}

// PathMetadata_InterfaceLinkType_Promise is a wrapper for a PathMetadata_InterfaceLinkType promised by a client call.
type PathMetadata_InterfaceLinkType_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_InterfaceLinkType_Promise) Struct() (PathMetadata_InterfaceLinkType, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_InterfaceLinkType{s}, err
}

type PathMetadata_Geo struct{ capnp.Struct }

// PathMetadata_Geo_TypeID is the unique identifier for the type PathMetadata_Geo.
const PathMetadata_Geo_TypeID = 0xb47c95e958cccfff

func NewPathMetadata_Geo(s *capnp.Segment) (PathMetadata_Geo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo{st}, err
}

func NewRootPathMetadata_Geo(s *capnp.Segment) (PathMetadata_Geo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo{st}, err
}

func ReadRootPathMetadata_Geo(msg *capnp.Message) (PathMetadata_Geo, error) {
	root, err := msg.RootPtr()
	return PathMetadata_Geo{root.Struct()}, err
}

func (s PathMetadata_Geo) String() string {
	str, _ := text.Marshal(0xb47c95e958cccfff, s.Struct)
	return str
}

func (s PathMetadata_Geo) RouterLocations() (PathMetadata_Geo_GPSData_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathMetadata_Geo_GPSData_List{List: p.List()}, err
}

func (s PathMetadata_Geo) HasRouterLocations() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata_Geo) SetRouterLocations(v PathMetadata_Geo_GPSData_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRouterLocations sets the routerLocations field to a newly
// allocated PathMetadata_Geo_GPSData_List, preferring placement in s's segment.
func (s PathMetadata_Geo) NewRouterLocations(n int32) (PathMetadata_Geo_GPSData_List, error) {
	l, err := NewPathMetadata_Geo_GPSData_List(s.Struct.Segment(), n)
	if err != nil {
		return PathMetadata_Geo_GPSData_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s PathMetadata_Geo) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathMetadata_Geo) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PathMetadata_Geo_List is a list of PathMetadata_Geo.
type PathMetadata_Geo_List struct{ capnp.List }

// NewPathMetadata_Geo creates a new list of PathMetadata_Geo.
func NewPathMetadata_Geo_List(s *capnp.Segment, sz int32) (PathMetadata_Geo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMetadata_Geo_List{l}, err
}

func (s PathMetadata_Geo_List) At(i int) PathMetadata_Geo { return PathMetadata_Geo{s.List.Struct(i)} }

func (s PathMetadata_Geo_List) Set(i int, v PathMetadata_Geo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_Geo_List) String() string {
	str, _ := text.MarshalList(0xb47c95e958cccfff, s.List)
	return str
}

// PathMetadata_Geo_Promise is a wrapper for a PathMetadata_Geo promised by a client call.
type PathMetadata_Geo_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Geo_Promise) Struct() (PathMetadata_Geo, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_Geo{s}, err
}

type PathMetadata_Geo_GPSData struct{ capnp.Struct }

// PathMetadata_Geo_GPSData_TypeID is the unique identifier for the type PathMetadata_Geo_GPSData.
const PathMetadata_Geo_GPSData_TypeID = 0xb7cede732308e432

func NewPathMetadata_Geo_GPSData(s *capnp.Segment) (PathMetadata_Geo_GPSData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo_GPSData{st}, err
}

func NewRootPathMetadata_Geo_GPSData(s *capnp.Segment) (PathMetadata_Geo_GPSData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Geo_GPSData{st}, err
}

func ReadRootPathMetadata_Geo_GPSData(msg *capnp.Message) (PathMetadata_Geo_GPSData, error) {
	root, err := msg.RootPtr()
	return PathMetadata_Geo_GPSData{root.Struct()}, err
}

func (s PathMetadata_Geo_GPSData) String() string {
	str, _ := text.Marshal(0xb7cede732308e432, s.Struct)
	return str
}

func (s PathMetadata_Geo_GPSData) Latitude() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s PathMetadata_Geo_GPSData) SetLatitude(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s PathMetadata_Geo_GPSData) Longitude() float32 {
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s PathMetadata_Geo_GPSData) SetLongitude(v float32) {
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s PathMetadata_Geo_GPSData) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PathMetadata_Geo_GPSData) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata_Geo_GPSData) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PathMetadata_Geo_GPSData) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

// PathMetadata_Geo_GPSData_List is a list of PathMetadata_Geo_GPSData.
type PathMetadata_Geo_GPSData_List struct{ capnp.List }

// NewPathMetadata_Geo_GPSData creates a new list of PathMetadata_Geo_GPSData.
func NewPathMetadata_Geo_GPSData_List(s *capnp.Segment, sz int32) (PathMetadata_Geo_GPSData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMetadata_Geo_GPSData_List{l}, err
}

func (s PathMetadata_Geo_GPSData_List) At(i int) PathMetadata_Geo_GPSData {
	return PathMetadata_Geo_GPSData{s.List.Struct(i)}
}

func (s PathMetadata_Geo_GPSData_List) Set(i int, v PathMetadata_Geo_GPSData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_Geo_GPSData_List) String() string {
	str, _ := text.MarshalList(0xb7cede732308e432, s.List)
	return str
}

// PathMetadata_Geo_GPSData_Promise is a wrapper for a PathMetadata_Geo_GPSData promised by a client call.
type PathMetadata_Geo_GPSData_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Geo_GPSData_Promise) Struct() (PathMetadata_Geo_GPSData, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_Geo_GPSData{s}, err
}

type PathMetadata_Note struct{ capnp.Struct }

// PathMetadata_Note_TypeID is the unique identifier for the type PathMetadata_Note.
const PathMetadata_Note_TypeID = 0x88b4277fa83dde2d

func NewPathMetadata_Note(s *capnp.Segment) (PathMetadata_Note, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Note{st}, err
}

func NewRootPathMetadata_Note(s *capnp.Segment) (PathMetadata_Note, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMetadata_Note{st}, err
}

func ReadRootPathMetadata_Note(msg *capnp.Message) (PathMetadata_Note, error) {
	root, err := msg.RootPtr()
	return PathMetadata_Note{root.Struct()}, err
}

func (s PathMetadata_Note) String() string {
	str, _ := text.Marshal(0x88b4277fa83dde2d, s.Struct)
	return str
}

func (s PathMetadata_Note) Note() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PathMetadata_Note) HasNote() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMetadata_Note) NoteBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PathMetadata_Note) SetNote(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PathMetadata_Note) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathMetadata_Note) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// PathMetadata_Note_List is a list of PathMetadata_Note.
type PathMetadata_Note_List struct{ capnp.List }

// NewPathMetadata_Note creates a new list of PathMetadata_Note.
func NewPathMetadata_Note_List(s *capnp.Segment, sz int32) (PathMetadata_Note_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMetadata_Note_List{l}, err
}

func (s PathMetadata_Note_List) At(i int) PathMetadata_Note {
	return PathMetadata_Note{s.List.Struct(i)}
}

func (s PathMetadata_Note_List) Set(i int, v PathMetadata_Note) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PathMetadata_Note_List) String() string {
	str, _ := text.MarshalList(0x88b4277fa83dde2d, s.List)
	return str
}

// PathMetadata_Note_Promise is a wrapper for a PathMetadata_Note promised by a client call.
type PathMetadata_Note_Promise struct{ *capnp.Pipeline }

func (p PathMetadata_Note_Promise) Struct() (PathMetadata_Note, error) {
	s, err := p.Pipeline.Struct()
	return PathMetadata_Note{s}, err
}

type FwdPathMeta struct{ capnp.Struct }

// FwdPathMeta_TypeID is the unique identifier for the type FwdPathMeta.
const FwdPathMeta_TypeID = 0x8adfcabe5ff9daf4

func NewFwdPathMeta(s *capnp.Segment) (FwdPathMeta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FwdPathMeta{st}, err
}

func NewRootFwdPathMeta(s *capnp.Segment) (FwdPathMeta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return FwdPathMeta{st}, err
}

func ReadRootFwdPathMeta(msg *capnp.Message) (FwdPathMeta, error) {
	root, err := msg.RootPtr()
	return FwdPathMeta{root.Struct()}, err
}

func (s FwdPathMeta) String() string {
	str, _ := text.Marshal(0x8adfcabe5ff9daf4, s.Struct)
	return str
}

func (s FwdPathMeta) FwdPath() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s FwdPathMeta) HasFwdPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetFwdPath(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s FwdPathMeta) Mtu() uint16 {
	return s.Struct.Uint16(0)
}

func (s FwdPathMeta) SetMtu(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s FwdPathMeta) Interfaces() (PathInterface_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathInterface_List{List: p.List()}, err
}

func (s FwdPathMeta) HasInterfaces() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetInterfaces(v PathInterface_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewInterfaces sets the interfaces field to a newly
// allocated PathInterface_List, preferring placement in s's segment.
func (s FwdPathMeta) NewInterfaces(n int32) (PathInterface_List, error) {
	l, err := NewPathInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return PathInterface_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s FwdPathMeta) ExpTime() uint32 {
	return s.Struct.Uint32(4)
}

func (s FwdPathMeta) SetExpTime(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s FwdPathMeta) HeaderV2() bool {
	return s.Struct.Bit(16)
}

func (s FwdPathMeta) SetHeaderV2(v bool) {
	s.Struct.SetBit(16, v)
}

// FwdPathMeta_List is a list of FwdPathMeta.
type FwdPathMeta_List struct{ capnp.List }

// NewFwdPathMeta creates a new list of FwdPathMeta.
func NewFwdPathMeta_List(s *capnp.Segment, sz int32) (FwdPathMeta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return FwdPathMeta_List{l}, err
}

func (s FwdPathMeta_List) At(i int) FwdPathMeta { return FwdPathMeta{s.List.Struct(i)} }

func (s FwdPathMeta_List) Set(i int, v FwdPathMeta) error { return s.List.SetStruct(i, v.Struct) }

func (s FwdPathMeta_List) String() string {
	str, _ := text.MarshalList(0x8adfcabe5ff9daf4, s.List)
	return str
}

// FwdPathMeta_Promise is a wrapper for a FwdPathMeta promised by a client call.
type FwdPathMeta_Promise struct{ *capnp.Pipeline }

func (p FwdPathMeta_Promise) Struct() (FwdPathMeta, error) {
	s, err := p.Pipeline.Struct()
	return FwdPathMeta{s}, err
}

type PathInterface struct{ capnp.Struct }

// PathInterface_TypeID is the unique identifier for the type PathInterface.
const PathInterface_TypeID = 0x95794035a80b7da1

func NewPathInterface(s *capnp.Segment) (PathInterface, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathInterface{st}, err
}

func NewRootPathInterface(s *capnp.Segment) (PathInterface, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathInterface{st}, err
}

func ReadRootPathInterface(msg *capnp.Message) (PathInterface, error) {
	root, err := msg.RootPtr()
	return PathInterface{root.Struct()}, err
}

func (s PathInterface) String() string {
	str, _ := text.Marshal(0x95794035a80b7da1, s.Struct)
	return str
}

func (s PathInterface) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathInterface) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PathInterface) IfID() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathInterface) SetIfID(v uint64) {
	s.Struct.SetUint64(8, v)
}

// PathInterface_List is a list of PathInterface.
type PathInterface_List struct{ capnp.List }

// NewPathInterface creates a new list of PathInterface.
func NewPathInterface_List(s *capnp.Segment, sz int32) (PathInterface_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return PathInterface_List{l}, err
}

func (s PathInterface_List) At(i int) PathInterface { return PathInterface{s.List.Struct(i)} }

func (s PathInterface_List) Set(i int, v PathInterface) error { return s.List.SetStruct(i, v.Struct) }

func (s PathInterface_List) String() string {
	str, _ := text.MarshalList(0x95794035a80b7da1, s.List)
	return str
}

// PathInterface_Promise is a wrapper for a PathInterface promised by a client call.
type PathInterface_Promise struct{ *capnp.Pipeline }

func (p PathInterface_Promise) Struct() (PathInterface, error) {
	s, err := p.Pipeline.Struct()
	return PathInterface{s}, err
}

type ASInfoReq struct{ capnp.Struct }

// ASInfoReq_TypeID is the unique identifier for the type ASInfoReq.
const ASInfoReq_TypeID = 0xcc65a2a89c24e6a5

func NewASInfoReq(s *capnp.Segment) (ASInfoReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ASInfoReq{st}, err
}

func NewRootASInfoReq(s *capnp.Segment) (ASInfoReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ASInfoReq{st}, err
}

func ReadRootASInfoReq(msg *capnp.Message) (ASInfoReq, error) {
	root, err := msg.RootPtr()
	return ASInfoReq{root.Struct()}, err
}

func (s ASInfoReq) String() string {
	str, _ := text.Marshal(0xcc65a2a89c24e6a5, s.Struct)
	return str
}

func (s ASInfoReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASInfoReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ASInfoReq_List is a list of ASInfoReq.
type ASInfoReq_List struct{ capnp.List }

// NewASInfoReq creates a new list of ASInfoReq.
func NewASInfoReq_List(s *capnp.Segment, sz int32) (ASInfoReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ASInfoReq_List{l}, err
}

func (s ASInfoReq_List) At(i int) ASInfoReq { return ASInfoReq{s.List.Struct(i)} }

func (s ASInfoReq_List) Set(i int, v ASInfoReq) error { return s.List.SetStruct(i, v.Struct) }

func (s ASInfoReq_List) String() string {
	str, _ := text.MarshalList(0xcc65a2a89c24e6a5, s.List)
	return str
}

// ASInfoReq_Promise is a wrapper for a ASInfoReq promised by a client call.
type ASInfoReq_Promise struct{ *capnp.Pipeline }

func (p ASInfoReq_Promise) Struct() (ASInfoReq, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReq{s}, err
}

type ASInfoReply struct{ capnp.Struct }

// ASInfoReply_TypeID is the unique identifier for the type ASInfoReply.
const ASInfoReply_TypeID = 0x947e1828e214e89d

func NewASInfoReply(s *capnp.Segment) (ASInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ASInfoReply{st}, err
}

func NewRootASInfoReply(s *capnp.Segment) (ASInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ASInfoReply{st}, err
}

func ReadRootASInfoReply(msg *capnp.Message) (ASInfoReply, error) {
	root, err := msg.RootPtr()
	return ASInfoReply{root.Struct()}, err
}

func (s ASInfoReply) String() string {
	str, _ := text.Marshal(0x947e1828e214e89d, s.Struct)
	return str
}

func (s ASInfoReply) Entries() (ASInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ASInfoReplyEntry_List{List: p.List()}, err
}

func (s ASInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASInfoReply) SetEntries(v ASInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ASInfoReplyEntry_List, preferring placement in s's segment.
func (s ASInfoReply) NewEntries(n int32) (ASInfoReplyEntry_List, error) {
	l, err := NewASInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ASInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ASInfoReply_List is a list of ASInfoReply.
type ASInfoReply_List struct{ capnp.List }

// NewASInfoReply creates a new list of ASInfoReply.
func NewASInfoReply_List(s *capnp.Segment, sz int32) (ASInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ASInfoReply_List{l}, err
}

func (s ASInfoReply_List) At(i int) ASInfoReply { return ASInfoReply{s.List.Struct(i)} }

func (s ASInfoReply_List) Set(i int, v ASInfoReply) error { return s.List.SetStruct(i, v.Struct) }

func (s ASInfoReply_List) String() string {
	str, _ := text.MarshalList(0x947e1828e214e89d, s.List)
	return str
}

// ASInfoReply_Promise is a wrapper for a ASInfoReply promised by a client call.
type ASInfoReply_Promise struct{ *capnp.Pipeline }

func (p ASInfoReply_Promise) Struct() (ASInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReply{s}, err
}

type ASInfoReplyEntry struct{ capnp.Struct }

// ASInfoReplyEntry_TypeID is the unique identifier for the type ASInfoReplyEntry.
const ASInfoReplyEntry_TypeID = 0xfab1a3b4477ab6b3

func NewASInfoReplyEntry(s *capnp.Segment) (ASInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ASInfoReplyEntry{st}, err
}

func NewRootASInfoReplyEntry(s *capnp.Segment) (ASInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ASInfoReplyEntry{st}, err
}

func ReadRootASInfoReplyEntry(msg *capnp.Message) (ASInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return ASInfoReplyEntry{root.Struct()}, err
}

func (s ASInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xfab1a3b4477ab6b3, s.Struct)
	return str
}

func (s ASInfoReplyEntry) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASInfoReplyEntry) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASInfoReplyEntry) Mtu() uint16 {
	return s.Struct.Uint16(8)
}

func (s ASInfoReplyEntry) SetMtu(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s ASInfoReplyEntry) IsCore() bool {
	return s.Struct.Bit(80)
}

func (s ASInfoReplyEntry) SetIsCore(v bool) {
	s.Struct.SetBit(80, v)
}

// ASInfoReplyEntry_List is a list of ASInfoReplyEntry.
type ASInfoReplyEntry_List struct{ capnp.List }

// NewASInfoReplyEntry creates a new list of ASInfoReplyEntry.
func NewASInfoReplyEntry_List(s *capnp.Segment, sz int32) (ASInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return ASInfoReplyEntry_List{l}, err
}

func (s ASInfoReplyEntry_List) At(i int) ASInfoReplyEntry { return ASInfoReplyEntry{s.List.Struct(i)} }

func (s ASInfoReplyEntry_List) Set(i int, v ASInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ASInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xfab1a3b4477ab6b3, s.List)
	return str
}

// ASInfoReplyEntry_Promise is a wrapper for a ASInfoReplyEntry promised by a client call.
type ASInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p ASInfoReplyEntry_Promise) Struct() (ASInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReplyEntry{s}, err
}

type RevNotification struct{ capnp.Struct }

// RevNotification_TypeID is the unique identifier for the type RevNotification.
const RevNotification_TypeID = 0x9b0685a785df42e9

func NewRevNotification(s *capnp.Segment) (RevNotification, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RevNotification{st}, err
}

func NewRootRevNotification(s *capnp.Segment) (RevNotification, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RevNotification{st}, err
}

func ReadRootRevNotification(msg *capnp.Message) (RevNotification, error) {
	root, err := msg.RootPtr()
	return RevNotification{root.Struct()}, err
}

func (s RevNotification) String() string {
	str, _ := text.Marshal(0x9b0685a785df42e9, s.Struct)
	return str
}

func (s RevNotification) SRevInfo() (SignedBlob, error) {
	p, err := s.Struct.Ptr(0)
	return SignedBlob{Struct: p.Struct()}, err
}

func (s RevNotification) HasSRevInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RevNotification) SetSRevInfo(v SignedBlob) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSRevInfo sets the sRevInfo field to a newly
// allocated SignedBlob struct, preferring placement in s's segment.
func (s RevNotification) NewSRevInfo() (SignedBlob, error) {
	ss, err := NewSignedBlob(s.Struct.Segment())
	if err != nil {
		return SignedBlob{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RevNotification_List is a list of RevNotification.
type RevNotification_List struct{ capnp.List }

// NewRevNotification creates a new list of RevNotification.
func NewRevNotification_List(s *capnp.Segment, sz int32) (RevNotification_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RevNotification_List{l}, err
}

func (s RevNotification_List) At(i int) RevNotification { return RevNotification{s.List.Struct(i)} }

func (s RevNotification_List) Set(i int, v RevNotification) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RevNotification_List) String() string {
	str, _ := text.MarshalList(0x9b0685a785df42e9, s.List)
	return str
}

// RevNotification_Promise is a wrapper for a RevNotification promised by a client call.
type RevNotification_Promise struct{ *capnp.Pipeline }

func (p RevNotification_Promise) Struct() (RevNotification, error) {
	s, err := p.Pipeline.Struct()
	return RevNotification{s}, err
}

func (p RevNotification_Promise) SRevInfo() SignedBlob_Promise {
	return SignedBlob_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type RevReply struct{ capnp.Struct }

// RevReply_TypeID is the unique identifier for the type RevReply.
const RevReply_TypeID = 0x8f8172e4469c111a

func NewRevReply(s *capnp.Segment) (RevReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RevReply{st}, err
}

func NewRootRevReply(s *capnp.Segment) (RevReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RevReply{st}, err
}

func ReadRootRevReply(msg *capnp.Message) (RevReply, error) {
	root, err := msg.RootPtr()
	return RevReply{root.Struct()}, err
}

func (s RevReply) String() string {
	str, _ := text.Marshal(0x8f8172e4469c111a, s.Struct)
	return str
}

func (s RevReply) Result() uint16 {
	return s.Struct.Uint16(0)
}

func (s RevReply) SetResult(v uint16) {
	s.Struct.SetUint16(0, v)
}

// RevReply_List is a list of RevReply.
type RevReply_List struct{ capnp.List }

// NewRevReply creates a new list of RevReply.
func NewRevReply_List(s *capnp.Segment, sz int32) (RevReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RevReply_List{l}, err
}

func (s RevReply_List) At(i int) RevReply { return RevReply{s.List.Struct(i)} }

func (s RevReply_List) Set(i int, v RevReply) error { return s.List.SetStruct(i, v.Struct) }

func (s RevReply_List) String() string {
	str, _ := text.MarshalList(0x8f8172e4469c111a, s.List)
	return str
}

// RevReply_Promise is a wrapper for a RevReply promised by a client call.
type RevReply_Promise struct{ *capnp.Pipeline }

func (p RevReply_Promise) Struct() (RevReply, error) {
	s, err := p.Pipeline.Struct()
	return RevReply{s}, err
}

type IFInfoRequest struct{ capnp.Struct }

// IFInfoRequest_TypeID is the unique identifier for the type IFInfoRequest.
const IFInfoRequest_TypeID = 0x877af4eba6adb0f3

func NewIFInfoRequest(s *capnp.Segment) (IFInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoRequest{st}, err
}

func NewRootIFInfoRequest(s *capnp.Segment) (IFInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoRequest{st}, err
}

func ReadRootIFInfoRequest(msg *capnp.Message) (IFInfoRequest, error) {
	root, err := msg.RootPtr()
	return IFInfoRequest{root.Struct()}, err
}

func (s IFInfoRequest) String() string {
	str, _ := text.Marshal(0x877af4eba6adb0f3, s.Struct)
	return str
}

func (s IFInfoRequest) IfIDs() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s IFInfoRequest) HasIfIDs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoRequest) SetIfIDs(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewIfIDs sets the ifIDs field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s IFInfoRequest) NewIfIDs(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFInfoRequest_List is a list of IFInfoRequest.
type IFInfoRequest_List struct{ capnp.List }

// NewIFInfoRequest creates a new list of IFInfoRequest.
func NewIFInfoRequest_List(s *capnp.Segment, sz int32) (IFInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFInfoRequest_List{l}, err
}

func (s IFInfoRequest_List) At(i int) IFInfoRequest { return IFInfoRequest{s.List.Struct(i)} }

func (s IFInfoRequest_List) Set(i int, v IFInfoRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s IFInfoRequest_List) String() string {
	str, _ := text.MarshalList(0x877af4eba6adb0f3, s.List)
	return str
}

// IFInfoRequest_Promise is a wrapper for a IFInfoRequest promised by a client call.
type IFInfoRequest_Promise struct{ *capnp.Pipeline }

func (p IFInfoRequest_Promise) Struct() (IFInfoRequest, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoRequest{s}, err
}

type IFInfoReply struct{ capnp.Struct }

// IFInfoReply_TypeID is the unique identifier for the type IFInfoReply.
const IFInfoReply_TypeID = 0xe7f7d11a5652e06c

func NewIFInfoReply(s *capnp.Segment) (IFInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoReply{st}, err
}

func NewRootIFInfoReply(s *capnp.Segment) (IFInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoReply{st}, err
}

func ReadRootIFInfoReply(msg *capnp.Message) (IFInfoReply, error) {
	root, err := msg.RootPtr()
	return IFInfoReply{root.Struct()}, err
}

func (s IFInfoReply) String() string {
	str, _ := text.Marshal(0xe7f7d11a5652e06c, s.Struct)
	return str
}

func (s IFInfoReply) Entries() (IFInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return IFInfoReplyEntry_List{List: p.List()}, err
}

func (s IFInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoReply) SetEntries(v IFInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated IFInfoReplyEntry_List, preferring placement in s's segment.
func (s IFInfoReply) NewEntries(n int32) (IFInfoReplyEntry_List, error) {
	l, err := NewIFInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return IFInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFInfoReply_List is a list of IFInfoReply.
type IFInfoReply_List struct{ capnp.List }

// NewIFInfoReply creates a new list of IFInfoReply.
func NewIFInfoReply_List(s *capnp.Segment, sz int32) (IFInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFInfoReply_List{l}, err
}

func (s IFInfoReply_List) At(i int) IFInfoReply { return IFInfoReply{s.List.Struct(i)} }

func (s IFInfoReply_List) Set(i int, v IFInfoReply) error { return s.List.SetStruct(i, v.Struct) }

func (s IFInfoReply_List) String() string {
	str, _ := text.MarshalList(0xe7f7d11a5652e06c, s.List)
	return str
}

// IFInfoReply_Promise is a wrapper for a IFInfoReply promised by a client call.
type IFInfoReply_Promise struct{ *capnp.Pipeline }

func (p IFInfoReply_Promise) Struct() (IFInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoReply{s}, err
}

type IFInfoReplyEntry struct{ capnp.Struct }

// IFInfoReplyEntry_TypeID is the unique identifier for the type IFInfoReplyEntry.
const IFInfoReplyEntry_TypeID = 0xf0c5156786d72738

func NewIFInfoReplyEntry(s *capnp.Segment) (IFInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IFInfoReplyEntry{st}, err
}

func NewRootIFInfoReplyEntry(s *capnp.Segment) (IFInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IFInfoReplyEntry{st}, err
}

func ReadRootIFInfoReplyEntry(msg *capnp.Message) (IFInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return IFInfoReplyEntry{root.Struct()}, err
}

func (s IFInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xf0c5156786d72738, s.Struct)
	return str
}

func (s IFInfoReplyEntry) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s IFInfoReplyEntry) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s IFInfoReplyEntry) HostInfo() (HostInfo, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo{Struct: p.Struct()}, err
}

func (s IFInfoReplyEntry) HasHostInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoReplyEntry) SetHostInfo(v HostInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHostInfo sets the hostInfo field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s IFInfoReplyEntry) NewHostInfo() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IFInfoReplyEntry_List is a list of IFInfoReplyEntry.
type IFInfoReplyEntry_List struct{ capnp.List }

// NewIFInfoReplyEntry creates a new list of IFInfoReplyEntry.
func NewIFInfoReplyEntry_List(s *capnp.Segment, sz int32) (IFInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IFInfoReplyEntry_List{l}, err
}

func (s IFInfoReplyEntry_List) At(i int) IFInfoReplyEntry { return IFInfoReplyEntry{s.List.Struct(i)} }

func (s IFInfoReplyEntry_List) Set(i int, v IFInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IFInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xf0c5156786d72738, s.List)
	return str
}

// IFInfoReplyEntry_Promise is a wrapper for a IFInfoReplyEntry promised by a client call.
type IFInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p IFInfoReplyEntry_Promise) Struct() (IFInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoReplyEntry{s}, err
}

func (p IFInfoReplyEntry_Promise) HostInfo() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ServiceInfoRequest struct{ capnp.Struct }

// ServiceInfoRequest_TypeID is the unique identifier for the type ServiceInfoRequest.
const ServiceInfoRequest_TypeID = 0xa94f085c31a03112

func NewServiceInfoRequest(s *capnp.Segment) (ServiceInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoRequest{st}, err
}

func NewRootServiceInfoRequest(s *capnp.Segment) (ServiceInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoRequest{st}, err
}

func ReadRootServiceInfoRequest(msg *capnp.Message) (ServiceInfoRequest, error) {
	root, err := msg.RootPtr()
	return ServiceInfoRequest{root.Struct()}, err
}

func (s ServiceInfoRequest) String() string {
	str, _ := text.Marshal(0xa94f085c31a03112, s.Struct)
	return str
}

func (s ServiceInfoRequest) ServiceTypes() (ServiceType_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceType_List{List: p.List()}, err
}

func (s ServiceInfoRequest) HasServiceTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoRequest) SetServiceTypes(v ServiceType_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewServiceTypes sets the serviceTypes field to a newly
// allocated ServiceType_List, preferring placement in s's segment.
func (s ServiceInfoRequest) NewServiceTypes(n int32) (ServiceType_List, error) {
	l, err := NewServiceType_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceType_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoRequest_List is a list of ServiceInfoRequest.
type ServiceInfoRequest_List struct{ capnp.List }

// NewServiceInfoRequest creates a new list of ServiceInfoRequest.
func NewServiceInfoRequest_List(s *capnp.Segment, sz int32) (ServiceInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ServiceInfoRequest_List{l}, err
}

func (s ServiceInfoRequest_List) At(i int) ServiceInfoRequest {
	return ServiceInfoRequest{s.List.Struct(i)}
}

func (s ServiceInfoRequest_List) Set(i int, v ServiceInfoRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoRequest_List) String() string {
	str, _ := text.MarshalList(0xa94f085c31a03112, s.List)
	return str
}

// ServiceInfoRequest_Promise is a wrapper for a ServiceInfoRequest promised by a client call.
type ServiceInfoRequest_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoRequest_Promise) Struct() (ServiceInfoRequest, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoRequest{s}, err
}

type ServiceInfoReply struct{ capnp.Struct }

// ServiceInfoReply_TypeID is the unique identifier for the type ServiceInfoReply.
const ServiceInfoReply_TypeID = 0xf7a6d78ba978beb9

func NewServiceInfoReply(s *capnp.Segment) (ServiceInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoReply{st}, err
}

func NewRootServiceInfoReply(s *capnp.Segment) (ServiceInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoReply{st}, err
}

func ReadRootServiceInfoReply(msg *capnp.Message) (ServiceInfoReply, error) {
	root, err := msg.RootPtr()
	return ServiceInfoReply{root.Struct()}, err
}

func (s ServiceInfoReply) String() string {
	str, _ := text.Marshal(0xf7a6d78ba978beb9, s.Struct)
	return str
}

func (s ServiceInfoReply) Entries() (ServiceInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceInfoReplyEntry_List{List: p.List()}, err
}

func (s ServiceInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoReply) SetEntries(v ServiceInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ServiceInfoReplyEntry_List, preferring placement in s's segment.
func (s ServiceInfoReply) NewEntries(n int32) (ServiceInfoReplyEntry_List, error) {
	l, err := NewServiceInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoReply_List is a list of ServiceInfoReply.
type ServiceInfoReply_List struct{ capnp.List }

// NewServiceInfoReply creates a new list of ServiceInfoReply.
func NewServiceInfoReply_List(s *capnp.Segment, sz int32) (ServiceInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ServiceInfoReply_List{l}, err
}

func (s ServiceInfoReply_List) At(i int) ServiceInfoReply { return ServiceInfoReply{s.List.Struct(i)} }

func (s ServiceInfoReply_List) Set(i int, v ServiceInfoReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoReply_List) String() string {
	str, _ := text.MarshalList(0xf7a6d78ba978beb9, s.List)
	return str
}

// ServiceInfoReply_Promise is a wrapper for a ServiceInfoReply promised by a client call.
type ServiceInfoReply_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoReply_Promise) Struct() (ServiceInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoReply{s}, err
}

type ServiceInfoReplyEntry struct{ capnp.Struct }

// ServiceInfoReplyEntry_TypeID is the unique identifier for the type ServiceInfoReplyEntry.
const ServiceInfoReplyEntry_TypeID = 0xe7279389a6bbe1dc

func NewServiceInfoReplyEntry(s *capnp.Segment) (ServiceInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfoReplyEntry{st}, err
}

func NewRootServiceInfoReplyEntry(s *capnp.Segment) (ServiceInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfoReplyEntry{st}, err
}

func ReadRootServiceInfoReplyEntry(msg *capnp.Message) (ServiceInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return ServiceInfoReplyEntry{root.Struct()}, err
}

func (s ServiceInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xe7279389a6bbe1dc, s.Struct)
	return str
}

func (s ServiceInfoReplyEntry) ServiceType() ServiceType {
	return ServiceType(s.Struct.Uint16(0))
}

func (s ServiceInfoReplyEntry) SetServiceType(v ServiceType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s ServiceInfoReplyEntry) Ttl() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfoReplyEntry) SetTtl(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s ServiceInfoReplyEntry) HostInfos() (HostInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo_List{List: p.List()}, err
}

func (s ServiceInfoReplyEntry) HasHostInfos() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoReplyEntry) SetHostInfos(v HostInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHostInfos sets the hostInfos field to a newly
// allocated HostInfo_List, preferring placement in s's segment.
func (s ServiceInfoReplyEntry) NewHostInfos(n int32) (HostInfo_List, error) {
	l, err := NewHostInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return HostInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoReplyEntry_List is a list of ServiceInfoReplyEntry.
type ServiceInfoReplyEntry_List struct{ capnp.List }

// NewServiceInfoReplyEntry creates a new list of ServiceInfoReplyEntry.
func NewServiceInfoReplyEntry_List(s *capnp.Segment, sz int32) (ServiceInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfoReplyEntry_List{l}, err
}

func (s ServiceInfoReplyEntry_List) At(i int) ServiceInfoReplyEntry {
	return ServiceInfoReplyEntry{s.List.Struct(i)}
}

func (s ServiceInfoReplyEntry_List) Set(i int, v ServiceInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xe7279389a6bbe1dc, s.List)
	return str
}

// ServiceInfoReplyEntry_Promise is a wrapper for a ServiceInfoReplyEntry promised by a client call.
type ServiceInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoReplyEntry_Promise) Struct() (ServiceInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoReplyEntry{s}, err
}

type SegTypeHopReq struct{ capnp.Struct }

// SegTypeHopReq_TypeID is the unique identifier for the type SegTypeHopReq.
const SegTypeHopReq_TypeID = 0xca1e844241cf650f

func NewSegTypeHopReq(s *capnp.Segment) (SegTypeHopReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegTypeHopReq{st}, err
}

func NewRootSegTypeHopReq(s *capnp.Segment) (SegTypeHopReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegTypeHopReq{st}, err
}

func ReadRootSegTypeHopReq(msg *capnp.Message) (SegTypeHopReq, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReq{root.Struct()}, err
}

func (s SegTypeHopReq) String() string {
	str, _ := text.Marshal(0xca1e844241cf650f, s.Struct)
	return str
}

func (s SegTypeHopReq) Type() PathSegType {
	return PathSegType(s.Struct.Uint16(0))
}

func (s SegTypeHopReq) SetType(v PathSegType) {
	s.Struct.SetUint16(0, uint16(v))
}

// SegTypeHopReq_List is a list of SegTypeHopReq.
type SegTypeHopReq_List struct{ capnp.List }

// NewSegTypeHopReq creates a new list of SegTypeHopReq.
func NewSegTypeHopReq_List(s *capnp.Segment, sz int32) (SegTypeHopReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return SegTypeHopReq_List{l}, err
}

func (s SegTypeHopReq_List) At(i int) SegTypeHopReq { return SegTypeHopReq{s.List.Struct(i)} }

func (s SegTypeHopReq_List) Set(i int, v SegTypeHopReq) error { return s.List.SetStruct(i, v.Struct) }

func (s SegTypeHopReq_List) String() string {
	str, _ := text.MarshalList(0xca1e844241cf650f, s.List)
	return str
}

// SegTypeHopReq_Promise is a wrapper for a SegTypeHopReq promised by a client call.
type SegTypeHopReq_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReq_Promise) Struct() (SegTypeHopReq, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReq{s}, err
}

type SegTypeHopReply struct{ capnp.Struct }

// SegTypeHopReply_TypeID is the unique identifier for the type SegTypeHopReply.
const SegTypeHopReply_TypeID = 0xc340ede57616f2e8

func NewSegTypeHopReply(s *capnp.Segment) (SegTypeHopReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegTypeHopReply{st}, err
}

func NewRootSegTypeHopReply(s *capnp.Segment) (SegTypeHopReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegTypeHopReply{st}, err
}

func ReadRootSegTypeHopReply(msg *capnp.Message) (SegTypeHopReply, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReply{root.Struct()}, err
}

func (s SegTypeHopReply) String() string {
	str, _ := text.Marshal(0xc340ede57616f2e8, s.Struct)
	return str
}

func (s SegTypeHopReply) Entries() (SegTypeHopReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReplyEntry_List{List: p.List()}, err
}

func (s SegTypeHopReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegTypeHopReply) SetEntries(v SegTypeHopReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated SegTypeHopReplyEntry_List, preferring placement in s's segment.
func (s SegTypeHopReply) NewEntries(n int32) (SegTypeHopReplyEntry_List, error) {
	l, err := NewSegTypeHopReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return SegTypeHopReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SegTypeHopReply_List is a list of SegTypeHopReply.
type SegTypeHopReply_List struct{ capnp.List }

// NewSegTypeHopReply creates a new list of SegTypeHopReply.
func NewSegTypeHopReply_List(s *capnp.Segment, sz int32) (SegTypeHopReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegTypeHopReply_List{l}, err
}

func (s SegTypeHopReply_List) At(i int) SegTypeHopReply { return SegTypeHopReply{s.List.Struct(i)} }

func (s SegTypeHopReply_List) Set(i int, v SegTypeHopReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegTypeHopReply_List) String() string {
	str, _ := text.MarshalList(0xc340ede57616f2e8, s.List)
	return str
}

// SegTypeHopReply_Promise is a wrapper for a SegTypeHopReply promised by a client call.
type SegTypeHopReply_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReply_Promise) Struct() (SegTypeHopReply, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReply{s}, err
}

type SegTypeHopReplyEntry struct{ capnp.Struct }

// SegTypeHopReplyEntry_TypeID is the unique identifier for the type SegTypeHopReplyEntry.
const SegTypeHopReplyEntry_TypeID = 0xacf8185a51a9f1b4

func NewSegTypeHopReplyEntry(s *capnp.Segment) (SegTypeHopReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegTypeHopReplyEntry{st}, err
}

func NewRootSegTypeHopReplyEntry(s *capnp.Segment) (SegTypeHopReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegTypeHopReplyEntry{st}, err
}

func ReadRootSegTypeHopReplyEntry(msg *capnp.Message) (SegTypeHopReplyEntry, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReplyEntry{root.Struct()}, err
}

func (s SegTypeHopReplyEntry) String() string {
	str, _ := text.Marshal(0xacf8185a51a9f1b4, s.Struct)
	return str
}

func (s SegTypeHopReplyEntry) Interfaces() (PathInterface_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathInterface_List{List: p.List()}, err
}

func (s SegTypeHopReplyEntry) HasInterfaces() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegTypeHopReplyEntry) SetInterfaces(v PathInterface_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInterfaces sets the interfaces field to a newly
// allocated PathInterface_List, preferring placement in s's segment.
func (s SegTypeHopReplyEntry) NewInterfaces(n int32) (PathInterface_List, error) {
	l, err := NewPathInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return PathInterface_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SegTypeHopReplyEntry) Timestamp() uint32 {
	return s.Struct.Uint32(0)
}

func (s SegTypeHopReplyEntry) SetTimestamp(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SegTypeHopReplyEntry) ExpTime() uint32 {
	return s.Struct.Uint32(4)
}

func (s SegTypeHopReplyEntry) SetExpTime(v uint32) {
	s.Struct.SetUint32(4, v)
}

// SegTypeHopReplyEntry_List is a list of SegTypeHopReplyEntry.
type SegTypeHopReplyEntry_List struct{ capnp.List }

// NewSegTypeHopReplyEntry creates a new list of SegTypeHopReplyEntry.
func NewSegTypeHopReplyEntry_List(s *capnp.Segment, sz int32) (SegTypeHopReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegTypeHopReplyEntry_List{l}, err
}

func (s SegTypeHopReplyEntry_List) At(i int) SegTypeHopReplyEntry {
	return SegTypeHopReplyEntry{s.List.Struct(i)}
}

func (s SegTypeHopReplyEntry_List) Set(i int, v SegTypeHopReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegTypeHopReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xacf8185a51a9f1b4, s.List)
	return str
}

// SegTypeHopReplyEntry_Promise is a wrapper for a SegTypeHopReplyEntry promised by a client call.
type SegTypeHopReplyEntry_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReplyEntry_Promise) Struct() (SegTypeHopReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReplyEntry{s}, err
}

const schema_8f4bd412642c9517 = "x\xda\x94X{l\x1c\xe5\x11\x9f\xf9\xf6|\xe7\xd8>" +
	"\xefmv\x0d\x91+qm\x0a\xcaC\xc4\xc2\x0e\x14\x88" +
	"(N\x9c\xa7S\x07\xbcw\x09E(Q\xd9\xdc}\xb6" +
	"\x17\xcew\x97\xdb\xb5\x13#\xa8\x1bDZ\x926\x02\x0a" +
	"QI!j\x02\x04\xe26\xa8\x84\xba<\xd2\x16\x15\x01" +
	"m\x89R\x1e\x15\x12j\xc4#\xa4\x04\x12 \x12\x0e\xa1" +
	"!i\xe8V\xb3\xbb\xb7\xbbY\xaf\x03\xfdoogv" +
	"\xbe\x99\xdf\xcc\xfcf\xbe\xbb\xe4\xe1\xf8\\\xd6Z\xf3\xd8" +
	"$\x00\xb5\\\x13\xb7>{\xe2\xf1G?>q\xcbO" +
	"@J\xa2u\xfe\x96\x8b\xf3\x93\xdf\xf8\xde]P\x83\x09" +
	"\x00\xf9\xd9\xd8\x01\xf9\xa5\x18==\x1fk\x07\xb4f\xbd" +
	"\xf3\xdd]\xc3\xd3F\xef\x04\xb5\x19\xd1:|\xd9\xfc\xa5" +
	"\xad'_\xdd\xe9*\x8f\xc5N\xcb_\xda\xca\xa7bk" +
	"\x01\xad\x13\x07N\xfd\xe0\xb9}\xefn\x025\x89A\xcb" +
	"\x8cTV\xd4\xec\x93\xb5\x9a\x04\xc0\xecU5i\x04\xb4" +
	"\x9a\xa5\x07\x17\xbd_Y\x7fWH\xdb\xb6\xb7!\xfe\xa4" +
	"\xbc9NO\x1b\xe3\xe4\xc6\xa2\x17\x16\x0d\x8f>\xf0\xd1" +
	"=\xa4\xcb|\xdd\x85,\x91\xc4\x98<\x12\xdf+\xef!" +
	"\xed\xd9\x8f\xc7\xaf\x15\x00\xadmG\x94C\xd3\xa7\xfc\xf0" +
	"\xbe\xa8\x08;\xeb\xf6\xc9+\xea\xe8I\xad#\xd3;n" +
	"\xab\xdfu\xd9\xdc\xa1-!\xd3\xb6\x1b\xeb\xeb\x0e\xc8\x9b" +
	"m\xdd\x8du\x14\xe0\xd1\x8ew7<\xb6!\xfe@\x94" +
	"\xdd\xc3u\x1f\xc9c\xb6\xee1\xdb\xee\x81\x7fn:\xf2" +
	"^\xcd+\x0f\x80\xda\x84\x82\xf5\xf1\xc3/\xbe\xd5\xda\xf4" +
	"\x97\x17\xa1\x09\x13\x08 K\xf5\x07\x00\xe5\xa6z\xb2\xea" +
	"\xa1\x1a\x82M ck\xea\xff!\xdfV\x7f9\xc0\xec" +
	"\x9d\xf5\xdf'\xd8&\xb7no]Y{\xedH\x84\x0f" +
	"\xb3\xafL2\x94\x17&\xe9\xbbyIrbtlD" +
	"\xbda\xca\x17\xbb\xc3\xa6m\xed\x81\xe4d\x947\xd8\xda" +
	"\xeb\x93\xbf\x05\xb4\xbey\xd1\xbdkk\xa65?\x19\x99" +
	"\xbf\xd6\xc6'\xe5+\x1b\xe9\xe9\xb2F\xf2\xdazu\xff" +
	"\xf5G\xb7\xdc:\x1aY\x19\x03\x8d\xc7\xe5\xf5\x8d\xe7\x13" +
	"p\xb6r\xdb\xfb\xb5\xdf6\xdey\xe5iP/\xc0\xc0" +
	"\xa7\x8e\x1f\xa7\x1a\xdbP\x9e$\xd2w5\"\xf9q\xe4" +
	"\xf8y\x83\x87\x8f\xcd}!\x0a\xe6\x9d\xe2G\xf2\x1e[" +
	"\xf7q\x91\"\xf4\x80U\x93(\x84\x95\xdf\x16\x7f-\x1f" +
	"&\xe5\xd9\xef\x89v\xcd}2\xf8\x8b\xf2\xf2\x16\xeb\xa5" +
	"\x90e\x1b\xe9\xa3\xa9C\xf2\xe7)\xbb\xaeS\xe4\x85\xc8" +
	"_\x9d\xd7q\xc7\x05\xfb\xa2\xea\xf3\x1e\xe9\x80\xbcM\xa2" +
	"\xa7\xad\x12y\xb1\xf3\x83\x0b\x1f\xdc\xf5\x10\xdf\x1f\xa5\xfb" +
	"\xac\xb4W~\xde\xd6\xfd\x93\xad\xbbJZ\xf9\xf4\xe0\xf4" +
	"\x97\xdf$\xe0\x98\x0f\x1c\xe9\xce~[Z\x8d\xf2\x98\xad" +
	"|L\"'\xdez\xef\x0f\x8fn\xbcw\xda\x87\x91\x09" +
	"\xdc<\xb9\x19\xe5m\x93m7&\x93v\xe1`\xe6\xba" +
	"\xe6\xd7O~\x18Y\xf7\xf2>y\x85l\xd7\xbdLn" +
	"\\1\xed\xcd\x1f\xf76\xbd\xf4i\x94ey\xbd|\\" +
	"\xdel+o\x94)\x7f\xed\x1f\\=\xe3\xa9\xa3\xe2X" +
	"\xa4\xf2Qy\xaf<f+\x1f\xb3\x95\x9f}n\xdd\xc8" +
	"O\xdf|\xf4d\x94\x17\xab\x94\xe3\xb2\xae\xd0\x13W\xc8" +
	"\x8b\x86\xe6w~\xd3{\xd1\xe1S\xa0\x9e\x87\x81\x02l" +
	"bv\x97lQ\x0e\x01\xca[\x15\xb2\xfa\xbb\xa7nY" +
	"<\xfa\xf0\x9e\xd3Q}\xfa\xb9r\\\xc6&z\xfaR" +
	"!\x1c\x8c\x9c^*\xe6[rL+\x17\xcbs:\x17" +
	"u\x16{J\x19\xbef\x80\x0b\x86\xd9\x8d\xa8\xc6\x84\x18" +
	"@\x0c\x01\xa4d\x1b\x80Z+\xa0z!\xc3\xb4\xde\xd3" +
	"\xb9\xc0\xc0F\xc0n\x01q\x120z\x0c\xd9\xea\xd6\xcc" +
	"\xbee\xdc\xd4\xf2\x9a\xd9\xae\xb5\\S29\xd9\xab\xf5" +
	"\xec\xcd\x98\x09\xa0^(\xa0z\x09CD\x05\xe9\xdd," +
	":c\xba\x80\xea\xa5\x0c\xc5b\xc9\xe4\xd8\x00\x0c\x1b\x00" +
	"\xd3\xba\x91\xd7\x0c\xfb\xa4I\xe3NZ\xb46_=\x0c" +
	"\x80\x0eQ\xbcCn\xeb\x00P\xd7\x09\xa8\xde\xe1\x1f\xb2" +
	"~*\x80z\xab\x80\xea\x9d\x0c%\x86\x0a2\x00i\xc3" +
	"\x0d\x00\xea\x1d\x02\xaa\xdb\x19J\x02*(\x00H\xdb\xe8" +
	"\xeb\xfb\x05T\x1fa(\xc5R\x0a\xc6\x00\xa4\x1dK\x01" +
	"\xd4\xed\x02\xaa\xbb\x19\x0e\xf78Gc\x12\x18&\x01\x13" +
	"\xfd\xe6\x00&\x80a\x02\xd0\xd2\x8b&\xaf\xf4h9\x10" +
	"\xb8\x07U\xca'Q@z9\xcc\xd7\x95\x97\xeb\xfd\x1c" +
	"k\x81a-\xa0\xd5\xc7\xb5<\xaf\\\xd7\x06\xa4\x00\x0c" +
	"1\x10.\xda\xe1f\xf8`:\xc3\xcb\x85\xa1P~\xe6" +
	"\xb8\xf9Q\x18\xb6W\xb81P0=W\xce6\x90\x9d" +
	"\xdf\xd9~\xed5\x0b\x96\x19\xbdd\xe1\xaa\xaa\x05y\x0b" +
	"6\x03d\xefF\x01\xb3\x0f\"\xc3$Z\x96\x8d\x98\xbc" +
	"\x15\xdb\x00\xb2\xf7\x91`;\x09\xd8\x7f-\x1b5y\x1b" +
	"v\x00d\xef'\xc1#$\x10\xbe\xb4l\xe4\xe4\x1d\x98" +
	"\x01\xc8n'\xc1n\x12\xc4\xceX6z\xf2\x88-\xd8" +
	"E\x82Q\x12\xd4\xfc\xc7R\xb0\x06@\xde\x83\xab\x01\xb2" +
	"O\x90\xe0\x8f$\x88\x9f\xb6\x14\x8c\x13)\xe0\xed\x00\xd9" +
	"gH\xf0\"\x09\x12\xa7,\xc5n\x90\xe7\xb1\x02\x90\xfd" +
	"3\x09\xf6\x93\xa0\xf6\x0bK\xc1Z\x00\xf9e\xdb\xd4\xdf" +
	"H\xf0\x06\x09&\x9d\xb4\x14\x9c\x04 \xbf\x8e\xbf\x04\xc8" +
	"\xbeA\x82\x83$\xa8\xfb\xb7\xa5`\x1d\xb1\x1fn\x02\xc8" +
	"\x1e$\xc1'$\xa8\xff\xdcR\xb0\x9e\x1a\x16\x97\x02d" +
	"\x8f\x90\xe0\x04\x09\x1aNX\x0a6\x10\xf1\xd9\x87\x7fJ" +
	"\x823$H~f)\x98\xa4\xf9n\xbb\xfb\x05\x09b" +
	"\x8c\xa1\xd4\x88\x0a6\x02\xc8\xc8\x08\xaa3\xf4\xbe\x961" +
	"\x14\xf4|\xb5\x9a\xd3\x03E\x83\x9b\x10\x1f.kf_" +
	"\x86\xaf\xc1\x94O\xd5\x80\x98\x02\xb4\x1cI\xb9\x008\x84" +
	")\x9fb\\\xa9f8]\x0bH\xdfz\x04\x1b\x96&" +
	"\xca\x05\xfa\xda\x9b\xf8\xae\xbc\xc2\x07\xaf)\x99z\x0f\xea" +
	"9\xcd\xd4KE\xc0\x94?\xbd]\x1d\xbd\xc7\xb5\x91^" +
	"3\xc0\x0d\x13S\xfef\x14\xd6pO\xf1\xf8\xd5\x95\x1b" +
	"\xbc2\xa8\xe7x'\x06\xf8\x05S\xfe\x88\x8eT+\x17" +
	"\x86\x80\xdc\xf1h\xd2w\xd9\x15\x92\xd4\xdb\x8e<\x1b\xbd" +
	"\xcb\x87\xca|\x09\xa4Ke\x07No>\x854\x90\x14" +
	"\xc8\x0e\xa6\xfcI\xea\xe8\x0c\x9b\x15-\xc7;\xf3\xd5\xce" +
	"\x0eQ\xce\xbcl\xa7\xefa\xa8\x0f;|\x9e\x1c\xe6E" +
	"\xb3\xa2\x07\xdb\xdf\xe3f\xa7\xfd#8\xb3\xd3\xa1\x0d!" +
	"\x17\xe6\xcb6\x9f/%\x8f0g\xfa\x84y6G\x8a" +
	"D\xd1\x13\x10f\xc6M\xb9\x9e\xd3DJy(\x00\"" +
	"\xb8\x06\x01\xd5)\x0c-#\xc3\x07)T\x07\xea\xcc\xbf" +
	"N_\xbeaq\xdb\xaf< \xc7y\x9f\xe1kZz" +
	"\x0a\x9a\xd0k\x90\xeb\xa9\xbb\x1d\"\x9d\xd1\x11\xf4\xfd\x1e" +
	"\x87Hg\xcd\xf1}\x1f\xae\xf0\x9e\x0a7\xfa\xaa\x94\xd7" +
	"\xde\xa7\xe7\xf3\xbc8\x8e\x01\xc7\x8d\x16\xd4\xd4\x06\x0cl" +
	"\x0a\x92\xf4s\x7fi\x92\x9a\xa6\xfak\xb9$\xcd\xb4\\" +
	"ls\xc8\xbb\xf4\xe2\xcd\xcb\x87\xca\xc8\x13\x8byI\xa4" +
	"\xe9\xa4N\xf1\x10\xd8zS\x80\xf7\x919P\xef\xc8\xf8" +
	"\xbc\xef\x8d\x8d\x91M\x00\xean\x01\xd5g\x18\xa2\xe0\x04" +
	"\xfb{R\x1c\x15P}\x8d\xa6\x06:\xc1\xfe}5\x80" +
	"\xba_@\xf5\x08C\xa9\x86\xd9\x9c'\x1d\xa6\x94\x1e\x14" +
	"P=\xc3\xd02K\xa6V\xe8\xd2L\x10y17\xe4" +
	"Q\xb7\xfdzI\xa9\x0ch`\x1c\x18\xc6\x01\xad~\xbd" +
	"\xa8\xf7k\x85\x0e\xd4\x8a\xf9\xb5z\xde\xec\x03\xf0\xe6G" +
	"\xc1\x09\x8c\x93\xbeWu\x1e<n\xd5iFW\x89\xba" +
	"\x1d\x12\xa5b@\xcd\x03\xceQK\xd3\x04\x0e\x88=(" +
	"C\xb5+8S\xc5m\xddj\x83\x1bf\xb81nr" +
	"\xebj:\xf3\x1a}9\x88Ce\xff\x0c\xd12{_" +
	"\xfb\xc6\x8cY\x99C\x13\x9d\xe14\xae\xdb\xb7\x0b\x8bf" +
	"\x05\xed1\xd8\xe0\x9d\xb2\x90\x06\xf9\x02\x01\xd5\x1b\xfd\x89" +
	"\xbf\x8a2\xb2R@\xb5/\x90:N5y\xa3\x80j" +
	"\x81}\xcdYm\x99z?7L\xad\x1f\xb0\\\xc5{" +
	"\xdc\xfc>{\xd4.)\x19i\x93 9\xd7\xee\x83\x81" +
	"\xe5\x8eV &\x96K\x15ox\xa7\xb5|\xbebL" +
	"\xdc\x01i\xade1/\xa91\x0c\xdc\x1d$\xec\x18^" +
	"\xdc\x9d]\xa0\x99Z\xf0\xd4\xdb\xdd\x86[\xe0C3\x8f" +
	"J\xf0*\x01\xd5%\x0c\xadJi\xc0\xe4\x95\xae\x12:" +
	"\x93\xc0\x00\x1f\x0a\xcf\xb4[\x1a\xd1\xfb\x98\x10v\xce\xf6" +
	"\xadeqw\xda\xf6%\x94\xa9\xa5n\xa6\xba\x03\x84\xb6" +
	"\x8cR\xd5%\xa0z=C\xea<\xca\xd4\x0a\xcaT\xb7" +
	"\x80\xeaJ\x86VA3us \xcf\x89\x90\xea\x80a" +
	"\x1d\xd5|\xa9\xd8K/\x01y\xf5\xdd0\xa1\xc6\x0d\xa3" +
	"\xba@\x86\xf0\x0b\x14\x92\x18\xb1J\x9d\x93\xc2\xbd\x9bb" +
	"\xa8D\xb1\x1a\xbcH,\x18\xdaC\xa7\xfa{\xa8\x14\xbd" +
	"\x88\xd6\xba\x8b\xe8Rw\x11\xbd\x9b\x18\x05\x03\xb7ci" +
	"s\x1b0\x8c9\xd41@\xe4Y\x16P\xfd\x19\xc3D" +
	"\xde0\xab\xa9H\x18\x95\x9c\x97\x96~m\x1d\xe5\xc2 " +
	"\xac\xaa\xd5\xd4S\xd0z\x8d\xf6\xbe\xf2\xfc\x9e\xde@L" +
	"S\x16\xbe\x7f\xb5\xfc\xd7o\xed\x9dx,\xb9\x0d\x970" +
	"+\xe1\x86\xa3Z\x9e+\xa0\xda\x15\x08\xad\x93\xa2X\"" +
	"\xa0\xba\x9cBs\xf3\xa8\xde\xe2\xe7Q\xa4\x95\x06S\xfe" +
	"\x1f!\xeeD\xe9+\x19\xa6?o\xbc[N`\x0f\xca" +
	"\x9a\x9a\x09\xedz\x8e\xb40\xe5\xdf\x0a#GR \xcf" +
	"\x82\x93\x93@\x96g\xfa\x0b\xb3h\x0e\x959\x8a\xd6\x8f" +
	"\xaex\xa8\x8e\x8f\x9c\xdcA\xd6\xc4q\xb9\x9d\x97\xedl" +
	"w\xe8m\x82\xab\x91\xc2&\xea\x8c\xd8\xf8\xce\xa8\x0e#" +
	"g\x16%\x86\xca<\x04l%\xaa?n\xf2\xfb\xc3\xa3" +
	"\xb2\x15m\x81\x06\xb1\xa9\xacK/B\xda\x9e\x03\xde " +
	")s\xfb\xf5\xcd \x06_\x9f\xb3\x91\xcf\xa2t\x87o" +
	"\x85q\xe9_\x1d\xe5\xe5T?\xfd\xd5.V3\xae\x93" +
	"\x85 \xfd'\x1c\xdc\x83\xb4/\x02&L\xb3\xe0\xdf\x88" +
	"\xaa%\x11\x9ch\xc1\xcah\x9c\xf0\x1e\xfb\x7f\xafg\xde" +
	"U\xff\xab\xcc\xa6i\xf6\x0c}\x8d\x1b-5\xc2\xc5\x02" +
	"\xaaW\xb0\xd0Jv\xeeJ\x1fG*\xed}\xde\x9d/" +
	"pb\xc6_\xa1\xaa'\xb6v\xb8'\x12\xa3\xf3J\xa5" +
	"T\x99_\xb2\x99\xd1\xcd\xf8\xf8\xa0\xbd\xbfz\"\x83\x0e" +
	"\x14A\xe4\xb5\xf3\x9cxz\x7f\xcaD\x9a^\xe2B\xd0" +
	"\xa2\xe5\x13\xf9\x8a\xe1\x04\xe6D\x11\xc4\xd2.+\x16\xda" +
	"vE\xbd<xiu;\xa7\x1f\xdf\xf9\xeaU\xddO" +
	"Z\xa0~\xdb\x82\xf4\x15s\xe9kj\xa0\xa8Y\xb7s" +
	"\xfa\xb29~Q\x9f\xdd6\xc1k\x7f\xbbn\xcc/U" +
	"xus\xfd_\x00\x00\x00\xff\xff\x0c\x9d\x98\x01"

func init() {
	schemas.Register(schema_8f4bd412642c9517,
		0x877af4eba6adb0f3,
		0x88b4277fa83dde2d,
		0x8adfcabe5ff9daf4,
		0x8f8172e4469c111a,
		0x91ea9bb47f46c346,
		0x947e1828e214e89d,
		0x95794035a80b7da1,
		0x9b0685a785df42e9,
		0x9bce05e1e88ad9da,
		0xa5cff7314a4335e5,
		0xa94f085c31a03112,
		0xacf8185a51a9f1b4,
		0xb21a270577932520,
		0xb47c95e958cccfff,
		0xb7cede732308e432,
		0xc340ede57616f2e8,
		0xc4c61531dcc4a3eb,
		0xc5ff2e54709776ec,
		0xca1e844241cf650f,
		0xcc65a2a89c24e6a5,
		0xd7c92876b75c115d,
		0xe7279389a6bbe1dc,
		0xe7f7d11a5652e06c,
		0xf0c5156786d72738,
		0xf10fe9b6293ee63f,
		0xf7a6d78ba978beb9,
		0xf9e52567abde1a0c,
		0xfab1a3b4477ab6b3)
}
