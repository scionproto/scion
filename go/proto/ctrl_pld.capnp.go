// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SignedCtrlPld struct{ capnp.Struct }

// SignedCtrlPld_TypeID is the unique identifier for the type SignedCtrlPld.
const SignedCtrlPld_TypeID = 0xc34ac578b174f099

func NewSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func NewRootSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func ReadRootSignedCtrlPld(msg *capnp.Message) (SignedCtrlPld, error) {
	root, err := msg.RootPtr()
	return SignedCtrlPld{root.Struct()}, err
}

func (s SignedCtrlPld) String() string {
	str, _ := text.Marshal(0xc34ac578b174f099, s.Struct)
	return str
}

func (s SignedCtrlPld) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedCtrlPld) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SignedCtrlPld) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s SignedCtrlPld) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s SignedCtrlPld) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SignedCtrlPld_List is a list of SignedCtrlPld.
type SignedCtrlPld_List struct{ capnp.List }

// NewSignedCtrlPld creates a new list of SignedCtrlPld.
func NewSignedCtrlPld_List(s *capnp.Segment, sz int32) (SignedCtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SignedCtrlPld_List{l}, err
}

func (s SignedCtrlPld_List) At(i int) SignedCtrlPld { return SignedCtrlPld{s.List.Struct(i)} }

func (s SignedCtrlPld_List) Set(i int, v SignedCtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedCtrlPld_List) String() string {
	str, _ := text.MarshalList(0xc34ac578b174f099, s.List)
	return str
}

// SignedCtrlPld_Promise is a wrapper for a SignedCtrlPld promised by a client call.
type SignedCtrlPld_Promise struct{ *capnp.Pipeline }

func (p SignedCtrlPld_Promise) Struct() (SignedCtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return SignedCtrlPld{s}, err
}

func (p SignedCtrlPld_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type CtrlPld struct{ capnp.Struct }
type CtrlPld_Which uint16

const (
	CtrlPld_Which_unset     CtrlPld_Which = 0
	CtrlPld_Which_pcb       CtrlPld_Which = 1
	CtrlPld_Which_pathMgmt  CtrlPld_Which = 2
	CtrlPld_Which_sibra     CtrlPld_Which = 3
	CtrlPld_Which_drkeyMgmt CtrlPld_Which = 4
	CtrlPld_Which_sig       CtrlPld_Which = 5
	CtrlPld_Which_ack       CtrlPld_Which = 6
)

func (w CtrlPld_Which) String() string {
	const s = "unsetpcbpathMgmtsibradrkeyMgmtsigack"
	switch w {
	case CtrlPld_Which_unset:
		return s[0:5]
	case CtrlPld_Which_pcb:
		return s[5:8]
	case CtrlPld_Which_pathMgmt:
		return s[8:16]
	case CtrlPld_Which_sibra:
		return s[16:21]
	case CtrlPld_Which_drkeyMgmt:
		return s[21:30]
	case CtrlPld_Which_sig:
		return s[30:33]
	case CtrlPld_Which_ack:
		return s[33:36]

	}
	return "CtrlPld_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CtrlPld_TypeID is the unique identifier for the type CtrlPld.
const CtrlPld_TypeID = 0x8e6af2c877489f54

func NewCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func NewRootCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func ReadRootCtrlPld(msg *capnp.Message) (CtrlPld, error) {
	root, err := msg.RootPtr()
	return CtrlPld{root.Struct()}, err
}

func (s CtrlPld) String() string {
	str, _ := text.Marshal(0x8e6af2c877489f54, s.Struct)
	return str
}

func (s CtrlPld) Which() CtrlPld_Which {
	return CtrlPld_Which(s.Struct.Uint16(0))
}
func (s CtrlPld) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CtrlPld) Pcb() (PCB, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != pcb")
	}
	p, err := s.Struct.Ptr(0)
	return PCB{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPcb() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPcb(v PCB) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPcb sets the pcb field to a newly
// allocated PCB struct, preferring placement in s's segment.
func (s CtrlPld) NewPcb() (PCB, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPCB(s.Struct.Segment())
	if err != nil {
		return PCB{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) PathMgmt() (PathMgmt, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != pathMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return PathMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPathMgmt() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPathMgmt(v PathMgmt) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathMgmt sets the pathMgmt field to a newly
// allocated PathMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewPathMgmt() (PathMgmt, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewPathMgmt(s.Struct.Segment())
	if err != nil {
		return PathMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sibra() (SibraPayload, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != sibra")
	}
	p, err := s.Struct.Ptr(0)
	return SibraPayload{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSibra() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSibra(v SibraPayload) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSibra sets the sibra field to a newly
// allocated SibraPayload struct, preferring placement in s's segment.
func (s CtrlPld) NewSibra() (SibraPayload, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSibraPayload(s.Struct.Segment())
	if err != nil {
		return SibraPayload{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) DrkeyMgmt() (DRKeyMgmt, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != drkeyMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return DRKeyMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasDrkeyMgmt() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetDrkeyMgmt(v DRKeyMgmt) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyMgmt sets the drkeyMgmt field to a newly
// allocated DRKeyMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewDrkeyMgmt() (DRKeyMgmt, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewDRKeyMgmt(s.Struct.Segment())
	if err != nil {
		return DRKeyMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sig() (SIGCtrl, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != sig")
	}
	p, err := s.Struct.Ptr(0)
	return SIGCtrl{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSig() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSig(v SIGCtrl) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSig sets the sig field to a newly
// allocated SIGCtrl struct, preferring placement in s's segment.
func (s CtrlPld) NewSig() (SIGCtrl, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSIGCtrl(s.Struct.Segment())
	if err != nil {
		return SIGCtrl{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ack() (Ack, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != ack")
	}
	p, err := s.Struct.Ptr(0)
	return Ack{Struct: p.Struct()}, err
}

func (s CtrlPld) HasAck() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetAck(v Ack) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAck sets the ack field to a newly
// allocated Ack struct, preferring placement in s's segment.
func (s CtrlPld) NewAck() (Ack, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewAck(s.Struct.Segment())
	if err != nil {
		return Ack{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) ReqId() uint64 {
	return s.Struct.Uint64(8)
}

func (s CtrlPld) SetReqId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CtrlPld) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s CtrlPld) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// CtrlPld_List is a list of CtrlPld.
type CtrlPld_List struct{ capnp.List }

// NewCtrlPld creates a new list of CtrlPld.
func NewCtrlPld_List(s *capnp.Segment, sz int32) (CtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return CtrlPld_List{l}, err
}

func (s CtrlPld_List) At(i int) CtrlPld { return CtrlPld{s.List.Struct(i)} }

func (s CtrlPld_List) Set(i int, v CtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s CtrlPld_List) String() string {
	str, _ := text.MarshalList(0x8e6af2c877489f54, s.List)
	return str
}

// CtrlPld_Promise is a wrapper for a CtrlPld promised by a client call.
type CtrlPld_Promise struct{ *capnp.Pipeline }

func (p CtrlPld_Promise) Struct() (CtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return CtrlPld{s}, err
}

func (p CtrlPld_Promise) Pcb() PCB_Promise {
	return PCB_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) PathMgmt() PathMgmt_Promise {
	return PathMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sibra() SibraPayload_Promise {
	return SibraPayload_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) DrkeyMgmt() DRKeyMgmt_Promise {
	return DRKeyMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sig() SIGCtrl_Promise {
	return SIGCtrl_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ack() Ack_Promise {
	return Ack_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_df42b02816bdc1bf = "x\xdaL\x91\xc1K\x14o\x1c\x87?\x9fwfw\xc6" +
	"\x1f;\xec\x0c3\xbf\xe8\x10\x08\xe2A\xa3\"E\x08\x84" +
	"\xa8\x14)\x85\x0d_\xa7\x0e]\x92\xdd\x99e\xdb\\\xb7" +
	"mv\xc2<E\xe09:t\xa8.\xd1\x1fP\xe4I" +
	"\x08\xa4B\x02\x89\x0e\xd1\xc1S\x10\x1d\x82\x88\x02\x15\x05" +
	"\xd3\xec\x8dw\xdb\xa5n\xc3\xf3\xcc\xf7\xfb\xbe/\x8f\xfb" +
	"\xf6\xb4\xf02K\x80\xb43Yu\xe1\xd1\xb9\xb9\xd5\xcd" +
	"\xabw \xf3\x14\xea\xc5\xab\xe5\x03}\xcfF>bL" +
	"X\x16\xe0\x9dy\xee\x8d[\xc0\xc0\x98\"\xa8\x1e\xac\xa7" +
	"\x8b7_O\xac\xc0\xcb\xf3\xef\xaf\x19a\x01~A|" +
	"\xf5/\xb5\xbe.\x8a9PEiR\x9bn\xd4b\x1e" +
	"\x8b\x8a\x8dzcx\xf4T\x9a\xd4&k\xf1$){" +
	"\x0d3\xa7\x94I\xc0\xfb>\x08\xc8/\x06\xe5\x96\xa0\xc3" +
	"_*\xa0\xa6\x1b=\x80\xfcfP\xee\x08:b_\x05" +
	"\x14\x80\xb7=\x01\xc8-\x83S\x14t\x8c\x9f*\xa0\x01" +
	"x\xfbz\xc3\x8e\xc1\xd0\xd4\xd8\xdcS\x01M\xc0'\xa7" +
	"\x80)\x1a\x0cs\x9agvU\xc0\x0c\xe0w\xb1\x07\x08" +
	"M-\\-\xb2?T\xc0,\xe0;-ak\x11P" +
	"\xd0\xb3\x18P?\xc7\xe3 \x10\xe64?\xa8\xb9\xcd\x80" +
	"6\xe0\xff\xcf\x11 t5?D\xc1\xee\x1b\xf5f9" +
	"E\xd6jD%\xba\xea\xb3\x9c?\x11\x9d}\xb9\x06\x90" +
	".\xa8\x1a\xc5\xf4J\xa12\x9b\x02\xa0\xab\xde\xbc{\x98" +
	"\x1b\xd9=\xf2\xb8m\xbb\x9b\xd5RR\xa4\xab\xee\xae," +
	"Lo\xaf\x0elv\xa6\xe2d\xa6<_\xa8\xcc\x82\xa9" +
	"\x9e\xda\xf0\xf7\xd6\x96\x96\x17\xdb\xd6jV+t\x95}" +
	"r\xb0\xd9\xdf{\xf9S\x87\x16\xa3\x19\xba\xea\xc3\xd3\xa1" +
	"\xf7\xc3\xf7\x9f\xacwNH\xca\xd7\xc7cvA\xb0\x0b" +
	"\xbc\x95&\xc5\xa8<\x1e\xd3\x81\xa0\xf3O,\xd1\x8e\x15" +
	"V+\xf5r<\x9a&\xf9N2\xdb0\x81V\xb1\xfe" +
	"\xc3\x80\xec5(\x8f\x0bz\xe4\x9f`G5\xec3(" +
	"\x87\x04\xf3\xa5\xda\xb5Rgu\xbeY\xad\xd4\xe9\xaa\xff" +
	"n\x9f\xdf\x8a\xef\x15\x16\xda\xf7\xf9\x1d\x00\x00\xff\xff\xa4" +
	"\x1d\x9b\x97"

func init() {
	schemas.Register(schema_df42b02816bdc1bf,
		0x8e6af2c877489f54,
		0xc34ac578b174f099)
}
