// Copyright 2025 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package control

import (
	"context"
	"fmt"

	"github.com/scionproto/scion/control/beacon"
	"github.com/scionproto/scion/control/beaconing"
	"github.com/scionproto/scion/pkg/addr"
	"github.com/scionproto/scion/pkg/experimental/hiddenpath"
	"github.com/scionproto/scion/pkg/log"
	"github.com/scionproto/scion/pkg/metrics"
	seg "github.com/scionproto/scion/pkg/segment"
	"github.com/scionproto/scion/pkg/snet/addrutil"
	"github.com/scionproto/scion/private/segment/seghandler"

	"github.com/scionproto/scion/pkg/private/serrors"
)

type SegmentRegistrationPlugin interface {
	// ID returns the unique identifier of the plugin.
	ID() string
	// New creates a new instance of the plugin with the provided configuration.
	New(
		ctx context.Context,
		t *TasksConfig,
		segmentType seg.Type,
		policyType beacon.PolicyType,
		config map[string]any,
	) (SegmentRegistrar, error)
	// Validate validates the configuration of the plugin.
	Validate(config map[string]any) error
}

type SegmentRegistrar interface {
	// RegisterSegments registers the given segments with the given type according
	// to the plugin's logic.
	RegisterSegments(
		ctx context.Context,
		segments []beacon.Beacon,
		peers []uint16,
	) (RegistrationStats, error)
}

type SegmentRegistrars map[beacon.PolicyType]map[string]SegmentRegistrar

func (s SegmentRegistrars) Register(
	policyType beacon.PolicyType, registrationPolicy string, registrar SegmentRegistrar,
) error {
	if _, ok := s[policyType]; !ok {
		s[policyType] = make(map[string]SegmentRegistrar)
	}
	if _, ok := s[policyType][registrationPolicy]; ok {
		return serrors.New("registrar already registered for policy type and registration policy",
			"policy_type", policyType, "registration_policy", registrationPolicy)
	}
	s[policyType][registrationPolicy] = registrar
	return nil
}

func (s SegmentRegistrars) RegisterDefault(
	policyType beacon.PolicyType, registrar SegmentRegistrar,
) error {
	if _, ok := s[policyType]; !ok {
		s[policyType] = make(map[string]SegmentRegistrar)
	}
	if _, ok := s[policyType][beacon.DEFAULT_GROUP]; ok {
		return serrors.New("default registrar already registered for policy type",
			"policy_type", policyType)
	}
	s[policyType][beacon.DEFAULT_GROUP] = registrar
	return nil
}

func (s SegmentRegistrars) Get(
	policyType beacon.PolicyType, registrationPolicy string,
) (SegmentRegistrar, error) {
	if _, ok := s[policyType]; !ok {
		return nil, serrors.New("no registrars found for policy type",
			"policy_type", policyType)
	}
	registrar, ok := s[policyType][registrationPolicy]
	if !ok {
		return nil, serrors.New("no registrar found for registration policy",
			"registration_policy", registrationPolicy, "policy_type", policyType)
	}
	return registrar, nil
}

type RegistrationStats struct {
	// Status contains the registration status for each segment.
	// The key is the segment ID, generated by seg.PathSegment.FullID().
	// If the segment was successfully registered, the error is nil.
	Status map[string]error
	// WritetStats contains the write statistics from the underlying writer.
	WriteStats beaconing.WriteStats
}

// segmentRegistrationPlugins is a global map of registered segment registration plugins.
var segmentRegistrationPlugins = map[string]SegmentRegistrationPlugin{}

func RegisterPlugin(p SegmentRegistrationPlugin) {
	id := p.ID()
	if _, ok := segmentRegistrationPlugins[id]; ok {
		panic(fmt.Sprintf("plugin %q already registered", id))
	}
	segmentRegistrationPlugins[id] = p
}

func GetPlugin(id string) (SegmentRegistrationPlugin, bool) {
	p, ok := segmentRegistrationPlugins[id]
	return p, ok
}

type DefaultSegmentRegistrationPlugin struct{}

var _ SegmentRegistrationPlugin = (*DefaultSegmentRegistrationPlugin)(nil)

func (p *DefaultSegmentRegistrationPlugin) ID() string {
	return beacon.DEFAULT_GROUP
}

func (p *DefaultSegmentRegistrationPlugin) New(
	ctx context.Context,
	t *TasksConfig,
	segType seg.Type,
	policyType beacon.PolicyType,
	config map[string]any,
) (SegmentRegistrar, error) {
	// Create the metrics for internal errors and registered segments.
	var internalErr, registered metrics.Counter
	if t.Metrics != nil {
		internalErr = metrics.NewPromCounter(t.Metrics.BeaconingRegistrarInternalErrorsTotal)
		registered = metrics.NewPromCounter(t.Metrics.BeaconingRegisteredTotal)
	}
	// Create either a local, hidden or remote writer.
	var writer beaconing.Writer
	switch {
	case segType != seg.TypeDown:
		writer = &beaconing.LocalWriter{
			InternalErrors: metrics.CounterWith(internalErr, "seg_type", segType.String()),
			Registered:     registered,
			Type:           segType,
			Intfs:          t.AllInterfaces,
			Extender: t.extender("registrar", t.IA, t.MTU, func() uint8 {
				return t.BeaconStore.MaxExpTime(policyType)
			}),
			Store: &seghandler.DefaultStorage{PathDB: t.PathDB},
		}
	case t.HiddenPathRegistrationCfg != nil:
		writer = &hiddenpath.BeaconWriter{
			InternalErrors: metrics.CounterWith(internalErr, "seg_type", segType.String()),
			Registered:     registered,
			Intfs:          t.AllInterfaces,
			Extender: t.extender("registrar", t.IA, t.MTU, func() uint8 {
				return t.BeaconStore.MaxExpTime(policyType)
			}),
			RPC: t.HiddenPathRegistrationCfg.RPC,
			Pather: addrutil.Pather{
				NextHopper: t.NextHopper,
			},
			RegistrationPolicy: t.HiddenPathRegistrationCfg.Policy,
			AddressResolver: hiddenpath.RegistrationResolver{
				Router:     t.HiddenPathRegistrationCfg.Router,
				Discoverer: t.HiddenPathRegistrationCfg.Discoverer,
			},
		}
	default:
		writer = &beaconing.RemoteWriter{
			InternalErrors: metrics.CounterWith(internalErr, "seg_type", segType.String()),
			Registered:     registered,
			Type:           segType,
			Intfs:          t.AllInterfaces,
			Extender: t.extender("registrar", t.IA, t.MTU, func() uint8 {
				return t.BeaconStore.MaxExpTime(policyType)
			}),
			RPC: t.SegmentRegister,
			Pather: addrutil.Pather{
				NextHopper: t.NextHopper,
			},
		}
	}
	// Construct the registrar with the underlying writer.
	return &DefaultSegmentRegistrar{
		segType: segType,
		writer:  writer,
	}, nil
}

func (p *DefaultSegmentRegistrationPlugin) Validate(
	config map[string]any,
) error {
	// Default plugin does not have any configuration to validate.
	return nil
}

type DefaultSegmentRegistrar struct {
	segType seg.Type
	writer  beaconing.Writer
}

var _ SegmentRegistrar = (*DefaultSegmentRegistrar)(nil)

func (r *DefaultSegmentRegistrar) RegisterSegments(
	ctx context.Context,
	segments []beacon.Beacon,
	peers []uint16,
) (RegistrationStats, error) {
	writeStats, err := r.writer.Write(ctx, map[string][]beacon.Beacon{
		beacon.DEFAULT_GROUP: segments,
	}, peers)
	if err != nil {
		return RegistrationStats{}, serrors.Wrap("failed to register segments", err,
			"seg_type", r.segType, "num_segments", len(segments), "peers", peers)
	}
	// TODO: Populate the Status field.
	return RegistrationStats{
		Status:     make(map[string]error),
		WriteStats: writeStats,
	}, nil
}

// GroupWriter is a beaconing.Writer that writes beacons across multiple segment registrars
// registered in Plugins. It is parameterized by a PolicyType, which determines the registrars
// that will be used.
type GroupWriter struct {
	PolicyType beacon.PolicyType
	Plugins    SegmentRegistrars
}

var _ beaconing.Writer = (*GroupWriter)(nil)

// Write writes beacons to multiple segment registrars based on the PolicyType.
//
// For every group of beacons, the correct registrar is selected based on the
// PolicyType and the group name (which should correspond to the plugin ID).
func (w *GroupWriter) Write(
	ctx context.Context,
	beacons beacon.GroupedBeacons,
	peers []uint16,
) (beaconing.WriteStats, error) {
	logger := log.FromCtx(ctx)
	writeStats := beaconing.WriteStats{Count: 0, StartIAs: make(map[addr.IA]struct{})}
	for name, beacons := range beacons {
		registrar, err := w.Plugins.Get(w.PolicyType, name)
		if err != nil {
			return beaconing.WriteStats{}, serrors.Wrap("getting segment registrar", err,
				"policy", w.PolicyType, "name", name)
		}
		stats, err := registrar.RegisterSegments(ctx, beacons, peers)
		if err != nil {
			return beaconing.WriteStats{}, serrors.Wrap("registering segments", err,
				"policy", name)
		}
		// Log the segment-specific errors encountered during registration.
		for id, err := range stats.Status {
			if err != nil {
				logger.Error("Failed to register segment", "segment_id", id, "err", err)
			}
		}
		// Extend the write stats with the plugin-specific write stats.
		writeStats.Extend(stats.WriteStats)
	}
	return writeStats, nil
}
