// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SVCResolutionReply struct{ capnp.Struct }

// SVCResolutionReply_TypeID is the unique identifier for the type SVCResolutionReply.
const SVCResolutionReply_TypeID = 0x85b2cdeba075551b

func NewSVCResolutionReply(s *capnp.Segment) (SVCResolutionReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SVCResolutionReply{st}, err
}

func NewRootSVCResolutionReply(s *capnp.Segment) (SVCResolutionReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SVCResolutionReply{st}, err
}

func ReadRootSVCResolutionReply(msg *capnp.Message) (SVCResolutionReply, error) {
	root, err := msg.RootPtr()
	return SVCResolutionReply{root.Struct()}, err
}

func (s SVCResolutionReply) String() string {
	str, _ := text.Marshal(0x85b2cdeba075551b, s.Struct)
	return str
}

func (s SVCResolutionReply) Transports() (Transport_List, error) {
	p, err := s.Struct.Ptr(0)
	return Transport_List{List: p.List()}, err
}

func (s SVCResolutionReply) HasTransports() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SVCResolutionReply) SetTransports(v Transport_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTransports sets the transports field to a newly
// allocated Transport_List, preferring placement in s's segment.
func (s SVCResolutionReply) NewTransports(n int32) (Transport_List, error) {
	l, err := NewTransport_List(s.Struct.Segment(), n)
	if err != nil {
		return Transport_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SVCResolutionReply_List is a list of SVCResolutionReply.
type SVCResolutionReply_List struct{ capnp.List }

// NewSVCResolutionReply creates a new list of SVCResolutionReply.
func NewSVCResolutionReply_List(s *capnp.Segment, sz int32) (SVCResolutionReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SVCResolutionReply_List{l}, err
}

func (s SVCResolutionReply_List) At(i int) SVCResolutionReply {
	return SVCResolutionReply{s.List.Struct(i)}
}

func (s SVCResolutionReply_List) Set(i int, v SVCResolutionReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SVCResolutionReply_List) String() string {
	str, _ := text.MarshalList(0x85b2cdeba075551b, s.List)
	return str
}

// SVCResolutionReply_Promise is a wrapper for a SVCResolutionReply promised by a client call.
type SVCResolutionReply_Promise struct{ *capnp.Pipeline }

func (p SVCResolutionReply_Promise) Struct() (SVCResolutionReply, error) {
	s, err := p.Pipeline.Struct()
	return SVCResolutionReply{s}, err
}

type Transport struct{ capnp.Struct }

// Transport_TypeID is the unique identifier for the type Transport.
const Transport_TypeID = 0xdec7fa6a5148fde5

func NewTransport(s *capnp.Segment) (Transport, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Transport{st}, err
}

func NewRootTransport(s *capnp.Segment) (Transport, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Transport{st}, err
}

func ReadRootTransport(msg *capnp.Message) (Transport, error) {
	root, err := msg.RootPtr()
	return Transport{root.Struct()}, err
}

func (s Transport) String() string {
	str, _ := text.Marshal(0xdec7fa6a5148fde5, s.Struct)
	return str
}

func (s Transport) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Transport) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Transport) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Transport) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Transport) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Transport) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Transport) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Transport) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// Transport_List is a list of Transport.
type Transport_List struct{ capnp.List }

// NewTransport creates a new list of Transport.
func NewTransport_List(s *capnp.Segment, sz int32) (Transport_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Transport_List{l}, err
}

func (s Transport_List) At(i int) Transport { return Transport{s.List.Struct(i)} }

func (s Transport_List) Set(i int, v Transport) error { return s.List.SetStruct(i, v.Struct) }

func (s Transport_List) String() string {
	str, _ := text.MarshalList(0xdec7fa6a5148fde5, s.List)
	return str
}

// Transport_Promise is a wrapper for a Transport promised by a client call.
type Transport_Promise struct{ *capnp.Pipeline }

func (p Transport_Promise) Struct() (Transport, error) {
	s, err := p.Pipeline.Struct()
	return Transport{s}, err
}

const schema_a52f74a5947eb3b7 = "x\xda\x12\x88t`\x12d\xdd\xce\xc0\x10\xc8\xc1\xca\xf6" +
	"_:\xb4t\xc1\xeb\xb3\x9bZ\x19\x04E\x19\xffo\xdf" +
	"\\7ei\x89\xfeR\x06VFv\x06\x06CG'" +
	"F\xc1@v\x06\x06A_{\x06\xc6\xffO\xffz\x04" +
	"f\xfd:~\x0fM%\x13HA\xe3/\xc1^\x10\xdd" +
	"Y\xce\xc0\xf8\xbf\xb8,9\xbe(\xb58\x9f%\xa7\xb4" +
	"$3?O/9\xb1 \xaf\xc0*8\xcc9(\xb5" +
	"8\x1f\"\x16\x94Z\x90S\xc9\x10\xc0\xc8\x18\xc8\xc2\xcc" +
	"\xc2\xc0\xc0\xc2\xc8\xc0 \xc8\x1b\xc5\xc0\x10\xc8\xc3\xcc\x18" +
	"\xa8\xc1\xc4\xf8\xbf\xa4(1\xaf\xb8 \xbf\x88\x81\xb9\xa4" +
	"\x98\x91\x8f\x811\x80\x99\x91Q\x00\xe1\x04\x06F\x90 " +
	"\xdc&&\x14\x9bB\x8a\x12\xed\xc1\x9aK@\x16p\xc0" +
	"-\xd0Tb`\x08Taf\x0c4`b\x14dd" +
	"\x14a\x04\x09\xea\x1a10\x04j03\x06\x9a01" +
	"\xb2g\xa7V2\xf2001\xf200\xca\x97%\xe6" +
	"\x94\xa6\xc2x\x80\x00\x00\x00\xff\xffM\xe7R "

func init() {
	schemas.Register(schema_a52f74a5947eb3b7,
		0x85b2cdeba075551b,
		0xdec7fa6a5148fde5)
}
