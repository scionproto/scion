// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/sciond/internal/fetcher (interfaces: Policy)

// Package mock_fetcher is a generated GoMock package.
package mock_fetcher

import (
	gomock "github.com/golang/mock/gomock"
	pathpol "github.com/scionproto/scion/go/lib/pathpol"
	reflect "reflect"
)

// MockPolicy is a mock of Policy interface
type MockPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyMockRecorder
}

// MockPolicyMockRecorder is the mock recorder for MockPolicy
type MockPolicyMockRecorder struct {
	mock *MockPolicy
}

// NewMockPolicy creates a new mock instance
func NewMockPolicy(ctrl *gomock.Controller) *MockPolicy {
	mock := &MockPolicy{ctrl: ctrl}
	mock.recorder = &MockPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPolicy) EXPECT() *MockPolicyMockRecorder {
	return m.recorder
}

// Filter mocks base method
func (m *MockPolicy) Filter(arg0 pathpol.PathSet) pathpol.PathSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0)
	ret0, _ := ret[0].(pathpol.PathSet)
	return ret0
}

// Filter indicates an expected call of Filter
func (mr *MockPolicyMockRecorder) Filter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPolicy)(nil).Filter), arg0)
}
