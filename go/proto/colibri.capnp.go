// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SegmentReservationID struct{ capnp.Struct }

// SegmentReservationID_TypeID is the unique identifier for the type SegmentReservationID.
const SegmentReservationID_TypeID = 0x8eeec8f2d8e7feb5

func NewSegmentReservationID(s *capnp.Segment) (SegmentReservationID, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentReservationID{st}, err
}

func NewRootSegmentReservationID(s *capnp.Segment) (SegmentReservationID, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentReservationID{st}, err
}

func ReadRootSegmentReservationID(msg *capnp.Message) (SegmentReservationID, error) {
	root, err := msg.RootPtr()
	return SegmentReservationID{root.Struct()}, err
}

func (s SegmentReservationID) String() string {
	str, _ := text.Marshal(0x8eeec8f2d8e7feb5, s.Struct)
	return str
}

func (s SegmentReservationID) Asid() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SegmentReservationID) HasAsid() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentReservationID) SetAsid(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SegmentReservationID) Suffix() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SegmentReservationID) HasSuffix() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentReservationID) SetSuffix(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SegmentReservationID_List is a list of SegmentReservationID.
type SegmentReservationID_List struct{ capnp.List }

// NewSegmentReservationID creates a new list of SegmentReservationID.
func NewSegmentReservationID_List(s *capnp.Segment, sz int32) (SegmentReservationID_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegmentReservationID_List{l}, err
}

func (s SegmentReservationID_List) At(i int) SegmentReservationID {
	return SegmentReservationID{s.List.Struct(i)}
}

func (s SegmentReservationID_List) Set(i int, v SegmentReservationID) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentReservationID_List) String() string {
	str, _ := text.MarshalList(0x8eeec8f2d8e7feb5, s.List)
	return str
}

// SegmentReservationID_Promise is a wrapper for a SegmentReservationID promised by a client call.
type SegmentReservationID_Promise struct{ *capnp.Pipeline }

func (p SegmentReservationID_Promise) Struct() (SegmentReservationID, error) {
	s, err := p.Pipeline.Struct()
	return SegmentReservationID{s}, err
}

type E2EReservationID struct{ capnp.Struct }

// E2EReservationID_TypeID is the unique identifier for the type E2EReservationID.
const E2EReservationID_TypeID = 0xf621d7829e171884

func NewE2EReservationID(s *capnp.Segment) (E2EReservationID, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return E2EReservationID{st}, err
}

func NewRootE2EReservationID(s *capnp.Segment) (E2EReservationID, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return E2EReservationID{st}, err
}

func ReadRootE2EReservationID(msg *capnp.Message) (E2EReservationID, error) {
	root, err := msg.RootPtr()
	return E2EReservationID{root.Struct()}, err
}

func (s E2EReservationID) String() string {
	str, _ := text.Marshal(0xf621d7829e171884, s.Struct)
	return str
}

func (s E2EReservationID) Asid() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s E2EReservationID) HasAsid() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2EReservationID) SetAsid(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s E2EReservationID) Suffix() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s E2EReservationID) HasSuffix() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2EReservationID) SetSuffix(v []byte) error {
	return s.Struct.SetData(1, v)
}

// E2EReservationID_List is a list of E2EReservationID.
type E2EReservationID_List struct{ capnp.List }

// NewE2EReservationID creates a new list of E2EReservationID.
func NewE2EReservationID_List(s *capnp.Segment, sz int32) (E2EReservationID_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return E2EReservationID_List{l}, err
}

func (s E2EReservationID_List) At(i int) E2EReservationID { return E2EReservationID{s.List.Struct(i)} }

func (s E2EReservationID_List) Set(i int, v E2EReservationID) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s E2EReservationID_List) String() string {
	str, _ := text.MarshalList(0xf621d7829e171884, s.List)
	return str
}

// E2EReservationID_Promise is a wrapper for a E2EReservationID promised by a client call.
type E2EReservationID_Promise struct{ *capnp.Pipeline }

func (p E2EReservationID_Promise) Struct() (E2EReservationID, error) {
	s, err := p.Pipeline.Struct()
	return E2EReservationID{s}, err
}

type ReservationIndexState uint16

// ReservationIndexState_TypeID is the unique identifier for the type ReservationIndexState.
const ReservationIndexState_TypeID = 0xc790178ff054f9a1

// Values of ReservationIndexState.
const (
	ReservationIndexState_pending ReservationIndexState = 0
	ReservationIndexState_active  ReservationIndexState = 1
)

// String returns the enum's constant name.
func (c ReservationIndexState) String() string {
	switch c {
	case ReservationIndexState_pending:
		return "pending"
	case ReservationIndexState_active:
		return "active"

	default:
		return ""
	}
}

// ReservationIndexStateFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ReservationIndexStateFromString(c string) ReservationIndexState {
	switch c {
	case "pending":
		return ReservationIndexState_pending
	case "active":
		return ReservationIndexState_active

	default:
		return 0
	}
}

type ReservationIndexState_List struct{ capnp.List }

func NewReservationIndexState_List(s *capnp.Segment, sz int32) (ReservationIndexState_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ReservationIndexState_List{l.List}, err
}

func (l ReservationIndexState_List) At(i int) ReservationIndexState {
	ul := capnp.UInt16List{List: l.List}
	return ReservationIndexState(ul.At(i))
}

func (l ReservationIndexState_List) Set(i int, v ReservationIndexState) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PathEndProps struct{ capnp.Struct }

// PathEndProps_TypeID is the unique identifier for the type PathEndProps.
const PathEndProps_TypeID = 0xbcacff128f5ddd26

func NewPathEndProps(s *capnp.Segment) (PathEndProps, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PathEndProps{st}, err
}

func NewRootPathEndProps(s *capnp.Segment) (PathEndProps, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PathEndProps{st}, err
}

func ReadRootPathEndProps(msg *capnp.Message) (PathEndProps, error) {
	root, err := msg.RootPtr()
	return PathEndProps{root.Struct()}, err
}

func (s PathEndProps) String() string {
	str, _ := text.Marshal(0xbcacff128f5ddd26, s.Struct)
	return str
}

func (s PathEndProps) Local() bool {
	return s.Struct.Bit(0)
}

func (s PathEndProps) SetLocal(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PathEndProps) Transfer() bool {
	return s.Struct.Bit(1)
}

func (s PathEndProps) SetTransfer(v bool) {
	s.Struct.SetBit(1, v)
}

// PathEndProps_List is a list of PathEndProps.
type PathEndProps_List struct{ capnp.List }

// NewPathEndProps creates a new list of PathEndProps.
func NewPathEndProps_List(s *capnp.Segment, sz int32) (PathEndProps_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return PathEndProps_List{l}, err
}

func (s PathEndProps_List) At(i int) PathEndProps { return PathEndProps{s.List.Struct(i)} }

func (s PathEndProps_List) Set(i int, v PathEndProps) error { return s.List.SetStruct(i, v.Struct) }

func (s PathEndProps_List) String() string {
	str, _ := text.MarshalList(0xbcacff128f5ddd26, s.List)
	return str
}

// PathEndProps_Promise is a wrapper for a PathEndProps promised by a client call.
type PathEndProps_Promise struct{ *capnp.Pipeline }

func (p PathEndProps_Promise) Struct() (PathEndProps, error) {
	s, err := p.Pipeline.Struct()
	return PathEndProps{s}, err
}

type AllocationBead struct{ capnp.Struct }

// AllocationBead_TypeID is the unique identifier for the type AllocationBead.
const AllocationBead_TypeID = 0xc8ba760a91de682a

func NewAllocationBead(s *capnp.Segment) (AllocationBead, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AllocationBead{st}, err
}

func NewRootAllocationBead(s *capnp.Segment) (AllocationBead, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AllocationBead{st}, err
}

func ReadRootAllocationBead(msg *capnp.Message) (AllocationBead, error) {
	root, err := msg.RootPtr()
	return AllocationBead{root.Struct()}, err
}

func (s AllocationBead) String() string {
	str, _ := text.Marshal(0xc8ba760a91de682a, s.Struct)
	return str
}

func (s AllocationBead) AllocBW() uint8 {
	return s.Struct.Uint8(0)
}

func (s AllocationBead) SetAllocBW(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s AllocationBead) MaxBW() uint8 {
	return s.Struct.Uint8(1)
}

func (s AllocationBead) SetMaxBW(v uint8) {
	s.Struct.SetUint8(1, v)
}

// AllocationBead_List is a list of AllocationBead.
type AllocationBead_List struct{ capnp.List }

// NewAllocationBead creates a new list of AllocationBead.
func NewAllocationBead_List(s *capnp.Segment, sz int32) (AllocationBead_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return AllocationBead_List{l}, err
}

func (s AllocationBead_List) At(i int) AllocationBead { return AllocationBead{s.List.Struct(i)} }

func (s AllocationBead_List) Set(i int, v AllocationBead) error { return s.List.SetStruct(i, v.Struct) }

func (s AllocationBead_List) String() string {
	str, _ := text.MarshalList(0xc8ba760a91de682a, s.List)
	return str
}

// AllocationBead_Promise is a wrapper for a AllocationBead promised by a client call.
type AllocationBead_Promise struct{ *capnp.Pipeline }

func (p AllocationBead_Promise) Struct() (AllocationBead, error) {
	s, err := p.Pipeline.Struct()
	return AllocationBead{s}, err
}

type SegmentSetupReqData struct{ capnp.Struct }

// SegmentSetupReqData_TypeID is the unique identifier for the type SegmentSetupReqData.
const SegmentSetupReqData_TypeID = 0xa26d74bea4eb287e

func NewSegmentSetupReqData(s *capnp.Segment) (SegmentSetupReqData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return SegmentSetupReqData{st}, err
}

func NewRootSegmentSetupReqData(s *capnp.Segment) (SegmentSetupReqData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return SegmentSetupReqData{st}, err
}

func ReadRootSegmentSetupReqData(msg *capnp.Message) (SegmentSetupReqData, error) {
	root, err := msg.RootPtr()
	return SegmentSetupReqData{root.Struct()}, err
}

func (s SegmentSetupReqData) String() string {
	str, _ := text.Marshal(0xa26d74bea4eb287e, s.Struct)
	return str
}

func (s SegmentSetupReqData) MinBW() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentSetupReqData) SetMinBW(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s SegmentSetupReqData) MaxBW() uint8 {
	return s.Struct.Uint8(1)
}

func (s SegmentSetupReqData) SetMaxBW(v uint8) {
	s.Struct.SetUint8(1, v)
}

func (s SegmentSetupReqData) SplitCls() uint8 {
	return s.Struct.Uint8(2)
}

func (s SegmentSetupReqData) SetSplitCls(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s SegmentSetupReqData) StartProps() (PathEndProps, error) {
	p, err := s.Struct.Ptr(0)
	return PathEndProps{Struct: p.Struct()}, err
}

func (s SegmentSetupReqData) HasStartProps() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetStartProps(v PathEndProps) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStartProps sets the startProps field to a newly
// allocated PathEndProps struct, preferring placement in s's segment.
func (s SegmentSetupReqData) NewStartProps() (PathEndProps, error) {
	ss, err := NewPathEndProps(s.Struct.Segment())
	if err != nil {
		return PathEndProps{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupReqData) EndProps() (PathEndProps, error) {
	p, err := s.Struct.Ptr(1)
	return PathEndProps{Struct: p.Struct()}, err
}

func (s SegmentSetupReqData) HasEndProps() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetEndProps(v PathEndProps) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEndProps sets the endProps field to a newly
// allocated PathEndProps struct, preferring placement in s's segment.
func (s SegmentSetupReqData) NewEndProps() (PathEndProps, error) {
	ss, err := NewPathEndProps(s.Struct.Segment())
	if err != nil {
		return PathEndProps{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupReqData) InfoField() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s SegmentSetupReqData) HasInfoField() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetInfoField(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s SegmentSetupReqData) AllocationTrail() (AllocationBead_List, error) {
	p, err := s.Struct.Ptr(3)
	return AllocationBead_List{List: p.List()}, err
}

func (s SegmentSetupReqData) HasAllocationTrail() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetAllocationTrail(v AllocationBead_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewAllocationTrail sets the allocationTrail field to a newly
// allocated AllocationBead_List, preferring placement in s's segment.
func (s SegmentSetupReqData) NewAllocationTrail(n int32) (AllocationBead_List, error) {
	l, err := NewAllocationBead_List(s.Struct.Segment(), n)
	if err != nil {
		return AllocationBead_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// SegmentSetupReqData_List is a list of SegmentSetupReqData.
type SegmentSetupReqData_List struct{ capnp.List }

// NewSegmentSetupReqData creates a new list of SegmentSetupReqData.
func NewSegmentSetupReqData_List(s *capnp.Segment, sz int32) (SegmentSetupReqData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return SegmentSetupReqData_List{l}, err
}

func (s SegmentSetupReqData_List) At(i int) SegmentSetupReqData {
	return SegmentSetupReqData{s.List.Struct(i)}
}

func (s SegmentSetupReqData_List) Set(i int, v SegmentSetupReqData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentSetupReqData_List) String() string {
	str, _ := text.MarshalList(0xa26d74bea4eb287e, s.List)
	return str
}

// SegmentSetupReqData_Promise is a wrapper for a SegmentSetupReqData promised by a client call.
type SegmentSetupReqData_Promise struct{ *capnp.Pipeline }

func (p SegmentSetupReqData_Promise) Struct() (SegmentSetupReqData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentSetupReqData{s}, err
}

func (p SegmentSetupReqData_Promise) StartProps() PathEndProps_Promise {
	return PathEndProps_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegmentSetupReqData_Promise) EndProps() PathEndProps_Promise {
	return PathEndProps_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type SegmentSetupResData struct{ capnp.Struct }
type SegmentSetupResData_Which uint16

const (
	SegmentSetupResData_Which_unset   SegmentSetupResData_Which = 0
	SegmentSetupResData_Which_failure SegmentSetupResData_Which = 1
	SegmentSetupResData_Which_token   SegmentSetupResData_Which = 2
)

func (w SegmentSetupResData_Which) String() string {
	const s = "unsetfailuretoken"
	switch w {
	case SegmentSetupResData_Which_unset:
		return s[0:5]
	case SegmentSetupResData_Which_failure:
		return s[5:12]
	case SegmentSetupResData_Which_token:
		return s[12:17]

	}
	return "SegmentSetupResData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SegmentSetupResData_TypeID is the unique identifier for the type SegmentSetupResData.
const SegmentSetupResData_TypeID = 0xaa345154c72e2fa5

func NewSegmentSetupResData(s *capnp.Segment) (SegmentSetupResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentSetupResData{st}, err
}

func NewRootSegmentSetupResData(s *capnp.Segment) (SegmentSetupResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentSetupResData{st}, err
}

func ReadRootSegmentSetupResData(msg *capnp.Message) (SegmentSetupResData, error) {
	root, err := msg.RootPtr()
	return SegmentSetupResData{root.Struct()}, err
}

func (s SegmentSetupResData) String() string {
	str, _ := text.Marshal(0xaa345154c72e2fa5, s.Struct)
	return str
}

func (s SegmentSetupResData) Which() SegmentSetupResData_Which {
	return SegmentSetupResData_Which(s.Struct.Uint16(0))
}
func (s SegmentSetupResData) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s SegmentSetupResData) Failure() (SegmentSetupReqData, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != failure")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s SegmentSetupResData) HasFailure() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentSetupResData) SetFailure(v SegmentSetupReqData) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFailure sets the failure field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s SegmentSetupResData) NewFailure() (SegmentSetupReqData, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupResData) Token() ([]byte, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != token")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SegmentSetupResData) HasToken() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentSetupResData) SetToken(v []byte) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetData(0, v)
}

// SegmentSetupResData_List is a list of SegmentSetupResData.
type SegmentSetupResData_List struct{ capnp.List }

// NewSegmentSetupResData creates a new list of SegmentSetupResData.
func NewSegmentSetupResData_List(s *capnp.Segment, sz int32) (SegmentSetupResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegmentSetupResData_List{l}, err
}

func (s SegmentSetupResData_List) At(i int) SegmentSetupResData {
	return SegmentSetupResData{s.List.Struct(i)}
}

func (s SegmentSetupResData_List) Set(i int, v SegmentSetupResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentSetupResData_List) String() string {
	str, _ := text.MarshalList(0xaa345154c72e2fa5, s.List)
	return str
}

// SegmentSetupResData_Promise is a wrapper for a SegmentSetupResData promised by a client call.
type SegmentSetupResData_Promise struct{ *capnp.Pipeline }

func (p SegmentSetupResData_Promise) Struct() (SegmentSetupResData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentSetupResData{s}, err
}

func (p SegmentSetupResData_Promise) Failure() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentTelesSetupData struct{ capnp.Struct }

// SegmentTelesSetupData_TypeID is the unique identifier for the type SegmentTelesSetupData.
const SegmentTelesSetupData_TypeID = 0xa953af3d8be428ba

func NewSegmentTelesSetupData(s *capnp.Segment) (SegmentTelesSetupData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentTelesSetupData{st}, err
}

func NewRootSegmentTelesSetupData(s *capnp.Segment) (SegmentTelesSetupData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentTelesSetupData{st}, err
}

func ReadRootSegmentTelesSetupData(msg *capnp.Message) (SegmentTelesSetupData, error) {
	root, err := msg.RootPtr()
	return SegmentTelesSetupData{root.Struct()}, err
}

func (s SegmentTelesSetupData) String() string {
	str, _ := text.Marshal(0xa953af3d8be428ba, s.Struct)
	return str
}

func (s SegmentTelesSetupData) Setup() (SegmentSetupReqData, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s SegmentTelesSetupData) HasSetup() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentTelesSetupData) SetSetup(v SegmentSetupReqData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSetup sets the setup field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s SegmentTelesSetupData) NewSetup() (SegmentSetupReqData, error) {
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentTelesSetupData) BaseID() (SegmentReservationID, error) {
	p, err := s.Struct.Ptr(1)
	return SegmentReservationID{Struct: p.Struct()}, err
}

func (s SegmentTelesSetupData) HasBaseID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentTelesSetupData) SetBaseID(v SegmentReservationID) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewBaseID sets the baseID field to a newly
// allocated SegmentReservationID struct, preferring placement in s's segment.
func (s SegmentTelesSetupData) NewBaseID() (SegmentReservationID, error) {
	ss, err := NewSegmentReservationID(s.Struct.Segment())
	if err != nil {
		return SegmentReservationID{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SegmentTelesSetupData_List is a list of SegmentTelesSetupData.
type SegmentTelesSetupData_List struct{ capnp.List }

// NewSegmentTelesSetupData creates a new list of SegmentTelesSetupData.
func NewSegmentTelesSetupData_List(s *capnp.Segment, sz int32) (SegmentTelesSetupData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegmentTelesSetupData_List{l}, err
}

func (s SegmentTelesSetupData_List) At(i int) SegmentTelesSetupData {
	return SegmentTelesSetupData{s.List.Struct(i)}
}

func (s SegmentTelesSetupData_List) Set(i int, v SegmentTelesSetupData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentTelesSetupData_List) String() string {
	str, _ := text.MarshalList(0xa953af3d8be428ba, s.List)
	return str
}

// SegmentTelesSetupData_Promise is a wrapper for a SegmentTelesSetupData promised by a client call.
type SegmentTelesSetupData_Promise struct{ *capnp.Pipeline }

func (p SegmentTelesSetupData_Promise) Struct() (SegmentTelesSetupData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentTelesSetupData{s}, err
}

func (p SegmentTelesSetupData_Promise) Setup() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegmentTelesSetupData_Promise) BaseID() SegmentReservationID_Promise {
	return SegmentReservationID_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type SegmentTeardownReqData struct{ capnp.Struct }

// SegmentTeardownReqData_TypeID is the unique identifier for the type SegmentTeardownReqData.
const SegmentTeardownReqData_TypeID = 0xa53b4bed5b0bc568

func NewSegmentTeardownReqData(s *capnp.Segment) (SegmentTeardownReqData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SegmentTeardownReqData{st}, err
}

func NewRootSegmentTeardownReqData(s *capnp.Segment) (SegmentTeardownReqData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SegmentTeardownReqData{st}, err
}

func ReadRootSegmentTeardownReqData(msg *capnp.Message) (SegmentTeardownReqData, error) {
	root, err := msg.RootPtr()
	return SegmentTeardownReqData{root.Struct()}, err
}

func (s SegmentTeardownReqData) String() string {
	str, _ := text.Marshal(0xa53b4bed5b0bc568, s.Struct)
	return str
}

// SegmentTeardownReqData_List is a list of SegmentTeardownReqData.
type SegmentTeardownReqData_List struct{ capnp.List }

// NewSegmentTeardownReqData creates a new list of SegmentTeardownReqData.
func NewSegmentTeardownReqData_List(s *capnp.Segment, sz int32) (SegmentTeardownReqData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return SegmentTeardownReqData_List{l}, err
}

func (s SegmentTeardownReqData_List) At(i int) SegmentTeardownReqData {
	return SegmentTeardownReqData{s.List.Struct(i)}
}

func (s SegmentTeardownReqData_List) Set(i int, v SegmentTeardownReqData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentTeardownReqData_List) String() string {
	str, _ := text.MarshalList(0xa53b4bed5b0bc568, s.List)
	return str
}

// SegmentTeardownReqData_Promise is a wrapper for a SegmentTeardownReqData promised by a client call.
type SegmentTeardownReqData_Promise struct{ *capnp.Pipeline }

func (p SegmentTeardownReqData_Promise) Struct() (SegmentTeardownReqData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentTeardownReqData{s}, err
}

type SegmentTeardownResData struct{ capnp.Struct }

// SegmentTeardownResData_TypeID is the unique identifier for the type SegmentTeardownResData.
const SegmentTeardownResData_TypeID = 0x8bd6c2ab5c4cf984

func NewSegmentTeardownResData(s *capnp.Segment) (SegmentTeardownResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegmentTeardownResData{st}, err
}

func NewRootSegmentTeardownResData(s *capnp.Segment) (SegmentTeardownResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegmentTeardownResData{st}, err
}

func ReadRootSegmentTeardownResData(msg *capnp.Message) (SegmentTeardownResData, error) {
	root, err := msg.RootPtr()
	return SegmentTeardownResData{root.Struct()}, err
}

func (s SegmentTeardownResData) String() string {
	str, _ := text.Marshal(0x8bd6c2ab5c4cf984, s.Struct)
	return str
}

func (s SegmentTeardownResData) ErrorCode() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentTeardownResData) SetErrorCode(v uint8) {
	s.Struct.SetUint8(0, v)
}

// SegmentTeardownResData_List is a list of SegmentTeardownResData.
type SegmentTeardownResData_List struct{ capnp.List }

// NewSegmentTeardownResData creates a new list of SegmentTeardownResData.
func NewSegmentTeardownResData_List(s *capnp.Segment, sz int32) (SegmentTeardownResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return SegmentTeardownResData_List{l}, err
}

func (s SegmentTeardownResData_List) At(i int) SegmentTeardownResData {
	return SegmentTeardownResData{s.List.Struct(i)}
}

func (s SegmentTeardownResData_List) Set(i int, v SegmentTeardownResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentTeardownResData_List) String() string {
	str, _ := text.MarshalList(0x8bd6c2ab5c4cf984, s.List)
	return str
}

// SegmentTeardownResData_Promise is a wrapper for a SegmentTeardownResData promised by a client call.
type SegmentTeardownResData_Promise struct{ *capnp.Pipeline }

func (p SegmentTeardownResData_Promise) Struct() (SegmentTeardownResData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentTeardownResData{s}, err
}

type SegmentIndexConfirmationData struct{ capnp.Struct }

// SegmentIndexConfirmationData_TypeID is the unique identifier for the type SegmentIndexConfirmationData.
const SegmentIndexConfirmationData_TypeID = 0xc4264f5cf728f9ac

func NewSegmentIndexConfirmationData(s *capnp.Segment) (SegmentIndexConfirmationData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegmentIndexConfirmationData{st}, err
}

func NewRootSegmentIndexConfirmationData(s *capnp.Segment) (SegmentIndexConfirmationData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegmentIndexConfirmationData{st}, err
}

func ReadRootSegmentIndexConfirmationData(msg *capnp.Message) (SegmentIndexConfirmationData, error) {
	root, err := msg.RootPtr()
	return SegmentIndexConfirmationData{root.Struct()}, err
}

func (s SegmentIndexConfirmationData) String() string {
	str, _ := text.Marshal(0xc4264f5cf728f9ac, s.Struct)
	return str
}

func (s SegmentIndexConfirmationData) Index() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentIndexConfirmationData) SetIndex(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s SegmentIndexConfirmationData) State() ReservationIndexState {
	return ReservationIndexState(s.Struct.Uint16(2))
}

func (s SegmentIndexConfirmationData) SetState(v ReservationIndexState) {
	s.Struct.SetUint16(2, uint16(v))
}

// SegmentIndexConfirmationData_List is a list of SegmentIndexConfirmationData.
type SegmentIndexConfirmationData_List struct{ capnp.List }

// NewSegmentIndexConfirmationData creates a new list of SegmentIndexConfirmationData.
func NewSegmentIndexConfirmationData_List(s *capnp.Segment, sz int32) (SegmentIndexConfirmationData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return SegmentIndexConfirmationData_List{l}, err
}

func (s SegmentIndexConfirmationData_List) At(i int) SegmentIndexConfirmationData {
	return SegmentIndexConfirmationData{s.List.Struct(i)}
}

func (s SegmentIndexConfirmationData_List) Set(i int, v SegmentIndexConfirmationData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentIndexConfirmationData_List) String() string {
	str, _ := text.MarshalList(0xc4264f5cf728f9ac, s.List)
	return str
}

// SegmentIndexConfirmationData_Promise is a wrapper for a SegmentIndexConfirmationData promised by a client call.
type SegmentIndexConfirmationData_Promise struct{ *capnp.Pipeline }

func (p SegmentIndexConfirmationData_Promise) Struct() (SegmentIndexConfirmationData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentIndexConfirmationData{s}, err
}

type SegmentCleanupData struct{ capnp.Struct }

// SegmentCleanupData_TypeID is the unique identifier for the type SegmentCleanupData.
const SegmentCleanupData_TypeID = 0xd3e56d3f1e39ca3c

func NewSegmentCleanupData(s *capnp.Segment) (SegmentCleanupData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentCleanupData{st}, err
}

func NewRootSegmentCleanupData(s *capnp.Segment) (SegmentCleanupData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentCleanupData{st}, err
}

func ReadRootSegmentCleanupData(msg *capnp.Message) (SegmentCleanupData, error) {
	root, err := msg.RootPtr()
	return SegmentCleanupData{root.Struct()}, err
}

func (s SegmentCleanupData) String() string {
	str, _ := text.Marshal(0xd3e56d3f1e39ca3c, s.Struct)
	return str
}

func (s SegmentCleanupData) Id() (SegmentReservationID, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentReservationID{Struct: p.Struct()}, err
}

func (s SegmentCleanupData) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentCleanupData) SetId(v SegmentReservationID) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated SegmentReservationID struct, preferring placement in s's segment.
func (s SegmentCleanupData) NewId() (SegmentReservationID, error) {
	ss, err := NewSegmentReservationID(s.Struct.Segment())
	if err != nil {
		return SegmentReservationID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentCleanupData) Index() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentCleanupData) SetIndex(v uint8) {
	s.Struct.SetUint8(0, v)
}

// SegmentCleanupData_List is a list of SegmentCleanupData.
type SegmentCleanupData_List struct{ capnp.List }

// NewSegmentCleanupData creates a new list of SegmentCleanupData.
func NewSegmentCleanupData_List(s *capnp.Segment, sz int32) (SegmentCleanupData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegmentCleanupData_List{l}, err
}

func (s SegmentCleanupData_List) At(i int) SegmentCleanupData {
	return SegmentCleanupData{s.List.Struct(i)}
}

func (s SegmentCleanupData_List) Set(i int, v SegmentCleanupData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentCleanupData_List) String() string {
	str, _ := text.MarshalList(0xd3e56d3f1e39ca3c, s.List)
	return str
}

// SegmentCleanupData_Promise is a wrapper for a SegmentCleanupData promised by a client call.
type SegmentCleanupData_Promise struct{ *capnp.Pipeline }

func (p SegmentCleanupData_Promise) Struct() (SegmentCleanupData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentCleanupData{s}, err
}

func (p SegmentCleanupData_Promise) Id() SegmentReservationID_Promise {
	return SegmentReservationID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type E2ESetupData struct{ capnp.Struct }
type E2ESetupData_success E2ESetupData
type E2ESetupData_failure E2ESetupData
type E2ESetupData_Which uint16

const (
	E2ESetupData_Which_unset   E2ESetupData_Which = 0
	E2ESetupData_Which_success E2ESetupData_Which = 1
	E2ESetupData_Which_failure E2ESetupData_Which = 2
)

func (w E2ESetupData_Which) String() string {
	const s = "unsetsuccessfailure"
	switch w {
	case E2ESetupData_Which_unset:
		return s[0:5]
	case E2ESetupData_Which_success:
		return s[5:12]
	case E2ESetupData_Which_failure:
		return s[12:19]

	}
	return "E2ESetupData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// E2ESetupData_TypeID is the unique identifier for the type E2ESetupData.
const E2ESetupData_TypeID = 0xeb535c83335d74cf

func NewE2ESetupData(s *capnp.Segment) (E2ESetupData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return E2ESetupData{st}, err
}

func NewRootE2ESetupData(s *capnp.Segment) (E2ESetupData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return E2ESetupData{st}, err
}

func ReadRootE2ESetupData(msg *capnp.Message) (E2ESetupData, error) {
	root, err := msg.RootPtr()
	return E2ESetupData{root.Struct()}, err
}

func (s E2ESetupData) String() string {
	str, _ := text.Marshal(0xeb535c83335d74cf, s.Struct)
	return str
}

func (s E2ESetupData) Which() E2ESetupData_Which {
	return E2ESetupData_Which(s.Struct.Uint16(0))
}
func (s E2ESetupData) ReservationID() (E2EReservationID, error) {
	p, err := s.Struct.Ptr(0)
	return E2EReservationID{Struct: p.Struct()}, err
}

func (s E2ESetupData) HasReservationID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2ESetupData) SetReservationID(v E2EReservationID) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewReservationID sets the reservationID field to a newly
// allocated E2EReservationID struct, preferring placement in s's segment.
func (s E2ESetupData) NewReservationID() (E2EReservationID, error) {
	ss, err := NewE2EReservationID(s.Struct.Segment())
	if err != nil {
		return E2EReservationID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s E2ESetupData) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s E2ESetupData) Success() E2ESetupData_success { return E2ESetupData_success(s) }

func (s E2ESetupData) SetSuccess() {
	s.Struct.SetUint16(0, 1)
}

func (s E2ESetupData_success) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s E2ESetupData_success) HasToken() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2ESetupData_success) SetToken(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s E2ESetupData) Failure() E2ESetupData_failure { return E2ESetupData_failure(s) }

func (s E2ESetupData) SetFailure() {
	s.Struct.SetUint16(0, 2)
}

func (s E2ESetupData_failure) ErrorCode() uint8 {
	return s.Struct.Uint8(2)
}

func (s E2ESetupData_failure) SetErrorCode(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s E2ESetupData_failure) InfoField() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s E2ESetupData_failure) HasInfoField() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2ESetupData_failure) SetInfoField(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s E2ESetupData_failure) MaxBWs() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.UInt8List{List: p.List()}, err
}

func (s E2ESetupData_failure) HasMaxBWs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s E2ESetupData_failure) SetMaxBWs(v capnp.UInt8List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewMaxBWs sets the maxBWs field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s E2ESetupData_failure) NewMaxBWs(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// E2ESetupData_List is a list of E2ESetupData.
type E2ESetupData_List struct{ capnp.List }

// NewE2ESetupData creates a new list of E2ESetupData.
func NewE2ESetupData_List(s *capnp.Segment, sz int32) (E2ESetupData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return E2ESetupData_List{l}, err
}

func (s E2ESetupData_List) At(i int) E2ESetupData { return E2ESetupData{s.List.Struct(i)} }

func (s E2ESetupData_List) Set(i int, v E2ESetupData) error { return s.List.SetStruct(i, v.Struct) }

func (s E2ESetupData_List) String() string {
	str, _ := text.MarshalList(0xeb535c83335d74cf, s.List)
	return str
}

// E2ESetupData_Promise is a wrapper for a E2ESetupData promised by a client call.
type E2ESetupData_Promise struct{ *capnp.Pipeline }

func (p E2ESetupData_Promise) Struct() (E2ESetupData, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupData{s}, err
}

func (p E2ESetupData_Promise) ReservationID() E2EReservationID_Promise {
	return E2EReservationID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p E2ESetupData_Promise) Success() E2ESetupData_success_Promise {
	return E2ESetupData_success_Promise{p.Pipeline}
}

// E2ESetupData_success_Promise is a wrapper for a E2ESetupData_success promised by a client call.
type E2ESetupData_success_Promise struct{ *capnp.Pipeline }

func (p E2ESetupData_success_Promise) Struct() (E2ESetupData_success, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupData_success{s}, err
}

func (p E2ESetupData_Promise) Failure() E2ESetupData_failure_Promise {
	return E2ESetupData_failure_Promise{p.Pipeline}
}

// E2ESetupData_failure_Promise is a wrapper for a E2ESetupData_failure promised by a client call.
type E2ESetupData_failure_Promise struct{ *capnp.Pipeline }

func (p E2ESetupData_failure_Promise) Struct() (E2ESetupData_failure, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupData_failure{s}, err
}

type E2ECleanupData struct{ capnp.Struct }

// E2ECleanupData_TypeID is the unique identifier for the type E2ECleanupData.
const E2ECleanupData_TypeID = 0x96ec60724ebd66d7

func NewE2ECleanupData(s *capnp.Segment) (E2ECleanupData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return E2ECleanupData{st}, err
}

func NewRootE2ECleanupData(s *capnp.Segment) (E2ECleanupData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return E2ECleanupData{st}, err
}

func ReadRootE2ECleanupData(msg *capnp.Message) (E2ECleanupData, error) {
	root, err := msg.RootPtr()
	return E2ECleanupData{root.Struct()}, err
}

func (s E2ECleanupData) String() string {
	str, _ := text.Marshal(0x96ec60724ebd66d7, s.Struct)
	return str
}

func (s E2ECleanupData) ReservationID() (E2EReservationID, error) {
	p, err := s.Struct.Ptr(0)
	return E2EReservationID{Struct: p.Struct()}, err
}

func (s E2ECleanupData) HasReservationID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2ECleanupData) SetReservationID(v E2EReservationID) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewReservationID sets the reservationID field to a newly
// allocated E2EReservationID struct, preferring placement in s's segment.
func (s E2ECleanupData) NewReservationID() (E2EReservationID, error) {
	ss, err := NewE2EReservationID(s.Struct.Segment())
	if err != nil {
		return E2EReservationID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s E2ECleanupData) Index() uint8 {
	return s.Struct.Uint8(0)
}

func (s E2ECleanupData) SetIndex(v uint8) {
	s.Struct.SetUint8(0, v)
}

// E2ECleanupData_List is a list of E2ECleanupData.
type E2ECleanupData_List struct{ capnp.List }

// NewE2ECleanupData creates a new list of E2ECleanupData.
func NewE2ECleanupData_List(s *capnp.Segment, sz int32) (E2ECleanupData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return E2ECleanupData_List{l}, err
}

func (s E2ECleanupData_List) At(i int) E2ECleanupData { return E2ECleanupData{s.List.Struct(i)} }

func (s E2ECleanupData_List) Set(i int, v E2ECleanupData) error { return s.List.SetStruct(i, v.Struct) }

func (s E2ECleanupData_List) String() string {
	str, _ := text.MarshalList(0x96ec60724ebd66d7, s.List)
	return str
}

// E2ECleanupData_Promise is a wrapper for a E2ECleanupData promised by a client call.
type E2ECleanupData_Promise struct{ *capnp.Pipeline }

func (p E2ECleanupData_Promise) Struct() (E2ECleanupData, error) {
	s, err := p.Pipeline.Struct()
	return E2ECleanupData{s}, err
}

func (p E2ECleanupData_Promise) ReservationID() E2EReservationID_Promise {
	return E2EReservationID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Request struct{ capnp.Struct }
type Request_Which uint16

const (
	Request_Which_unset                    Request_Which = 0
	Request_Which_segmentSetup             Request_Which = 1
	Request_Which_segmentRenewal           Request_Which = 2
	Request_Which_segmentTelesSetup        Request_Which = 3
	Request_Which_segmentTelesRenewal      Request_Which = 4
	Request_Which_segmentTeardown          Request_Which = 5
	Request_Which_segmentIndexConfirmation Request_Which = 6
	Request_Which_segmentCleanup           Request_Which = 7
	Request_Which_e2eSetup                 Request_Which = 8
	Request_Which_e2eRenewal               Request_Which = 9
	Request_Which_e2eCleanup               Request_Which = 10
)

func (w Request_Which) String() string {
	const s = "unsetsegmentSetupsegmentRenewalsegmentTelesSetupsegmentTelesRenewalsegmentTeardownsegmentIndexConfirmationsegmentCleanupe2eSetupe2eRenewale2eCleanup"
	switch w {
	case Request_Which_unset:
		return s[0:5]
	case Request_Which_segmentSetup:
		return s[5:17]
	case Request_Which_segmentRenewal:
		return s[17:31]
	case Request_Which_segmentTelesSetup:
		return s[31:48]
	case Request_Which_segmentTelesRenewal:
		return s[48:67]
	case Request_Which_segmentTeardown:
		return s[67:82]
	case Request_Which_segmentIndexConfirmation:
		return s[82:106]
	case Request_Which_segmentCleanup:
		return s[106:120]
	case Request_Which_e2eSetup:
		return s[120:128]
	case Request_Which_e2eRenewal:
		return s[128:138]
	case Request_Which_e2eCleanup:
		return s[138:148]

	}
	return "Request_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Request_TypeID is the unique identifier for the type Request.
const Request_TypeID = 0xe16d5facdcc87244

func NewRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func NewRootRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func ReadRootRequest(msg *capnp.Message) (Request, error) {
	root, err := msg.RootPtr()
	return Request{root.Struct()}, err
}

func (s Request) String() string {
	str, _ := text.Marshal(0xe16d5facdcc87244, s.Struct)
	return str
}

func (s Request) Which() Request_Which {
	return Request_Which(s.Struct.Uint16(0))
}
func (s Request) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s Request) SegmentSetup() (SegmentSetupReqData, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != segmentSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentSetup() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentSetup(v SegmentSetupReqData) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentSetup sets the segmentSetup field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s Request) NewSegmentSetup() (SegmentSetupReqData, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentRenewal() (SegmentSetupReqData, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != segmentRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentRenewal() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentRenewal(v SegmentSetupReqData) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentRenewal sets the segmentRenewal field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s Request) NewSegmentRenewal() (SegmentSetupReqData, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentTelesSetup() (SegmentTelesSetupData, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != segmentTelesSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTelesSetupData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentTelesSetup() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentTelesSetup(v SegmentTelesSetupData) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTelesSetup sets the segmentTelesSetup field to a newly
// allocated SegmentTelesSetupData struct, preferring placement in s's segment.
func (s Request) NewSegmentTelesSetup() (SegmentTelesSetupData, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSegmentTelesSetupData(s.Struct.Segment())
	if err != nil {
		return SegmentTelesSetupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentTelesRenewal() (SegmentTelesSetupData, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != segmentTelesRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTelesSetupData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentTelesRenewal() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentTelesRenewal(v SegmentTelesSetupData) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTelesRenewal sets the segmentTelesRenewal field to a newly
// allocated SegmentTelesSetupData struct, preferring placement in s's segment.
func (s Request) NewSegmentTelesRenewal() (SegmentTelesSetupData, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewSegmentTelesSetupData(s.Struct.Segment())
	if err != nil {
		return SegmentTelesSetupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentTeardown() (SegmentTeardownReqData, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != segmentTeardown")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTeardownReqData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentTeardown() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentTeardown(v SegmentTeardownReqData) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTeardown sets the segmentTeardown field to a newly
// allocated SegmentTeardownReqData struct, preferring placement in s's segment.
func (s Request) NewSegmentTeardown() (SegmentTeardownReqData, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSegmentTeardownReqData(s.Struct.Segment())
	if err != nil {
		return SegmentTeardownReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentIndexConfirmation() (SegmentIndexConfirmationData, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != segmentIndexConfirmation")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentIndexConfirmationData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentIndexConfirmation() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentIndexConfirmation(v SegmentIndexConfirmationData) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentIndexConfirmation sets the segmentIndexConfirmation field to a newly
// allocated SegmentIndexConfirmationData struct, preferring placement in s's segment.
func (s Request) NewSegmentIndexConfirmation() (SegmentIndexConfirmationData, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewSegmentIndexConfirmationData(s.Struct.Segment())
	if err != nil {
		return SegmentIndexConfirmationData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentCleanup() (SegmentCleanupData, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != segmentCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentCleanupData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentCleanup() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentCleanup(v SegmentCleanupData) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentCleanup sets the segmentCleanup field to a newly
// allocated SegmentCleanupData struct, preferring placement in s's segment.
func (s Request) NewSegmentCleanup() (SegmentCleanupData, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSegmentCleanupData(s.Struct.Segment())
	if err != nil {
		return SegmentCleanupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) E2eSetup() (E2ESetupData, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != e2eSetup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupData{Struct: p.Struct()}, err
}

func (s Request) HasE2eSetup() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetE2eSetup(v E2ESetupData) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eSetup sets the e2eSetup field to a newly
// allocated E2ESetupData struct, preferring placement in s's segment.
func (s Request) NewE2eSetup() (E2ESetupData, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewE2ESetupData(s.Struct.Segment())
	if err != nil {
		return E2ESetupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) E2eRenewal() (E2ESetupData, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != e2eRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupData{Struct: p.Struct()}, err
}

func (s Request) HasE2eRenewal() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetE2eRenewal(v E2ESetupData) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eRenewal sets the e2eRenewal field to a newly
// allocated E2ESetupData struct, preferring placement in s's segment.
func (s Request) NewE2eRenewal() (E2ESetupData, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewE2ESetupData(s.Struct.Segment())
	if err != nil {
		return E2ESetupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) E2eCleanup() (E2ECleanupData, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != e2eCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ECleanupData{Struct: p.Struct()}, err
}

func (s Request) HasE2eCleanup() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetE2eCleanup(v E2ECleanupData) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eCleanup sets the e2eCleanup field to a newly
// allocated E2ECleanupData struct, preferring placement in s's segment.
func (s Request) NewE2eCleanup() (E2ECleanupData, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewE2ECleanupData(s.Struct.Segment())
	if err != nil {
		return E2ECleanupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Request_List is a list of Request.
type Request_List struct{ capnp.List }

// NewRequest creates a new list of Request.
func NewRequest_List(s *capnp.Segment, sz int32) (Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Request_List{l}, err
}

func (s Request_List) At(i int) Request { return Request{s.List.Struct(i)} }

func (s Request_List) Set(i int, v Request) error { return s.List.SetStruct(i, v.Struct) }

func (s Request_List) String() string {
	str, _ := text.MarshalList(0xe16d5facdcc87244, s.List)
	return str
}

// Request_Promise is a wrapper for a Request promised by a client call.
type Request_Promise struct{ *capnp.Pipeline }

func (p Request_Promise) Struct() (Request, error) {
	s, err := p.Pipeline.Struct()
	return Request{s}, err
}

func (p Request_Promise) SegmentSetup() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentRenewal() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentTelesSetup() SegmentTelesSetupData_Promise {
	return SegmentTelesSetupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentTelesRenewal() SegmentTelesSetupData_Promise {
	return SegmentTelesSetupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentTeardown() SegmentTeardownReqData_Promise {
	return SegmentTeardownReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentIndexConfirmation() SegmentIndexConfirmationData_Promise {
	return SegmentIndexConfirmationData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentCleanup() SegmentCleanupData_Promise {
	return SegmentCleanupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) E2eSetup() E2ESetupData_Promise {
	return E2ESetupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) E2eRenewal() E2ESetupData_Promise {
	return E2ESetupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) E2eCleanup() E2ECleanupData_Promise {
	return E2ECleanupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Response struct{ capnp.Struct }
type Response_Which uint16

const (
	Response_Which_unset                    Response_Which = 0
	Response_Which_segmentSetup             Response_Which = 1
	Response_Which_segmentRenewal           Response_Which = 2
	Response_Which_segmentTelesSetup        Response_Which = 3
	Response_Which_segmentTelesRenewal      Response_Which = 4
	Response_Which_segmentTeardown          Response_Which = 5
	Response_Which_segmentIndexConfirmation Response_Which = 6
	Response_Which_segmentCleanup           Response_Which = 7
	Response_Which_e2eSetup                 Response_Which = 8
	Response_Which_e2eRenewal               Response_Which = 9
	Response_Which_e2eCleanup               Response_Which = 10
)

func (w Response_Which) String() string {
	const s = "unsetsegmentSetupsegmentRenewalsegmentTelesSetupsegmentTelesRenewalsegmentTeardownsegmentIndexConfirmationsegmentCleanupe2eSetupe2eRenewale2eCleanup"
	switch w {
	case Response_Which_unset:
		return s[0:5]
	case Response_Which_segmentSetup:
		return s[5:17]
	case Response_Which_segmentRenewal:
		return s[17:31]
	case Response_Which_segmentTelesSetup:
		return s[31:48]
	case Response_Which_segmentTelesRenewal:
		return s[48:67]
	case Response_Which_segmentTeardown:
		return s[67:82]
	case Response_Which_segmentIndexConfirmation:
		return s[82:106]
	case Response_Which_segmentCleanup:
		return s[106:120]
	case Response_Which_e2eSetup:
		return s[120:128]
	case Response_Which_e2eRenewal:
		return s[128:138]
	case Response_Which_e2eCleanup:
		return s[138:148]

	}
	return "Response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0xe0c72f2fd9ed587d

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Response{st}, err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Response{st}, err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.RootPtr()
	return Response{root.Struct()}, err
}

func (s Response) String() string {
	str, _ := text.Marshal(0xe0c72f2fd9ed587d, s.Struct)
	return str
}

func (s Response) Which() Response_Which {
	return Response_Which(s.Struct.Uint16(0))
}
func (s Response) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s Response) SegmentSetup() (SegmentSetupResData, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != segmentSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentSetup() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentSetup(v SegmentSetupResData) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentSetup sets the segmentSetup field to a newly
// allocated SegmentSetupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentSetup() (SegmentSetupResData, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegmentSetupResData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentRenewal() (SegmentSetupResData, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != segmentRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentRenewal() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentRenewal(v SegmentSetupResData) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentRenewal sets the segmentRenewal field to a newly
// allocated SegmentSetupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentRenewal() (SegmentSetupResData, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSegmentSetupResData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentTelesSetup() (SegmentSetupResData, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != segmentTelesSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentTelesSetup() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentTelesSetup(v SegmentSetupResData) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTelesSetup sets the segmentTelesSetup field to a newly
// allocated SegmentSetupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentTelesSetup() (SegmentSetupResData, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSegmentSetupResData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentTelesRenewal() (SegmentSetupResData, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != segmentTelesRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentTelesRenewal() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentTelesRenewal(v SegmentSetupResData) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTelesRenewal sets the segmentTelesRenewal field to a newly
// allocated SegmentSetupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentTelesRenewal() (SegmentSetupResData, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewSegmentSetupResData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentTeardown() (SegmentTeardownResData, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != segmentTeardown")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTeardownResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentTeardown() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentTeardown(v SegmentTeardownResData) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTeardown sets the segmentTeardown field to a newly
// allocated SegmentTeardownResData struct, preferring placement in s's segment.
func (s Response) NewSegmentTeardown() (SegmentTeardownResData, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSegmentTeardownResData(s.Struct.Segment())
	if err != nil {
		return SegmentTeardownResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentIndexConfirmation() (SegmentIndexConfirmationData, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != segmentIndexConfirmation")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentIndexConfirmationData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentIndexConfirmation() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentIndexConfirmation(v SegmentIndexConfirmationData) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentIndexConfirmation sets the segmentIndexConfirmation field to a newly
// allocated SegmentIndexConfirmationData struct, preferring placement in s's segment.
func (s Response) NewSegmentIndexConfirmation() (SegmentIndexConfirmationData, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewSegmentIndexConfirmationData(s.Struct.Segment())
	if err != nil {
		return SegmentIndexConfirmationData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentCleanup() (SegmentCleanupData, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != segmentCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentCleanupData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentCleanup() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentCleanup(v SegmentCleanupData) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentCleanup sets the segmentCleanup field to a newly
// allocated SegmentCleanupData struct, preferring placement in s's segment.
func (s Response) NewSegmentCleanup() (SegmentCleanupData, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSegmentCleanupData(s.Struct.Segment())
	if err != nil {
		return SegmentCleanupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) E2eSetup() (E2ESetupData, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != e2eSetup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupData{Struct: p.Struct()}, err
}

func (s Response) HasE2eSetup() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetE2eSetup(v E2ESetupData) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eSetup sets the e2eSetup field to a newly
// allocated E2ESetupData struct, preferring placement in s's segment.
func (s Response) NewE2eSetup() (E2ESetupData, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewE2ESetupData(s.Struct.Segment())
	if err != nil {
		return E2ESetupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) E2eRenewal() (E2ESetupData, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != e2eRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupData{Struct: p.Struct()}, err
}

func (s Response) HasE2eRenewal() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetE2eRenewal(v E2ESetupData) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eRenewal sets the e2eRenewal field to a newly
// allocated E2ESetupData struct, preferring placement in s's segment.
func (s Response) NewE2eRenewal() (E2ESetupData, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewE2ESetupData(s.Struct.Segment())
	if err != nil {
		return E2ESetupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) E2eCleanup() (E2ECleanupData, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != e2eCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ECleanupData{Struct: p.Struct()}, err
}

func (s Response) HasE2eCleanup() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetE2eCleanup(v E2ECleanupData) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eCleanup sets the e2eCleanup field to a newly
// allocated E2ECleanupData struct, preferring placement in s's segment.
func (s Response) NewE2eCleanup() (E2ECleanupData, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewE2ECleanupData(s.Struct.Segment())
	if err != nil {
		return E2ECleanupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) Accepted() bool {
	return s.Struct.Bit(16)
}

func (s Response) SetAccepted(v bool) {
	s.Struct.SetBit(16, v)
}

func (s Response) FailedHop() uint8 {
	return s.Struct.Uint8(3)
}

func (s Response) SetFailedHop(v uint8) {
	s.Struct.SetUint8(3, v)
}

// Response_List is a list of Response.
type Response_List struct{ capnp.List }

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Response_List{l}, err
}

func (s Response_List) At(i int) Response { return Response{s.List.Struct(i)} }

func (s Response_List) Set(i int, v Response) error { return s.List.SetStruct(i, v.Struct) }

func (s Response_List) String() string {
	str, _ := text.MarshalList(0xe0c72f2fd9ed587d, s.List)
	return str
}

// Response_Promise is a wrapper for a Response promised by a client call.
type Response_Promise struct{ *capnp.Pipeline }

func (p Response_Promise) Struct() (Response, error) {
	s, err := p.Pipeline.Struct()
	return Response{s}, err
}

func (p Response_Promise) SegmentSetup() SegmentSetupResData_Promise {
	return SegmentSetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentRenewal() SegmentSetupResData_Promise {
	return SegmentSetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentTelesSetup() SegmentSetupResData_Promise {
	return SegmentSetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentTelesRenewal() SegmentSetupResData_Promise {
	return SegmentSetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentTeardown() SegmentTeardownResData_Promise {
	return SegmentTeardownResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentIndexConfirmation() SegmentIndexConfirmationData_Promise {
	return SegmentIndexConfirmationData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentCleanup() SegmentCleanupData_Promise {
	return SegmentCleanupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) E2eSetup() E2ESetupData_Promise {
	return E2ESetupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) E2eRenewal() E2ESetupData_Promise {
	return E2ESetupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) E2eCleanup() E2ECleanupData_Promise {
	return E2ECleanupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ColibriRequestPayload struct{ capnp.Struct }
type ColibriRequestPayload_Which uint16

const (
	ColibriRequestPayload_Which_unset    ColibriRequestPayload_Which = 0
	ColibriRequestPayload_Which_request  ColibriRequestPayload_Which = 1
	ColibriRequestPayload_Which_response ColibriRequestPayload_Which = 2
)

func (w ColibriRequestPayload_Which) String() string {
	const s = "unsetrequestresponse"
	switch w {
	case ColibriRequestPayload_Which_unset:
		return s[0:5]
	case ColibriRequestPayload_Which_request:
		return s[5:12]
	case ColibriRequestPayload_Which_response:
		return s[12:20]

	}
	return "ColibriRequestPayload_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ColibriRequestPayload_TypeID is the unique identifier for the type ColibriRequestPayload.
const ColibriRequestPayload_TypeID = 0xc571cc47a792000f

func NewColibriRequestPayload(s *capnp.Segment) (ColibriRequestPayload, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColibriRequestPayload{st}, err
}

func NewRootColibriRequestPayload(s *capnp.Segment) (ColibriRequestPayload, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColibriRequestPayload{st}, err
}

func ReadRootColibriRequestPayload(msg *capnp.Message) (ColibriRequestPayload, error) {
	root, err := msg.RootPtr()
	return ColibriRequestPayload{root.Struct()}, err
}

func (s ColibriRequestPayload) String() string {
	str, _ := text.Marshal(0xc571cc47a792000f, s.Struct)
	return str
}

func (s ColibriRequestPayload) Which() ColibriRequestPayload_Which {
	return ColibriRequestPayload_Which(s.Struct.Uint16(4))
}
func (s ColibriRequestPayload) Timestamp() uint32 {
	return s.Struct.Uint32(0)
}

func (s ColibriRequestPayload) SetTimestamp(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ColibriRequestPayload) SetUnset() {
	s.Struct.SetUint16(4, 0)

}

func (s ColibriRequestPayload) Request() (Request, error) {
	if s.Struct.Uint16(4) != 1 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return Request{Struct: p.Struct()}, err
}

func (s ColibriRequestPayload) HasRequest() bool {
	if s.Struct.Uint16(4) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriRequestPayload) SetRequest(v Request) error {
	s.Struct.SetUint16(4, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Request struct, preferring placement in s's segment.
func (s ColibriRequestPayload) NewRequest() (Request, error) {
	s.Struct.SetUint16(4, 1)
	ss, err := NewRequest(s.Struct.Segment())
	if err != nil {
		return Request{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriRequestPayload) Response() (Response, error) {
	if s.Struct.Uint16(4) != 2 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return Response{Struct: p.Struct()}, err
}

func (s ColibriRequestPayload) HasResponse() bool {
	if s.Struct.Uint16(4) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriRequestPayload) SetResponse(v Response) error {
	s.Struct.SetUint16(4, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Response struct, preferring placement in s's segment.
func (s ColibriRequestPayload) NewResponse() (Response, error) {
	s.Struct.SetUint16(4, 2)
	ss, err := NewResponse(s.Struct.Segment())
	if err != nil {
		return Response{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ColibriRequestPayload_List is a list of ColibriRequestPayload.
type ColibriRequestPayload_List struct{ capnp.List }

// NewColibriRequestPayload creates a new list of ColibriRequestPayload.
func NewColibriRequestPayload_List(s *capnp.Segment, sz int32) (ColibriRequestPayload_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ColibriRequestPayload_List{l}, err
}

func (s ColibriRequestPayload_List) At(i int) ColibriRequestPayload {
	return ColibriRequestPayload{s.List.Struct(i)}
}

func (s ColibriRequestPayload_List) Set(i int, v ColibriRequestPayload) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ColibriRequestPayload_List) String() string {
	str, _ := text.MarshalList(0xc571cc47a792000f, s.List)
	return str
}

// ColibriRequestPayload_Promise is a wrapper for a ColibriRequestPayload promised by a client call.
type ColibriRequestPayload_Promise struct{ *capnp.Pipeline }

func (p ColibriRequestPayload_Promise) Struct() (ColibriRequestPayload, error) {
	s, err := p.Pipeline.Struct()
	return ColibriRequestPayload{s}, err
}

func (p ColibriRequestPayload_Promise) Request() Request_Promise {
	return Request_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriRequestPayload_Promise) Response() Response_Promise {
	return Response_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_a3bf9fed859570f0 = "x\xda\xd4W}\x8c\\U\x15?\xe7\xde\xf9lww" +
	"f\xfa\xc6@\xea\xc7h\x03di\xfa\xb9[\xa2\xad\x85" +
	"\x81\xdd\x1d\xed\xd6\xa2\xf3f\xb6\xb1\xd66\xf4u\xe7." +
	"\xfbt\xe6\xbd\x99\xf7\xde\xb6\xc5P\x0b\xb5$\x1a\xd4Z" +
	"\xe2\xd7?\xa2E\x1aE\x9b\x80\x06\x12i\x8a\x82i\xd3" +
	"\x15J\xb4\x11\x84\x12\xaa\x18m\x88`\x0d\x92XX\x94" +
	">s\xee\x9byo>\xbb\xfd\xc3\x7f\xfco\xe6\xfe~" +
	"\xef\xdes\xcf\xf9\x9d\x8f\xbbjy\xf8f\xb6:|0" +
	"\x02\xa0n\x0aG\xdc\x03s\x9b\xb6\xfd\xf4\xd7\x7f\xb8\x17" +
	"\xd4\x01D\xf7\x8d\xea\xb7\xee\xb9\xf0\xfd_\xfd\x10BQ" +
	"\x80\xe1\xe5|)*7\xf2(\x80\xb2\x96g\x01\xdd\xc7" +
	".\xbd\xfa\xe2\x9b\xb3\xff\xf8:\xa4\x06\x9a\xb8aF\xe4" +
	"\xed|1*\x15I\xd6\xf9n@\xf7\x85\xa9'>i" +
	"\xed\xf8\xfb\xb7\xdbv\x0e#QN\xf2\xd7\x943\x92\xfc" +
	"\xac$\xdf\xb6d\xe7_nz\xe6\xe2w@}/\xa2" +
	"\xfb[g\xfb\xf0\x97\xb6\x15_\x87\xf7\xf0(\x92!\xa1" +
	"\xc5\x08\xa8\xdc\x10\"#\xbe8\xf8\xfa\x83\xbft*\x0f" +
	"\xb4\xef+M\xde\x1cZ\x84\x8a\x90?\xb5\xd0A\x04t" +
	"\xa7O.\xfc\xec\x85O|\xf4H\xab\xcd\x92\xd1\x1fY" +
	"\x8a\xca\xfb#Q\xe0\xee\xb1\xc1\xbf\xde{\xe3\xc3\xc5\x87" +
	"\xba\xddl.\xbc\x04\x95x\x84\x8c\x0dG\xc8\xd8#+" +
	"W\x9c\x9aP\xd7\xfc\xa4\xcd\x82\x1cF9\x9d\x1bY\x84" +
	"JM\xd2+\x91\x87\x01\xdd\xeb\xcem?\xb8\xc8=z" +
	"\xbc\x8b\x8b\x95p\xf4%%\x15\xa5_\xfdQ\xda\xfa\xe8" +
	"\xdc\xe0[\xdb>u\xdd\x89n\xe1\xa8D\xb7\xa2r\xb7" +
	"$\xef%\xf2\xbb\x89\xfb~\xf4\xf1\xd3\xb5\x93\x9dV " +
	"\x1b>\x1b]\x82\xca\xdf$\xf9|\xf4U@\xf7\xf0\xdc" +
	"\xc4\x1b\x07\xaf\xfa\xc6)H\x0d\xb0\x80\x0d8\xfcTl" +
	"\x09*gb2\x16\xb1\x0f\x03\xbaK\xa7\xffxh\xc1" +
	"\xaec\xb3\xdd\xec=\x13{M9'\xb9gcd\xef" +
	"\xfa\xa7\xd7~ [9\xff\xfbnA\x1e\xbe!\xbe\x00" +
	"\x95\\\x9c\xd8\xb7\xc4\x89\xbdw\xcb\x85\xb3+W\x9ez" +
	"\xa5\xd3q\x0b\x01\x94\xef\xc5\x8f)G\x88=|8\xfe" +
	"'\x06\xe8\x8eY\xb3/\x1f\xbd\xad\xf2\xe7\xee\xf43}" +
	"?W\xce\xf6\x11\xfd\xf9>\x93\xe8\xbej\xda\xe8\x9c\xc2" +
	"\xa2\xdc\x93xI9\x94 [\xbe\x96 \x7f\xdc_\xbb" +
	"\xe9\xdak\xf83o\xf6P\\\xd2S\\\x92\x02x\xe0" +
	"\xea\xab\xee\xdf\xff\xc2\x87.v\x11\x87r>\xf9\x8e\xf2" +
	"\xcf$\xfd\xba\x90\xa4+N\x9ae}\xa7\xa5\xaf\xe0\x93" +
	"Z\xd5\xa8\xae+\x8a\xdb+\xc2p&\x84f\x95\xcc\xdd" +
	"FA\xd8\x891\xcd\xd1\xf2\x88j\x88\x87\x00B\x08\x90" +
	"\xea/\x00\xa8}\x1c\xd5\xab\x19\xba\xc2\xb2Lk\xd4," +
	"\x01\x0a\x8c\x00\xc3H\xcfM\x0b\xc2\x16\xd6.\xcd\xd1M" +
	"\x83\x8f\x8f\xd1\x961\x7f\xcb\xeb\x97\x02\xa8\xd7pTW" +
	"1L!\xa6\x91\x16\x97\xaf\x03P\x079\xaak\x18&" +
	"4[/a?0\xec\x07\xcc\xda3SS\xfa\x9e\xc6" +
	"_\xff<\xe6\x9d\x97\x1b\xca\x8d\x96\x85f\xccT}\xe3" +
	"\x9bN\xb2\x82M\x1b\x07\xad\x1e\x02P\x97qT?\xc2" +
	"\xd0\xb5\xeafBF7\x8d\xf11L\x06\xfe\x04\xc4$" +
	"`F7JbO\xaf\xcb\xe6\x86rE\xe1\xccT\xe9" +
	"\xe4\x15\xf6\xcc\xe4\xa4\xe0\xb6M\xceKb\x1a\x19y\x8f" +
	"\x0e\x8bqT\xd3\x0c3\x8e\xf9yat\xdc\xa3\xd5o" +
	"r\xbb\x82\xa8\x8di\x0e\xca\xcb\xbc\xcf\xbf\xccc\xb4\xd7" +
	"#\x1c\xd5\xe3Mn{\x9c\x16\x1f\xe5\xa8>\xc90\xc5" +
	"\x98w\xea\x13\x1b\x01\xd4\xe3\x1c\xd5Y\x86\xc8\xd3\xc8\x01" +
	"R'\xb7\x02\xa8'8\xaa\xbfc\x98\x0aa\x1aC\x00" +
	"\xa9g\x89x\x9a\xa3\xfa\"\xc3T\x98\xa51\x0c\x90z" +
	"\x9e\"\xfe\x1cG\xf5\x15\x86\xa9\x08Oc\x04 un" +
	"?\x80\xfa2G\xf5m\x86\x99\x8an\x8c|\xba\xe1\x93" +
	"LE\xdb\x13\xfcs\xedjYwF\xcb6\x00\x04k" +
	"\x8ef9y\xcb\x04^\xb51\x19\xd4\x1c\xcf\xc5\xae0" +
	"Jy\xcb\xac\xcaO:Q\xdd\x982?\xa6\x8b2\xa0" +
	"/\x09W+\x97\xcdI\xcd\xd1\xd14&,M/\x03" +
	"\x0e\x00\xe69b2(\x10\x80\xb48\xaf\xe6k\x0d\xd9" +
	"\xf4d\x96\x85\xed\x059\xda\xa9\xaf\xa1y\x94\x9c\xb1\xe9" +
	"KL\x06\x8d\xc1\xbbUv\xa7f\x0b\xa97\xbfm\xd5" +
	"\xaf{YY\xd8\xbe,\xfax\xa8\xcfu\xa5\x1192" +
	"\xe2f\x8e\xea&\x86\xfdx\xc9\xf5\xac\x18\x1f\x01P\xc7" +
	"8\xaay\x86\xfd\xec]\xd7S\xc6\xad\xc4\xdd\xc0Q\x9d" +
	"`\x98\x991l\xe1@d\xdf\x94\xa6\x97g,\xd1i" +
	"e\x0f\xc5\xd63/\xaf9\xd39\x19:^\xb5\xaf\xc4" +
	"/\x1b\x83\xc4\xcbP\xfc\xca\x88\xc0\x90\xfa\xa0ci\x86" +
	"=%,R@c\xadqZ\xa8\xc5\x11\xe3\x94\x8e\xa3" +
	"\xa61\xa5[\x15Y]\xc64~eQ\x19j\x8aJ" +
	"KRglGs\x04&\x82.\x04\x88\x89\xceP\x8c" +
	"z\x7f\x0b\xa26#l'\xaf\xddQ\x8e\x9aZ\x89\x8e" +
	"N\xfaGk\x94;;8\xaae\x8a\x85[\x8f\x85N" +
	"g\x978\xaaU\x8a\xc5\xa5z,*\x14\xa1i\x8e\xaa" +
	"\xc3\xb0\x9fS\x84(Ok\xe4\xa5*G\xf5N\x86\xae" +
	"\xa3W\x84\xedh\x15\xc0*\xc6\x80a\x0c\x82\xa8Y\x9e" +
	"\x1d\x98\x0cZQ]B\x96\xb0\xab\xa6a\x0b/\x9f\xfc" +
	"\xbe\xd6]`M\x85Z\xfa\xb6\xe8D5GH\x87J" +
	"+S#\xf4a*\xbe\x0e`_U\x18%\xdd\xb8=" +
	"\xabM:\xfa.\xd1\xae\x87[\xeaIi\x1a\x89\x11\xe1" +
	"9\xa6)&#\xf3\xc4d\x9f\xcc\xe9\x9ee\xa5{Z" +
	"\xd4+?e0@\xdb\x81\x8b\x83\x03\xbb\x9d\xc7\xf5R" +
	"g\xf6\xf5\xa8\xf6\xd8pU\xd6s,\x9d\xb4\xc6O@" +
	"e;\x0e\x01\x14\xb7 \xc7b\x09\x9brP\xd1\xf0s" +
	"\x00\xc5\x1d\x04\x94\xb1)\x0d\x15\x1d\xbf\x00P\x9c&\xc0" +
	"!\x80\xff\xc7\x8b\xbeR\xc3\xfb\x00\x8a\x0e\x01w\x11\x10" +
	"\xfa\xb7++\xb5\xb2\x17\x1f\x00(\xdeE\xc0W\x09\x08" +
	"\xbf\xe3\xcaj\xad|\x05\xf7\x03\x14\xbfL\xc07\x09\x88" +
	"\xcc\xb9\xb2b+\x87\xf0i\x80\xe2w\x09x\x90\x80\xe8" +
	"\xdbnZ\x8e\xb7\x87\xe5\xe1? \xe0(\x01\xb1\xb7\xdc" +
	"4\xc6\x00\x94\x87p#@\xf1\xc7\x04<J@\xfc\xa2" +
	"\x9b\xc68\x80\xf23\xdc\x0aP|\x84\x80\xe3\x04,\xf8" +
	"\x97\x9b\xc6\x05\x00\xca\xe3\x12\xf8\x05\x01'\x90aja" +
	"2\x8d4\xfe<%wz\x92\xd6O\xd3z\x1fOc" +
	"\x1f\x80\xf2\x1b,\x00\x14gi\xfd9\x0c*\x90k\xd7" +
	"\xab\x1c$\xea\xe5\xd2\x9fb\xeb\xa2\xad\x13\x0a\x90\x15\x86" +
	"\xd8\xad\x95{S&\xb0Q\xb0\xb1:\x1f\xab \x0c\x11" +
	"\x9do7\xafQP&\xf9\xcf\x91V\xce8k\xafI" +
	"2\xef\xfci\xb9\x95=\x0aYO\xb4\x98\x0c\x06\xd4F" +
	"#\x1c\x12\xb2\xd0{\x89\xeb\x8f}\x01J\x06\xef\x06." +
	"-\xee\x02\xcbt\x00.\xf7\xf6_8uX\x9b\x9c\x14" +
	"UG\x94\x9aK,\x15~Q\xda`Ry\xe9\xa9\xf9" +
	"\x8cW\xee\x10\xd5e\x81\xe4\xaf\x95\x92\xff \x05rY" +
	"\x8b\xe4\xaf\x97\x92\x1f$`M\x8b\xe4WK\xd5\xad\"" +
	"`}\x8b\xe4\xd7J\xc9\xaf'`C\x8b\xe4sR\xf2" +
	"\x1b\x08\x98h\x91\xbc*%\x9f'`[\x8b\xe4?#" +
	"%\x1f\xe4\x9b/\xf9\xf6|\xf3%_\x93B\xad\x12p" +
	"g\x8b\xe4\xef\x90\xca\xdeC\xc0\x81\x16\xc9\xdf-\x01?" +
	"\x11{K\xb8\xad\x97v\x93p\x0fJ\x9b\x84\xfd\xe7\xdf" +
	"<\x12\xee\xcd\x0b$\xec?8\xff\x1f%\xdc9\xf9\xd7" +
	"\x87\xef\xfa\x04\xd0\xd4\x86\xad+i\xc3\xd8\xf4\xb4\xa7n" +
	"\xcc\xa8\x0bc\xd3\xeb+\xb5y\x04\xd8\x15\xbc\x11\x1a-" +
	"Y\xbe\x00l\xbb1P]\xf6\xb5 9\xdc\x124\xc9" +
	"%\x99\xd7\xfbs\x85`f\x93M\x92f\xf4[iq" +
	"\x13GuK}\xc2\xa7\x19}3\xcd\x98y\xef\x82]" +
	"_e]\xa6\xe6\xac\xec\xa8vcT&\xe6@W\xaf" +
	"\xd6G\x82\xac\x9c\x09\xfe\x97o\xb7\xff\x06\x00\x00\xff\xff" +
	"@\x09\xcb\x12"

func init() {
	schemas.Register(schema_a3bf9fed859570f0,
		0x8bd6c2ab5c4cf984,
		0x8eeec8f2d8e7feb5,
		0x96ec60724ebd66d7,
		0x97f6cb3ee362225f,
		0xa26d74bea4eb287e,
		0xa53b4bed5b0bc568,
		0xa953af3d8be428ba,
		0xaa345154c72e2fa5,
		0xbcacff128f5ddd26,
		0xc4264f5cf728f9ac,
		0xc571cc47a792000f,
		0xc790178ff054f9a1,
		0xc8ba760a91de682a,
		0xd3e56d3f1e39ca3c,
		0xe0c72f2fd9ed587d,
		0xe16d5facdcc87244,
		0xeb535c83335d74cf,
		0xf2cb0324253e719e,
		0xf621d7829e171884)
}
