// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type CertChainReq struct{ capnp.Struct }

// CertChainReq_TypeID is the unique identifier for the type CertChainReq.
const CertChainReq_TypeID = 0xc464d1e0777e54d3

func NewCertChainReq(s *capnp.Segment) (CertChainReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return CertChainReq{st}, err
}

func NewRootCertChainReq(s *capnp.Segment) (CertChainReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return CertChainReq{st}, err
}

func ReadRootCertChainReq(msg *capnp.Message) (CertChainReq, error) {
	root, err := msg.RootPtr()
	return CertChainReq{root.Struct()}, err
}

func (s CertChainReq) String() string {
	str, _ := text.Marshal(0xc464d1e0777e54d3, s.Struct)
	return str
}

func (s CertChainReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s CertChainReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s CertChainReq) Version() uint64 {
	return s.Struct.Uint64(8)
}

func (s CertChainReq) SetVersion(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CertChainReq) CacheOnly() bool {
	return s.Struct.Bit(128)
}

func (s CertChainReq) SetCacheOnly(v bool) {
	s.Struct.SetBit(128, v)
}

// CertChainReq_List is a list of CertChainReq.
type CertChainReq_List struct{ capnp.List }

// NewCertChainReq creates a new list of CertChainReq.
func NewCertChainReq_List(s *capnp.Segment, sz int32) (CertChainReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return CertChainReq_List{l}, err
}

func (s CertChainReq_List) At(i int) CertChainReq { return CertChainReq{s.List.Struct(i)} }

func (s CertChainReq_List) Set(i int, v CertChainReq) error { return s.List.SetStruct(i, v.Struct) }

func (s CertChainReq_List) String() string {
	str, _ := text.MarshalList(0xc464d1e0777e54d3, s.List)
	return str
}

// CertChainReq_Promise is a wrapper for a CertChainReq promised by a client call.
type CertChainReq_Promise struct{ *capnp.Pipeline }

func (p CertChainReq_Promise) Struct() (CertChainReq, error) {
	s, err := p.Pipeline.Struct()
	return CertChainReq{s}, err
}

type CertChain struct{ capnp.Struct }

// CertChain_TypeID is the unique identifier for the type CertChain.
const CertChain_TypeID = 0xadadc71f7e190917

func NewCertChain(s *capnp.Segment) (CertChain, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChain{st}, err
}

func NewRootCertChain(s *capnp.Segment) (CertChain, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChain{st}, err
}

func ReadRootCertChain(msg *capnp.Message) (CertChain, error) {
	root, err := msg.RootPtr()
	return CertChain{root.Struct()}, err
}

func (s CertChain) String() string {
	str, _ := text.Marshal(0xadadc71f7e190917, s.Struct)
	return str
}

func (s CertChain) Chain() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChain) HasChain() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChain) SetChain(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertChain_List is a list of CertChain.
type CertChain_List struct{ capnp.List }

// NewCertChain creates a new list of CertChain.
func NewCertChain_List(s *capnp.Segment, sz int32) (CertChain_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CertChain_List{l}, err
}

func (s CertChain_List) At(i int) CertChain { return CertChain{s.List.Struct(i)} }

func (s CertChain_List) Set(i int, v CertChain) error { return s.List.SetStruct(i, v.Struct) }

func (s CertChain_List) String() string {
	str, _ := text.MarshalList(0xadadc71f7e190917, s.List)
	return str
}

// CertChain_Promise is a wrapper for a CertChain promised by a client call.
type CertChain_Promise struct{ *capnp.Pipeline }

func (p CertChain_Promise) Struct() (CertChain, error) {
	s, err := p.Pipeline.Struct()
	return CertChain{s}, err
}

type CertChainIssReq struct{ capnp.Struct }

// CertChainIssReq_TypeID is the unique identifier for the type CertChainIssReq.
const CertChainIssReq_TypeID = 0xb2de94224c009676

func NewCertChainIssReq(s *capnp.Segment) (CertChainIssReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssReq{st}, err
}

func NewRootCertChainIssReq(s *capnp.Segment) (CertChainIssReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssReq{st}, err
}

func ReadRootCertChainIssReq(msg *capnp.Message) (CertChainIssReq, error) {
	root, err := msg.RootPtr()
	return CertChainIssReq{root.Struct()}, err
}

func (s CertChainIssReq) String() string {
	str, _ := text.Marshal(0xb2de94224c009676, s.Struct)
	return str
}

func (s CertChainIssReq) Cert() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChainIssReq) HasCert() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChainIssReq) SetCert(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertChainIssReq_List is a list of CertChainIssReq.
type CertChainIssReq_List struct{ capnp.List }

// NewCertChainIssReq creates a new list of CertChainIssReq.
func NewCertChainIssReq_List(s *capnp.Segment, sz int32) (CertChainIssReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CertChainIssReq_List{l}, err
}

func (s CertChainIssReq_List) At(i int) CertChainIssReq { return CertChainIssReq{s.List.Struct(i)} }

func (s CertChainIssReq_List) Set(i int, v CertChainIssReq) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CertChainIssReq_List) String() string {
	str, _ := text.MarshalList(0xb2de94224c009676, s.List)
	return str
}

// CertChainIssReq_Promise is a wrapper for a CertChainIssReq promised by a client call.
type CertChainIssReq_Promise struct{ *capnp.Pipeline }

func (p CertChainIssReq_Promise) Struct() (CertChainIssReq, error) {
	s, err := p.Pipeline.Struct()
	return CertChainIssReq{s}, err
}

type CertChainIssRep struct{ capnp.Struct }

// CertChainIssRep_TypeID is the unique identifier for the type CertChainIssRep.
const CertChainIssRep_TypeID = 0xc95b16276878cfc1

func NewCertChainIssRep(s *capnp.Segment) (CertChainIssRep, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssRep{st}, err
}

func NewRootCertChainIssRep(s *capnp.Segment) (CertChainIssRep, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChainIssRep{st}, err
}

func ReadRootCertChainIssRep(msg *capnp.Message) (CertChainIssRep, error) {
	root, err := msg.RootPtr()
	return CertChainIssRep{root.Struct()}, err
}

func (s CertChainIssRep) String() string {
	str, _ := text.Marshal(0xc95b16276878cfc1, s.Struct)
	return str
}

func (s CertChainIssRep) Chain() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChainIssRep) HasChain() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChainIssRep) SetChain(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertChainIssRep_List is a list of CertChainIssRep.
type CertChainIssRep_List struct{ capnp.List }

// NewCertChainIssRep creates a new list of CertChainIssRep.
func NewCertChainIssRep_List(s *capnp.Segment, sz int32) (CertChainIssRep_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CertChainIssRep_List{l}, err
}

func (s CertChainIssRep_List) At(i int) CertChainIssRep { return CertChainIssRep{s.List.Struct(i)} }

func (s CertChainIssRep_List) Set(i int, v CertChainIssRep) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CertChainIssRep_List) String() string {
	str, _ := text.MarshalList(0xc95b16276878cfc1, s.List)
	return str
}

// CertChainIssRep_Promise is a wrapper for a CertChainIssRep promised by a client call.
type CertChainIssRep_Promise struct{ *capnp.Pipeline }

func (p CertChainIssRep_Promise) Struct() (CertChainIssRep, error) {
	s, err := p.Pipeline.Struct()
	return CertChainIssRep{s}, err
}

type TRCReq struct{ capnp.Struct }

// TRCReq_TypeID is the unique identifier for the type TRCReq.
const TRCReq_TypeID = 0xd4c43f7ac10a9dbc

func NewTRCReq(s *capnp.Segment) (TRCReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TRCReq{st}, err
}

func NewRootTRCReq(s *capnp.Segment) (TRCReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TRCReq{st}, err
}

func ReadRootTRCReq(msg *capnp.Message) (TRCReq, error) {
	root, err := msg.RootPtr()
	return TRCReq{root.Struct()}, err
}

func (s TRCReq) String() string {
	str, _ := text.Marshal(0xd4c43f7ac10a9dbc, s.Struct)
	return str
}

func (s TRCReq) Isd() uint16 {
	return s.Struct.Uint16(0)
}

func (s TRCReq) SetIsd(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s TRCReq) Version() uint64 {
	return s.Struct.Uint64(8)
}

func (s TRCReq) SetVersion(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TRCReq) CacheOnly() bool {
	return s.Struct.Bit(16)
}

func (s TRCReq) SetCacheOnly(v bool) {
	s.Struct.SetBit(16, v)
}

// TRCReq_List is a list of TRCReq.
type TRCReq_List struct{ capnp.List }

// NewTRCReq creates a new list of TRCReq.
func NewTRCReq_List(s *capnp.Segment, sz int32) (TRCReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return TRCReq_List{l}, err
}

func (s TRCReq_List) At(i int) TRCReq { return TRCReq{s.List.Struct(i)} }

func (s TRCReq_List) Set(i int, v TRCReq) error { return s.List.SetStruct(i, v.Struct) }

func (s TRCReq_List) String() string {
	str, _ := text.MarshalList(0xd4c43f7ac10a9dbc, s.List)
	return str
}

// TRCReq_Promise is a wrapper for a TRCReq promised by a client call.
type TRCReq_Promise struct{ *capnp.Pipeline }

func (p TRCReq_Promise) Struct() (TRCReq, error) {
	s, err := p.Pipeline.Struct()
	return TRCReq{s}, err
}

type TRC struct{ capnp.Struct }

// TRC_TypeID is the unique identifier for the type TRC.
const TRC_TypeID = 0x9aee2af152a5f7d7

func NewTRC(s *capnp.Segment) (TRC, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TRC{st}, err
}

func NewRootTRC(s *capnp.Segment) (TRC, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TRC{st}, err
}

func ReadRootTRC(msg *capnp.Message) (TRC, error) {
	root, err := msg.RootPtr()
	return TRC{root.Struct()}, err
}

func (s TRC) String() string {
	str, _ := text.Marshal(0x9aee2af152a5f7d7, s.Struct)
	return str
}

func (s TRC) Trc() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TRC) HasTrc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TRC) SetTrc(v []byte) error {
	return s.Struct.SetData(0, v)
}

// TRC_List is a list of TRC.
type TRC_List struct{ capnp.List }

// NewTRC creates a new list of TRC.
func NewTRC_List(s *capnp.Segment, sz int32) (TRC_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TRC_List{l}, err
}

func (s TRC_List) At(i int) TRC { return TRC{s.List.Struct(i)} }

func (s TRC_List) Set(i int, v TRC) error { return s.List.SetStruct(i, v.Struct) }

func (s TRC_List) String() string {
	str, _ := text.MarshalList(0x9aee2af152a5f7d7, s.List)
	return str
}

// TRC_Promise is a wrapper for a TRC promised by a client call.
type TRC_Promise struct{ *capnp.Pipeline }

func (p TRC_Promise) Struct() (TRC, error) {
	s, err := p.Pipeline.Struct()
	return TRC{s}, err
}

type CertMgmt struct{ capnp.Struct }
type CertMgmt_Which uint16

const (
	CertMgmt_Which_unset           CertMgmt_Which = 0
	CertMgmt_Which_certChainReq    CertMgmt_Which = 1
	CertMgmt_Which_certChain       CertMgmt_Which = 2
	CertMgmt_Which_trcReq          CertMgmt_Which = 3
	CertMgmt_Which_trc             CertMgmt_Which = 4
	CertMgmt_Which_certChainIssReq CertMgmt_Which = 5
	CertMgmt_Which_certChainIssRep CertMgmt_Which = 6
)

func (w CertMgmt_Which) String() string {
	const s = "unsetcertChainReqcertChaintrcReqtrccertChainIssReqcertChainIssRep"
	switch w {
	case CertMgmt_Which_unset:
		return s[0:5]
	case CertMgmt_Which_certChainReq:
		return s[5:17]
	case CertMgmt_Which_certChain:
		return s[17:26]
	case CertMgmt_Which_trcReq:
		return s[26:32]
	case CertMgmt_Which_trc:
		return s[32:35]
	case CertMgmt_Which_certChainIssReq:
		return s[35:50]
	case CertMgmt_Which_certChainIssRep:
		return s[50:65]

	}
	return "CertMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CertMgmt_TypeID is the unique identifier for the type CertMgmt.
const CertMgmt_TypeID = 0xa19070b486ecd839

func NewCertMgmt(s *capnp.Segment) (CertMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertMgmt{st}, err
}

func NewRootCertMgmt(s *capnp.Segment) (CertMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertMgmt{st}, err
}

func ReadRootCertMgmt(msg *capnp.Message) (CertMgmt, error) {
	root, err := msg.RootPtr()
	return CertMgmt{root.Struct()}, err
}

func (s CertMgmt) String() string {
	str, _ := text.Marshal(0xa19070b486ecd839, s.Struct)
	return str
}

func (s CertMgmt) Which() CertMgmt_Which {
	return CertMgmt_Which(s.Struct.Uint16(0))
}
func (s CertMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CertMgmt) CertChainReq() (CertChainReq, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != certChainReq")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainReq() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainReq(v CertChainReq) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainReq sets the certChainReq field to a newly
// allocated CertChainReq struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainReq() (CertChainReq, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewCertChainReq(s.Struct.Segment())
	if err != nil {
		return CertChainReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChain() (CertChain, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != certChain")
	}
	p, err := s.Struct.Ptr(0)
	return CertChain{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChain() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChain(v CertChain) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChain sets the certChain field to a newly
// allocated CertChain struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChain() (CertChain, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewCertChain(s.Struct.Segment())
	if err != nil {
		return CertChain{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) TrcReq() (TRCReq, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != trcReq")
	}
	p, err := s.Struct.Ptr(0)
	return TRCReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasTrcReq() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetTrcReq(v TRCReq) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrcReq sets the trcReq field to a newly
// allocated TRCReq struct, preferring placement in s's segment.
func (s CertMgmt) NewTrcReq() (TRCReq, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewTRCReq(s.Struct.Segment())
	if err != nil {
		return TRCReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) Trc() (TRC, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != trc")
	}
	p, err := s.Struct.Ptr(0)
	return TRC{Struct: p.Struct()}, err
}

func (s CertMgmt) HasTrc() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetTrc(v TRC) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrc sets the trc field to a newly
// allocated TRC struct, preferring placement in s's segment.
func (s CertMgmt) NewTrc() (TRC, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewTRC(s.Struct.Segment())
	if err != nil {
		return TRC{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChainIssReq() (CertChainIssReq, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != certChainIssReq")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainIssReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainIssReq() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainIssReq(v CertChainIssReq) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainIssReq sets the certChainIssReq field to a newly
// allocated CertChainIssReq struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainIssReq() (CertChainIssReq, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewCertChainIssReq(s.Struct.Segment())
	if err != nil {
		return CertChainIssReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChainIssRep() (CertChainIssRep, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != certChainIssRep")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainIssRep{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainIssRep() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainIssRep(v CertChainIssRep) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainIssRep sets the certChainIssRep field to a newly
// allocated CertChainIssRep struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainIssRep() (CertChainIssRep, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewCertChainIssRep(s.Struct.Segment())
	if err != nil {
		return CertChainIssRep{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CertMgmt_List is a list of CertMgmt.
type CertMgmt_List struct{ capnp.List }

// NewCertMgmt creates a new list of CertMgmt.
func NewCertMgmt_List(s *capnp.Segment, sz int32) (CertMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return CertMgmt_List{l}, err
}

func (s CertMgmt_List) At(i int) CertMgmt { return CertMgmt{s.List.Struct(i)} }

func (s CertMgmt_List) Set(i int, v CertMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s CertMgmt_List) String() string {
	str, _ := text.MarshalList(0xa19070b486ecd839, s.List)
	return str
}

// CertMgmt_Promise is a wrapper for a CertMgmt promised by a client call.
type CertMgmt_Promise struct{ *capnp.Pipeline }

func (p CertMgmt_Promise) Struct() (CertMgmt, error) {
	s, err := p.Pipeline.Struct()
	return CertMgmt{s}, err
}

func (p CertMgmt_Promise) CertChainReq() CertChainReq_Promise {
	return CertChainReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChain() CertChain_Promise {
	return CertChain_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) TrcReq() TRCReq_Promise {
	return TRCReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) Trc() TRC_Promise {
	return TRC_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChainIssReq() CertChainIssReq_Promise {
	return CertChainIssReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChainIssRep() CertChainIssRep_Promise {
	return CertChainIssRep_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_ec3b2b10a5e23975 = "x\xda\x94\x93OH\x14o\x18\xc7\x9f\xef\xfb\xce\xee\xfe" +
	"\xf6\x87\x833\xecT\x04\xc6\x92\x10\x81A\xa4\x9e4b" +
	"\xad\xcd\x83\xa0\xe4\xbbx\x08:\xc42\x0e\xeeF\x8e\xeb" +
	"\xceh\x7f\x0e\x16\x1d\xba\xd6!:\x04\x1d\x0a<J\x11" +
	"\x05\x15\x1e\x12\x16\xca(\xd222\xa8\xc8\xe8RX\xd0" +
	")\xca\xec\x8dw\xb6udW\xb2n\xef\xbc\xef\xf7\xf9" +
	"\xf0|\x9f\xe7;\xbb\xc6\xd0\xc1\x9a#C\x8cH4D" +
	"\xa2\xf2\xc5\xd7\xf1\xcc\x97\xa6\xcf\x97\xc84 G\xda\xde" +
	"\x8d\x1b;v/R\x041\xa2\xc4\x16\\Ml\x0bN" +
	"[\x91\"\xc8\xb6\xf9\xc5\xb37\x0b\xe7\xaf\x900\xb0J" +
	"\xdc\x89\x98\xd2\xec\xc5\xc3D\x8fR\xb7v\xe1\x1c\x08r" +
	"S|\xf3X\xf2\xfe\xc4\xc4Z\xe8\x05\xf64\xf1\x89\xa9" +
	"\xd3\x07\x96\",\x8d^\xecn\xbc\xf0\xe6F\xad\xb25" +
	"\xce\x19\x12\x1b\xb8\x92\x9a\\u\xf1\xaco\xec\xd8\xdb\xd9" +
	"\xfe\x92\xea\x82\x87jM)\x9a\xf9\xc7\xc4\x9e@\xdb\xc6" +
	"\xaf\x11\xe4\xd4\x93\xe3\xb9\xed\x1b\x0fM\xaf\xd1B\xebs" +
	"\x05^\x08\xc4\xaf\x03\xf0\xe4\xe5\xff\xa7N\xa6Js\x0a" +
	"\xcc\xaa\xc0\xcb\xfcn\"\x12\x9c\xa0)\xb0\xed\x14\xfd\xc3" +
	"\x83\x03\x83\xf0w\xda\xd9\x82[h\x8f\xf5e\xd2\xbd\x80" +
	"\xd0\xb8F\xa4\x81\xc8\xd4\x1b\x89\xc4\x7f\x1c\xc2b\x88\xf9" +
	"E\x1b:1\xe8\xabjY\xa56\xed\x14\xfd\x9e\x81A" +
	"\x9fH\x11\x1a\xb8V'e\x80\xb8\xd5B$\xaes\x88" +
	"I\x06\x1d?\xa5\x05u{\xe7\x08\x91\xb8\xcd!J\x0c" +
	":[\x96\x16\x18\x919\x95!\x12\xf78\xc4#\x06\x9d" +
	"\xff\x90\x168\x919\xddN$J\x1cb\x86A\xd7\x96" +
	"\xa4\x05\x8d\xc8|\xacZ{\xc0!\xe6\x18\xf4\xc8wi" +
	"!Bd\xce\x9e!\x123\x1c\xe2\x15\x83\x1e\xfd&-" +
	"D\x89\xcc\x97\xeav\x9eC\xbcgH\x8e\xb8\x9e\xe3S" +
	"4\xb0\x90\xcee\xf3T\xeff\x9ca\x18\xe1R\x080" +
	"~{\x0c\x04pa\x84I(\xbf\xa6\xfc\xa2].[" +
	"\x19y\xf9!\x18\x93\x11f\xb2\x0a\x06\xb7\xcb\xf32\xce" +
	"0\xc1\xa8\x04fmE\x81`\x84\xbb_\xa5\xa9\x19{" +
	"\xb9\xa8jq-\xe1\xe2\x92v.\x9bwkV\xc7\xab" +
	"\x19\x95\xce\xaaHM!\xa9^\xd5\xfe9\x03\x0a\x14\x0c" +
	"TQ\xeaV(\x9d\xaa\x9f\x0e\x0e\xd1\xcd`\x02\xe5\x10" +
	"t\xed#\x12\xfb9D/\x83\xc9N\x973\xd0\xa32" +
	"\xd0\xcd!\x0e2$\xf3^\x7f\xd6C\x9c\x18\xe2\x84S" +
	"\xa3N\xd1\xcb\x0f\xb9\x95oig\xed\x9cs\xc0=J" +
	"8\x01\x10\x03\xd6wW\xa0\x7f\x9e\xd3\xca\xef\x91\xea\xcb" +
	"\xa4k\x8d5\xaek\xcc\xa85\x16\xcb{\xfd\x88\x11C" +
	"\xec\xefl\xfd\x0a\x00\x00\xff\xff\x02\xdd>\x87"

func init() {
	schemas.Register(schema_ec3b2b10a5e23975,
		0x9aee2af152a5f7d7,
		0xa19070b486ecd839,
		0xadadc71f7e190917,
		0xb2de94224c009676,
		0xc464d1e0777e54d3,
		0xc95b16276878cfc1,
		0xd4c43f7ac10a9dbc)
}
