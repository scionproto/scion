// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SegmentReservationID struct{ capnp.Struct }

// SegmentReservationID_TypeID is the unique identifier for the type SegmentReservationID.
const SegmentReservationID_TypeID = 0x8eeec8f2d8e7feb5

func NewSegmentReservationID(s *capnp.Segment) (SegmentReservationID, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentReservationID{st}, err
}

func NewRootSegmentReservationID(s *capnp.Segment) (SegmentReservationID, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentReservationID{st}, err
}

func ReadRootSegmentReservationID(msg *capnp.Message) (SegmentReservationID, error) {
	root, err := msg.RootPtr()
	return SegmentReservationID{root.Struct()}, err
}

func (s SegmentReservationID) String() string {
	str, _ := text.Marshal(0x8eeec8f2d8e7feb5, s.Struct)
	return str
}

func (s SegmentReservationID) Asid() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SegmentReservationID) HasAsid() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentReservationID) SetAsid(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SegmentReservationID) Suffix() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SegmentReservationID) HasSuffix() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentReservationID) SetSuffix(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SegmentReservationID_List is a list of SegmentReservationID.
type SegmentReservationID_List struct{ capnp.List }

// NewSegmentReservationID creates a new list of SegmentReservationID.
func NewSegmentReservationID_List(s *capnp.Segment, sz int32) (SegmentReservationID_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegmentReservationID_List{l}, err
}

func (s SegmentReservationID_List) At(i int) SegmentReservationID {
	return SegmentReservationID{s.List.Struct(i)}
}

func (s SegmentReservationID_List) Set(i int, v SegmentReservationID) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentReservationID_List) String() string {
	str, _ := text.MarshalList(0x8eeec8f2d8e7feb5, s.List)
	return str
}

// SegmentReservationID_Promise is a wrapper for a SegmentReservationID promised by a client call.
type SegmentReservationID_Promise struct{ *capnp.Pipeline }

func (p SegmentReservationID_Promise) Struct() (SegmentReservationID, error) {
	s, err := p.Pipeline.Struct()
	return SegmentReservationID{s}, err
}

type E2EReservationID struct{ capnp.Struct }

// E2EReservationID_TypeID is the unique identifier for the type E2EReservationID.
const E2EReservationID_TypeID = 0xf621d7829e171884

func NewE2EReservationID(s *capnp.Segment) (E2EReservationID, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return E2EReservationID{st}, err
}

func NewRootE2EReservationID(s *capnp.Segment) (E2EReservationID, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return E2EReservationID{st}, err
}

func ReadRootE2EReservationID(msg *capnp.Message) (E2EReservationID, error) {
	root, err := msg.RootPtr()
	return E2EReservationID{root.Struct()}, err
}

func (s E2EReservationID) String() string {
	str, _ := text.Marshal(0xf621d7829e171884, s.Struct)
	return str
}

func (s E2EReservationID) Asid() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s E2EReservationID) HasAsid() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2EReservationID) SetAsid(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s E2EReservationID) Suffix() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s E2EReservationID) HasSuffix() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2EReservationID) SetSuffix(v []byte) error {
	return s.Struct.SetData(1, v)
}

// E2EReservationID_List is a list of E2EReservationID.
type E2EReservationID_List struct{ capnp.List }

// NewE2EReservationID creates a new list of E2EReservationID.
func NewE2EReservationID_List(s *capnp.Segment, sz int32) (E2EReservationID_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return E2EReservationID_List{l}, err
}

func (s E2EReservationID_List) At(i int) E2EReservationID { return E2EReservationID{s.List.Struct(i)} }

func (s E2EReservationID_List) Set(i int, v E2EReservationID) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s E2EReservationID_List) String() string {
	str, _ := text.MarshalList(0xf621d7829e171884, s.List)
	return str
}

// E2EReservationID_Promise is a wrapper for a E2EReservationID promised by a client call.
type E2EReservationID_Promise struct{ *capnp.Pipeline }

func (p E2EReservationID_Promise) Struct() (E2EReservationID, error) {
	s, err := p.Pipeline.Struct()
	return E2EReservationID{s}, err
}

type ReservationIndexState uint16

// ReservationIndexState_TypeID is the unique identifier for the type ReservationIndexState.
const ReservationIndexState_TypeID = 0xc790178ff054f9a1

// Values of ReservationIndexState.
const (
	ReservationIndexState_pending ReservationIndexState = 0
	ReservationIndexState_active  ReservationIndexState = 1
)

// String returns the enum's constant name.
func (c ReservationIndexState) String() string {
	switch c {
	case ReservationIndexState_pending:
		return "pending"
	case ReservationIndexState_active:
		return "active"

	default:
		return ""
	}
}

// ReservationIndexStateFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ReservationIndexStateFromString(c string) ReservationIndexState {
	switch c {
	case "pending":
		return ReservationIndexState_pending
	case "active":
		return ReservationIndexState_active

	default:
		return 0
	}
}

type ReservationIndexState_List struct{ capnp.List }

func NewReservationIndexState_List(s *capnp.Segment, sz int32) (ReservationIndexState_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ReservationIndexState_List{l.List}, err
}

func (l ReservationIndexState_List) At(i int) ReservationIndexState {
	ul := capnp.UInt16List{List: l.List}
	return ReservationIndexState(ul.At(i))
}

func (l ReservationIndexState_List) Set(i int, v ReservationIndexState) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PathEndProps struct{ capnp.Struct }

// PathEndProps_TypeID is the unique identifier for the type PathEndProps.
const PathEndProps_TypeID = 0xbcacff128f5ddd26

func NewPathEndProps(s *capnp.Segment) (PathEndProps, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PathEndProps{st}, err
}

func NewRootPathEndProps(s *capnp.Segment) (PathEndProps, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PathEndProps{st}, err
}

func ReadRootPathEndProps(msg *capnp.Message) (PathEndProps, error) {
	root, err := msg.RootPtr()
	return PathEndProps{root.Struct()}, err
}

func (s PathEndProps) String() string {
	str, _ := text.Marshal(0xbcacff128f5ddd26, s.Struct)
	return str
}

func (s PathEndProps) Local() bool {
	return s.Struct.Bit(0)
}

func (s PathEndProps) SetLocal(v bool) {
	s.Struct.SetBit(0, v)
}

func (s PathEndProps) Transfer() bool {
	return s.Struct.Bit(1)
}

func (s PathEndProps) SetTransfer(v bool) {
	s.Struct.SetBit(1, v)
}

// PathEndProps_List is a list of PathEndProps.
type PathEndProps_List struct{ capnp.List }

// NewPathEndProps creates a new list of PathEndProps.
func NewPathEndProps_List(s *capnp.Segment, sz int32) (PathEndProps_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return PathEndProps_List{l}, err
}

func (s PathEndProps_List) At(i int) PathEndProps { return PathEndProps{s.List.Struct(i)} }

func (s PathEndProps_List) Set(i int, v PathEndProps) error { return s.List.SetStruct(i, v.Struct) }

func (s PathEndProps_List) String() string {
	str, _ := text.MarshalList(0xbcacff128f5ddd26, s.List)
	return str
}

// PathEndProps_Promise is a wrapper for a PathEndProps promised by a client call.
type PathEndProps_Promise struct{ *capnp.Pipeline }

func (p PathEndProps_Promise) Struct() (PathEndProps, error) {
	s, err := p.Pipeline.Struct()
	return PathEndProps{s}, err
}

type AllocationBead struct{ capnp.Struct }

// AllocationBead_TypeID is the unique identifier for the type AllocationBead.
const AllocationBead_TypeID = 0xc8ba760a91de682a

func NewAllocationBead(s *capnp.Segment) (AllocationBead, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AllocationBead{st}, err
}

func NewRootAllocationBead(s *capnp.Segment) (AllocationBead, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AllocationBead{st}, err
}

func ReadRootAllocationBead(msg *capnp.Message) (AllocationBead, error) {
	root, err := msg.RootPtr()
	return AllocationBead{root.Struct()}, err
}

func (s AllocationBead) String() string {
	str, _ := text.Marshal(0xc8ba760a91de682a, s.Struct)
	return str
}

func (s AllocationBead) AllocBW() uint8 {
	return s.Struct.Uint8(0)
}

func (s AllocationBead) SetAllocBW(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s AllocationBead) MaxBW() uint8 {
	return s.Struct.Uint8(1)
}

func (s AllocationBead) SetMaxBW(v uint8) {
	s.Struct.SetUint8(1, v)
}

// AllocationBead_List is a list of AllocationBead.
type AllocationBead_List struct{ capnp.List }

// NewAllocationBead creates a new list of AllocationBead.
func NewAllocationBead_List(s *capnp.Segment, sz int32) (AllocationBead_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return AllocationBead_List{l}, err
}

func (s AllocationBead_List) At(i int) AllocationBead { return AllocationBead{s.List.Struct(i)} }

func (s AllocationBead_List) Set(i int, v AllocationBead) error { return s.List.SetStruct(i, v.Struct) }

func (s AllocationBead_List) String() string {
	str, _ := text.MarshalList(0xc8ba760a91de682a, s.List)
	return str
}

// AllocationBead_Promise is a wrapper for a AllocationBead promised by a client call.
type AllocationBead_Promise struct{ *capnp.Pipeline }

func (p AllocationBead_Promise) Struct() (AllocationBead, error) {
	s, err := p.Pipeline.Struct()
	return AllocationBead{s}, err
}

type SegmentBase struct{ capnp.Struct }

// SegmentBase_TypeID is the unique identifier for the type SegmentBase.
const SegmentBase_TypeID = 0x9668b2a783bf3465

func NewSegmentBase(s *capnp.Segment) (SegmentBase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentBase{st}, err
}

func NewRootSegmentBase(s *capnp.Segment) (SegmentBase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentBase{st}, err
}

func ReadRootSegmentBase(msg *capnp.Message) (SegmentBase, error) {
	root, err := msg.RootPtr()
	return SegmentBase{root.Struct()}, err
}

func (s SegmentBase) String() string {
	str, _ := text.Marshal(0x9668b2a783bf3465, s.Struct)
	return str
}

func (s SegmentBase) Id() (SegmentReservationID, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentReservationID{Struct: p.Struct()}, err
}

func (s SegmentBase) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentBase) SetId(v SegmentReservationID) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated SegmentReservationID struct, preferring placement in s's segment.
func (s SegmentBase) NewId() (SegmentReservationID, error) {
	ss, err := NewSegmentReservationID(s.Struct.Segment())
	if err != nil {
		return SegmentReservationID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentBase) Index() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentBase) SetIndex(v uint8) {
	s.Struct.SetUint8(0, v)
}

// SegmentBase_List is a list of SegmentBase.
type SegmentBase_List struct{ capnp.List }

// NewSegmentBase creates a new list of SegmentBase.
func NewSegmentBase_List(s *capnp.Segment, sz int32) (SegmentBase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegmentBase_List{l}, err
}

func (s SegmentBase_List) At(i int) SegmentBase { return SegmentBase{s.List.Struct(i)} }

func (s SegmentBase_List) Set(i int, v SegmentBase) error { return s.List.SetStruct(i, v.Struct) }

func (s SegmentBase_List) String() string {
	str, _ := text.MarshalList(0x9668b2a783bf3465, s.List)
	return str
}

// SegmentBase_Promise is a wrapper for a SegmentBase promised by a client call.
type SegmentBase_Promise struct{ *capnp.Pipeline }

func (p SegmentBase_Promise) Struct() (SegmentBase, error) {
	s, err := p.Pipeline.Struct()
	return SegmentBase{s}, err
}

func (p SegmentBase_Promise) Id() SegmentReservationID_Promise {
	return SegmentReservationID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type E2EBase struct{ capnp.Struct }

// E2EBase_TypeID is the unique identifier for the type E2EBase.
const E2EBase_TypeID = 0x830a81292c60dfee

func NewE2EBase(s *capnp.Segment) (E2EBase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return E2EBase{st}, err
}

func NewRootE2EBase(s *capnp.Segment) (E2EBase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return E2EBase{st}, err
}

func ReadRootE2EBase(msg *capnp.Message) (E2EBase, error) {
	root, err := msg.RootPtr()
	return E2EBase{root.Struct()}, err
}

func (s E2EBase) String() string {
	str, _ := text.Marshal(0x830a81292c60dfee, s.Struct)
	return str
}

func (s E2EBase) Id() (E2EReservationID, error) {
	p, err := s.Struct.Ptr(0)
	return E2EReservationID{Struct: p.Struct()}, err
}

func (s E2EBase) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2EBase) SetId(v E2EReservationID) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated E2EReservationID struct, preferring placement in s's segment.
func (s E2EBase) NewId() (E2EReservationID, error) {
	ss, err := NewE2EReservationID(s.Struct.Segment())
	if err != nil {
		return E2EReservationID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s E2EBase) Index() uint8 {
	return s.Struct.Uint8(0)
}

func (s E2EBase) SetIndex(v uint8) {
	s.Struct.SetUint8(0, v)
}

// E2EBase_List is a list of E2EBase.
type E2EBase_List struct{ capnp.List }

// NewE2EBase creates a new list of E2EBase.
func NewE2EBase_List(s *capnp.Segment, sz int32) (E2EBase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return E2EBase_List{l}, err
}

func (s E2EBase_List) At(i int) E2EBase { return E2EBase{s.List.Struct(i)} }

func (s E2EBase_List) Set(i int, v E2EBase) error { return s.List.SetStruct(i, v.Struct) }

func (s E2EBase_List) String() string {
	str, _ := text.MarshalList(0x830a81292c60dfee, s.List)
	return str
}

// E2EBase_Promise is a wrapper for a E2EBase promised by a client call.
type E2EBase_Promise struct{ *capnp.Pipeline }

func (p E2EBase_Promise) Struct() (E2EBase, error) {
	s, err := p.Pipeline.Struct()
	return E2EBase{s}, err
}

func (p E2EBase_Promise) Id() E2EReservationID_Promise {
	return E2EReservationID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentSetupReqData struct{ capnp.Struct }

// SegmentSetupReqData_TypeID is the unique identifier for the type SegmentSetupReqData.
const SegmentSetupReqData_TypeID = 0xa26d74bea4eb287e

func NewSegmentSetupReqData(s *capnp.Segment) (SegmentSetupReqData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return SegmentSetupReqData{st}, err
}

func NewRootSegmentSetupReqData(s *capnp.Segment) (SegmentSetupReqData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return SegmentSetupReqData{st}, err
}

func ReadRootSegmentSetupReqData(msg *capnp.Message) (SegmentSetupReqData, error) {
	root, err := msg.RootPtr()
	return SegmentSetupReqData{root.Struct()}, err
}

func (s SegmentSetupReqData) String() string {
	str, _ := text.Marshal(0xa26d74bea4eb287e, s.Struct)
	return str
}

func (s SegmentSetupReqData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentSetupReqData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentSetupReqData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupReqData) MinBW() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentSetupReqData) SetMinBW(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s SegmentSetupReqData) MaxBW() uint8 {
	return s.Struct.Uint8(1)
}

func (s SegmentSetupReqData) SetMaxBW(v uint8) {
	s.Struct.SetUint8(1, v)
}

func (s SegmentSetupReqData) SplitCls() uint8 {
	return s.Struct.Uint8(2)
}

func (s SegmentSetupReqData) SetSplitCls(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s SegmentSetupReqData) StartProps() (PathEndProps, error) {
	p, err := s.Struct.Ptr(1)
	return PathEndProps{Struct: p.Struct()}, err
}

func (s SegmentSetupReqData) HasStartProps() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetStartProps(v PathEndProps) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewStartProps sets the startProps field to a newly
// allocated PathEndProps struct, preferring placement in s's segment.
func (s SegmentSetupReqData) NewStartProps() (PathEndProps, error) {
	ss, err := NewPathEndProps(s.Struct.Segment())
	if err != nil {
		return PathEndProps{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupReqData) EndProps() (PathEndProps, error) {
	p, err := s.Struct.Ptr(2)
	return PathEndProps{Struct: p.Struct()}, err
}

func (s SegmentSetupReqData) HasEndProps() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetEndProps(v PathEndProps) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewEndProps sets the endProps field to a newly
// allocated PathEndProps struct, preferring placement in s's segment.
func (s SegmentSetupReqData) NewEndProps() (PathEndProps, error) {
	ss, err := NewPathEndProps(s.Struct.Segment())
	if err != nil {
		return PathEndProps{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupReqData) InfoField() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s SegmentSetupReqData) HasInfoField() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetInfoField(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s SegmentSetupReqData) AllocationTrail() (AllocationBead_List, error) {
	p, err := s.Struct.Ptr(4)
	return AllocationBead_List{List: p.List()}, err
}

func (s SegmentSetupReqData) HasAllocationTrail() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s SegmentSetupReqData) SetAllocationTrail(v AllocationBead_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewAllocationTrail sets the allocationTrail field to a newly
// allocated AllocationBead_List, preferring placement in s's segment.
func (s SegmentSetupReqData) NewAllocationTrail(n int32) (AllocationBead_List, error) {
	l, err := NewAllocationBead_List(s.Struct.Segment(), n)
	if err != nil {
		return AllocationBead_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// SegmentSetupReqData_List is a list of SegmentSetupReqData.
type SegmentSetupReqData_List struct{ capnp.List }

// NewSegmentSetupReqData creates a new list of SegmentSetupReqData.
func NewSegmentSetupReqData_List(s *capnp.Segment, sz int32) (SegmentSetupReqData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return SegmentSetupReqData_List{l}, err
}

func (s SegmentSetupReqData_List) At(i int) SegmentSetupReqData {
	return SegmentSetupReqData{s.List.Struct(i)}
}

func (s SegmentSetupReqData_List) Set(i int, v SegmentSetupReqData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentSetupReqData_List) String() string {
	str, _ := text.MarshalList(0xa26d74bea4eb287e, s.List)
	return str
}

// SegmentSetupReqData_Promise is a wrapper for a SegmentSetupReqData promised by a client call.
type SegmentSetupReqData_Promise struct{ *capnp.Pipeline }

func (p SegmentSetupReqData_Promise) Struct() (SegmentSetupReqData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentSetupReqData{s}, err
}

func (p SegmentSetupReqData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegmentSetupReqData_Promise) StartProps() PathEndProps_Promise {
	return PathEndProps_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p SegmentSetupReqData_Promise) EndProps() PathEndProps_Promise {
	return PathEndProps_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type SegmentSetupResData struct{ capnp.Struct }
type SegmentSetupResData_Which uint16

const (
	SegmentSetupResData_Which_unset   SegmentSetupResData_Which = 0
	SegmentSetupResData_Which_failure SegmentSetupResData_Which = 1
	SegmentSetupResData_Which_token   SegmentSetupResData_Which = 2
)

func (w SegmentSetupResData_Which) String() string {
	const s = "unsetfailuretoken"
	switch w {
	case SegmentSetupResData_Which_unset:
		return s[0:5]
	case SegmentSetupResData_Which_failure:
		return s[5:12]
	case SegmentSetupResData_Which_token:
		return s[12:17]

	}
	return "SegmentSetupResData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SegmentSetupResData_TypeID is the unique identifier for the type SegmentSetupResData.
const SegmentSetupResData_TypeID = 0xaa345154c72e2fa5

func NewSegmentSetupResData(s *capnp.Segment) (SegmentSetupResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SegmentSetupResData{st}, err
}

func NewRootSegmentSetupResData(s *capnp.Segment) (SegmentSetupResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SegmentSetupResData{st}, err
}

func ReadRootSegmentSetupResData(msg *capnp.Message) (SegmentSetupResData, error) {
	root, err := msg.RootPtr()
	return SegmentSetupResData{root.Struct()}, err
}

func (s SegmentSetupResData) String() string {
	str, _ := text.Marshal(0xaa345154c72e2fa5, s.Struct)
	return str
}

func (s SegmentSetupResData) Which() SegmentSetupResData_Which {
	return SegmentSetupResData_Which(s.Struct.Uint16(0))
}
func (s SegmentSetupResData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentSetupResData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentSetupResData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentSetupResData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupResData) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s SegmentSetupResData) Failure() (SegmentSetupReqData, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != failure")
	}
	p, err := s.Struct.Ptr(1)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s SegmentSetupResData) HasFailure() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentSetupResData) SetFailure(v SegmentSetupReqData) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFailure sets the failure field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s SegmentSetupResData) NewFailure() (SegmentSetupReqData, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentSetupResData) Token() ([]byte, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != token")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SegmentSetupResData) HasToken() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentSetupResData) SetToken(v []byte) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetData(1, v)
}

// SegmentSetupResData_List is a list of SegmentSetupResData.
type SegmentSetupResData_List struct{ capnp.List }

// NewSegmentSetupResData creates a new list of SegmentSetupResData.
func NewSegmentSetupResData_List(s *capnp.Segment, sz int32) (SegmentSetupResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SegmentSetupResData_List{l}, err
}

func (s SegmentSetupResData_List) At(i int) SegmentSetupResData {
	return SegmentSetupResData{s.List.Struct(i)}
}

func (s SegmentSetupResData_List) Set(i int, v SegmentSetupResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentSetupResData_List) String() string {
	str, _ := text.MarshalList(0xaa345154c72e2fa5, s.List)
	return str
}

// SegmentSetupResData_Promise is a wrapper for a SegmentSetupResData promised by a client call.
type SegmentSetupResData_Promise struct{ *capnp.Pipeline }

func (p SegmentSetupResData_Promise) Struct() (SegmentSetupResData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentSetupResData{s}, err
}

func (p SegmentSetupResData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegmentSetupResData_Promise) Failure() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type SegmentTelesSetupData struct{ capnp.Struct }

// SegmentTelesSetupData_TypeID is the unique identifier for the type SegmentTelesSetupData.
const SegmentTelesSetupData_TypeID = 0xa953af3d8be428ba

func NewSegmentTelesSetupData(s *capnp.Segment) (SegmentTelesSetupData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentTelesSetupData{st}, err
}

func NewRootSegmentTelesSetupData(s *capnp.Segment) (SegmentTelesSetupData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegmentTelesSetupData{st}, err
}

func ReadRootSegmentTelesSetupData(msg *capnp.Message) (SegmentTelesSetupData, error) {
	root, err := msg.RootPtr()
	return SegmentTelesSetupData{root.Struct()}, err
}

func (s SegmentTelesSetupData) String() string {
	str, _ := text.Marshal(0xa953af3d8be428ba, s.Struct)
	return str
}

func (s SegmentTelesSetupData) Setup() (SegmentSetupReqData, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s SegmentTelesSetupData) HasSetup() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentTelesSetupData) SetSetup(v SegmentSetupReqData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSetup sets the setup field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s SegmentTelesSetupData) NewSetup() (SegmentSetupReqData, error) {
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentTelesSetupData) BaseID() (SegmentReservationID, error) {
	p, err := s.Struct.Ptr(1)
	return SegmentReservationID{Struct: p.Struct()}, err
}

func (s SegmentTelesSetupData) HasBaseID() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegmentTelesSetupData) SetBaseID(v SegmentReservationID) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewBaseID sets the baseID field to a newly
// allocated SegmentReservationID struct, preferring placement in s's segment.
func (s SegmentTelesSetupData) NewBaseID() (SegmentReservationID, error) {
	ss, err := NewSegmentReservationID(s.Struct.Segment())
	if err != nil {
		return SegmentReservationID{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SegmentTelesSetupData_List is a list of SegmentTelesSetupData.
type SegmentTelesSetupData_List struct{ capnp.List }

// NewSegmentTelesSetupData creates a new list of SegmentTelesSetupData.
func NewSegmentTelesSetupData_List(s *capnp.Segment, sz int32) (SegmentTelesSetupData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegmentTelesSetupData_List{l}, err
}

func (s SegmentTelesSetupData_List) At(i int) SegmentTelesSetupData {
	return SegmentTelesSetupData{s.List.Struct(i)}
}

func (s SegmentTelesSetupData_List) Set(i int, v SegmentTelesSetupData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentTelesSetupData_List) String() string {
	str, _ := text.MarshalList(0xa953af3d8be428ba, s.List)
	return str
}

// SegmentTelesSetupData_Promise is a wrapper for a SegmentTelesSetupData promised by a client call.
type SegmentTelesSetupData_Promise struct{ *capnp.Pipeline }

func (p SegmentTelesSetupData_Promise) Struct() (SegmentTelesSetupData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentTelesSetupData{s}, err
}

func (p SegmentTelesSetupData_Promise) Setup() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SegmentTelesSetupData_Promise) BaseID() SegmentReservationID_Promise {
	return SegmentReservationID_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type SegmentTeardownReqData struct{ capnp.Struct }

// SegmentTeardownReqData_TypeID is the unique identifier for the type SegmentTeardownReqData.
const SegmentTeardownReqData_TypeID = 0xa53b4bed5b0bc568

func NewSegmentTeardownReqData(s *capnp.Segment) (SegmentTeardownReqData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegmentTeardownReqData{st}, err
}

func NewRootSegmentTeardownReqData(s *capnp.Segment) (SegmentTeardownReqData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegmentTeardownReqData{st}, err
}

func ReadRootSegmentTeardownReqData(msg *capnp.Message) (SegmentTeardownReqData, error) {
	root, err := msg.RootPtr()
	return SegmentTeardownReqData{root.Struct()}, err
}

func (s SegmentTeardownReqData) String() string {
	str, _ := text.Marshal(0xa53b4bed5b0bc568, s.Struct)
	return str
}

func (s SegmentTeardownReqData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentTeardownReqData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentTeardownReqData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentTeardownReqData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SegmentTeardownReqData_List is a list of SegmentTeardownReqData.
type SegmentTeardownReqData_List struct{ capnp.List }

// NewSegmentTeardownReqData creates a new list of SegmentTeardownReqData.
func NewSegmentTeardownReqData_List(s *capnp.Segment, sz int32) (SegmentTeardownReqData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegmentTeardownReqData_List{l}, err
}

func (s SegmentTeardownReqData_List) At(i int) SegmentTeardownReqData {
	return SegmentTeardownReqData{s.List.Struct(i)}
}

func (s SegmentTeardownReqData_List) Set(i int, v SegmentTeardownReqData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentTeardownReqData_List) String() string {
	str, _ := text.MarshalList(0xa53b4bed5b0bc568, s.List)
	return str
}

// SegmentTeardownReqData_Promise is a wrapper for a SegmentTeardownReqData promised by a client call.
type SegmentTeardownReqData_Promise struct{ *capnp.Pipeline }

func (p SegmentTeardownReqData_Promise) Struct() (SegmentTeardownReqData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentTeardownReqData{s}, err
}

func (p SegmentTeardownReqData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentTeardownResData struct{ capnp.Struct }

// SegmentTeardownResData_TypeID is the unique identifier for the type SegmentTeardownResData.
const SegmentTeardownResData_TypeID = 0x8bd6c2ab5c4cf984

func NewSegmentTeardownResData(s *capnp.Segment) (SegmentTeardownResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentTeardownResData{st}, err
}

func NewRootSegmentTeardownResData(s *capnp.Segment) (SegmentTeardownResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentTeardownResData{st}, err
}

func ReadRootSegmentTeardownResData(msg *capnp.Message) (SegmentTeardownResData, error) {
	root, err := msg.RootPtr()
	return SegmentTeardownResData{root.Struct()}, err
}

func (s SegmentTeardownResData) String() string {
	str, _ := text.Marshal(0x8bd6c2ab5c4cf984, s.Struct)
	return str
}

func (s SegmentTeardownResData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentTeardownResData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentTeardownResData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentTeardownResData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentTeardownResData) ErrorCode() uint8 {
	return s.Struct.Uint8(0)
}

func (s SegmentTeardownResData) SetErrorCode(v uint8) {
	s.Struct.SetUint8(0, v)
}

// SegmentTeardownResData_List is a list of SegmentTeardownResData.
type SegmentTeardownResData_List struct{ capnp.List }

// NewSegmentTeardownResData creates a new list of SegmentTeardownResData.
func NewSegmentTeardownResData_List(s *capnp.Segment, sz int32) (SegmentTeardownResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegmentTeardownResData_List{l}, err
}

func (s SegmentTeardownResData_List) At(i int) SegmentTeardownResData {
	return SegmentTeardownResData{s.List.Struct(i)}
}

func (s SegmentTeardownResData_List) Set(i int, v SegmentTeardownResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentTeardownResData_List) String() string {
	str, _ := text.MarshalList(0x8bd6c2ab5c4cf984, s.List)
	return str
}

// SegmentTeardownResData_Promise is a wrapper for a SegmentTeardownResData promised by a client call.
type SegmentTeardownResData_Promise struct{ *capnp.Pipeline }

func (p SegmentTeardownResData_Promise) Struct() (SegmentTeardownResData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentTeardownResData{s}, err
}

func (p SegmentTeardownResData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentIndexConfirmationData struct{ capnp.Struct }

// SegmentIndexConfirmationData_TypeID is the unique identifier for the type SegmentIndexConfirmationData.
const SegmentIndexConfirmationData_TypeID = 0xc4264f5cf728f9ac

func NewSegmentIndexConfirmationData(s *capnp.Segment) (SegmentIndexConfirmationData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentIndexConfirmationData{st}, err
}

func NewRootSegmentIndexConfirmationData(s *capnp.Segment) (SegmentIndexConfirmationData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegmentIndexConfirmationData{st}, err
}

func ReadRootSegmentIndexConfirmationData(msg *capnp.Message) (SegmentIndexConfirmationData, error) {
	root, err := msg.RootPtr()
	return SegmentIndexConfirmationData{root.Struct()}, err
}

func (s SegmentIndexConfirmationData) String() string {
	str, _ := text.Marshal(0xc4264f5cf728f9ac, s.Struct)
	return str
}

func (s SegmentIndexConfirmationData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentIndexConfirmationData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentIndexConfirmationData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentIndexConfirmationData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SegmentIndexConfirmationData) State() ReservationIndexState {
	return ReservationIndexState(s.Struct.Uint16(0))
}

func (s SegmentIndexConfirmationData) SetState(v ReservationIndexState) {
	s.Struct.SetUint16(0, uint16(v))
}

// SegmentIndexConfirmationData_List is a list of SegmentIndexConfirmationData.
type SegmentIndexConfirmationData_List struct{ capnp.List }

// NewSegmentIndexConfirmationData creates a new list of SegmentIndexConfirmationData.
func NewSegmentIndexConfirmationData_List(s *capnp.Segment, sz int32) (SegmentIndexConfirmationData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegmentIndexConfirmationData_List{l}, err
}

func (s SegmentIndexConfirmationData_List) At(i int) SegmentIndexConfirmationData {
	return SegmentIndexConfirmationData{s.List.Struct(i)}
}

func (s SegmentIndexConfirmationData_List) Set(i int, v SegmentIndexConfirmationData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentIndexConfirmationData_List) String() string {
	str, _ := text.MarshalList(0xc4264f5cf728f9ac, s.List)
	return str
}

// SegmentIndexConfirmationData_Promise is a wrapper for a SegmentIndexConfirmationData promised by a client call.
type SegmentIndexConfirmationData_Promise struct{ *capnp.Pipeline }

func (p SegmentIndexConfirmationData_Promise) Struct() (SegmentIndexConfirmationData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentIndexConfirmationData{s}, err
}

func (p SegmentIndexConfirmationData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type SegmentCleanupData struct{ capnp.Struct }

// SegmentCleanupData_TypeID is the unique identifier for the type SegmentCleanupData.
const SegmentCleanupData_TypeID = 0xd3e56d3f1e39ca3c

func NewSegmentCleanupData(s *capnp.Segment) (SegmentCleanupData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegmentCleanupData{st}, err
}

func NewRootSegmentCleanupData(s *capnp.Segment) (SegmentCleanupData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegmentCleanupData{st}, err
}

func ReadRootSegmentCleanupData(msg *capnp.Message) (SegmentCleanupData, error) {
	root, err := msg.RootPtr()
	return SegmentCleanupData{root.Struct()}, err
}

func (s SegmentCleanupData) String() string {
	str, _ := text.Marshal(0xd3e56d3f1e39ca3c, s.Struct)
	return str
}

func (s SegmentCleanupData) Base() (SegmentBase, error) {
	p, err := s.Struct.Ptr(0)
	return SegmentBase{Struct: p.Struct()}, err
}

func (s SegmentCleanupData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegmentCleanupData) SetBase(v SegmentBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated SegmentBase struct, preferring placement in s's segment.
func (s SegmentCleanupData) NewBase() (SegmentBase, error) {
	ss, err := NewSegmentBase(s.Struct.Segment())
	if err != nil {
		return SegmentBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SegmentCleanupData_List is a list of SegmentCleanupData.
type SegmentCleanupData_List struct{ capnp.List }

// NewSegmentCleanupData creates a new list of SegmentCleanupData.
func NewSegmentCleanupData_List(s *capnp.Segment, sz int32) (SegmentCleanupData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegmentCleanupData_List{l}, err
}

func (s SegmentCleanupData_List) At(i int) SegmentCleanupData {
	return SegmentCleanupData{s.List.Struct(i)}
}

func (s SegmentCleanupData_List) Set(i int, v SegmentCleanupData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegmentCleanupData_List) String() string {
	str, _ := text.MarshalList(0xd3e56d3f1e39ca3c, s.List)
	return str
}

// SegmentCleanupData_Promise is a wrapper for a SegmentCleanupData promised by a client call.
type SegmentCleanupData_Promise struct{ *capnp.Pipeline }

func (p SegmentCleanupData_Promise) Struct() (SegmentCleanupData, error) {
	s, err := p.Pipeline.Struct()
	return SegmentCleanupData{s}, err
}

func (p SegmentCleanupData_Promise) Base() SegmentBase_Promise {
	return SegmentBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type E2ESetupReqData struct{ capnp.Struct }

// E2ESetupReqData_TypeID is the unique identifier for the type E2ESetupReqData.
const E2ESetupReqData_TypeID = 0xfb1a873660b7e310

func NewE2ESetupReqData(s *capnp.Segment) (E2ESetupReqData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return E2ESetupReqData{st}, err
}

func NewRootE2ESetupReqData(s *capnp.Segment) (E2ESetupReqData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return E2ESetupReqData{st}, err
}

func ReadRootE2ESetupReqData(msg *capnp.Message) (E2ESetupReqData, error) {
	root, err := msg.RootPtr()
	return E2ESetupReqData{root.Struct()}, err
}

func (s E2ESetupReqData) String() string {
	str, _ := text.Marshal(0xfb1a873660b7e310, s.Struct)
	return str
}

func (s E2ESetupReqData) Base() (E2EBase, error) {
	p, err := s.Struct.Ptr(0)
	return E2EBase{Struct: p.Struct()}, err
}

func (s E2ESetupReqData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2ESetupReqData) SetBase(v E2EBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated E2EBase struct, preferring placement in s's segment.
func (s E2ESetupReqData) NewBase() (E2EBase, error) {
	ss, err := NewE2EBase(s.Struct.Segment())
	if err != nil {
		return E2EBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s E2ESetupReqData) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s E2ESetupReqData) HasToken() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2ESetupReqData) SetToken(v []byte) error {
	return s.Struct.SetData(1, v)
}

// E2ESetupReqData_List is a list of E2ESetupReqData.
type E2ESetupReqData_List struct{ capnp.List }

// NewE2ESetupReqData creates a new list of E2ESetupReqData.
func NewE2ESetupReqData_List(s *capnp.Segment, sz int32) (E2ESetupReqData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return E2ESetupReqData_List{l}, err
}

func (s E2ESetupReqData_List) At(i int) E2ESetupReqData { return E2ESetupReqData{s.List.Struct(i)} }

func (s E2ESetupReqData_List) Set(i int, v E2ESetupReqData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s E2ESetupReqData_List) String() string {
	str, _ := text.MarshalList(0xfb1a873660b7e310, s.List)
	return str
}

// E2ESetupReqData_Promise is a wrapper for a E2ESetupReqData promised by a client call.
type E2ESetupReqData_Promise struct{ *capnp.Pipeline }

func (p E2ESetupReqData_Promise) Struct() (E2ESetupReqData, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupReqData{s}, err
}

func (p E2ESetupReqData_Promise) Base() E2EBase_Promise {
	return E2EBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type E2ESetupResData struct{ capnp.Struct }
type E2ESetupResData_success E2ESetupResData
type E2ESetupResData_failure E2ESetupResData
type E2ESetupResData_Which uint16

const (
	E2ESetupResData_Which_unset   E2ESetupResData_Which = 0
	E2ESetupResData_Which_success E2ESetupResData_Which = 1
	E2ESetupResData_Which_failure E2ESetupResData_Which = 2
)

func (w E2ESetupResData_Which) String() string {
	const s = "unsetsuccessfailure"
	switch w {
	case E2ESetupResData_Which_unset:
		return s[0:5]
	case E2ESetupResData_Which_success:
		return s[5:12]
	case E2ESetupResData_Which_failure:
		return s[12:19]

	}
	return "E2ESetupResData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// E2ESetupResData_TypeID is the unique identifier for the type E2ESetupResData.
const E2ESetupResData_TypeID = 0xb65a7701e86386b2

func NewE2ESetupResData(s *capnp.Segment) (E2ESetupResData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return E2ESetupResData{st}, err
}

func NewRootE2ESetupResData(s *capnp.Segment) (E2ESetupResData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return E2ESetupResData{st}, err
}

func ReadRootE2ESetupResData(msg *capnp.Message) (E2ESetupResData, error) {
	root, err := msg.RootPtr()
	return E2ESetupResData{root.Struct()}, err
}

func (s E2ESetupResData) String() string {
	str, _ := text.Marshal(0xb65a7701e86386b2, s.Struct)
	return str
}

func (s E2ESetupResData) Which() E2ESetupResData_Which {
	return E2ESetupResData_Which(s.Struct.Uint16(0))
}
func (s E2ESetupResData) Base() (E2EBase, error) {
	p, err := s.Struct.Ptr(0)
	return E2EBase{Struct: p.Struct()}, err
}

func (s E2ESetupResData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2ESetupResData) SetBase(v E2EBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated E2EBase struct, preferring placement in s's segment.
func (s E2ESetupResData) NewBase() (E2EBase, error) {
	ss, err := NewE2EBase(s.Struct.Segment())
	if err != nil {
		return E2EBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s E2ESetupResData) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s E2ESetupResData) Success() E2ESetupResData_success { return E2ESetupResData_success(s) }

func (s E2ESetupResData) SetSuccess() {
	s.Struct.SetUint16(0, 1)
}

func (s E2ESetupResData_success) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s E2ESetupResData_success) HasToken() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2ESetupResData_success) SetToken(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s E2ESetupResData) Failure() E2ESetupResData_failure { return E2ESetupResData_failure(s) }

func (s E2ESetupResData) SetFailure() {
	s.Struct.SetUint16(0, 2)
}

func (s E2ESetupResData_failure) ErrorCode() uint8 {
	return s.Struct.Uint8(2)
}

func (s E2ESetupResData_failure) SetErrorCode(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s E2ESetupResData_failure) InfoField() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s E2ESetupResData_failure) HasInfoField() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s E2ESetupResData_failure) SetInfoField(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s E2ESetupResData_failure) MaxBWs() (capnp.UInt8List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.UInt8List{List: p.List()}, err
}

func (s E2ESetupResData_failure) HasMaxBWs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s E2ESetupResData_failure) SetMaxBWs(v capnp.UInt8List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewMaxBWs sets the maxBWs field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s E2ESetupResData_failure) NewMaxBWs(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// E2ESetupResData_List is a list of E2ESetupResData.
type E2ESetupResData_List struct{ capnp.List }

// NewE2ESetupResData creates a new list of E2ESetupResData.
func NewE2ESetupResData_List(s *capnp.Segment, sz int32) (E2ESetupResData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return E2ESetupResData_List{l}, err
}

func (s E2ESetupResData_List) At(i int) E2ESetupResData { return E2ESetupResData{s.List.Struct(i)} }

func (s E2ESetupResData_List) Set(i int, v E2ESetupResData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s E2ESetupResData_List) String() string {
	str, _ := text.MarshalList(0xb65a7701e86386b2, s.List)
	return str
}

// E2ESetupResData_Promise is a wrapper for a E2ESetupResData promised by a client call.
type E2ESetupResData_Promise struct{ *capnp.Pipeline }

func (p E2ESetupResData_Promise) Struct() (E2ESetupResData, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupResData{s}, err
}

func (p E2ESetupResData_Promise) Base() E2EBase_Promise {
	return E2EBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p E2ESetupResData_Promise) Success() E2ESetupResData_success_Promise {
	return E2ESetupResData_success_Promise{p.Pipeline}
}

// E2ESetupResData_success_Promise is a wrapper for a E2ESetupResData_success promised by a client call.
type E2ESetupResData_success_Promise struct{ *capnp.Pipeline }

func (p E2ESetupResData_success_Promise) Struct() (E2ESetupResData_success, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupResData_success{s}, err
}

func (p E2ESetupResData_Promise) Failure() E2ESetupResData_failure_Promise {
	return E2ESetupResData_failure_Promise{p.Pipeline}
}

// E2ESetupResData_failure_Promise is a wrapper for a E2ESetupResData_failure promised by a client call.
type E2ESetupResData_failure_Promise struct{ *capnp.Pipeline }

func (p E2ESetupResData_failure_Promise) Struct() (E2ESetupResData_failure, error) {
	s, err := p.Pipeline.Struct()
	return E2ESetupResData_failure{s}, err
}

type E2ECleanupData struct{ capnp.Struct }

// E2ECleanupData_TypeID is the unique identifier for the type E2ECleanupData.
const E2ECleanupData_TypeID = 0x96ec60724ebd66d7

func NewE2ECleanupData(s *capnp.Segment) (E2ECleanupData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return E2ECleanupData{st}, err
}

func NewRootE2ECleanupData(s *capnp.Segment) (E2ECleanupData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return E2ECleanupData{st}, err
}

func ReadRootE2ECleanupData(msg *capnp.Message) (E2ECleanupData, error) {
	root, err := msg.RootPtr()
	return E2ECleanupData{root.Struct()}, err
}

func (s E2ECleanupData) String() string {
	str, _ := text.Marshal(0x96ec60724ebd66d7, s.Struct)
	return str
}

func (s E2ECleanupData) Base() (E2EBase, error) {
	p, err := s.Struct.Ptr(0)
	return E2EBase{Struct: p.Struct()}, err
}

func (s E2ECleanupData) HasBase() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s E2ECleanupData) SetBase(v E2EBase) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBase sets the base field to a newly
// allocated E2EBase struct, preferring placement in s's segment.
func (s E2ECleanupData) NewBase() (E2EBase, error) {
	ss, err := NewE2EBase(s.Struct.Segment())
	if err != nil {
		return E2EBase{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// E2ECleanupData_List is a list of E2ECleanupData.
type E2ECleanupData_List struct{ capnp.List }

// NewE2ECleanupData creates a new list of E2ECleanupData.
func NewE2ECleanupData_List(s *capnp.Segment, sz int32) (E2ECleanupData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return E2ECleanupData_List{l}, err
}

func (s E2ECleanupData_List) At(i int) E2ECleanupData { return E2ECleanupData{s.List.Struct(i)} }

func (s E2ECleanupData_List) Set(i int, v E2ECleanupData) error { return s.List.SetStruct(i, v.Struct) }

func (s E2ECleanupData_List) String() string {
	str, _ := text.MarshalList(0x96ec60724ebd66d7, s.List)
	return str
}

// E2ECleanupData_Promise is a wrapper for a E2ECleanupData promised by a client call.
type E2ECleanupData_Promise struct{ *capnp.Pipeline }

func (p E2ECleanupData_Promise) Struct() (E2ECleanupData, error) {
	s, err := p.Pipeline.Struct()
	return E2ECleanupData{s}, err
}

func (p E2ECleanupData_Promise) Base() E2EBase_Promise {
	return E2EBase_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Request struct{ capnp.Struct }
type Request_Which uint16

const (
	Request_Which_unset                    Request_Which = 0
	Request_Which_segmentSetup             Request_Which = 1
	Request_Which_segmentRenewal           Request_Which = 2
	Request_Which_segmentTelesSetup        Request_Which = 3
	Request_Which_segmentTelesRenewal      Request_Which = 4
	Request_Which_segmentTeardown          Request_Which = 5
	Request_Which_segmentIndexConfirmation Request_Which = 6
	Request_Which_segmentCleanup           Request_Which = 7
	Request_Which_e2eSetup                 Request_Which = 8
	Request_Which_e2eRenewal               Request_Which = 9
	Request_Which_e2eCleanup               Request_Which = 10
)

func (w Request_Which) String() string {
	const s = "unsetsegmentSetupsegmentRenewalsegmentTelesSetupsegmentTelesRenewalsegmentTeardownsegmentIndexConfirmationsegmentCleanupe2eSetupe2eRenewale2eCleanup"
	switch w {
	case Request_Which_unset:
		return s[0:5]
	case Request_Which_segmentSetup:
		return s[5:17]
	case Request_Which_segmentRenewal:
		return s[17:31]
	case Request_Which_segmentTelesSetup:
		return s[31:48]
	case Request_Which_segmentTelesRenewal:
		return s[48:67]
	case Request_Which_segmentTeardown:
		return s[67:82]
	case Request_Which_segmentIndexConfirmation:
		return s[82:106]
	case Request_Which_segmentCleanup:
		return s[106:120]
	case Request_Which_e2eSetup:
		return s[120:128]
	case Request_Which_e2eRenewal:
		return s[128:138]
	case Request_Which_e2eCleanup:
		return s[138:148]

	}
	return "Request_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Request_TypeID is the unique identifier for the type Request.
const Request_TypeID = 0xe16d5facdcc87244

func NewRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func NewRootRequest(s *capnp.Segment) (Request, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Request{st}, err
}

func ReadRootRequest(msg *capnp.Message) (Request, error) {
	root, err := msg.RootPtr()
	return Request{root.Struct()}, err
}

func (s Request) String() string {
	str, _ := text.Marshal(0xe16d5facdcc87244, s.Struct)
	return str
}

func (s Request) Which() Request_Which {
	return Request_Which(s.Struct.Uint16(0))
}
func (s Request) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s Request) SegmentSetup() (SegmentSetupReqData, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != segmentSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentSetup() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentSetup(v SegmentSetupReqData) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentSetup sets the segmentSetup field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s Request) NewSegmentSetup() (SegmentSetupReqData, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentRenewal() (SegmentSetupReqData, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != segmentRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupReqData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentRenewal() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentRenewal(v SegmentSetupReqData) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentRenewal sets the segmentRenewal field to a newly
// allocated SegmentSetupReqData struct, preferring placement in s's segment.
func (s Request) NewSegmentRenewal() (SegmentSetupReqData, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSegmentSetupReqData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentTelesSetup() (SegmentTelesSetupData, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != segmentTelesSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTelesSetupData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentTelesSetup() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentTelesSetup(v SegmentTelesSetupData) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTelesSetup sets the segmentTelesSetup field to a newly
// allocated SegmentTelesSetupData struct, preferring placement in s's segment.
func (s Request) NewSegmentTelesSetup() (SegmentTelesSetupData, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSegmentTelesSetupData(s.Struct.Segment())
	if err != nil {
		return SegmentTelesSetupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentTelesRenewal() (SegmentTelesSetupData, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != segmentTelesRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTelesSetupData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentTelesRenewal() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentTelesRenewal(v SegmentTelesSetupData) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTelesRenewal sets the segmentTelesRenewal field to a newly
// allocated SegmentTelesSetupData struct, preferring placement in s's segment.
func (s Request) NewSegmentTelesRenewal() (SegmentTelesSetupData, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewSegmentTelesSetupData(s.Struct.Segment())
	if err != nil {
		return SegmentTelesSetupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentTeardown() (SegmentTeardownReqData, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != segmentTeardown")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTeardownReqData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentTeardown() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentTeardown(v SegmentTeardownReqData) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTeardown sets the segmentTeardown field to a newly
// allocated SegmentTeardownReqData struct, preferring placement in s's segment.
func (s Request) NewSegmentTeardown() (SegmentTeardownReqData, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSegmentTeardownReqData(s.Struct.Segment())
	if err != nil {
		return SegmentTeardownReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentIndexConfirmation() (SegmentIndexConfirmationData, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != segmentIndexConfirmation")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentIndexConfirmationData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentIndexConfirmation() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentIndexConfirmation(v SegmentIndexConfirmationData) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentIndexConfirmation sets the segmentIndexConfirmation field to a newly
// allocated SegmentIndexConfirmationData struct, preferring placement in s's segment.
func (s Request) NewSegmentIndexConfirmation() (SegmentIndexConfirmationData, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewSegmentIndexConfirmationData(s.Struct.Segment())
	if err != nil {
		return SegmentIndexConfirmationData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) SegmentCleanup() (SegmentCleanupData, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != segmentCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentCleanupData{Struct: p.Struct()}, err
}

func (s Request) HasSegmentCleanup() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetSegmentCleanup(v SegmentCleanupData) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentCleanup sets the segmentCleanup field to a newly
// allocated SegmentCleanupData struct, preferring placement in s's segment.
func (s Request) NewSegmentCleanup() (SegmentCleanupData, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSegmentCleanupData(s.Struct.Segment())
	if err != nil {
		return SegmentCleanupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) E2eSetup() (E2ESetupReqData, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != e2eSetup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupReqData{Struct: p.Struct()}, err
}

func (s Request) HasE2eSetup() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetE2eSetup(v E2ESetupReqData) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eSetup sets the e2eSetup field to a newly
// allocated E2ESetupReqData struct, preferring placement in s's segment.
func (s Request) NewE2eSetup() (E2ESetupReqData, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewE2ESetupReqData(s.Struct.Segment())
	if err != nil {
		return E2ESetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) E2eRenewal() (E2ESetupReqData, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != e2eRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupReqData{Struct: p.Struct()}, err
}

func (s Request) HasE2eRenewal() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetE2eRenewal(v E2ESetupReqData) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eRenewal sets the e2eRenewal field to a newly
// allocated E2ESetupReqData struct, preferring placement in s's segment.
func (s Request) NewE2eRenewal() (E2ESetupReqData, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewE2ESetupReqData(s.Struct.Segment())
	if err != nil {
		return E2ESetupReqData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Request) E2eCleanup() (E2ECleanupData, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != e2eCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ECleanupData{Struct: p.Struct()}, err
}

func (s Request) HasE2eCleanup() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Request) SetE2eCleanup(v E2ECleanupData) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eCleanup sets the e2eCleanup field to a newly
// allocated E2ECleanupData struct, preferring placement in s's segment.
func (s Request) NewE2eCleanup() (E2ECleanupData, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewE2ECleanupData(s.Struct.Segment())
	if err != nil {
		return E2ECleanupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Request_List is a list of Request.
type Request_List struct{ capnp.List }

// NewRequest creates a new list of Request.
func NewRequest_List(s *capnp.Segment, sz int32) (Request_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Request_List{l}, err
}

func (s Request_List) At(i int) Request { return Request{s.List.Struct(i)} }

func (s Request_List) Set(i int, v Request) error { return s.List.SetStruct(i, v.Struct) }

func (s Request_List) String() string {
	str, _ := text.MarshalList(0xe16d5facdcc87244, s.List)
	return str
}

// Request_Promise is a wrapper for a Request promised by a client call.
type Request_Promise struct{ *capnp.Pipeline }

func (p Request_Promise) Struct() (Request, error) {
	s, err := p.Pipeline.Struct()
	return Request{s}, err
}

func (p Request_Promise) SegmentSetup() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentRenewal() SegmentSetupReqData_Promise {
	return SegmentSetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentTelesSetup() SegmentTelesSetupData_Promise {
	return SegmentTelesSetupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentTelesRenewal() SegmentTelesSetupData_Promise {
	return SegmentTelesSetupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentTeardown() SegmentTeardownReqData_Promise {
	return SegmentTeardownReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentIndexConfirmation() SegmentIndexConfirmationData_Promise {
	return SegmentIndexConfirmationData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) SegmentCleanup() SegmentCleanupData_Promise {
	return SegmentCleanupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) E2eSetup() E2ESetupReqData_Promise {
	return E2ESetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) E2eRenewal() E2ESetupReqData_Promise {
	return E2ESetupReqData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Request_Promise) E2eCleanup() E2ECleanupData_Promise {
	return E2ECleanupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Response struct{ capnp.Struct }
type Response_Which uint16

const (
	Response_Which_unset                    Response_Which = 0
	Response_Which_segmentSetup             Response_Which = 1
	Response_Which_segmentRenewal           Response_Which = 2
	Response_Which_segmentTelesSetup        Response_Which = 3
	Response_Which_segmentTelesRenewal      Response_Which = 4
	Response_Which_segmentTeardown          Response_Which = 5
	Response_Which_segmentIndexConfirmation Response_Which = 6
	Response_Which_segmentCleanup           Response_Which = 7
	Response_Which_e2eSetup                 Response_Which = 8
	Response_Which_e2eRenewal               Response_Which = 9
	Response_Which_e2eCleanup               Response_Which = 10
)

func (w Response_Which) String() string {
	const s = "unsetsegmentSetupsegmentRenewalsegmentTelesSetupsegmentTelesRenewalsegmentTeardownsegmentIndexConfirmationsegmentCleanupe2eSetupe2eRenewale2eCleanup"
	switch w {
	case Response_Which_unset:
		return s[0:5]
	case Response_Which_segmentSetup:
		return s[5:17]
	case Response_Which_segmentRenewal:
		return s[17:31]
	case Response_Which_segmentTelesSetup:
		return s[31:48]
	case Response_Which_segmentTelesRenewal:
		return s[48:67]
	case Response_Which_segmentTeardown:
		return s[67:82]
	case Response_Which_segmentIndexConfirmation:
		return s[82:106]
	case Response_Which_segmentCleanup:
		return s[106:120]
	case Response_Which_e2eSetup:
		return s[120:128]
	case Response_Which_e2eRenewal:
		return s[128:138]
	case Response_Which_e2eCleanup:
		return s[138:148]

	}
	return "Response_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Response_TypeID is the unique identifier for the type Response.
const Response_TypeID = 0xe0c72f2fd9ed587d

func NewResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Response{st}, err
}

func NewRootResponse(s *capnp.Segment) (Response, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Response{st}, err
}

func ReadRootResponse(msg *capnp.Message) (Response, error) {
	root, err := msg.RootPtr()
	return Response{root.Struct()}, err
}

func (s Response) String() string {
	str, _ := text.Marshal(0xe0c72f2fd9ed587d, s.Struct)
	return str
}

func (s Response) Which() Response_Which {
	return Response_Which(s.Struct.Uint16(0))
}
func (s Response) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s Response) SegmentSetup() (SegmentSetupResData, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != segmentSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentSetup() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentSetup(v SegmentSetupResData) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentSetup sets the segmentSetup field to a newly
// allocated SegmentSetupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentSetup() (SegmentSetupResData, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSegmentSetupResData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentRenewal() (SegmentSetupResData, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != segmentRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentRenewal() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentRenewal(v SegmentSetupResData) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentRenewal sets the segmentRenewal field to a newly
// allocated SegmentSetupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentRenewal() (SegmentSetupResData, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSegmentSetupResData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentTelesSetup() (SegmentSetupResData, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != segmentTelesSetup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentTelesSetup() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentTelesSetup(v SegmentSetupResData) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTelesSetup sets the segmentTelesSetup field to a newly
// allocated SegmentSetupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentTelesSetup() (SegmentSetupResData, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSegmentSetupResData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentTelesRenewal() (SegmentSetupResData, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != segmentTelesRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentSetupResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentTelesRenewal() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentTelesRenewal(v SegmentSetupResData) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTelesRenewal sets the segmentTelesRenewal field to a newly
// allocated SegmentSetupResData struct, preferring placement in s's segment.
func (s Response) NewSegmentTelesRenewal() (SegmentSetupResData, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewSegmentSetupResData(s.Struct.Segment())
	if err != nil {
		return SegmentSetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentTeardown() (SegmentTeardownResData, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != segmentTeardown")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentTeardownResData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentTeardown() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentTeardown(v SegmentTeardownResData) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentTeardown sets the segmentTeardown field to a newly
// allocated SegmentTeardownResData struct, preferring placement in s's segment.
func (s Response) NewSegmentTeardown() (SegmentTeardownResData, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSegmentTeardownResData(s.Struct.Segment())
	if err != nil {
		return SegmentTeardownResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentIndexConfirmation() (SegmentIndexConfirmationData, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != segmentIndexConfirmation")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentIndexConfirmationData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentIndexConfirmation() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentIndexConfirmation(v SegmentIndexConfirmationData) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentIndexConfirmation sets the segmentIndexConfirmation field to a newly
// allocated SegmentIndexConfirmationData struct, preferring placement in s's segment.
func (s Response) NewSegmentIndexConfirmation() (SegmentIndexConfirmationData, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewSegmentIndexConfirmationData(s.Struct.Segment())
	if err != nil {
		return SegmentIndexConfirmationData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) SegmentCleanup() (SegmentCleanupData, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != segmentCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return SegmentCleanupData{Struct: p.Struct()}, err
}

func (s Response) HasSegmentCleanup() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetSegmentCleanup(v SegmentCleanupData) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegmentCleanup sets the segmentCleanup field to a newly
// allocated SegmentCleanupData struct, preferring placement in s's segment.
func (s Response) NewSegmentCleanup() (SegmentCleanupData, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSegmentCleanupData(s.Struct.Segment())
	if err != nil {
		return SegmentCleanupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) E2eSetup() (E2ESetupResData, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != e2eSetup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupResData{Struct: p.Struct()}, err
}

func (s Response) HasE2eSetup() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetE2eSetup(v E2ESetupResData) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eSetup sets the e2eSetup field to a newly
// allocated E2ESetupResData struct, preferring placement in s's segment.
func (s Response) NewE2eSetup() (E2ESetupResData, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewE2ESetupResData(s.Struct.Segment())
	if err != nil {
		return E2ESetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) E2eRenewal() (E2ESetupResData, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != e2eRenewal")
	}
	p, err := s.Struct.Ptr(0)
	return E2ESetupResData{Struct: p.Struct()}, err
}

func (s Response) HasE2eRenewal() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetE2eRenewal(v E2ESetupResData) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eRenewal sets the e2eRenewal field to a newly
// allocated E2ESetupResData struct, preferring placement in s's segment.
func (s Response) NewE2eRenewal() (E2ESetupResData, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewE2ESetupResData(s.Struct.Segment())
	if err != nil {
		return E2ESetupResData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) E2eCleanup() (E2ECleanupData, error) {
	if s.Struct.Uint16(0) != 10 {
		panic("Which() != e2eCleanup")
	}
	p, err := s.Struct.Ptr(0)
	return E2ECleanupData{Struct: p.Struct()}, err
}

func (s Response) HasE2eCleanup() bool {
	if s.Struct.Uint16(0) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Response) SetE2eCleanup(v E2ECleanupData) error {
	s.Struct.SetUint16(0, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewE2eCleanup sets the e2eCleanup field to a newly
// allocated E2ECleanupData struct, preferring placement in s's segment.
func (s Response) NewE2eCleanup() (E2ECleanupData, error) {
	s.Struct.SetUint16(0, 10)
	ss, err := NewE2ECleanupData(s.Struct.Segment())
	if err != nil {
		return E2ECleanupData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Response) Accepted() bool {
	return s.Struct.Bit(16)
}

func (s Response) SetAccepted(v bool) {
	s.Struct.SetBit(16, v)
}

func (s Response) FailedHop() uint8 {
	return s.Struct.Uint8(3)
}

func (s Response) SetFailedHop(v uint8) {
	s.Struct.SetUint8(3, v)
}

// Response_List is a list of Response.
type Response_List struct{ capnp.List }

// NewResponse creates a new list of Response.
func NewResponse_List(s *capnp.Segment, sz int32) (Response_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Response_List{l}, err
}

func (s Response_List) At(i int) Response { return Response{s.List.Struct(i)} }

func (s Response_List) Set(i int, v Response) error { return s.List.SetStruct(i, v.Struct) }

func (s Response_List) String() string {
	str, _ := text.MarshalList(0xe0c72f2fd9ed587d, s.List)
	return str
}

// Response_Promise is a wrapper for a Response promised by a client call.
type Response_Promise struct{ *capnp.Pipeline }

func (p Response_Promise) Struct() (Response, error) {
	s, err := p.Pipeline.Struct()
	return Response{s}, err
}

func (p Response_Promise) SegmentSetup() SegmentSetupResData_Promise {
	return SegmentSetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentRenewal() SegmentSetupResData_Promise {
	return SegmentSetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentTelesSetup() SegmentSetupResData_Promise {
	return SegmentSetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentTelesRenewal() SegmentSetupResData_Promise {
	return SegmentSetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentTeardown() SegmentTeardownResData_Promise {
	return SegmentTeardownResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentIndexConfirmation() SegmentIndexConfirmationData_Promise {
	return SegmentIndexConfirmationData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) SegmentCleanup() SegmentCleanupData_Promise {
	return SegmentCleanupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) E2eSetup() E2ESetupResData_Promise {
	return E2ESetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) E2eRenewal() E2ESetupResData_Promise {
	return E2ESetupResData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Response_Promise) E2eCleanup() E2ECleanupData_Promise {
	return E2ECleanupData_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ColibriRequestPayload struct{ capnp.Struct }
type ColibriRequestPayload_Which uint16

const (
	ColibriRequestPayload_Which_unset    ColibriRequestPayload_Which = 0
	ColibriRequestPayload_Which_request  ColibriRequestPayload_Which = 1
	ColibriRequestPayload_Which_response ColibriRequestPayload_Which = 2
)

func (w ColibriRequestPayload_Which) String() string {
	const s = "unsetrequestresponse"
	switch w {
	case ColibriRequestPayload_Which_unset:
		return s[0:5]
	case ColibriRequestPayload_Which_request:
		return s[5:12]
	case ColibriRequestPayload_Which_response:
		return s[12:20]

	}
	return "ColibriRequestPayload_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ColibriRequestPayload_TypeID is the unique identifier for the type ColibriRequestPayload.
const ColibriRequestPayload_TypeID = 0xc571cc47a792000f

func NewColibriRequestPayload(s *capnp.Segment) (ColibriRequestPayload, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColibriRequestPayload{st}, err
}

func NewRootColibriRequestPayload(s *capnp.Segment) (ColibriRequestPayload, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColibriRequestPayload{st}, err
}

func ReadRootColibriRequestPayload(msg *capnp.Message) (ColibriRequestPayload, error) {
	root, err := msg.RootPtr()
	return ColibriRequestPayload{root.Struct()}, err
}

func (s ColibriRequestPayload) String() string {
	str, _ := text.Marshal(0xc571cc47a792000f, s.Struct)
	return str
}

func (s ColibriRequestPayload) Which() ColibriRequestPayload_Which {
	return ColibriRequestPayload_Which(s.Struct.Uint16(4))
}
func (s ColibriRequestPayload) Timestamp() uint32 {
	return s.Struct.Uint32(0)
}

func (s ColibriRequestPayload) SetTimestamp(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ColibriRequestPayload) SetUnset() {
	s.Struct.SetUint16(4, 0)

}

func (s ColibriRequestPayload) Request() (Request, error) {
	if s.Struct.Uint16(4) != 1 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return Request{Struct: p.Struct()}, err
}

func (s ColibriRequestPayload) HasRequest() bool {
	if s.Struct.Uint16(4) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriRequestPayload) SetRequest(v Request) error {
	s.Struct.SetUint16(4, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Request struct, preferring placement in s's segment.
func (s ColibriRequestPayload) NewRequest() (Request, error) {
	s.Struct.SetUint16(4, 1)
	ss, err := NewRequest(s.Struct.Segment())
	if err != nil {
		return Request{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ColibriRequestPayload) Response() (Response, error) {
	if s.Struct.Uint16(4) != 2 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return Response{Struct: p.Struct()}, err
}

func (s ColibriRequestPayload) HasResponse() bool {
	if s.Struct.Uint16(4) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ColibriRequestPayload) SetResponse(v Response) error {
	s.Struct.SetUint16(4, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Response struct, preferring placement in s's segment.
func (s ColibriRequestPayload) NewResponse() (Response, error) {
	s.Struct.SetUint16(4, 2)
	ss, err := NewResponse(s.Struct.Segment())
	if err != nil {
		return Response{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ColibriRequestPayload_List is a list of ColibriRequestPayload.
type ColibriRequestPayload_List struct{ capnp.List }

// NewColibriRequestPayload creates a new list of ColibriRequestPayload.
func NewColibriRequestPayload_List(s *capnp.Segment, sz int32) (ColibriRequestPayload_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ColibriRequestPayload_List{l}, err
}

func (s ColibriRequestPayload_List) At(i int) ColibriRequestPayload {
	return ColibriRequestPayload{s.List.Struct(i)}
}

func (s ColibriRequestPayload_List) Set(i int, v ColibriRequestPayload) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ColibriRequestPayload_List) String() string {
	str, _ := text.MarshalList(0xc571cc47a792000f, s.List)
	return str
}

// ColibriRequestPayload_Promise is a wrapper for a ColibriRequestPayload promised by a client call.
type ColibriRequestPayload_Promise struct{ *capnp.Pipeline }

func (p ColibriRequestPayload_Promise) Struct() (ColibriRequestPayload, error) {
	s, err := p.Pipeline.Struct()
	return ColibriRequestPayload{s}, err
}

func (p ColibriRequestPayload_Promise) Request() Request_Promise {
	return Request_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p ColibriRequestPayload_Promise) Response() Response_Promise {
	return Response_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_a3bf9fed859570f0 = "x\xda\xbcX}\x8c\\U\xf9~\xdf{fvvf" +
	"v:s\xf7\xce/\x90&eh\xf3\x93\xb4M\xe9\xc7" +
	"n\xa3R\xab\xa3\xfb\xa1\xdd\x8a\xbawf\x89\xa5\xb6q" +
	"/;g\xd9\xab3w>\xee\xddnkXKKQ" +
	"+*\x16\x15\xf5\x1f\xb5H\x03hI\xa5\x11\xb5\x0d\x88" +
	"\x18\x9a\x16\xd2\xc4/\xa0`\x8a@\xa4\x81@\x97\x94\xc6" +
	"\x02\x05\xdak\xdesg\xee\x9d\x8f;\xbb\xd5\xa8\xff\xdd" +
	"=\xcf3\xe7\xbc\xefy\x9f\xf7\xe3\xec\xca\xa7\x83\x1f\x95" +
	"V\x05\xbf\x1f\x02P7\x04;\xec\xd7\x9f\x1f]\xb6d" +
	"G\xe4\x16P\xe7!\xdagJ\xdf\xbbu\xe6\xc7\x8f\xfc" +
	"\x14\x82\x18\x02P\x1e`\x07\x95C\x8c\xbe\x1edS\x80" +
	"\xf6\xae\xf3\xd7n\xfa\xf9\xef\x9f\xbe\xcd\x8f\xdc+\x07\x96" +
	"\xa2\xb20@\xec\x05\x01b?x\xf1\xe5g\xce\x1e{" +
	"\xfd[ \xcf\xab'KD\x9e\x0e\xccG\xe5\x9b\x82\xbc" +
	"[\x90\xf9\xeaGn\xb9\xe7\xe0\xc4\x9d\xbev\x9c\x0a\xfc" +
	"YyC\x90g\x04\xf9\xc4\xf8\xc3\x9f\xae\x8c\x9e\xbe\xb3" +
	"ig\xc1\x1d\x0a\xbe\xaa\\\x17\xa4/5\x98\x06\xb4\xbf" +
	"\xbc\xf8\xb5\xbb\x7fk\x15\xeej\xde\x98(\xbd\xe5`7" +
	"*;\xc4\xe7t\xf0(\x02\xda\x13G\xa2\x9f\x9b\xf9\xe4" +
	"\x87\xf6\xf9l\xdd\xcbCKQ\x99\x0c\xd1\xde\xe5\x10\xed" +
	"\xfd\x87\xcd{_\x0b\x9d\xbe\xfe^P\xaf@\xb4\x0f~" +
	"e\xec\x15\x9c\xda\xf8+\xf8?\x16B\x80\xde=\xa1\x1e" +
	"\x04T~(\xa8\x87\x17\xbft\xdb\x87\x0fd\xef\xf3\xbb" +
	"\x8cC\xa1E\xa8<.\xf6=\x12\"\xff\xf6\xadX~" +
	"tD]\xfd\xb3&\x9b\x07\xa5\x10\x03\xe8]\xd8\xd9\x8d" +
	"\xca\xaaN\xa2_\xdd\xf92\xd4\x1d\xdcDgDW0" +
	"|V\x89\x85\x89\x1d\x0e\x13\xfb\xaa\xe76\xdf\xdem\xef" +
	"\x7f\xa8\x89-\xaew_\xf8\xaf\xca\x03\x82{\x7f\x98\x0c" +
	"\xd9\x7f~\xf1[\x9b>s\xd5c\xbe\x01\x8fE6\xa2" +
	"\xb20\"\x02\x1e\x99\x02\xbc\x10\xbf\xe3\x9eO\x1c/\x1f" +
	"i\xb2\x02C\x0c\xa5\xdem\x91E\xa8\xec\x16\xe4[#" +
	"d\xc6\xde\xf3#gn\xbf\xec\xdbGA\x9e'yl" +
	"\xc0^-\xba\x08\x95r\x94\x98\x85\xe8\x07\x00\xed\xa5\x13" +
	"\x7f\xdb\x13\xd9r\xf8\x98\x9f\xc1\xe5\xe8\xab\xca\xb4\xe0n" +
	"\x8b\x92\xc1k\x9f\xb8\xe6\x8at\xe1\xd4_\xfc\xc2\xf7T" +
	"4\x82\xca)A~1J1\xf9\xc8\xd7\x0f|'\x1b" +
	"=~\xc2?|\xd8%\xc2\x17\xee:\x00hOo\x98" +
	"yv\xc5\x8a\xa3/@\x8bsQ\x00\xe5P\xd7a\xe5" +
	"\xd1.:\xe3\xe1\xae\xe7%@{\xa0r\xec\xe4\xfe\xcf" +
	"\x17^\xf4\xa7\xcf\xc4\x0f*\xe7\xe2D\x7f#^$\xfa" +
	"\xae\xcb/\xfb\xd1\xce\x13\x0b\xdf\xf4\x11\x87\xb2\xb7\xfb\x1d" +
	"\xe5\xfen\xfa\xba\xaf\x9b<L\xfc\xfd\xd7\xa3\xef\xff\xea" +
	"\xfcw\xfd\xb8A\xe5\xac\"+\xf4\x15S\x88;V\xcc" +
	"\xeb7T\xf4\xe58\xa6\x95\x8c\xd2\x9a\xc1\x9e\xd4`\x9f" +
	"f\xf2aD\xb5\x93\x05\x00\x02\x08 /\x99\x0f\xa0\xfe" +
	"?Cu\xa5\x84\x88I\xa4\xb5\xab{\x00\xd4\xc5\x0c\xd5" +
	"\xd5\x122=\x87\x09\xcfD@L\x00\xa6t#\xc7\xb7" +
	"b\x07H\xd8Qw\x10s\x0e\xca\xf2\x1b\x0b\xdc\xb0F" +
	"\xb8V\xc9\x15\xa7\x8c\x0c7\xe3\x03\x9a\xa55\x9d\xbb\xd4" +
	"\xe7\xdc\x0c\x80\xba\x8c\xa1\xfaA\x09\xe37h&\xc7\x84" +
	"W\x19\x9c\x93m^\xa9\x14+\xfd\xc5\x1c \x9f\xe3\xfc" +
	"\x0c7ye\x8bf\xe9E\x83\x0d\x0d\xb4?]v\x8f" +
	"_\xe3\xb9\x1d\xd7L=\x871\x900\x06\x986'\xc7" +
	"\xc7\xf5\xad\xb5?\xdd\xf3\xa4\x86\xf3\xfa4\x13\xff\xad\xcb" +
	"u+\xe5\xac\x97+\xd5\xa28\xd8\x9f\xe7\x9a1Yr" +
	"/5\xe0\x9e\x17#\xb7:\x19\xaaI\xef\x02\xdd\x12_" +
	"\xbd@\xff\xcb\xcark\xb2\x94\xe1\xe5\x01\xcdB\xb1\xe9" +
	"\x95\xee\xa6\x7f\xa2M\x8f3T\x9f\xf1\x9cx\x8a\x9c\xf8" +
	"#C\xf5\xa4\x84\xb2\x84I\x94\x00\xe4gi\xf1I\x86" +
	"\xea\x0b\x12\xcaLJ\"\x03\x90\x9f[\x0f\xa0\x9ed\xa8" +
	"\xbe\"\xa1\x1c\xc0$\x06\x00\xe4S\x1b\x01\xd4\x97\x18\xaa" +
	"g$\x94\x83R\x12\x83\x00\xf2\x0c1O3T\xdf\x96" +
	"P\xee`I\xec\x00\x90\xcf\x91$\xfe\xc10\x83\x12\xca" +
	"\xa1@\x92RY\xbe\xb0\x13@}\x8fa\xf6rl+" +
	"\x94TA7\xfa>[\xbb\xc5TA\xdb\xea\xfde\x9b" +
	"\xa5\xbcn\xf5\xe7M\x00\xf0\xd6,\xadb\x0dW\x8a\xc0" +
	"J&&\xbc:Y\xd3\x9d\x91\x1b\xae\x14K\xe2'\xad" +
	"\xa8n\x8c\x17?\xae\xf3<\xa0+\x1a[\xcb\xe7\x8bc" +
	"\x9a\xa5c\xd1\x18\xa9hz\x1ep\x1e\xe00CLx" +
	"5\x0d\x90\x16\xe7L\xa0\xf2%\xc6\xba9Y\x9a\xf6\x1d" +
	"\xec\x19\xac\xc6\xd9\xa4\xfd\x96\x9b\x93\xa9\xb11n\x9a\xb4" +
	"k\xa2\x1a\xc4X\x8f\xb7m\xca*~\x91\x1b-\xb2o" +
	"\xb62\xcfM\xb1\xed@\xa85\xcb{\xe6\xc8\xb3\x94I" +
	"\xbf\xc4\x84\xd7\xa8\x1d\xd3\xd3\xe4\xd1\xd0@kv\xcc\xae" +
	"_\xd3\xd5o\xc2\xb5A\xa3\x8b\xda\xc4P\x9d\x900\x86" +
	"\xb6\xed\x18\xc1\xc9\xb2Q\x86j^\xc2\x05\xd2E\xbb\xea" +
	"\xbe\xde\x07\xa0\xe6\x18\xaa%\x09\x17\xb0\x0b\xb4L*." +
	"\x10{\x82\xa1j\xb5\x17\xdc\xa4ar\x0b:\xb6\x8fk" +
	"z~\xb2\xc2[}js\x9dRspRf-\xda" +
	"\xff\x8a\x131r\xa2n(!W\xa4\x18\xb9P\xd7\xea" +
	"d\xb5\x0f\xa46\x95\xc1u\xc0\x9c\x14\xaa\xa89\xd2l" +
	"\xe8\xb0fM\x0c\x8al`%\xf3R\xc2\xbd\xde\xab\xea" +
	")J\x89<\"HH\xe3\x96U\xd1\x0cs\x9cW(" +
	"\xa9jk\xb5\xd3\x02\x0d\xf1\x1d\xa2\x9a\xd8_4\xc6\xf5" +
	"JA\x94\xf4\x01\x8d]RK\xa9\xab\xb6\xed\x02gZ" +
	"\x9a\xc51\xee\xcd$\x80\x18oUZ\xbf\xf3g\x86\x97" +
	"'\xb9i\x0dk\xdb\xf2\xa1\xa2\x96k\x0aS\xa6. " +
	"n\x98\xf4\x1eOT\x14&Gj\x85>OS\x14'" +
	"Gie\xba\xad\x12C\xf5&\x09mK/p\xd3\xd2" +
	"\x0a\x80%\xec\x04\x09;\xeb\xa2Tq\xec\xc0\x847n" +
	"T3\xa4\xc2\xcdR\xd10\xb9S\xaa\xdc\xd9\xc5?\x7f" +
	"\xea\xba\xa4\xb8\xe3\xac\x15\xd2,\xa7\x8d\x09+\xe5>\xfa" +
	"\xa1\x1c^\x03\xb0\xbd\xc4\x8d\x9cn\xdc\x98\xd6\xc6,}" +
	"K\x8b.>V\xadwE#\xde\xc7\x9d\x8b\xa9\x8bM" +
	"\x9f\x9f2\xea\x82\xb3]\x94\xcb\xb6\x15\xdb?\xeb\xab\x9d" +
	"\x90\xd2\x05\xe0?^\x1e\xc7\xb5\x94H\x00\xb5\x8b\x05\x12" +
	"\xd5v6H\x01\x1e`\xa8\x0eW\xfd\xa0v\xf6)Z" +
	"\xbc\x96\xa1\xba\x81\xbaa\xb5\x9d]GUn\xd8\x91\x82" +
	"\xef\xd4\xe2\xd33\xd2\xc2i\xb3\xd6(\x889\xafu\x90" +
	"\xcb\xf0\xb4\x13`\xf2x5\x0bt\xd96\xb9\xacl\xc6" +
	"\x1e\x80\xec\x06d\x98\xcd!\xe9\xef\xa2\xa3?E\xc3/" +
	"\x00dG\x09\xc8\x13 ]p$\xa8\xe8\xf8%\x80\xec" +
	"\x04\x01\x16\x01\xec=G\x85J\x19\xef\x00\xc8Z\x04\xdc" +
	"L@\xe0][\xb8\xaaL\xe3]\x00\xd9\x9b\x09\xf8\x06" +
	"\x01\xc1wl\xe1\xae\xb2\x1bw\x02d\xbfF\xc0w\x09" +
	"\xe88o\x8b\x0e\xae\xec\xc1'\x00\xb2? \xe0n\x02" +
	"Bo\xdb\xa2\x8b+{\xc5\xe1?!`?\x01\x9do" +
	"\xd9I\xec\xa4I\x17\xd7\x03d\xef%\xe0\x97\x04\x84\xdf" +
	"\xb4\x93\x18\xa6\x07)n\x04\xc8\xfe\x82\x80\x87\x08\x88\x9c" +
	"\xb3\x93\x18\xa1\x09\\\x00\xbf!\xe01\x1a\x14\xa2\x89$" +
	"\xd2\xa8\xfd\xa8\xd8\xe9w\xb4~\x9c\xd6\xbbX\x12\xbb\x00" +
	"\x94\xc71\x03\x90=F\xebO\xa2\xe4\xe6\x94mV\x9b" +
	"\x09\xc4\xab]\xc9}\x8aU\x15S%d \xcd\x0d>" +
	"\xa5\xe5\xdbSF\xb0\xd6\x17\xb14\x17+\xc3\x0d\x1e\x9a" +
	"k7g\x16\xa0\x8cv\xdf\xe1\x8d\x9c!\xa9\xb9F\x8a" +
	"\xfcw\x1fq\x8d\xec~H;\xc9\x83\x09\xef\xd9T\x9b" +
	"uz\xb8H\x04\xa7\x80\xb8/#\x0f%\x83\xa7\x80\x09" +
	"\x8b}`\x91\x96\xc0\xc4\xde\xeec\xbd\x0akcc\xbc" +
	"d\xf1\\}\xc9\xa7F\xc3s\xeb\x8aT\xe6\x9a\x13\xde" +
	"\xd5|\xca)\xbb\x88\xea2O\xf2\xef\x13\x92\xbf\x92\x02" +
	"\xb9\xacA\xf2K\x84\xe4\x17\x13\xb0\xbaA\xf2\xab\x84\xea" +
	"V\x12\xb0\xb6A\xf2\xd7\x08\xc9\xaf%`]\x83\xe4\x07" +
	"\x85\xe4\xd7\x110\xd2 yUH~\x98\x80M\x0d\x92" +
	"\xbf^H\xde\xcb7W\xf2\xcd\xf9\xe6J\xbe,\x84Z" +
	"\"\xe0\xa6\x06\xc9o\x13\xca\xdeJ\xc0\xae\x06\xc9\xef\x10" +
	"\x80\x9b\x88\xed%\xdc4\x84\xf8I\xb8\x0d\xa5I\xc2\xee" +
	"\xff0\xe6\x90p{\x9e'a\xf7\xff,\xff\x1b\x09\xbb" +
	"\xaff\x7f\x09\xfb\xc0\xb3I\xb8up\xab6\xd1\xb4\xe8" +
	"\xa2\xff\xcd\xa7f\xdd\x90X\x9e\xfdM-\xcf6\x015" +
	"O~\x0d\x83\xe9?\x03\x00\x00\xff\xff\x88\xd4[\x0a"

func init() {
	schemas.Register(schema_a3bf9fed859570f0,
		0x830a81292c60dfee,
		0x8bd6c2ab5c4cf984,
		0x8eeec8f2d8e7feb5,
		0x9668b2a783bf3465,
		0x96ec60724ebd66d7,
		0xa26d74bea4eb287e,
		0xa53b4bed5b0bc568,
		0xa859ec07eba15dcf,
		0xa953af3d8be428ba,
		0xaa345154c72e2fa5,
		0xb65a7701e86386b2,
		0xbcacff128f5ddd26,
		0xc4264f5cf728f9ac,
		0xc571cc47a792000f,
		0xc790178ff054f9a1,
		0xc8ba760a91de682a,
		0xd3e56d3f1e39ca3c,
		0xd7cc0b5393af8a3e,
		0xe0c72f2fd9ed587d,
		0xe16d5facdcc87244,
		0xf621d7829e171884,
		0xfb1a873660b7e310)
}
