// Code generated by MockGen. DO NOT EDIT.
// Source: go/lib/snet/snetproxy/reconnecter.go

// Package mock_snetproxy is a generated GoMock package.
package mock_snetproxy

import (
	gomock "github.com/golang/mock/gomock"
	snetproxy "github.com/scionproto/scion/go/lib/snet/snetproxy"
	reflect "reflect"
	time "time"
)

// MockReconnecter is a mock of Reconnecter interface
type MockReconnecter struct {
	ctrl     *gomock.Controller
	recorder *MockReconnecterMockRecorder
}

// MockReconnecterMockRecorder is the mock recorder for MockReconnecter
type MockReconnecterMockRecorder struct {
	mock *MockReconnecter
}

// NewMockReconnecter creates a new mock instance
func NewMockReconnecter(ctrl *gomock.Controller) *MockReconnecter {
	mock := &MockReconnecter{ctrl: ctrl}
	mock.recorder = &MockReconnecterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReconnecter) EXPECT() *MockReconnecterMockRecorder {
	return m.recorder
}

// Reconnect mocks base method
func (m *MockReconnecter) Reconnect(timeout time.Duration) (snetproxy.Conn, error) {
	ret := m.ctrl.Call(m, "Reconnect", timeout)
	ret0, _ := ret[0].(snetproxy.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconnect indicates an expected call of Reconnect
func (mr *MockReconnecterMockRecorder) Reconnect(timeout interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconnect", reflect.TypeOf((*MockReconnecter)(nil).Reconnect), timeout)
}

// Stop mocks base method
func (m *MockReconnecter) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockReconnecterMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockReconnecter)(nil).Stop))
}
