// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type CertChainReq struct{ capnp.Struct }

// CertChainReq_TypeID is the unique identifier for the type CertChainReq.
const CertChainReq_TypeID = 0xc464d1e0777e54d3

func NewCertChainReq(s *capnp.Segment) (CertChainReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CertChainReq{st}, err
}

func NewRootCertChainReq(s *capnp.Segment) (CertChainReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CertChainReq{st}, err
}

func ReadRootCertChainReq(msg *capnp.Message) (CertChainReq, error) {
	root, err := msg.RootPtr()
	return CertChainReq{root.Struct()}, err
}

func (s CertChainReq) String() string {
	str, _ := text.Marshal(0xc464d1e0777e54d3, s.Struct)
	return str
}

func (s CertChainReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s CertChainReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s CertChainReq) SubjectKeyID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChainReq) HasSubjectKeyID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChainReq) SetSubjectKeyID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s CertChainReq) Date() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s CertChainReq) SetDate(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

// CertChainReq_List is a list of CertChainReq.
type CertChainReq_List struct{ capnp.List }

// NewCertChainReq creates a new list of CertChainReq.
func NewCertChainReq_List(s *capnp.Segment, sz int32) (CertChainReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return CertChainReq_List{l}, err
}

func (s CertChainReq_List) At(i int) CertChainReq { return CertChainReq{s.List.Struct(i)} }

func (s CertChainReq_List) Set(i int, v CertChainReq) error { return s.List.SetStruct(i, v.Struct) }

func (s CertChainReq_List) String() string {
	str, _ := text.MarshalList(0xc464d1e0777e54d3, s.List)
	return str
}

// CertChainReq_Promise is a wrapper for a CertChainReq promised by a client call.
type CertChainReq_Promise struct{ *capnp.Pipeline }

func (p CertChainReq_Promise) Struct() (CertChainReq, error) {
	s, err := p.Pipeline.Struct()
	return CertChainReq{s}, err
}

type CertChain struct{ capnp.Struct }

// CertChain_TypeID is the unique identifier for the type CertChain.
const CertChain_TypeID = 0xadadc71f7e190917

func NewCertChain(s *capnp.Segment) (CertChain, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChain{st}, err
}

func NewRootCertChain(s *capnp.Segment) (CertChain, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CertChain{st}, err
}

func ReadRootCertChain(msg *capnp.Message) (CertChain, error) {
	root, err := msg.RootPtr()
	return CertChain{root.Struct()}, err
}

func (s CertChain) String() string {
	str, _ := text.Marshal(0xadadc71f7e190917, s.Struct)
	return str
}

func (s CertChain) Chains() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s CertChain) HasChains() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChain) SetChains(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChains sets the chains field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s CertChain) NewChains(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// CertChain_List is a list of CertChain.
type CertChain_List struct{ capnp.List }

// NewCertChain creates a new list of CertChain.
func NewCertChain_List(s *capnp.Segment, sz int32) (CertChain_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CertChain_List{l}, err
}

func (s CertChain_List) At(i int) CertChain { return CertChain{s.List.Struct(i)} }

func (s CertChain_List) Set(i int, v CertChain) error { return s.List.SetStruct(i, v.Struct) }

func (s CertChain_List) String() string {
	str, _ := text.MarshalList(0xadadc71f7e190917, s.List)
	return str
}

// CertChain_Promise is a wrapper for a CertChain promised by a client call.
type CertChain_Promise struct{ *capnp.Pipeline }

func (p CertChain_Promise) Struct() (CertChain, error) {
	s, err := p.Pipeline.Struct()
	return CertChain{s}, err
}

type CertChainRenewalRequest struct{ capnp.Struct }

// CertChainRenewalRequest_TypeID is the unique identifier for the type CertChainRenewalRequest.
const CertChainRenewalRequest_TypeID = 0xea940d53315b1f26

func NewCertChainRenewalRequest(s *capnp.Segment) (CertChainRenewalRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CertChainRenewalRequest{st}, err
}

func NewRootCertChainRenewalRequest(s *capnp.Segment) (CertChainRenewalRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CertChainRenewalRequest{st}, err
}

func ReadRootCertChainRenewalRequest(msg *capnp.Message) (CertChainRenewalRequest, error) {
	root, err := msg.RootPtr()
	return CertChainRenewalRequest{root.Struct()}, err
}

func (s CertChainRenewalRequest) String() string {
	str, _ := text.Marshal(0xea940d53315b1f26, s.Struct)
	return str
}

func (s CertChainRenewalRequest) Csr() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChainRenewalRequest) HasCsr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChainRenewalRequest) SetCsr(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s CertChainRenewalRequest) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s CertChainRenewalRequest) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CertChainRenewalRequest) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s CertChainRenewalRequest) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// CertChainRenewalRequest_List is a list of CertChainRenewalRequest.
type CertChainRenewalRequest_List struct{ capnp.List }

// NewCertChainRenewalRequest creates a new list of CertChainRenewalRequest.
func NewCertChainRenewalRequest_List(s *capnp.Segment, sz int32) (CertChainRenewalRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return CertChainRenewalRequest_List{l}, err
}

func (s CertChainRenewalRequest_List) At(i int) CertChainRenewalRequest {
	return CertChainRenewalRequest{s.List.Struct(i)}
}

func (s CertChainRenewalRequest_List) Set(i int, v CertChainRenewalRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CertChainRenewalRequest_List) String() string {
	str, _ := text.MarshalList(0xea940d53315b1f26, s.List)
	return str
}

// CertChainRenewalRequest_Promise is a wrapper for a CertChainRenewalRequest promised by a client call.
type CertChainRenewalRequest_Promise struct{ *capnp.Pipeline }

func (p CertChainRenewalRequest_Promise) Struct() (CertChainRenewalRequest, error) {
	s, err := p.Pipeline.Struct()
	return CertChainRenewalRequest{s}, err
}

func (p CertChainRenewalRequest_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type CertChainRenewalReply struct{ capnp.Struct }

// CertChainRenewalReply_TypeID is the unique identifier for the type CertChainRenewalReply.
const CertChainRenewalReply_TypeID = 0xdae1e8ddea5e99b5

func NewCertChainRenewalReply(s *capnp.Segment) (CertChainRenewalReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CertChainRenewalReply{st}, err
}

func NewRootCertChainRenewalReply(s *capnp.Segment) (CertChainRenewalReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CertChainRenewalReply{st}, err
}

func ReadRootCertChainRenewalReply(msg *capnp.Message) (CertChainRenewalReply, error) {
	root, err := msg.RootPtr()
	return CertChainRenewalReply{root.Struct()}, err
}

func (s CertChainRenewalReply) String() string {
	str, _ := text.Marshal(0xdae1e8ddea5e99b5, s.Struct)
	return str
}

func (s CertChainRenewalReply) Chain() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertChainRenewalReply) HasChain() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertChainRenewalReply) SetChain(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s CertChainRenewalReply) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s CertChainRenewalReply) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CertChainRenewalReply) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s CertChainRenewalReply) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// CertChainRenewalReply_List is a list of CertChainRenewalReply.
type CertChainRenewalReply_List struct{ capnp.List }

// NewCertChainRenewalReply creates a new list of CertChainRenewalReply.
func NewCertChainRenewalReply_List(s *capnp.Segment, sz int32) (CertChainRenewalReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return CertChainRenewalReply_List{l}, err
}

func (s CertChainRenewalReply_List) At(i int) CertChainRenewalReply {
	return CertChainRenewalReply{s.List.Struct(i)}
}

func (s CertChainRenewalReply_List) Set(i int, v CertChainRenewalReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CertChainRenewalReply_List) String() string {
	str, _ := text.MarshalList(0xdae1e8ddea5e99b5, s.List)
	return str
}

// CertChainRenewalReply_Promise is a wrapper for a CertChainRenewalReply promised by a client call.
type CertChainRenewalReply_Promise struct{ *capnp.Pipeline }

func (p CertChainRenewalReply_Promise) Struct() (CertChainRenewalReply, error) {
	s, err := p.Pipeline.Struct()
	return CertChainRenewalReply{s}, err
}

func (p CertChainRenewalReply_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type TRCReq struct{ capnp.Struct }

// TRCReq_TypeID is the unique identifier for the type TRCReq.
const TRCReq_TypeID = 0xd4c43f7ac10a9dbc

func NewTRCReq(s *capnp.Segment) (TRCReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TRCReq{st}, err
}

func NewRootTRCReq(s *capnp.Segment) (TRCReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TRCReq{st}, err
}

func ReadRootTRCReq(msg *capnp.Message) (TRCReq, error) {
	root, err := msg.RootPtr()
	return TRCReq{root.Struct()}, err
}

func (s TRCReq) String() string {
	str, _ := text.Marshal(0xd4c43f7ac10a9dbc, s.Struct)
	return str
}

func (s TRCReq) Isd() uint16 {
	return s.Struct.Uint16(0)
}

func (s TRCReq) SetIsd(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s TRCReq) Base() uint64 {
	return s.Struct.Uint64(8)
}

func (s TRCReq) SetBase(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s TRCReq) Serial() uint64 {
	return s.Struct.Uint64(16)
}

func (s TRCReq) SetSerial(v uint64) {
	s.Struct.SetUint64(16, v)
}

// TRCReq_List is a list of TRCReq.
type TRCReq_List struct{ capnp.List }

// NewTRCReq creates a new list of TRCReq.
func NewTRCReq_List(s *capnp.Segment, sz int32) (TRCReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return TRCReq_List{l}, err
}

func (s TRCReq_List) At(i int) TRCReq { return TRCReq{s.List.Struct(i)} }

func (s TRCReq_List) Set(i int, v TRCReq) error { return s.List.SetStruct(i, v.Struct) }

func (s TRCReq_List) String() string {
	str, _ := text.MarshalList(0xd4c43f7ac10a9dbc, s.List)
	return str
}

// TRCReq_Promise is a wrapper for a TRCReq promised by a client call.
type TRCReq_Promise struct{ *capnp.Pipeline }

func (p TRCReq_Promise) Struct() (TRCReq, error) {
	s, err := p.Pipeline.Struct()
	return TRCReq{s}, err
}

type TRC struct{ capnp.Struct }

// TRC_TypeID is the unique identifier for the type TRC.
const TRC_TypeID = 0x9aee2af152a5f7d7

func NewTRC(s *capnp.Segment) (TRC, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TRC{st}, err
}

func NewRootTRC(s *capnp.Segment) (TRC, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TRC{st}, err
}

func ReadRootTRC(msg *capnp.Message) (TRC, error) {
	root, err := msg.RootPtr()
	return TRC{root.Struct()}, err
}

func (s TRC) String() string {
	str, _ := text.Marshal(0x9aee2af152a5f7d7, s.Struct)
	return str
}

func (s TRC) Trc() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TRC) HasTrc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TRC) SetTrc(v []byte) error {
	return s.Struct.SetData(0, v)
}

// TRC_List is a list of TRC.
type TRC_List struct{ capnp.List }

// NewTRC creates a new list of TRC.
func NewTRC_List(s *capnp.Segment, sz int32) (TRC_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TRC_List{l}, err
}

func (s TRC_List) At(i int) TRC { return TRC{s.List.Struct(i)} }

func (s TRC_List) Set(i int, v TRC) error { return s.List.SetStruct(i, v.Struct) }

func (s TRC_List) String() string {
	str, _ := text.MarshalList(0x9aee2af152a5f7d7, s.List)
	return str
}

// TRC_Promise is a wrapper for a TRC promised by a client call.
type TRC_Promise struct{ *capnp.Pipeline }

func (p TRC_Promise) Struct() (TRC, error) {
	s, err := p.Pipeline.Struct()
	return TRC{s}, err
}

type CertMgmt struct{ capnp.Struct }
type CertMgmt_Which uint16

const (
	CertMgmt_Which_unset                   CertMgmt_Which = 0
	CertMgmt_Which_certChainReq            CertMgmt_Which = 1
	CertMgmt_Which_certChain               CertMgmt_Which = 2
	CertMgmt_Which_trcReq                  CertMgmt_Which = 3
	CertMgmt_Which_trc                     CertMgmt_Which = 4
	CertMgmt_Which_certChainRenewalRequest CertMgmt_Which = 5
	CertMgmt_Which_certChainRenewalReply   CertMgmt_Which = 6
)

func (w CertMgmt_Which) String() string {
	const s = "unsetcertChainReqcertChaintrcReqtrccertChainRenewalRequestcertChainRenewalReply"
	switch w {
	case CertMgmt_Which_unset:
		return s[0:5]
	case CertMgmt_Which_certChainReq:
		return s[5:17]
	case CertMgmt_Which_certChain:
		return s[17:26]
	case CertMgmt_Which_trcReq:
		return s[26:32]
	case CertMgmt_Which_trc:
		return s[32:35]
	case CertMgmt_Which_certChainRenewalRequest:
		return s[35:58]
	case CertMgmt_Which_certChainRenewalReply:
		return s[58:79]

	}
	return "CertMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CertMgmt_TypeID is the unique identifier for the type CertMgmt.
const CertMgmt_TypeID = 0xa19070b486ecd839

func NewCertMgmt(s *capnp.Segment) (CertMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertMgmt{st}, err
}

func NewRootCertMgmt(s *capnp.Segment) (CertMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertMgmt{st}, err
}

func ReadRootCertMgmt(msg *capnp.Message) (CertMgmt, error) {
	root, err := msg.RootPtr()
	return CertMgmt{root.Struct()}, err
}

func (s CertMgmt) String() string {
	str, _ := text.Marshal(0xa19070b486ecd839, s.Struct)
	return str
}

func (s CertMgmt) Which() CertMgmt_Which {
	return CertMgmt_Which(s.Struct.Uint16(0))
}
func (s CertMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CertMgmt) CertChainReq() (CertChainReq, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != certChainReq")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainReq() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainReq(v CertChainReq) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainReq sets the certChainReq field to a newly
// allocated CertChainReq struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainReq() (CertChainReq, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewCertChainReq(s.Struct.Segment())
	if err != nil {
		return CertChainReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChain() (CertChain, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != certChain")
	}
	p, err := s.Struct.Ptr(0)
	return CertChain{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChain() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChain(v CertChain) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChain sets the certChain field to a newly
// allocated CertChain struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChain() (CertChain, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewCertChain(s.Struct.Segment())
	if err != nil {
		return CertChain{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) TrcReq() (TRCReq, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != trcReq")
	}
	p, err := s.Struct.Ptr(0)
	return TRCReq{Struct: p.Struct()}, err
}

func (s CertMgmt) HasTrcReq() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetTrcReq(v TRCReq) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrcReq sets the trcReq field to a newly
// allocated TRCReq struct, preferring placement in s's segment.
func (s CertMgmt) NewTrcReq() (TRCReq, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewTRCReq(s.Struct.Segment())
	if err != nil {
		return TRCReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) Trc() (TRC, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != trc")
	}
	p, err := s.Struct.Ptr(0)
	return TRC{Struct: p.Struct()}, err
}

func (s CertMgmt) HasTrc() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetTrc(v TRC) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTrc sets the trc field to a newly
// allocated TRC struct, preferring placement in s's segment.
func (s CertMgmt) NewTrc() (TRC, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewTRC(s.Struct.Segment())
	if err != nil {
		return TRC{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChainRenewalRequest() (CertChainRenewalRequest, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != certChainRenewalRequest")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainRenewalRequest{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainRenewalRequest() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainRenewalRequest(v CertChainRenewalRequest) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainRenewalRequest sets the certChainRenewalRequest field to a newly
// allocated CertChainRenewalRequest struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainRenewalRequest() (CertChainRenewalRequest, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewCertChainRenewalRequest(s.Struct.Segment())
	if err != nil {
		return CertChainRenewalRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CertMgmt) CertChainRenewalReply() (CertChainRenewalReply, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != certChainRenewalReply")
	}
	p, err := s.Struct.Ptr(0)
	return CertChainRenewalReply{Struct: p.Struct()}, err
}

func (s CertMgmt) HasCertChainRenewalReply() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertMgmt) SetCertChainRenewalReply(v CertChainRenewalReply) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertChainRenewalReply sets the certChainRenewalReply field to a newly
// allocated CertChainRenewalReply struct, preferring placement in s's segment.
func (s CertMgmt) NewCertChainRenewalReply() (CertChainRenewalReply, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewCertChainRenewalReply(s.Struct.Segment())
	if err != nil {
		return CertChainRenewalReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CertMgmt_List is a list of CertMgmt.
type CertMgmt_List struct{ capnp.List }

// NewCertMgmt creates a new list of CertMgmt.
func NewCertMgmt_List(s *capnp.Segment, sz int32) (CertMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return CertMgmt_List{l}, err
}

func (s CertMgmt_List) At(i int) CertMgmt { return CertMgmt{s.List.Struct(i)} }

func (s CertMgmt_List) Set(i int, v CertMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s CertMgmt_List) String() string {
	str, _ := text.MarshalList(0xa19070b486ecd839, s.List)
	return str
}

// CertMgmt_Promise is a wrapper for a CertMgmt promised by a client call.
type CertMgmt_Promise struct{ *capnp.Pipeline }

func (p CertMgmt_Promise) Struct() (CertMgmt, error) {
	s, err := p.Pipeline.Struct()
	return CertMgmt{s}, err
}

func (p CertMgmt_Promise) CertChainReq() CertChainReq_Promise {
	return CertChainReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChain() CertChain_Promise {
	return CertChain_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) TrcReq() TRCReq_Promise {
	return TRCReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) Trc() TRC_Promise {
	return TRC_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChainRenewalRequest() CertChainRenewalRequest_Promise {
	return CertChainRenewalRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CertMgmt_Promise) CertChainRenewalReply() CertChainRenewalReply_Promise {
	return CertChainRenewalReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_ec3b2b10a5e23975 = "x\xda\x84\x92]H4U\x1c\xc6\xff\xcf9\xb3;*" +
	"\x8e;\xc3,D`,\x8aE\x1a\x86\x1f\xdd\xb8]\xac" +
	"\xb5\x0aInx\xa6\xbd\x08\x82b\xdc\x1dt\xc5\xdd\xd6" +
	"\x9dY\xc4.\x84 \xba\xad\x0bo\x0a\xba\xa8\xf0R\x8a" +
	"H\xa8\xf0\"c\xa3\x8c\x84,\xa3\x0f\x10\xac\xab\x12\x09" +
	"\x84\"\xfa\x9c8\xb3\xee\xce\xbe\xa3\xef\xeb\xdda\xe6\xf7" +
	"\x7f\xfe\xcf9\xcf3\xf6\x16\xa6\xd9x\xec9F$\xfa" +
	"cq\xff\xdb?\xb6\xad\x8b\x91__#C\x87_\x9f" +
	"\xfai[\x7f\xe0\xe1s\x8aA%2\xef\xc1\x9b\xe6\xbd" +
	"\xc1i\x00\x19\x82?\xf5\xdd\xf9K\xefU_y\x83\x84" +
	"\x8e\x0ex\x16\xaad\x1e\xc1\xe7fN\xd2\x93sx\x19" +
	"\x04\xff\xae\xee\xbb7S\x9f\xee\xec\\'\xfd\x0b\xfb\xca" +
	"\xfc\x9d\xc9\xd3\x05\x93\xd2_\xe77\xd7O\x8f\x8a\x0d)" +
	"\xcd\xa2\xf0\x00?3G\xb9<\x0d\xf3\xb7\x09\xfe\xde\xeb" +
	"=\xfb\xcfg\x1a\xc7\x12\xe6!\xacH\xe2\x13\xfe\xa1y" +
	"\x18\xb0\x07\x01\xbb\xfb\xea3g'?\xff\xf8C\xc4\x84" +
	"\\=i+\x130\xd7\x82\xb1\xb2\xb2N\xf0\xefK=" +
	"=\xfe\xa4\xb6uv\x1d|\xa0<\x0a\xf3\xfb\x00\xfe&" +
	"\x80\x0bN\xcd{\xb6\xbcT\x86\xf7`\xc1\xaeV\xaai" +
	"5oe\x17\x00\xa1p\x85H\x01\x91\xa1\x0d\x12\x89." +
	"\x0e\x91dP\xbdZ\x01\x1a1h\x1d\xb3\xac5\x9bu" +
	"j^n\xa9\xec\x11I\x85~\xae\xf4\xfa~ \xb1;" +
	"A$\xde\xe1\x10{\x0c\x1a\xfe\xf3\x93\x90_?X!" +
	"\x12\xefs\x88\x06\x83\xc6\xfe\xf5\x93`D\xc6\xbeE$" +
	">\xe2\x10_0h\xfc\x1f?\x09Nd\x1c\xa4\x89D" +
	"\x83C|\xc9\xa0)\x7f\xfbI(D\xc6\xa1\xb4\xf6\x19" +
	"\x878f\xd0b\x7f\xf9I\xc4\x88\x8c\xa3\x8f\x89\xc41" +
	"\x878e\xd0\xe2\x7f\xfaI\xc4\x89\x8c\x93w\x89\xc4)" +
	"\x878gH\xd5+\xae\xe3Q<\xb8Bv\xd9.Q" +
	"\xa2b9k\xd0\xc3\x08\x09\xd0/\xef\x18\x00\xa8@\x0f" +
	"\xcb\xd0\xfc\x9b\xf1j\x85\xe6X;\xcc\xe6\x8f\xe0\x99\xf4" +
	"\xb0\x96\x111V\xb1\x9c\x8a\xb3n\xafZ\xceZ\xddq" +
	"=\x82\x1e\xa6\x16a\xd1bS\x96S]\xdd\x80\x1e\x96" +
	"\xa1\x83\xbc\x12Cs4\x12d\xfa2\xc8!\x86La" +
	"\xd9.U\\\xf4\x11\x168\x82H\xfb\xee\xa4\x15\xbc\x8f" +
	"\x94\xebm\xcb\xcd\xcaP\xa79\xc4<\x03\xd0\x8ctN" +
	"F\xfa\x18\x87\xc83\x18\x0c\xcdD\xc5\x08\x91\x98\xe7\x10" +
	"O1\xa4Jn\xd1v\xd1M\x0c\xdd\x04\xdf\xad/\xae" +
	"8\x05\xefqJ8\x1bs3\xadf%\x8a\xb6\xe7 " +
	"F\x0c\xb1\xeb*\x9a\xc9[\xd9\xabn\x06C7F\xdb" +
	"\x8e\xdc<\xc3!\x16\xa4\x1d\xd6\xb4\x93K\x87\x1e\xd5\x92" +
	"[\x84J\x0c*!\xb1h\xbbN\xcbY\xc6uj%" +
	"{\xb5m\xb4e\x82G\x1f\xe6\xd6x\xa4\xa7\xae\xb6\xa7" +
	"a\xf9BC\x1cb\xac\xc3\xd3\xa8\xf4t?\x87x\x88" +
	"!\x15\xa4\xd0\xbe\xb6[Z\x92-\xeby\xe1\x89\xdf\x8a" +
	"[\xb9\x17\xa3\x01+\xb7\xdb\xdd\xaaQd\xfb\xe0\x0d\xdb" +
	"\xd5\x82[\xbba\xf7\xff\x01\x00\x00\xff\xff\xba\x0c]b"

func init() {
	schemas.Register(schema_ec3b2b10a5e23975,
		0x9aee2af152a5f7d7,
		0xa19070b486ecd839,
		0xadadc71f7e190917,
		0xc464d1e0777e54d3,
		0xd4c43f7ac10a9dbc,
		0xdae1e8ddea5e99b5,
		0xea940d53315b1f26)
}
