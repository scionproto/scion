// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SegIds struct{ capnp.Struct }

// SegIds_TypeID is the unique identifier for the type SegIds.
const SegIds_TypeID = 0xabf979c3f68dae4b

func NewSegIds(s *capnp.Segment) (SegIds, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegIds{st}, err
}

func NewRootSegIds(s *capnp.Segment) (SegIds, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SegIds{st}, err
}

func ReadRootSegIds(msg *capnp.Message) (SegIds, error) {
	root, err := msg.RootPtr()
	return SegIds{root.Struct()}, err
}

func (s SegIds) String() string {
	str, _ := text.Marshal(0xabf979c3f68dae4b, s.Struct)
	return str
}

func (s SegIds) SegId() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SegIds) HasSegId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegIds) SetSegId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SegIds) FullId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SegIds) HasFullId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SegIds) SetFullId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SegIds_List is a list of SegIds.
type SegIds_List struct{ capnp.List }

// NewSegIds creates a new list of SegIds.
func NewSegIds_List(s *capnp.Segment, sz int32) (SegIds_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SegIds_List{l}, err
}

func (s SegIds_List) At(i int) SegIds { return SegIds{s.List.Struct(i)} }

func (s SegIds_List) Set(i int, v SegIds) error { return s.List.SetStruct(i, v.Struct) }

func (s SegIds_List) String() string {
	str, _ := text.MarshalList(0xabf979c3f68dae4b, s.List)
	return str
}

// SegIds_Promise is a wrapper for a SegIds promised by a client call.
type SegIds_Promise struct{ *capnp.Pipeline }

func (p SegIds_Promise) Struct() (SegIds, error) {
	s, err := p.Pipeline.Struct()
	return SegIds{s}, err
}

type HPGroupId struct{ capnp.Struct }

// HPGroupId_TypeID is the unique identifier for the type HPGroupId.
const HPGroupId_TypeID = 0xba21c7133ee44518

func NewHPGroupId(s *capnp.Segment) (HPGroupId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return HPGroupId{st}, err
}

func NewRootHPGroupId(s *capnp.Segment) (HPGroupId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return HPGroupId{st}, err
}

func ReadRootHPGroupId(msg *capnp.Message) (HPGroupId, error) {
	root, err := msg.RootPtr()
	return HPGroupId{root.Struct()}, err
}

func (s HPGroupId) String() string {
	str, _ := text.Marshal(0xba21c7133ee44518, s.Struct)
	return str
}

func (s HPGroupId) OwnerAS() uint64 {
	return s.Struct.Uint64(0)
}

func (s HPGroupId) SetOwnerAS(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HPGroupId) GroupId() uint16 {
	return s.Struct.Uint16(8)
}

func (s HPGroupId) SetGroupId(v uint16) {
	s.Struct.SetUint16(8, v)
}

// HPGroupId_List is a list of HPGroupId.
type HPGroupId_List struct{ capnp.List }

// NewHPGroupId creates a new list of HPGroupId.
func NewHPGroupId_List(s *capnp.Segment, sz int32) (HPGroupId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return HPGroupId_List{l}, err
}

func (s HPGroupId_List) At(i int) HPGroupId { return HPGroupId{s.List.Struct(i)} }

func (s HPGroupId_List) Set(i int, v HPGroupId) error { return s.List.SetStruct(i, v.Struct) }

func (s HPGroupId_List) String() string {
	str, _ := text.MarshalList(0xba21c7133ee44518, s.List)
	return str
}

// HPGroupId_Promise is a wrapper for a HPGroupId promised by a client call.
type HPGroupId_Promise struct{ *capnp.Pipeline }

func (p HPGroupId_Promise) Struct() (HPGroupId, error) {
	s, err := p.Pipeline.Struct()
	return HPGroupId{s}, err
}

type HPSegReq struct{ capnp.Struct }

// HPSegReq_TypeID is the unique identifier for the type HPSegReq.
const HPSegReq_TypeID = 0x8f51e8717b3fbe1c

func NewHPSegReq(s *capnp.Segment) (HPSegReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HPSegReq{st}, err
}

func NewRootHPSegReq(s *capnp.Segment) (HPSegReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HPSegReq{st}, err
}

func ReadRootHPSegReq(msg *capnp.Message) (HPSegReq, error) {
	root, err := msg.RootPtr()
	return HPSegReq{root.Struct()}, err
}

func (s HPSegReq) String() string {
	str, _ := text.Marshal(0x8f51e8717b3fbe1c, s.Struct)
	return str
}

func (s HPSegReq) DstIA() uint64 {
	return s.Struct.Uint64(0)
}

func (s HPSegReq) SetDstIA(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s HPSegReq) GroupIds() (HPGroupId_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId_List{List: p.List()}, err
}

func (s HPSegReq) HasGroupIds() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPSegReq) SetGroupIds(v HPGroupId_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewGroupIds sets the groupIds field to a newly
// allocated HPGroupId_List, preferring placement in s's segment.
func (s HPSegReq) NewGroupIds(n int32) (HPGroupId_List, error) {
	l, err := NewHPGroupId_List(s.Struct.Segment(), n)
	if err != nil {
		return HPGroupId_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HPSegReq_List is a list of HPSegReq.
type HPSegReq_List struct{ capnp.List }

// NewHPSegReq creates a new list of HPSegReq.
func NewHPSegReq_List(s *capnp.Segment, sz int32) (HPSegReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HPSegReq_List{l}, err
}

func (s HPSegReq_List) At(i int) HPSegReq { return HPSegReq{s.List.Struct(i)} }

func (s HPSegReq_List) Set(i int, v HPSegReq) error { return s.List.SetStruct(i, v.Struct) }

func (s HPSegReq_List) String() string {
	str, _ := text.MarshalList(0x8f51e8717b3fbe1c, s.List)
	return str
}

// HPSegReq_Promise is a wrapper for a HPSegReq promised by a client call.
type HPSegReq_Promise struct{ *capnp.Pipeline }

func (p HPSegReq_Promise) Struct() (HPSegReq, error) {
	s, err := p.Pipeline.Struct()
	return HPSegReq{s}, err
}

type HPSegRecs struct{ capnp.Struct }

// HPSegRecs_TypeID is the unique identifier for the type HPSegRecs.
const HPSegRecs_TypeID = 0xa56b96c8b25ce2e1

func NewHPSegRecs(s *capnp.Segment) (HPSegRecs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HPSegRecs{st}, err
}

func NewRootHPSegRecs(s *capnp.Segment) (HPSegRecs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return HPSegRecs{st}, err
}

func ReadRootHPSegRecs(msg *capnp.Message) (HPSegRecs, error) {
	root, err := msg.RootPtr()
	return HPSegRecs{root.Struct()}, err
}

func (s HPSegRecs) String() string {
	str, _ := text.Marshal(0xa56b96c8b25ce2e1, s.Struct)
	return str
}

func (s HPSegRecs) GroupId() (HPGroupId, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId{Struct: p.Struct()}, err
}

func (s HPSegRecs) HasGroupId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPSegRecs) SetGroupId(v HPGroupId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGroupId sets the groupId field to a newly
// allocated HPGroupId struct, preferring placement in s's segment.
func (s HPSegRecs) NewGroupId() (HPGroupId, error) {
	ss, err := NewHPGroupId(s.Struct.Segment())
	if err != nil {
		return HPGroupId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s HPSegRecs) Recs() (PathSegMeta_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathSegMeta_List{List: p.List()}, err
}

func (s HPSegRecs) HasRecs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HPSegRecs) SetRecs(v PathSegMeta_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated PathSegMeta_List, preferring placement in s's segment.
func (s HPSegRecs) NewRecs(n int32) (PathSegMeta_List, error) {
	l, err := NewPathSegMeta_List(s.Struct.Segment(), n)
	if err != nil {
		return PathSegMeta_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s HPSegRecs) Err() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s HPSegRecs) HasErr() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s HPSegRecs) ErrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s HPSegRecs) SetErr(v string) error {
	return s.Struct.SetText(2, v)
}

// HPSegRecs_List is a list of HPSegRecs.
type HPSegRecs_List struct{ capnp.List }

// NewHPSegRecs creates a new list of HPSegRecs.
func NewHPSegRecs_List(s *capnp.Segment, sz int32) (HPSegRecs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return HPSegRecs_List{l}, err
}

func (s HPSegRecs_List) At(i int) HPSegRecs { return HPSegRecs{s.List.Struct(i)} }

func (s HPSegRecs_List) Set(i int, v HPSegRecs) error { return s.List.SetStruct(i, v.Struct) }

func (s HPSegRecs_List) String() string {
	str, _ := text.MarshalList(0xa56b96c8b25ce2e1, s.List)
	return str
}

// HPSegRecs_Promise is a wrapper for a HPSegRecs promised by a client call.
type HPSegRecs_Promise struct{ *capnp.Pipeline }

func (p HPSegRecs_Promise) Struct() (HPSegRecs, error) {
	s, err := p.Pipeline.Struct()
	return HPSegRecs{s}, err
}

func (p HPSegRecs_Promise) GroupId() HPGroupId_Promise {
	return HPGroupId_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type HPSegReply struct{ capnp.Struct }

// HPSegReply_TypeID is the unique identifier for the type HPSegReply.
const HPSegReply_TypeID = 0xaaf7fd9241668ed6

func NewHPSegReply(s *capnp.Segment) (HPSegReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPSegReply{st}, err
}

func NewRootHPSegReply(s *capnp.Segment) (HPSegReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPSegReply{st}, err
}

func ReadRootHPSegReply(msg *capnp.Message) (HPSegReply, error) {
	root, err := msg.RootPtr()
	return HPSegReply{root.Struct()}, err
}

func (s HPSegReply) String() string {
	str, _ := text.Marshal(0xaaf7fd9241668ed6, s.Struct)
	return str
}

func (s HPSegReply) Recs() (HPSegRecs_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPSegRecs_List{List: p.List()}, err
}

func (s HPSegReply) HasRecs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPSegReply) SetRecs(v HPSegRecs_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRecs sets the recs field to a newly
// allocated HPSegRecs_List, preferring placement in s's segment.
func (s HPSegReply) NewRecs(n int32) (HPSegRecs_List, error) {
	l, err := NewHPSegRecs_List(s.Struct.Segment(), n)
	if err != nil {
		return HPSegRecs_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HPSegReply_List is a list of HPSegReply.
type HPSegReply_List struct{ capnp.List }

// NewHPSegReply creates a new list of HPSegReply.
func NewHPSegReply_List(s *capnp.Segment, sz int32) (HPSegReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HPSegReply_List{l}, err
}

func (s HPSegReply_List) At(i int) HPSegReply { return HPSegReply{s.List.Struct(i)} }

func (s HPSegReply_List) Set(i int, v HPSegReply) error { return s.List.SetStruct(i, v.Struct) }

func (s HPSegReply_List) String() string {
	str, _ := text.MarshalList(0xaaf7fd9241668ed6, s.List)
	return str
}

// HPSegReply_Promise is a wrapper for a HPSegReply promised by a client call.
type HPSegReply_Promise struct{ *capnp.Pipeline }

func (p HPSegReply_Promise) Struct() (HPSegReply, error) {
	s, err := p.Pipeline.Struct()
	return HPSegReply{s}, err
}

type HPCfg struct{ capnp.Struct }

// HPCfg_TypeID is the unique identifier for the type HPCfg.
const HPCfg_TypeID = 0xf307100ab87a1963

func NewHPCfg(s *capnp.Segment) (HPCfg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return HPCfg{st}, err
}

func NewRootHPCfg(s *capnp.Segment) (HPCfg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return HPCfg{st}, err
}

func ReadRootHPCfg(msg *capnp.Message) (HPCfg, error) {
	root, err := msg.RootPtr()
	return HPCfg{root.Struct()}, err
}

func (s HPCfg) String() string {
	str, _ := text.Marshal(0xf307100ab87a1963, s.Struct)
	return str
}

func (s HPCfg) GroupId() (HPGroupId, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId{Struct: p.Struct()}, err
}

func (s HPCfg) HasGroupId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetGroupId(v HPGroupId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGroupId sets the groupId field to a newly
// allocated HPGroupId struct, preferring placement in s's segment.
func (s HPCfg) NewGroupId() (HPGroupId, error) {
	ss, err := NewHPGroupId(s.Struct.Segment())
	if err != nil {
		return HPGroupId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s HPCfg) Version() uint32 {
	return s.Struct.Uint32(0)
}

func (s HPCfg) SetVersion(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s HPCfg) OwnerISD() uint16 {
	return s.Struct.Uint16(4)
}

func (s HPCfg) SetOwnerISD(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s HPCfg) Writers() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.UInt64List{List: p.List()}, err
}

func (s HPCfg) HasWriters() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetWriters(v capnp.UInt64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewWriters sets the writers field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s HPCfg) NewWriters(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s HPCfg) Readers() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.UInt64List{List: p.List()}, err
}

func (s HPCfg) HasReaders() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetReaders(v capnp.UInt64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewReaders sets the readers field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s HPCfg) NewReaders(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s HPCfg) Registries() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.UInt64List{List: p.List()}, err
}

func (s HPCfg) HasRegistries() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s HPCfg) SetRegistries(v capnp.UInt64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewRegistries sets the registries field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s HPCfg) NewRegistries(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// HPCfg_List is a list of HPCfg.
type HPCfg_List struct{ capnp.List }

// NewHPCfg creates a new list of HPCfg.
func NewHPCfg_List(s *capnp.Segment, sz int32) (HPCfg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return HPCfg_List{l}, err
}

func (s HPCfg_List) At(i int) HPCfg { return HPCfg{s.List.Struct(i)} }

func (s HPCfg_List) Set(i int, v HPCfg) error { return s.List.SetStruct(i, v.Struct) }

func (s HPCfg_List) String() string {
	str, _ := text.MarshalList(0xf307100ab87a1963, s.List)
	return str
}

// HPCfg_Promise is a wrapper for a HPCfg promised by a client call.
type HPCfg_Promise struct{ *capnp.Pipeline }

func (p HPCfg_Promise) Struct() (HPCfg, error) {
	s, err := p.Pipeline.Struct()
	return HPCfg{s}, err
}

func (p HPCfg_Promise) GroupId() HPGroupId_Promise {
	return HPGroupId_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type HPCfgReq struct{ capnp.Struct }

// HPCfgReq_TypeID is the unique identifier for the type HPCfgReq.
const HPCfgReq_TypeID = 0xd24bad15bb2bab5e

func NewHPCfgReq(s *capnp.Segment) (HPCfgReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return HPCfgReq{st}, err
}

func NewRootHPCfgReq(s *capnp.Segment) (HPCfgReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return HPCfgReq{st}, err
}

func ReadRootHPCfgReq(msg *capnp.Message) (HPCfgReq, error) {
	root, err := msg.RootPtr()
	return HPCfgReq{root.Struct()}, err
}

func (s HPCfgReq) String() string {
	str, _ := text.Marshal(0xd24bad15bb2bab5e, s.Struct)
	return str
}

func (s HPCfgReq) ChangedSince() uint32 {
	return s.Struct.Uint32(0)
}

func (s HPCfgReq) SetChangedSince(v uint32) {
	s.Struct.SetUint32(0, v)
}

// HPCfgReq_List is a list of HPCfgReq.
type HPCfgReq_List struct{ capnp.List }

// NewHPCfgReq creates a new list of HPCfgReq.
func NewHPCfgReq_List(s *capnp.Segment, sz int32) (HPCfgReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return HPCfgReq_List{l}, err
}

func (s HPCfgReq_List) At(i int) HPCfgReq { return HPCfgReq{s.List.Struct(i)} }

func (s HPCfgReq_List) Set(i int, v HPCfgReq) error { return s.List.SetStruct(i, v.Struct) }

func (s HPCfgReq_List) String() string {
	str, _ := text.MarshalList(0xd24bad15bb2bab5e, s.List)
	return str
}

// HPCfgReq_Promise is a wrapper for a HPCfgReq promised by a client call.
type HPCfgReq_Promise struct{ *capnp.Pipeline }

func (p HPCfgReq_Promise) Struct() (HPCfgReq, error) {
	s, err := p.Pipeline.Struct()
	return HPCfgReq{s}, err
}

type HPCfgReply struct{ capnp.Struct }

// HPCfgReply_TypeID is the unique identifier for the type HPCfgReply.
const HPCfgReply_TypeID = 0xb27bf6e10de2aa8c

func NewHPCfgReply(s *capnp.Segment) (HPCfgReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPCfgReply{st}, err
}

func NewRootHPCfgReply(s *capnp.Segment) (HPCfgReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HPCfgReply{st}, err
}

func ReadRootHPCfgReply(msg *capnp.Message) (HPCfgReply, error) {
	root, err := msg.RootPtr()
	return HPCfgReply{root.Struct()}, err
}

func (s HPCfgReply) String() string {
	str, _ := text.Marshal(0xb27bf6e10de2aa8c, s.Struct)
	return str
}

func (s HPCfgReply) Cfgs() (HPCfg_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPCfg_List{List: p.List()}, err
}

func (s HPCfgReply) HasCfgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HPCfgReply) SetCfgs(v HPCfg_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCfgs sets the cfgs field to a newly
// allocated HPCfg_List, preferring placement in s's segment.
func (s HPCfgReply) NewCfgs(n int32) (HPCfg_List, error) {
	l, err := NewHPCfg_List(s.Struct.Segment(), n)
	if err != nil {
		return HPCfg_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// HPCfgReply_List is a list of HPCfgReply.
type HPCfgReply_List struct{ capnp.List }

// NewHPCfgReply creates a new list of HPCfgReply.
func NewHPCfgReply_List(s *capnp.Segment, sz int32) (HPCfgReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HPCfgReply_List{l}, err
}

func (s HPCfgReply_List) At(i int) HPCfgReply { return HPCfgReply{s.List.Struct(i)} }

func (s HPCfgReply_List) Set(i int, v HPCfgReply) error { return s.List.SetStruct(i, v.Struct) }

func (s HPCfgReply_List) String() string {
	str, _ := text.MarshalList(0xb27bf6e10de2aa8c, s.List)
	return str
}

// HPCfgReply_Promise is a wrapper for a HPCfgReply promised by a client call.
type HPCfgReply_Promise struct{ *capnp.Pipeline }

func (p HPCfgReply_Promise) Struct() (HPCfgReply, error) {
	s, err := p.Pipeline.Struct()
	return HPCfgReply{s}, err
}

type PathMgmt struct{ capnp.Struct }
type PathMgmt_Which uint16

const (
	PathMgmt_Which_unset      PathMgmt_Which = 0
	PathMgmt_Which_sRevInfo   PathMgmt_Which = 1
	PathMgmt_Which_hpSegReq   PathMgmt_Which = 2
	PathMgmt_Which_hpSegReply PathMgmt_Which = 3
	PathMgmt_Which_hpSegReg   PathMgmt_Which = 4
	PathMgmt_Which_hpCfgReq   PathMgmt_Which = 5
	PathMgmt_Which_hpCfgReply PathMgmt_Which = 6
)

func (w PathMgmt_Which) String() string {
	const s = "unsetsRevInfohpSegReqhpSegReplyhpSegReghpCfgReqhpCfgReply"
	switch w {
	case PathMgmt_Which_unset:
		return s[0:5]
	case PathMgmt_Which_sRevInfo:
		return s[5:13]
	case PathMgmt_Which_hpSegReq:
		return s[13:21]
	case PathMgmt_Which_hpSegReply:
		return s[21:31]
	case PathMgmt_Which_hpSegReg:
		return s[31:39]
	case PathMgmt_Which_hpCfgReq:
		return s[39:47]
	case PathMgmt_Which_hpCfgReply:
		return s[47:57]

	}
	return "PathMgmt_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// PathMgmt_TypeID is the unique identifier for the type PathMgmt.
const PathMgmt_TypeID = 0xa12cfa420c9ad0ca

func NewPathMgmt(s *capnp.Segment) (PathMgmt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMgmt{st}, err
}

func NewRootPathMgmt(s *capnp.Segment) (PathMgmt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathMgmt{st}, err
}

func ReadRootPathMgmt(msg *capnp.Message) (PathMgmt, error) {
	root, err := msg.RootPtr()
	return PathMgmt{root.Struct()}, err
}

func (s PathMgmt) String() string {
	str, _ := text.Marshal(0xa12cfa420c9ad0ca, s.Struct)
	return str
}

func (s PathMgmt) Which() PathMgmt_Which {
	return PathMgmt_Which(s.Struct.Uint16(0))
}
func (s PathMgmt) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s PathMgmt) SRevInfo() (SignedBlob, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != sRevInfo")
	}
	p, err := s.Struct.Ptr(0)
	return SignedBlob{Struct: p.Struct()}, err
}

func (s PathMgmt) HasSRevInfo() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetSRevInfo(v SignedBlob) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSRevInfo sets the sRevInfo field to a newly
// allocated SignedBlob struct, preferring placement in s's segment.
func (s PathMgmt) NewSRevInfo() (SignedBlob, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSignedBlob(s.Struct.Segment())
	if err != nil {
		return SignedBlob{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpSegReq() (HPSegReq, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != hpSegReq")
	}
	p, err := s.Struct.Ptr(0)
	return HPSegReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpSegReq() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpSegReq(v HPSegReq) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpSegReq sets the hpSegReq field to a newly
// allocated HPSegReq struct, preferring placement in s's segment.
func (s PathMgmt) NewHpSegReq() (HPSegReq, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewHPSegReq(s.Struct.Segment())
	if err != nil {
		return HPSegReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpSegReply() (HPSegReply, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != hpSegReply")
	}
	p, err := s.Struct.Ptr(0)
	return HPSegReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpSegReply() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpSegReply(v HPSegReply) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpSegReply sets the hpSegReply field to a newly
// allocated HPSegReply struct, preferring placement in s's segment.
func (s PathMgmt) NewHpSegReply() (HPSegReply, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewHPSegReply(s.Struct.Segment())
	if err != nil {
		return HPSegReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpSegReg() (HPSegRecs, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != hpSegReg")
	}
	p, err := s.Struct.Ptr(0)
	return HPSegRecs{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpSegReg() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpSegReg(v HPSegRecs) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpSegReg sets the hpSegReg field to a newly
// allocated HPSegRecs struct, preferring placement in s's segment.
func (s PathMgmt) NewHpSegReg() (HPSegRecs, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewHPSegRecs(s.Struct.Segment())
	if err != nil {
		return HPSegRecs{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpCfgReq() (HPCfgReq, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != hpCfgReq")
	}
	p, err := s.Struct.Ptr(0)
	return HPCfgReq{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpCfgReq() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpCfgReq(v HPCfgReq) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpCfgReq sets the hpCfgReq field to a newly
// allocated HPCfgReq struct, preferring placement in s's segment.
func (s PathMgmt) NewHpCfgReq() (HPCfgReq, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewHPCfgReq(s.Struct.Segment())
	if err != nil {
		return HPCfgReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathMgmt) HpCfgReply() (HPCfgReply, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != hpCfgReply")
	}
	p, err := s.Struct.Ptr(0)
	return HPCfgReply{Struct: p.Struct()}, err
}

func (s PathMgmt) HasHpCfgReply() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathMgmt) SetHpCfgReply(v HPCfgReply) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHpCfgReply sets the hpCfgReply field to a newly
// allocated HPCfgReply struct, preferring placement in s's segment.
func (s PathMgmt) NewHpCfgReply() (HPCfgReply, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewHPCfgReply(s.Struct.Segment())
	if err != nil {
		return HPCfgReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// PathMgmt_List is a list of PathMgmt.
type PathMgmt_List struct{ capnp.List }

// NewPathMgmt creates a new list of PathMgmt.
func NewPathMgmt_List(s *capnp.Segment, sz int32) (PathMgmt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathMgmt_List{l}, err
}

func (s PathMgmt_List) At(i int) PathMgmt { return PathMgmt{s.List.Struct(i)} }

func (s PathMgmt_List) Set(i int, v PathMgmt) error { return s.List.SetStruct(i, v.Struct) }

func (s PathMgmt_List) String() string {
	str, _ := text.MarshalList(0xa12cfa420c9ad0ca, s.List)
	return str
}

// PathMgmt_Promise is a wrapper for a PathMgmt promised by a client call.
type PathMgmt_Promise struct{ *capnp.Pipeline }

func (p PathMgmt_Promise) Struct() (PathMgmt, error) {
	s, err := p.Pipeline.Struct()
	return PathMgmt{s}, err
}

func (p PathMgmt_Promise) SRevInfo() SignedBlob_Promise {
	return SignedBlob_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpSegReq() HPSegReq_Promise {
	return HPSegReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpSegReply() HPSegReply_Promise {
	return HPSegReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpSegReg() HPSegRecs_Promise {
	return HPSegRecs_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpCfgReq() HPCfgReq_Promise {
	return HPCfgReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathMgmt_Promise) HpCfgReply() HPCfgReply_Promise {
	return HPCfgReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_8fcd13516850d142 = "x\xda|Tmh[e\x14>\xcf\xfb\xde\xdbt#" +
	"w\xcd\xe5fPa\x12&\xfb\xe1\xc7&s\x13\x94!" +
	"v\x8d+k\x9c\x83\xbc\x0d\xa8\x0c\xbfBrs\x13m" +
	"\xd3\xec\xdet\xa5\x16\x09\xfd\xd1\x7fjAT\xa60\xb6" +
	"\xc2\xf6c\x9bS)\x08\xb3~0Qp\x16\x85\xb5\x0c" +
	"\xd1\xa1`\xe7\x04\x85\xf9K\x9c\xb4:\xdf\xf1\xde$7" +
	"\xe9]\xdb\x7fo\xcey\xf2\x9c\xe7<\xe7\x9c\xbb\xf3a" +
	"\xb6\x97=\xa0'8\x91\xd8\xa6w\xc8-\x9f\xf7\x8c\x1f" +
	"\xfe]L\x91\x88\x0129\x9f.\x0a\xeb\xbb)\xd2\x11" +
	"!\xb2F0gM\xf8\xafW0J\x90s\x97\xde\x8d" +
	"&\x97\xb7O\x87\xc0}\x88(\xcc\x9f\x98\xb3\x96\x14z" +
	"\xf7\xdf\x98\x02A.^}f\xe6\xe2\xdb/\x9d\"3" +
	"\xd6N\xcd\x15\xf8-\xbe`M\xfb\xafc\xfc\x03\x82\xfc" +
	"\xfe\xf5B\xef\x1b7\xff9\x13\xc2\xfa\xc5\xfb\xb4+\x96" +
	"\xd0\xd4\xeb\xa0\xd6C\x90\x07\xde\x7f\xed\xc6\x97cKg" +
	"CX\xe6\x0b\xd5f\xadI\x1f;\xa1)\xc9\xaf\x9e\xb9" +
	"j,\xde\x18\x9fY\x8d\xf7g\xed\x8a\xf5\x87\x8f\xfd\xcd" +
	"\xe7\xed\xee\xbb\xf6\xa8\xf5\xf5\xd6Y\xd5\x1ek\x81}\xc4" +
	"f}\xc1\xda\xaa\xab\xd7\x9d\xba\xe2}\xee\xec}\x9fl" +
	">w`!d\x85\x8f\x1d\xd3\xe7\xacI\x1f;\xa1+" +
	"\xde\xdc\x1d/\x9f\xdf\x18\x8b\xfc\x15\xf6\xd8\x07\x9f\xd2g" +
	"\xacs\x0a\xbc\xfb\xb4\xfe\x94r\xad\x92\xad\x16\x9f\x1fr" +
	"\x86X\xf5\xfe\\\xb6R\xae\xec\xe9Oglg\xc0>" +
	"L\x94\x06D'\xd7\x884\x10\x99\xf7\xecR3\xe4\x10" +
	";\x19\x808Tl\xc7\xe3Db;\x87\xe8gH\xe4" +
	"\xbdj\xaa\x17\x1b\x88a\x03A:\xee\xf0H%\x95\xf7" +
	"\x88\x08\x9b\x08i\x0e\xc4Z-\x13T\xf0\xf6\xe2\xe9l" +
	"\xb5x\xd0\x19\xaa\xd6\x8bo\xe1ZTJ\xbf\xfaG\xaa" +
	"\xfa\x87\x1c\xe2S\x06\x03\xff\xcbz\xfd\x8fU\xfd\xf3\x1c" +
	"\xe2+\x06\x83\xdd\x94q0\"\xf3\x0b\x15\xbd\xc0!\xbe" +
	"e0\xf8\x7f2\x0eNd~s\x88H\\\xe4\x10\x97" +
	"\x19\x0c\xed_\x19\x87Fd\xce+\xec%\x0e\xf1\x13\x83" +
	"\xa1/\xcb8t\"\xf3G\x15\xfd\x81C\\c0:" +
	"\x96d\x1c\x1dD\xe6\xa2b\xf8\x85C\\gH\x8c\x94" +
	"=\xbbJ\x1d\xd2\x1b\xb0\x8f\xa4\xca\x85a\xd5gL\x0e" +
	"\xfc\xba\xfc\xd0\xe4\xfe]\xc7U\x831\x82,V\x9af" +
	"\xaal\xb0\xfd+\xb3\x15\xe2\x83c\x88\xb5\x96re\xda" +
	"\xa9\xff9X\xef \xfbX\xa1E\x1d,\xc8\xcal\x93" +
	":\xd8\xcbFz\xad\xa9\xe7\xe0)\xe3\xa3\xc1\xd4\xfb\x92" +
	"Db/\x87x\x82\xc1l\x8e=u/\x91\xd8\xc7!" +
	"^`0\x19\xab\xbb\xfe\xec]D\xe2i\x0e\x91g\xa8" +
	"5\xa6\x1f\x1ay\x8c\xd0\xe5\xda9\xaf\xb5\x10]\xb3\x1b" +
	"\x1f\x19\x7f\xf2\xe8\xf1\xc6BDl\xd7E\x94\x18\xa2\xeb" +
	"h\xac\xf0\xc11%R\x0bD\x1aJO'\x87\xd8\xc6" +
	"\xc2\x05\xda]k\xdf84I{2\xb6\x93\xca{k" +
	"\xefz\xd0\xf5\x8e=D\xe2n\x0e\xf1 C\xc2S\xff" +
	"\x82A\x0c\x06\xa1\xa7028\xd8\xfa\xb9\x9a\xf2\xfa4" +
	"\xd6W\x9e+8m\xca\x833^\xebV\xfa\xd3\xfb}" +
	"\x97\x91\x0f\x89O\xb6\x8b\xd7\x1a\xe2\x93-\xf1\xb5\xe1\xd1" +
	"\xb2\xed\xf6f\x9a\xb7\x1aL+B\x0c\x91u\xf47\xbe" +
	"\x09m\xf2_$\x12Q\x0e\xd1\xcd s\xc5l\xd9\xb1" +
	"\xf3\x19\xea*\x95s6:\x89\xa1s5\xc7\x13>\x9b" +
	"\"\xea\x0e\x88\xdeQ\xf2\xde\xe4\x10'Z\x1f\x97c*" +
	"v\x94C\x9cl\xdb\xb2iu\x99'8\xc4{\x0c&" +
	"G\xfd\xb4O+\xe4I\x0eq\x81\xc1\xd4X\xfd\xb2?" +
	"K6\xbe\x0d\x97\x19L\x9d\xd7\x0f{\xfeP\xe3\xdc\xaf" +
	"\xaf\xb7\xa4\xb5#\xb6\xeb\x95\x86\xcbA\x0f\xbea\xa9\xcc" +
	">uk\x0d\x93j\xa3n\xa9j\xbb\xc1\xc0\x94\x97\x9b" +
	"\x085\xd7\xce\xe6o\x0fK\xd7vJ^\xd5-\x11\xb7" +
	"\xc3\xb9[\x01\x00\x00\xff\xff\x90\xaa\xc0k"

func init() {
	schemas.Register(schema_8fcd13516850d142,
		0x8f51e8717b3fbe1c,
		0xa12cfa420c9ad0ca,
		0xa56b96c8b25ce2e1,
		0xaaf7fd9241668ed6,
		0xabf979c3f68dae4b,
		0xb27bf6e10de2aa8c,
		0xba21c7133ee44518,
		0xd24bad15bb2bab5e,
		0xf307100ab87a1963)
}
