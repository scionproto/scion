// Package mgmtapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package mgmtapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Hd5vf90hANUdRG/eb/43AAD//y7RBnW/XgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
