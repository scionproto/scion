// Package mgmtapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package mgmtapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVTW/bOBD9K8TsHgXL+dg96NYERWDAbYK6t8AHWhrLDCgOS1KuDUP/vRjSUmM5QYoe",
	"ArQ3ajh88+bxcXSAkhpLBk3wUBzAobdkPMaPG1l9wW8t+sBfJZmAJi6ltVqVMigy+ZMnwzFfbrCRvPrX",
	"4RoK+Cf/CZ2nXZ8vgjSVdNVH58hB13UZVOhLpyyDQcE1hTsW5d3jQcadUz3HLWpeW0cWXVCJqO7Dp1hz",
	"qmtlapG2M0DTNlA8QoWrtoYMlFkThyOXZQa4k43VCEW/E/aWv3xwytSRDlNTDiuGSbDLIY1WT1gG6DI4",
	"7fKMLvbhU7oxWzTovazxzeoD61F1zov0z/AX6LaqRPHhYSbW5ETYoHggr3biTgb8LvdcU4UowEmcT0AG",
	"W3Q+IU0n08kFN0oWjbQKCriaTCeXkIGVYRObzEsya1XzssboGpYgemZWQQF3GG5TRnbqusvpdGS3gLuQ",
	"Wy3VyGhjgc7MtGjLEr1ft1rc98WZ9nUq8ZJRByr5M/dHI7ZNI92etXHKBB/l+3r/aS5So22CF2ulccJK",
	"ytrzPZXUNGRgyRh5fzGvKTJLvvuz9LiRXpWCW3NN0sDKGoVcURuiSkzdkRb+aEDriGm8qpKmOh+e9GtS",
	"DdPgTbl+f1oNNd5NyzsMQo/G1plGGdj2BVEWI1Ei/g1V+3fRox+2z+unWRVci91fdUuLX7mleAQdT00o",
	"Hg/QOg0FbEKwRZ4fNuRDVxwsudDl0qp8e8EjVjolVzppxClpiq9lqwMUoKmUOobZA+RG21fT6//+ZxWW",
	"A53xP+A2sou/ANxZ8liJ1V4sbmf3n/vnGd+lkQ2PkmMz3bL7EQAA//93UAL/KQgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
