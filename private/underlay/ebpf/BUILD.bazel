load("@bazel_skylib//rules:native_binary.bzl", "native_test")
load("@rules_go//go:def.bzl", "go_library")
load("//tools:go.bzl", "go_test")

genrule(
    # The generated file is bazel-bin/private/underlay/ebpf/sockfilter_bpfel.go
    name = "gen_bpf_sock_filter_go",
    srcs = [
        "sockfilter.c",
        "bpf_helpers.h",
        "bpf_helper_defs.h",
    ],
    outs = [
        "sockfilter_bpfel.go",
        "sockfilter_bpfel.o",
    ],
    cmd = """
        ARCH=$$(uname -m)
        if [ "$$ARCH" = "x86_64" ]; then
            INC=/usr/include/x86_64-linux-gnu
        elif [ "$$ARCH" = "aarch64" ]; then
            INC=/usr/include/aarch64-linux-gnu
        else
            echo "Unsupported arch: $$ARCH" >&2
            exit 1
        fi
        GOPACKAGE=ebpf $(execpath @com_github_cilium_ebpf//cmd/bpf2go) \
            -output-dir $$(dirname $(location sockfilter_bpfel.go)) \
            -tags linux \
            --cflags="-I$$INC" \
            sockfilter $(location sockfilter.c)
    """,
    tools = ["@com_github_cilium_ebpf//cmd/bpf2go"],
)

genrule(
    # The generated file is bazel-bin/private/underlay/ebpf/kfilter_bpfel.go
    name = "gen_bpf_k_filter_go",
    srcs = [
        "kfilter.c",
        "bpf_helpers.h",
        "bpf_helper_defs.h",
    ],
    outs = [
        "kfilter_bpfel.go",
        "kfilter_bpfel.o",
    ],
    cmd = """
        ARCH=$$(uname -m)
        if [ "$$ARCH" = "x86_64" ]; then
            INC=/usr/include/x86_64-linux-gnu
        elif [ "$$ARCH" = "aarch64" ]; then
            INC=/usr/include/aarch64-linux-gnu
        else
            echo "Unsupported arch: $$ARCH" >&2
            exit 1
        fi
        GOPACKAGE=ebpf $(execpath @com_github_cilium_ebpf//cmd/bpf2go) \
            -output-dir $$(dirname $(location kfilter_bpfel.go)) \
            -tags linux \
            --cflags="-I$$INC" \
            kfilter $(location kfilter.c)
    """,
    tools = ["@com_github_cilium_ebpf//cmd/bpf2go"],
)

go_library(
    name = "go_default_library",
    srcs = [
        "bpf_helper_defs.h",
        "bpf_helpers.h",
        "kfilter_bpfel.go",
        "kfilter_lint.go",  # keep
        "portfilter.go",
        "sockfilter_bpfel.go",
        "sockfilter_lint.go",  # keep
    ],
    embedsrcs = [
        "sockfilter_bpfel.o",  #keep
        "kfilter_bpfel.o",  #keep
    ],
    importpath = "github.com/scionproto/scion/private/underlay/ebpf",
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_cilium_ebpf//:go_default_library",
        "@com_github_cilium_ebpf//link:go_default_library",
        "@com_github_gopacket_gopacket//afpacket:go_default_library",
    ],
)

# Builds the portfilter test; but it will be missing the required capabilities; so we must not
# attempt to run it. We are forced to name the artefact "go_default_test"; otherwise gazelle
# creates its own incorrect version.
go_test(
    name = "go_default_test",
    srcs = ["portfilter_test.go"],
    tags = ["manual"],
    deps = [
        ":go_default_library",
        "@com_github_gopacket_gopacket//:go_default_library",
        "@com_github_gopacket_gopacket//afpacket:go_default_library",
        "@com_github_gopacket_gopacket//layers:go_default_library",
        "@com_github_stretchr_testify//require:go_default_library",
        "@com_github_vishvananda_netlink//:go_default_library",
    ],
)

# This is the rule that actually runs the portfilter test.
sh_test(
    name = "portfilter_test",
    testonly = True,
    srcs = ["port_filter_test_cap.sh"],
    args = ["$(location go_default_test)"],
    data = [":go_default_test"],
    tags = [
        "supports-graceful-termination",
        "unit",
    ],
)
