// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SVCResolutionReply struct{ capnp.Struct }

// SVCResolutionReply_TypeID is the unique identifier for the type SVCResolutionReply.
const SVCResolutionReply_TypeID = 0x85b2cdeba075551b

func NewSVCResolutionReply(s *capnp.Segment) (SVCResolutionReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SVCResolutionReply{st}, err
}

func NewRootSVCResolutionReply(s *capnp.Segment) (SVCResolutionReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SVCResolutionReply{st}, err
}

func ReadRootSVCResolutionReply(msg *capnp.Message) (SVCResolutionReply, error) {
	root, err := msg.RootPtr()
	return SVCResolutionReply{root.Struct()}, err
}

func (s SVCResolutionReply) String() string {
	str, _ := text.Marshal(0x85b2cdeba075551b, s.Struct)
	return str
}

func (s SVCResolutionReply) Transports() (Transport_List, error) {
	p, err := s.Struct.Ptr(0)
	return Transport_List{List: p.List()}, err
}

func (s SVCResolutionReply) HasTransports() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SVCResolutionReply) SetTransports(v Transport_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTransports sets the transports field to a newly
// allocated Transport_List, preferring placement in s's segment.
func (s SVCResolutionReply) NewTransports(n int32) (Transport_List, error) {
	l, err := NewTransport_List(s.Struct.Segment(), n)
	if err != nil {
		return Transport_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SVCResolutionReply_List is a list of SVCResolutionReply.
type SVCResolutionReply_List struct{ capnp.List }

// NewSVCResolutionReply creates a new list of SVCResolutionReply.
func NewSVCResolutionReply_List(s *capnp.Segment, sz int32) (SVCResolutionReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SVCResolutionReply_List{l}, err
}

func (s SVCResolutionReply_List) At(i int) SVCResolutionReply {
	return SVCResolutionReply{s.List.Struct(i)}
}

func (s SVCResolutionReply_List) Set(i int, v SVCResolutionReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SVCResolutionReply_List) String() string {
	str, _ := text.MarshalList(0x85b2cdeba075551b, s.List)
	return str
}

// SVCResolutionReply_Promise is a wrapper for a SVCResolutionReply promised by a client call.
type SVCResolutionReply_Promise struct{ *capnp.Pipeline }

func (p SVCResolutionReply_Promise) Struct() (SVCResolutionReply, error) {
	s, err := p.Pipeline.Struct()
	return SVCResolutionReply{s}, err
}

type Transport struct{ capnp.Struct }

// Transport_TypeID is the unique identifier for the type Transport.
const Transport_TypeID = 0xdec7fa6a5148fde5

func NewTransport(s *capnp.Segment) (Transport, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Transport{st}, err
}

func NewRootTransport(s *capnp.Segment) (Transport, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Transport{st}, err
}

func ReadRootTransport(msg *capnp.Message) (Transport, error) {
	root, err := msg.RootPtr()
	return Transport{root.Struct()}, err
}

func (s Transport) String() string {
	str, _ := text.Marshal(0xdec7fa6a5148fde5, s.Struct)
	return str
}

func (s Transport) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Transport) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Transport) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Transport) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Transport) Value() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Transport) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Transport) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Transport) SetValue(v string) error {
	return s.Struct.SetText(1, v)
}

// Transport_List is a list of Transport.
type Transport_List struct{ capnp.List }

// NewTransport creates a new list of Transport.
func NewTransport_List(s *capnp.Segment, sz int32) (Transport_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Transport_List{l}, err
}

func (s Transport_List) At(i int) Transport { return Transport{s.List.Struct(i)} }

func (s Transport_List) Set(i int, v Transport) error { return s.List.SetStruct(i, v.Struct) }

func (s Transport_List) String() string {
	str, _ := text.MarshalList(0xdec7fa6a5148fde5, s.List)
	return str
}

// Transport_Promise is a wrapper for a Transport promised by a client call.
type Transport_Promise struct{ *capnp.Pipeline }

func (p Transport_Promise) Struct() (Transport, error) {
	s, err := p.Pipeline.Struct()
	return Transport{s}, err
}

const schema_a52f74a5947eb3b7 = "x\xda2\xd8\xcd\xe2\xc0d\xc8z\\\x99\x81!x\x01" +
	"#+\xdb\x7f\xe9\xd0\xd2\x05\xaf\xcfnje\x10\x14e" +
	"\xfc\xbf}s\xdd\x94\xa5%\xfaK\x19X\x19\xd9\x19\x18" +
	"\x8cO\x0a:1\x0a\xdf\x14dg`\x10\xbe*h\xcf" +
	"\xc0\xf8\xff\xe9_\x8f\xc0\xac_\xc7\xef\xa1)f\x02\xa9" +
	"\xe0\x14\xfa%,*\x04b\x09\x0a\x953\xfc\x87\xc2\xe4" +
	"\xff\xc5e\xc9\xf1E\xa9\xc5\xf9,9\xa5%\x99\xf9y" +
	"z\xc9\x89\x05y\x05V\xc1a\xceA\xa9\xc5\xf9\x10\xb1" +
	"\xa0\xd4\x82\x9cJ\x86\x00F\xc6@\x16f\x16\x06\x06\x16" +
	"F\x06\x06A\xde(\x06\x86@\x1ef\xc6@\x0d&\xc6" +
	"\xff%E\x89y\xc5\x05\xf9E\x0c\xcc%\xc5\x8c|\x0c" +
	"\x8c\x01\xcc\x8c\x8c\x02\x08\xd700\x82\x04\xe161\xa1" +
	"\xd8\x14R\x94h\x0f\xd6\\\x02\xb2\x80\x03n\x81\xa6\x12" +
	"\x03C\xa0\x0a3c\xa0\x01\x13\xa3 #\xa3\x08#H" +
	"P\xd7\x88\x81!P\x83\x991\xd0\x84\x89\x91=;\xb5" +
	"\x92\x91\x87\x81\x89\x91\x87\x81Q\xbe,1\xa74\x15\xc6" +
	"\x03\x04\x00\x00\xff\xff+<X\x97"

func init() {
	schemas.Register(schema_a52f74a5947eb3b7,
		0x85b2cdeba075551b,
		0xdec7fa6a5148fde5)
}
