#!/bin/bash

# This script generates the build options for Bazel

ROOTDIR=$(dirname "$0")/..

# When building inside a docker container GIT_VERSION is set by the creator of the container.
# When building locally, use the version reported by git.
VERSION=${GIT_VERSION:-$($ROOTDIR/tools/git-version)}
VERSION_NO_V=$(echo $VERSION | sed -n 's/^v//p')

# This is a hack around bazel's obstination in preventing the creation of versioned
# artifact names. There are mechanisms to embed version codes in artifacts, but not in their name.
# Their excuse is that the name would need to be known before analysis begins... Well, then; here
# you go. (Dear user: you can load(versioning.bzl) and use it to make target names.)

# This file must exist with usable contents for bazel-build-env's execution to be reached.
# The old content is what prevails, which means that the first bazel <command> invocation after a
# commit or tagging gets the old version. It is rarely an issue in practice as there is a call
# bazel run first thing to make go.deps.
echo "# Generated by bazel-build-env. Do check explanation there." > $ROOTDIR/versioning.bzl
echo "STABLE_GIT_VERSION = \"$VERSION\"" >> $ROOTDIR/versioning.bzl
echo "STRIPPED_GIT_VERSION = \"$VERSION_NO_V\"" >> $ROOTDIR/versioning.bzl

# Finally do what we're actualy supposed to do; give the version to bazel so it can hide it into
# a file that we can't read until too late.
echo "STABLE_GIT_VERSION $VERSION"
