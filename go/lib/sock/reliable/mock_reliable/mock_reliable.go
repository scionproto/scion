// Code generated by MockGen. DO NOT EDIT.
// Source: reconnect.go

// Package mock_reliable is a generated GoMock package.
package mock_reliable

import (
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	addr "github.com/scionproto/scion/go/lib/addr"
	reliable "github.com/scionproto/scion/go/lib/sock/reliable"
)

// MockDispatcher is a mock of Dispatcher interface
type MockDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherMockRecorder
}

// MockDispatcherMockRecorder is the mock recorder for MockDispatcher
type MockDispatcherMockRecorder struct {
	mock *MockDispatcher
}

// NewMockDispatcher creates a new mock instance
func NewMockDispatcher(ctrl *gomock.Controller) *MockDispatcher {
	mock := &MockDispatcher{ctrl: ctrl}
	mock.recorder = &MockDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDispatcher) EXPECT() *MockDispatcherMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockDispatcher) Register(ia addr.IA, public, bind *reliable.AppAddr, svc addr.HostSVC) (reliable.DispatcherConn, uint16, error) {
	ret := m.ctrl.Call(m, "Register", ia, public, bind, svc)
	ret0, _ := ret[0].(reliable.DispatcherConn)
	ret1, _ := ret[1].(uint16)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Register indicates an expected call of Register
func (mr *MockDispatcherMockRecorder) Register(ia, public, bind, svc interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDispatcher)(nil).Register), ia, public, bind, svc)
}

// RegisterTimeout mocks base method
func (m *MockDispatcher) RegisterTimeout(ia addr.IA, public, bind *reliable.AppAddr, svc addr.HostSVC, timeout time.Duration) (reliable.DispatcherConn, uint16, error) {
	ret := m.ctrl.Call(m, "RegisterTimeout", ia, public, bind, svc, timeout)
	ret0, _ := ret[0].(reliable.DispatcherConn)
	ret1, _ := ret[1].(uint16)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterTimeout indicates an expected call of RegisterTimeout
func (mr *MockDispatcherMockRecorder) RegisterTimeout(ia, public, bind, svc, timeout interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTimeout", reflect.TypeOf((*MockDispatcher)(nil).RegisterTimeout), ia, public, bind, svc, timeout)
}

// MockDispatcherConn is a mock of DispatcherConn interface
type MockDispatcherConn struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherConnMockRecorder
}

// MockDispatcherConnMockRecorder is the mock recorder for MockDispatcherConn
type MockDispatcherConnMockRecorder struct {
	mock *MockDispatcherConn
}

// NewMockDispatcherConn creates a new mock instance
func NewMockDispatcherConn(ctrl *gomock.Controller) *MockDispatcherConn {
	mock := &MockDispatcherConn{ctrl: ctrl}
	mock.recorder = &MockDispatcherConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDispatcherConn) EXPECT() *MockDispatcherConnMockRecorder {
	return m.recorder
}

// ReadFrom mocks base method
func (m *MockDispatcherConn) ReadFrom(buf []byte) (int, net.Addr, error) {
	ret := m.ctrl.Call(m, "ReadFrom", buf)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(net.Addr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFrom indicates an expected call of ReadFrom
func (mr *MockDispatcherConnMockRecorder) ReadFrom(buf interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFrom", reflect.TypeOf((*MockDispatcherConn)(nil).ReadFrom), buf)
}

// WriteTo mocks base method
func (m *MockDispatcherConn) WriteTo(buf []byte, dst net.Addr) (int, error) {
	ret := m.ctrl.Call(m, "WriteTo", buf, dst)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo
func (mr *MockDispatcherConnMockRecorder) WriteTo(buf, dst interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockDispatcherConn)(nil).WriteTo), buf, dst)
}

// SetDeadline mocks base method
func (m *MockDispatcherConn) SetDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline
func (mr *MockDispatcherConnMockRecorder) SetDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockDispatcherConn)(nil).SetDeadline), arg0)
}

// SetReadDeadline mocks base method
func (m *MockDispatcherConn) SetReadDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline
func (mr *MockDispatcherConnMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockDispatcherConn)(nil).SetReadDeadline), arg0)
}

// SetWriteDeadline mocks base method
func (m *MockDispatcherConn) SetWriteDeadline(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline
func (mr *MockDispatcherConnMockRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockDispatcherConn)(nil).SetWriteDeadline), arg0)
}

// Close mocks base method
func (m *MockDispatcherConn) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDispatcherConnMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDispatcherConn)(nil).Close))
}
