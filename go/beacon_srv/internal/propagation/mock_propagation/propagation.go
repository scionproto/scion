// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/beacon_srv/internal/propagation (interfaces: BeaconInserter)

// Package mock_propagation is a generated GoMock package.
package mock_propagation

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	beacon "github.com/scionproto/scion/go/beacon_srv/internal/beacon"
	reflect "reflect"
)

// MockBeaconInserter is a mock of BeaconInserter interface
type MockBeaconInserter struct {
	ctrl     *gomock.Controller
	recorder *MockBeaconInserterMockRecorder
}

// MockBeaconInserterMockRecorder is the mock recorder for MockBeaconInserter
type MockBeaconInserterMockRecorder struct {
	mock *MockBeaconInserter
}

// NewMockBeaconInserter creates a new mock instance
func NewMockBeaconInserter(ctrl *gomock.Controller) *MockBeaconInserter {
	mock := &MockBeaconInserter{ctrl: ctrl}
	mock.recorder = &MockBeaconInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeaconInserter) EXPECT() *MockBeaconInserterMockRecorder {
	return m.recorder
}

// InsertBeacons mocks base method
func (m *MockBeaconInserter) InsertBeacons(arg0 context.Context, arg1 ...beacon.Beacon) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertBeacons", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBeacons indicates an expected call of InsertBeacons
func (mr *MockBeaconInserterMockRecorder) InsertBeacons(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBeacons", reflect.TypeOf((*MockBeaconInserter)(nil).InsertBeacons), varargs...)
}
