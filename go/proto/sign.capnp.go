// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SignedBlob struct{ capnp.Struct }

// SignedBlob_TypeID is the unique identifier for the type SignedBlob.
const SignedBlob_TypeID = 0x9f32478537fae352

func NewSignedBlob(s *capnp.Segment) (SignedBlob, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedBlob{st}, err
}

func NewRootSignedBlob(s *capnp.Segment) (SignedBlob, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedBlob{st}, err
}

func ReadRootSignedBlob(msg *capnp.Message) (SignedBlob, error) {
	root, err := msg.RootPtr()
	return SignedBlob{root.Struct()}, err
}

func (s SignedBlob) String() string {
	str, _ := text.Marshal(0x9f32478537fae352, s.Struct)
	return str
}

func (s SignedBlob) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedBlob) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedBlob) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SignedBlob) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s SignedBlob) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedBlob) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s SignedBlob) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SignedBlob_List is a list of SignedBlob.
type SignedBlob_List struct{ capnp.List }

// NewSignedBlob creates a new list of SignedBlob.
func NewSignedBlob_List(s *capnp.Segment, sz int32) (SignedBlob_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SignedBlob_List{l}, err
}

func (s SignedBlob_List) At(i int) SignedBlob { return SignedBlob{s.List.Struct(i)} }

func (s SignedBlob_List) Set(i int, v SignedBlob) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedBlob_List) String() string {
	str, _ := text.MarshalList(0x9f32478537fae352, s.List)
	return str
}

// SignedBlob_Promise is a wrapper for a SignedBlob promised by a client call.
type SignedBlob_Promise struct{ *capnp.Pipeline }

func (p SignedBlob_Promise) Struct() (SignedBlob, error) {
	s, err := p.Pipeline.Struct()
	return SignedBlob{s}, err
}

func (p SignedBlob_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Sign struct{ capnp.Struct }

// Sign_TypeID is the unique identifier for the type Sign.
const Sign_TypeID = 0x844d9464f44e810a

func NewSign(s *capnp.Segment) (Sign, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Sign{st}, err
}

func NewRootSign(s *capnp.Segment) (Sign, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Sign{st}, err
}

func ReadRootSign(msg *capnp.Message) (Sign, error) {
	root, err := msg.RootPtr()
	return Sign{root.Struct()}, err
}

func (s Sign) String() string {
	str, _ := text.Marshal(0x844d9464f44e810a, s.Struct)
	return str
}

func (s Sign) Type() SignType {
	return SignType(s.Struct.Uint16(0))
}

func (s Sign) SetType(v SignType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Sign) Src() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Sign) HasSrc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Sign) SetSrc(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Sign) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Sign) HasSignature() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Sign) SetSignature(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Sign) Timestamp() uint32 {
	return s.Struct.Uint32(4)
}

func (s Sign) SetTimestamp(v uint32) {
	s.Struct.SetUint32(4, v)
}

// Sign_List is a list of Sign.
type Sign_List struct{ capnp.List }

// NewSign creates a new list of Sign.
func NewSign_List(s *capnp.Segment, sz int32) (Sign_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Sign_List{l}, err
}

func (s Sign_List) At(i int) Sign { return Sign{s.List.Struct(i)} }

func (s Sign_List) Set(i int, v Sign) error { return s.List.SetStruct(i, v.Struct) }

func (s Sign_List) String() string {
	str, _ := text.MarshalList(0x844d9464f44e810a, s.List)
	return str
}

// Sign_Promise is a wrapper for a Sign promised by a client call.
type Sign_Promise struct{ *capnp.Pipeline }

func (p Sign_Promise) Struct() (Sign, error) {
	s, err := p.Pipeline.Struct()
	return Sign{s}, err
}

type SignType uint16

// SignType_TypeID is the unique identifier for the type SignType.
const SignType_TypeID = 0xf6b5bc42e3072fc9

// Values of SignType.
const (
	SignType_none    SignType = 0
	SignType_ed25519 SignType = 1
)

// String returns the enum's constant name.
func (c SignType) String() string {
	switch c {
	case SignType_none:
		return "none"
	case SignType_ed25519:
		return "ed25519"

	default:
		return ""
	}
}

// SignTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SignTypeFromString(c string) SignType {
	switch c {
	case "none":
		return SignType_none
	case "ed25519":
		return SignType_ed25519

	default:
		return 0
	}
}

type SignType_List struct{ capnp.List }

func NewSignType_List(s *capnp.Segment, sz int32) (SignType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SignType_List{l.List}, err
}

func (l SignType_List) At(i int) SignType {
	ul := capnp.UInt16List{List: l.List}
	return SignType(ul.At(i))
}

func (l SignType_List) Set(i int, v SignType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_99440334ec0946a0 = "x\xdal\x91?\x8b\x13A\x18\xc6\x9fg&q\x13c" +
	"\xd8\x1d6\xbd \x16\x1a\xf0OBB\xd0J\x82(\x16" +
	"\x11'ZZ\xb8I\x86d!\xd9l\x92\x15\x09\x08\xa2" +
	"\xe87\x10\xc4J\xb1\xb3\xb8\xe2\x0e\xae\xbb/p\x9f#" +
	"\xc55W\x1eW\\\xb3\xc7,\x97\x04\x8eT3<\xfc" +
	"x\x9f\xdf\xcb\xeb\xfdz&jy\x97\x80\xbe\x95\xbf\x91" +
	"\xde\xfc\xfa\xfal\xf0\xb3\xf3\x1d\xbaD\xa6\x7f_\x14O" +
	"\x1b\xf2\xf9o\xe4\x85\x03\xa8\xc975\xcb\xde\x130\xed" +
	"\xae.Z?^\xd6\xff@\x95\xae\x83\xfe+\x1e\xf8\x9a" +
	"\xf6\xd7\xe1'0=~\xe4\xac\xdaG\x87\xe7P%\xb1" +
	"eA\xff?\xff\xf9\xfb\x19\xb8\xc7\x16\x98.\xc2a\xf4" +
	"\xb0\x1f\xc4\x8c\xe2\xa7o\xc3a\x847\xa4\xf6d\x0e\xc8" +
	"\x11PA\x15\xd0\xef%\xf5H\x90\xac\xd0f\xe6\x0e\xa0" +
	"?H\xea\xb1\xa0\x12\xacP\x00*\xec\x02z$\xa9\x13" +
	"A%Y\xa1\x04\xd4\xcc\x86\xb1\xa4\xfe,\xe8&\xcb\xd8" +
	"\xd0\xdd\x9a\x81tAg1\xef\xb3\x0c\xc1\xf2\x95L\x90" +
	"|\x9c\x83f\x93%\xe1\xc4,\x92`\x02\xc6,@\xb0" +
	"\xb0C\xda\xdc\x1e\xb4\xc7\xd3\x9eU/l\xd4\xef[\xf5" +
	"\xbb\x92\xfa\xb1\xa0Z\xbb?\xb0\xe1=I\xdd\x10t{" +
	"\xe3io\xdd\xe3\xda\x99\xf4\xb6\xe7\x00\xe9\xed\xa8z\xe7" +
	",c\x93\x15ek\xab\xaa\x05U\xb1\x0d\xb8\xd142" +
	"_\xcc\xa0\xdel\xd6\x9e\\\x06\x00\x00\xff\xff6\xcal" +
	"\x01"

func init() {
	schemas.Register(schema_99440334ec0946a0,
		0x844d9464f44e810a,
		0x9f32478537fae352,
		0xf6b5bc42e3072fc9)
}
