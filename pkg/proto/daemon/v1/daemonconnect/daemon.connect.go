// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/daemon/v1/daemon.proto

package daemonconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	daemon "github.com/scionproto/scion/pkg/proto/daemon"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DaemonServiceName is the fully-qualified name of the DaemonService service.
	DaemonServiceName = "proto.daemon.v1.DaemonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DaemonServicePathsProcedure is the fully-qualified name of the DaemonService's Paths RPC.
	DaemonServicePathsProcedure = "/proto.daemon.v1.DaemonService/Paths"
	// DaemonServiceASProcedure is the fully-qualified name of the DaemonService's AS RPC.
	DaemonServiceASProcedure = "/proto.daemon.v1.DaemonService/AS"
	// DaemonServiceInterfacesProcedure is the fully-qualified name of the DaemonService's Interfaces
	// RPC.
	DaemonServiceInterfacesProcedure = "/proto.daemon.v1.DaemonService/Interfaces"
	// DaemonServiceServicesProcedure is the fully-qualified name of the DaemonService's Services RPC.
	DaemonServiceServicesProcedure = "/proto.daemon.v1.DaemonService/Services"
	// DaemonServiceNotifyInterfaceDownProcedure is the fully-qualified name of the DaemonService's
	// NotifyInterfaceDown RPC.
	DaemonServiceNotifyInterfaceDownProcedure = "/proto.daemon.v1.DaemonService/NotifyInterfaceDown"
	// DaemonServicePortRangeProcedure is the fully-qualified name of the DaemonService's PortRange RPC.
	DaemonServicePortRangeProcedure = "/proto.daemon.v1.DaemonService/PortRange"
	// DaemonServiceDRKeyASHostProcedure is the fully-qualified name of the DaemonService's DRKeyASHost
	// RPC.
	DaemonServiceDRKeyASHostProcedure = "/proto.daemon.v1.DaemonService/DRKeyASHost"
	// DaemonServiceDRKeyHostASProcedure is the fully-qualified name of the DaemonService's DRKeyHostAS
	// RPC.
	DaemonServiceDRKeyHostASProcedure = "/proto.daemon.v1.DaemonService/DRKeyHostAS"
	// DaemonServiceDRKeyHostHostProcedure is the fully-qualified name of the DaemonService's
	// DRKeyHostHost RPC.
	DaemonServiceDRKeyHostHostProcedure = "/proto.daemon.v1.DaemonService/DRKeyHostHost"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	daemonServiceServiceDescriptor                   = daemon.File_proto_daemon_v1_daemon_proto.Services().ByName("DaemonService")
	daemonServicePathsMethodDescriptor               = daemonServiceServiceDescriptor.Methods().ByName("Paths")
	daemonServiceASMethodDescriptor                  = daemonServiceServiceDescriptor.Methods().ByName("AS")
	daemonServiceInterfacesMethodDescriptor          = daemonServiceServiceDescriptor.Methods().ByName("Interfaces")
	daemonServiceServicesMethodDescriptor            = daemonServiceServiceDescriptor.Methods().ByName("Services")
	daemonServiceNotifyInterfaceDownMethodDescriptor = daemonServiceServiceDescriptor.Methods().ByName("NotifyInterfaceDown")
	daemonServicePortRangeMethodDescriptor           = daemonServiceServiceDescriptor.Methods().ByName("PortRange")
	daemonServiceDRKeyASHostMethodDescriptor         = daemonServiceServiceDescriptor.Methods().ByName("DRKeyASHost")
	daemonServiceDRKeyHostASMethodDescriptor         = daemonServiceServiceDescriptor.Methods().ByName("DRKeyHostAS")
	daemonServiceDRKeyHostHostMethodDescriptor       = daemonServiceServiceDescriptor.Methods().ByName("DRKeyHostHost")
)

// DaemonServiceClient is a client for the proto.daemon.v1.DaemonService service.
type DaemonServiceClient interface {
	Paths(context.Context, *connect.Request[daemon.PathsRequest]) (*connect.Response[daemon.PathsResponse], error)
	AS(context.Context, *connect.Request[daemon.ASRequest]) (*connect.Response[daemon.ASResponse], error)
	Interfaces(context.Context, *connect.Request[daemon.InterfacesRequest]) (*connect.Response[daemon.InterfacesResponse], error)
	Services(context.Context, *connect.Request[daemon.ServicesRequest]) (*connect.Response[daemon.ServicesResponse], error)
	NotifyInterfaceDown(context.Context, *connect.Request[daemon.NotifyInterfaceDownRequest]) (*connect.Response[daemon.NotifyInterfaceDownResponse], error)
	PortRange(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[daemon.PortRangeResponse], error)
	DRKeyASHost(context.Context, *connect.Request[daemon.DRKeyASHostRequest]) (*connect.Response[daemon.DRKeyASHostResponse], error)
	DRKeyHostAS(context.Context, *connect.Request[daemon.DRKeyHostASRequest]) (*connect.Response[daemon.DRKeyHostASResponse], error)
	DRKeyHostHost(context.Context, *connect.Request[daemon.DRKeyHostHostRequest]) (*connect.Response[daemon.DRKeyHostHostResponse], error)
}

// NewDaemonServiceClient constructs a client for the proto.daemon.v1.DaemonService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDaemonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DaemonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &daemonServiceClient{
		paths: connect.NewClient[daemon.PathsRequest, daemon.PathsResponse](
			httpClient,
			baseURL+DaemonServicePathsProcedure,
			connect.WithSchema(daemonServicePathsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		aS: connect.NewClient[daemon.ASRequest, daemon.ASResponse](
			httpClient,
			baseURL+DaemonServiceASProcedure,
			connect.WithSchema(daemonServiceASMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		interfaces: connect.NewClient[daemon.InterfacesRequest, daemon.InterfacesResponse](
			httpClient,
			baseURL+DaemonServiceInterfacesProcedure,
			connect.WithSchema(daemonServiceInterfacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		services: connect.NewClient[daemon.ServicesRequest, daemon.ServicesResponse](
			httpClient,
			baseURL+DaemonServiceServicesProcedure,
			connect.WithSchema(daemonServiceServicesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		notifyInterfaceDown: connect.NewClient[daemon.NotifyInterfaceDownRequest, daemon.NotifyInterfaceDownResponse](
			httpClient,
			baseURL+DaemonServiceNotifyInterfaceDownProcedure,
			connect.WithSchema(daemonServiceNotifyInterfaceDownMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		portRange: connect.NewClient[emptypb.Empty, daemon.PortRangeResponse](
			httpClient,
			baseURL+DaemonServicePortRangeProcedure,
			connect.WithSchema(daemonServicePortRangeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dRKeyASHost: connect.NewClient[daemon.DRKeyASHostRequest, daemon.DRKeyASHostResponse](
			httpClient,
			baseURL+DaemonServiceDRKeyASHostProcedure,
			connect.WithSchema(daemonServiceDRKeyASHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dRKeyHostAS: connect.NewClient[daemon.DRKeyHostASRequest, daemon.DRKeyHostASResponse](
			httpClient,
			baseURL+DaemonServiceDRKeyHostASProcedure,
			connect.WithSchema(daemonServiceDRKeyHostASMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dRKeyHostHost: connect.NewClient[daemon.DRKeyHostHostRequest, daemon.DRKeyHostHostResponse](
			httpClient,
			baseURL+DaemonServiceDRKeyHostHostProcedure,
			connect.WithSchema(daemonServiceDRKeyHostHostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// daemonServiceClient implements DaemonServiceClient.
type daemonServiceClient struct {
	paths               *connect.Client[daemon.PathsRequest, daemon.PathsResponse]
	aS                  *connect.Client[daemon.ASRequest, daemon.ASResponse]
	interfaces          *connect.Client[daemon.InterfacesRequest, daemon.InterfacesResponse]
	services            *connect.Client[daemon.ServicesRequest, daemon.ServicesResponse]
	notifyInterfaceDown *connect.Client[daemon.NotifyInterfaceDownRequest, daemon.NotifyInterfaceDownResponse]
	portRange           *connect.Client[emptypb.Empty, daemon.PortRangeResponse]
	dRKeyASHost         *connect.Client[daemon.DRKeyASHostRequest, daemon.DRKeyASHostResponse]
	dRKeyHostAS         *connect.Client[daemon.DRKeyHostASRequest, daemon.DRKeyHostASResponse]
	dRKeyHostHost       *connect.Client[daemon.DRKeyHostHostRequest, daemon.DRKeyHostHostResponse]
}

// Paths calls proto.daemon.v1.DaemonService.Paths.
func (c *daemonServiceClient) Paths(ctx context.Context, req *connect.Request[daemon.PathsRequest]) (*connect.Response[daemon.PathsResponse], error) {
	return c.paths.CallUnary(ctx, req)
}

// AS calls proto.daemon.v1.DaemonService.AS.
func (c *daemonServiceClient) AS(ctx context.Context, req *connect.Request[daemon.ASRequest]) (*connect.Response[daemon.ASResponse], error) {
	return c.aS.CallUnary(ctx, req)
}

// Interfaces calls proto.daemon.v1.DaemonService.Interfaces.
func (c *daemonServiceClient) Interfaces(ctx context.Context, req *connect.Request[daemon.InterfacesRequest]) (*connect.Response[daemon.InterfacesResponse], error) {
	return c.interfaces.CallUnary(ctx, req)
}

// Services calls proto.daemon.v1.DaemonService.Services.
func (c *daemonServiceClient) Services(ctx context.Context, req *connect.Request[daemon.ServicesRequest]) (*connect.Response[daemon.ServicesResponse], error) {
	return c.services.CallUnary(ctx, req)
}

// NotifyInterfaceDown calls proto.daemon.v1.DaemonService.NotifyInterfaceDown.
func (c *daemonServiceClient) NotifyInterfaceDown(ctx context.Context, req *connect.Request[daemon.NotifyInterfaceDownRequest]) (*connect.Response[daemon.NotifyInterfaceDownResponse], error) {
	return c.notifyInterfaceDown.CallUnary(ctx, req)
}

// PortRange calls proto.daemon.v1.DaemonService.PortRange.
func (c *daemonServiceClient) PortRange(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[daemon.PortRangeResponse], error) {
	return c.portRange.CallUnary(ctx, req)
}

// DRKeyASHost calls proto.daemon.v1.DaemonService.DRKeyASHost.
func (c *daemonServiceClient) DRKeyASHost(ctx context.Context, req *connect.Request[daemon.DRKeyASHostRequest]) (*connect.Response[daemon.DRKeyASHostResponse], error) {
	return c.dRKeyASHost.CallUnary(ctx, req)
}

// DRKeyHostAS calls proto.daemon.v1.DaemonService.DRKeyHostAS.
func (c *daemonServiceClient) DRKeyHostAS(ctx context.Context, req *connect.Request[daemon.DRKeyHostASRequest]) (*connect.Response[daemon.DRKeyHostASResponse], error) {
	return c.dRKeyHostAS.CallUnary(ctx, req)
}

// DRKeyHostHost calls proto.daemon.v1.DaemonService.DRKeyHostHost.
func (c *daemonServiceClient) DRKeyHostHost(ctx context.Context, req *connect.Request[daemon.DRKeyHostHostRequest]) (*connect.Response[daemon.DRKeyHostHostResponse], error) {
	return c.dRKeyHostHost.CallUnary(ctx, req)
}

// DaemonServiceHandler is an implementation of the proto.daemon.v1.DaemonService service.
type DaemonServiceHandler interface {
	Paths(context.Context, *connect.Request[daemon.PathsRequest]) (*connect.Response[daemon.PathsResponse], error)
	AS(context.Context, *connect.Request[daemon.ASRequest]) (*connect.Response[daemon.ASResponse], error)
	Interfaces(context.Context, *connect.Request[daemon.InterfacesRequest]) (*connect.Response[daemon.InterfacesResponse], error)
	Services(context.Context, *connect.Request[daemon.ServicesRequest]) (*connect.Response[daemon.ServicesResponse], error)
	NotifyInterfaceDown(context.Context, *connect.Request[daemon.NotifyInterfaceDownRequest]) (*connect.Response[daemon.NotifyInterfaceDownResponse], error)
	PortRange(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[daemon.PortRangeResponse], error)
	DRKeyASHost(context.Context, *connect.Request[daemon.DRKeyASHostRequest]) (*connect.Response[daemon.DRKeyASHostResponse], error)
	DRKeyHostAS(context.Context, *connect.Request[daemon.DRKeyHostASRequest]) (*connect.Response[daemon.DRKeyHostASResponse], error)
	DRKeyHostHost(context.Context, *connect.Request[daemon.DRKeyHostHostRequest]) (*connect.Response[daemon.DRKeyHostHostResponse], error)
}

// NewDaemonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDaemonServiceHandler(svc DaemonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	daemonServicePathsHandler := connect.NewUnaryHandler(
		DaemonServicePathsProcedure,
		svc.Paths,
		connect.WithSchema(daemonServicePathsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceASHandler := connect.NewUnaryHandler(
		DaemonServiceASProcedure,
		svc.AS,
		connect.WithSchema(daemonServiceASMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceInterfacesHandler := connect.NewUnaryHandler(
		DaemonServiceInterfacesProcedure,
		svc.Interfaces,
		connect.WithSchema(daemonServiceInterfacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceServicesHandler := connect.NewUnaryHandler(
		DaemonServiceServicesProcedure,
		svc.Services,
		connect.WithSchema(daemonServiceServicesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceNotifyInterfaceDownHandler := connect.NewUnaryHandler(
		DaemonServiceNotifyInterfaceDownProcedure,
		svc.NotifyInterfaceDown,
		connect.WithSchema(daemonServiceNotifyInterfaceDownMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServicePortRangeHandler := connect.NewUnaryHandler(
		DaemonServicePortRangeProcedure,
		svc.PortRange,
		connect.WithSchema(daemonServicePortRangeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceDRKeyASHostHandler := connect.NewUnaryHandler(
		DaemonServiceDRKeyASHostProcedure,
		svc.DRKeyASHost,
		connect.WithSchema(daemonServiceDRKeyASHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceDRKeyHostASHandler := connect.NewUnaryHandler(
		DaemonServiceDRKeyHostASProcedure,
		svc.DRKeyHostAS,
		connect.WithSchema(daemonServiceDRKeyHostASMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceDRKeyHostHostHandler := connect.NewUnaryHandler(
		DaemonServiceDRKeyHostHostProcedure,
		svc.DRKeyHostHost,
		connect.WithSchema(daemonServiceDRKeyHostHostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.daemon.v1.DaemonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DaemonServicePathsProcedure:
			daemonServicePathsHandler.ServeHTTP(w, r)
		case DaemonServiceASProcedure:
			daemonServiceASHandler.ServeHTTP(w, r)
		case DaemonServiceInterfacesProcedure:
			daemonServiceInterfacesHandler.ServeHTTP(w, r)
		case DaemonServiceServicesProcedure:
			daemonServiceServicesHandler.ServeHTTP(w, r)
		case DaemonServiceNotifyInterfaceDownProcedure:
			daemonServiceNotifyInterfaceDownHandler.ServeHTTP(w, r)
		case DaemonServicePortRangeProcedure:
			daemonServicePortRangeHandler.ServeHTTP(w, r)
		case DaemonServiceDRKeyASHostProcedure:
			daemonServiceDRKeyASHostHandler.ServeHTTP(w, r)
		case DaemonServiceDRKeyHostASProcedure:
			daemonServiceDRKeyHostASHandler.ServeHTTP(w, r)
		case DaemonServiceDRKeyHostHostProcedure:
			daemonServiceDRKeyHostHostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDaemonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDaemonServiceHandler struct{}

func (UnimplementedDaemonServiceHandler) Paths(context.Context, *connect.Request[daemon.PathsRequest]) (*connect.Response[daemon.PathsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.daemon.v1.DaemonService.Paths is not implemented"))
}

func (UnimplementedDaemonServiceHandler) AS(context.Context, *connect.Request[daemon.ASRequest]) (*connect.Response[daemon.ASResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.daemon.v1.DaemonService.AS is not implemented"))
}

func (UnimplementedDaemonServiceHandler) Interfaces(context.Context, *connect.Request[daemon.InterfacesRequest]) (*connect.Response[daemon.InterfacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.daemon.v1.DaemonService.Interfaces is not implemented"))
}

func (UnimplementedDaemonServiceHandler) Services(context.Context, *connect.Request[daemon.ServicesRequest]) (*connect.Response[daemon.ServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.daemon.v1.DaemonService.Services is not implemented"))
}

func (UnimplementedDaemonServiceHandler) NotifyInterfaceDown(context.Context, *connect.Request[daemon.NotifyInterfaceDownRequest]) (*connect.Response[daemon.NotifyInterfaceDownResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.daemon.v1.DaemonService.NotifyInterfaceDown is not implemented"))
}

func (UnimplementedDaemonServiceHandler) PortRange(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[daemon.PortRangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.daemon.v1.DaemonService.PortRange is not implemented"))
}

func (UnimplementedDaemonServiceHandler) DRKeyASHost(context.Context, *connect.Request[daemon.DRKeyASHostRequest]) (*connect.Response[daemon.DRKeyASHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.daemon.v1.DaemonService.DRKeyASHost is not implemented"))
}

func (UnimplementedDaemonServiceHandler) DRKeyHostAS(context.Context, *connect.Request[daemon.DRKeyHostASRequest]) (*connect.Response[daemon.DRKeyHostASResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.daemon.v1.DaemonService.DRKeyHostAS is not implemented"))
}

func (UnimplementedDaemonServiceHandler) DRKeyHostHost(context.Context, *connect.Request[daemon.DRKeyHostHostRequest]) (*connect.Response[daemon.DRKeyHostHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.daemon.v1.DaemonService.DRKeyHostHost is not implemented"))
}
