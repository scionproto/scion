// Code generated by MockGen. DO NOT EDIT.
// Source: io.go

// Package mock_snetproxy is a generated GoMock package.
package mock_snetproxy

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	snetproxy "github.com/scionproto/scion/go/lib/snet/snetproxy"
)

// MockIOOperation is a mock of IOOperation interface
type MockIOOperation struct {
	ctrl     *gomock.Controller
	recorder *MockIOOperationMockRecorder
}

// MockIOOperationMockRecorder is the mock recorder for MockIOOperation
type MockIOOperationMockRecorder struct {
	mock *MockIOOperation
}

// NewMockIOOperation creates a new mock instance
func NewMockIOOperation(ctrl *gomock.Controller) *MockIOOperation {
	mock := &MockIOOperation{ctrl: ctrl}
	mock.recorder = &MockIOOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOOperation) EXPECT() *MockIOOperationMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockIOOperation) Do(conn snetproxy.Conn) error {
	ret := m.ctrl.Call(m, "Do", conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockIOOperationMockRecorder) Do(conn interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIOOperation)(nil).Do), conn)
}

// IsWrite mocks base method
func (m *MockIOOperation) IsWrite() bool {
	ret := m.ctrl.Call(m, "IsWrite")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWrite indicates an expected call of IsWrite
func (mr *MockIOOperationMockRecorder) IsWrite() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWrite", reflect.TypeOf((*MockIOOperation)(nil).IsWrite))
}
