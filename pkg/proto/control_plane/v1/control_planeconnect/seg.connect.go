// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/control_plane/v1/seg.proto

package control_planeconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	control_plane "github.com/scionproto/scion/pkg/proto/control_plane"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SegmentLookupServiceName is the fully-qualified name of the SegmentLookupService service.
	SegmentLookupServiceName = "proto.control_plane.v1.SegmentLookupService"
	// SegmentRegistrationServiceName is the fully-qualified name of the SegmentRegistrationService
	// service.
	SegmentRegistrationServiceName = "proto.control_plane.v1.SegmentRegistrationService"
	// SegmentCreationServiceName is the fully-qualified name of the SegmentCreationService service.
	SegmentCreationServiceName = "proto.control_plane.v1.SegmentCreationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SegmentLookupServiceSegmentsProcedure is the fully-qualified name of the SegmentLookupService's
	// Segments RPC.
	SegmentLookupServiceSegmentsProcedure = "/proto.control_plane.v1.SegmentLookupService/Segments"
	// SegmentRegistrationServiceSegmentsRegistrationProcedure is the fully-qualified name of the
	// SegmentRegistrationService's SegmentsRegistration RPC.
	SegmentRegistrationServiceSegmentsRegistrationProcedure = "/proto.control_plane.v1.SegmentRegistrationService/SegmentsRegistration"
	// SegmentCreationServiceBeaconProcedure is the fully-qualified name of the SegmentCreationService's
	// Beacon RPC.
	SegmentCreationServiceBeaconProcedure = "/proto.control_plane.v1.SegmentCreationService/Beacon"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	segmentLookupServiceServiceDescriptor                          = control_plane.File_proto_control_plane_v1_seg_proto.Services().ByName("SegmentLookupService")
	segmentLookupServiceSegmentsMethodDescriptor                   = segmentLookupServiceServiceDescriptor.Methods().ByName("Segments")
	segmentRegistrationServiceServiceDescriptor                    = control_plane.File_proto_control_plane_v1_seg_proto.Services().ByName("SegmentRegistrationService")
	segmentRegistrationServiceSegmentsRegistrationMethodDescriptor = segmentRegistrationServiceServiceDescriptor.Methods().ByName("SegmentsRegistration")
	segmentCreationServiceServiceDescriptor                        = control_plane.File_proto_control_plane_v1_seg_proto.Services().ByName("SegmentCreationService")
	segmentCreationServiceBeaconMethodDescriptor                   = segmentCreationServiceServiceDescriptor.Methods().ByName("Beacon")
)

// SegmentLookupServiceClient is a client for the proto.control_plane.v1.SegmentLookupService
// service.
type SegmentLookupServiceClient interface {
	Segments(context.Context, *connect.Request[control_plane.SegmentsRequest]) (*connect.Response[control_plane.SegmentsResponse], error)
}

// NewSegmentLookupServiceClient constructs a client for the
// proto.control_plane.v1.SegmentLookupService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSegmentLookupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SegmentLookupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &segmentLookupServiceClient{
		segments: connect.NewClient[control_plane.SegmentsRequest, control_plane.SegmentsResponse](
			httpClient,
			baseURL+SegmentLookupServiceSegmentsProcedure,
			connect.WithSchema(segmentLookupServiceSegmentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// segmentLookupServiceClient implements SegmentLookupServiceClient.
type segmentLookupServiceClient struct {
	segments *connect.Client[control_plane.SegmentsRequest, control_plane.SegmentsResponse]
}

// Segments calls proto.control_plane.v1.SegmentLookupService.Segments.
func (c *segmentLookupServiceClient) Segments(ctx context.Context, req *connect.Request[control_plane.SegmentsRequest]) (*connect.Response[control_plane.SegmentsResponse], error) {
	return c.segments.CallUnary(ctx, req)
}

// SegmentLookupServiceHandler is an implementation of the
// proto.control_plane.v1.SegmentLookupService service.
type SegmentLookupServiceHandler interface {
	Segments(context.Context, *connect.Request[control_plane.SegmentsRequest]) (*connect.Response[control_plane.SegmentsResponse], error)
}

// NewSegmentLookupServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSegmentLookupServiceHandler(svc SegmentLookupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	segmentLookupServiceSegmentsHandler := connect.NewUnaryHandler(
		SegmentLookupServiceSegmentsProcedure,
		svc.Segments,
		connect.WithSchema(segmentLookupServiceSegmentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.control_plane.v1.SegmentLookupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SegmentLookupServiceSegmentsProcedure:
			segmentLookupServiceSegmentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSegmentLookupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSegmentLookupServiceHandler struct{}

func (UnimplementedSegmentLookupServiceHandler) Segments(context.Context, *connect.Request[control_plane.SegmentsRequest]) (*connect.Response[control_plane.SegmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.control_plane.v1.SegmentLookupService.Segments is not implemented"))
}

// SegmentRegistrationServiceClient is a client for the
// proto.control_plane.v1.SegmentRegistrationService service.
type SegmentRegistrationServiceClient interface {
	SegmentsRegistration(context.Context, *connect.Request[control_plane.SegmentsRegistrationRequest]) (*connect.Response[control_plane.SegmentsRegistrationResponse], error)
}

// NewSegmentRegistrationServiceClient constructs a client for the
// proto.control_plane.v1.SegmentRegistrationService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSegmentRegistrationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SegmentRegistrationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &segmentRegistrationServiceClient{
		segmentsRegistration: connect.NewClient[control_plane.SegmentsRegistrationRequest, control_plane.SegmentsRegistrationResponse](
			httpClient,
			baseURL+SegmentRegistrationServiceSegmentsRegistrationProcedure,
			connect.WithSchema(segmentRegistrationServiceSegmentsRegistrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// segmentRegistrationServiceClient implements SegmentRegistrationServiceClient.
type segmentRegistrationServiceClient struct {
	segmentsRegistration *connect.Client[control_plane.SegmentsRegistrationRequest, control_plane.SegmentsRegistrationResponse]
}

// SegmentsRegistration calls
// proto.control_plane.v1.SegmentRegistrationService.SegmentsRegistration.
func (c *segmentRegistrationServiceClient) SegmentsRegistration(ctx context.Context, req *connect.Request[control_plane.SegmentsRegistrationRequest]) (*connect.Response[control_plane.SegmentsRegistrationResponse], error) {
	return c.segmentsRegistration.CallUnary(ctx, req)
}

// SegmentRegistrationServiceHandler is an implementation of the
// proto.control_plane.v1.SegmentRegistrationService service.
type SegmentRegistrationServiceHandler interface {
	SegmentsRegistration(context.Context, *connect.Request[control_plane.SegmentsRegistrationRequest]) (*connect.Response[control_plane.SegmentsRegistrationResponse], error)
}

// NewSegmentRegistrationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSegmentRegistrationServiceHandler(svc SegmentRegistrationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	segmentRegistrationServiceSegmentsRegistrationHandler := connect.NewUnaryHandler(
		SegmentRegistrationServiceSegmentsRegistrationProcedure,
		svc.SegmentsRegistration,
		connect.WithSchema(segmentRegistrationServiceSegmentsRegistrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.control_plane.v1.SegmentRegistrationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SegmentRegistrationServiceSegmentsRegistrationProcedure:
			segmentRegistrationServiceSegmentsRegistrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSegmentRegistrationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSegmentRegistrationServiceHandler struct{}

func (UnimplementedSegmentRegistrationServiceHandler) SegmentsRegistration(context.Context, *connect.Request[control_plane.SegmentsRegistrationRequest]) (*connect.Response[control_plane.SegmentsRegistrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.control_plane.v1.SegmentRegistrationService.SegmentsRegistration is not implemented"))
}

// SegmentCreationServiceClient is a client for the proto.control_plane.v1.SegmentCreationService
// service.
type SegmentCreationServiceClient interface {
	Beacon(context.Context, *connect.Request[control_plane.BeaconRequest]) (*connect.Response[control_plane.BeaconResponse], error)
}

// NewSegmentCreationServiceClient constructs a client for the
// proto.control_plane.v1.SegmentCreationService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSegmentCreationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SegmentCreationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &segmentCreationServiceClient{
		beacon: connect.NewClient[control_plane.BeaconRequest, control_plane.BeaconResponse](
			httpClient,
			baseURL+SegmentCreationServiceBeaconProcedure,
			connect.WithSchema(segmentCreationServiceBeaconMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// segmentCreationServiceClient implements SegmentCreationServiceClient.
type segmentCreationServiceClient struct {
	beacon *connect.Client[control_plane.BeaconRequest, control_plane.BeaconResponse]
}

// Beacon calls proto.control_plane.v1.SegmentCreationService.Beacon.
func (c *segmentCreationServiceClient) Beacon(ctx context.Context, req *connect.Request[control_plane.BeaconRequest]) (*connect.Response[control_plane.BeaconResponse], error) {
	return c.beacon.CallUnary(ctx, req)
}

// SegmentCreationServiceHandler is an implementation of the
// proto.control_plane.v1.SegmentCreationService service.
type SegmentCreationServiceHandler interface {
	Beacon(context.Context, *connect.Request[control_plane.BeaconRequest]) (*connect.Response[control_plane.BeaconResponse], error)
}

// NewSegmentCreationServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSegmentCreationServiceHandler(svc SegmentCreationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	segmentCreationServiceBeaconHandler := connect.NewUnaryHandler(
		SegmentCreationServiceBeaconProcedure,
		svc.Beacon,
		connect.WithSchema(segmentCreationServiceBeaconMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.control_plane.v1.SegmentCreationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SegmentCreationServiceBeaconProcedure:
			segmentCreationServiceBeaconHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSegmentCreationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSegmentCreationServiceHandler struct{}

func (UnimplementedSegmentCreationServiceHandler) Beacon(context.Context, *connect.Request[control_plane.BeaconRequest]) (*connect.Response[control_plane.BeaconResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.control_plane.v1.SegmentCreationService.Beacon is not implemented"))
}
