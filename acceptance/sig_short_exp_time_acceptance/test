#!/usr/bin/env python3

# Copyright 2019 Anapaya Systems
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import logging
import os
import sys
import yaml
from datetime import datetime, timedelta

from plumbum import cli
from plumbum import local
from plumbum.path.local import LocalPath

from lib.util import write_file
from acceptance.common.log import LogExec, init_log
from acceptance.common.base import CmdBase, TestBase, set_name


set_name(__file__)
logger = logging.getLogger(__name__)


class Test(TestBase):
    """
    Test that the SIG switches to non-expired paths.

    In the setup phase, this test sets up the tiny topology. The beacon servers
    are configured to only construct paths with the smallest expiration time
    (5m37s).

    In the run phase, `sig_ping_acceptance` is constantly called for 6 minutes.
    The test is successful, if the pings do not fail during this time.

    To disable this test, set the `DISABLE_SHORT_EXPIRATION` env variable.
    """

class Base(CmdBase):
    enabled = True

    @cli.switch('disable-short-exp', envname='DISABLE_SHORT_EXPIRATION',
                help='disable this test')
    def enable_short_exp(self):
        self.enabled = False


@Test.subcommand('setup')
class TestSetup(Base):

    @LogExec(logger, 'setup')
    def main(self):
        if not self.enabled:
            return

        self.scion.topology('topology/Tiny.topo', '--sig', '-t', '-n', '242.254.0.0/16')
        self.set_bs_policies()
        self.set_sd_policies()
        self.scion.run()
        if not self.no_docker:
            self.tools_dc('start', 'tester*')
            self.docker_status()

    def set_bs_policies(self):
        for path in local.path('gen') // 'ISD*/AS*/bs*/bs.toml':
            cfg_dir = path.dirname if self.no_docker else '/share/conf'
            policy_file = os.path.join(cfg_dir, 'policy.yml')
            self.scion.set_configs({
                'bs.policies.Propagation': policy_file,
                'bs.policies.CoreRegistration': policy_file,
                'bs.policies.UpRegistration': policy_file,
                'bs.policies.DownRegistration': policy_file,
            }, [path])
            with open(os.path.join(path.dirname, 'policy.yml'), 'w') as outfile:
                yaml.dump({'MaxExpTime': 0}, outfile, default_flow_style=False)

    def set_sd_policies(self):
        for path in local.path('gen') // 'ISD*/AS*/endhost/sd.toml':
            self.scion.set_configs({
                'sd.QueryInterval': "1m",
            }, [path])


@Test.subcommand("run")
class TestRun(Base):
    sig_ping = local['./bin/sig_ping_acceptance']

    @LogExec(logger, "run")
    def main(self):
        if not self.enabled:
            return

        stop = datetime.now() + timedelta(minutes=6)
        while datetime.now() < stop:
            args = ['-log.console', 'info']
            if not self.no_docker:
                args.append('-d')
            self.sig_ping(*args)
            logger.info("Pinging SIGs successful")


if __name__ == '__main__':
    init_log()
    Test.run()
