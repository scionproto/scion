// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SignedCtrlPld struct{ capnp.Struct }

// SignedCtrlPld_TypeID is the unique identifier for the type SignedCtrlPld.
const SignedCtrlPld_TypeID = 0xc34ac578b174f099

func NewSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func NewRootSignedCtrlPld(s *capnp.Segment) (SignedCtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SignedCtrlPld{st}, err
}

func ReadRootSignedCtrlPld(msg *capnp.Message) (SignedCtrlPld, error) {
	root, err := msg.RootPtr()
	return SignedCtrlPld{root.Struct()}, err
}

func (s SignedCtrlPld) String() string {
	str, _ := text.Marshal(0xc34ac578b174f099, s.Struct)
	return str
}

func (s SignedCtrlPld) Blob() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SignedCtrlPld) HasBlob() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetBlob(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SignedCtrlPld) Sign() (Sign, error) {
	p, err := s.Struct.Ptr(1)
	return Sign{Struct: p.Struct()}, err
}

func (s SignedCtrlPld) HasSign() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SignedCtrlPld) SetSign(v Sign) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSign sets the sign field to a newly
// allocated Sign struct, preferring placement in s's segment.
func (s SignedCtrlPld) NewSign() (Sign, error) {
	ss, err := NewSign(s.Struct.Segment())
	if err != nil {
		return Sign{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SignedCtrlPld_List is a list of SignedCtrlPld.
type SignedCtrlPld_List struct{ capnp.List }

// NewSignedCtrlPld creates a new list of SignedCtrlPld.
func NewSignedCtrlPld_List(s *capnp.Segment, sz int32) (SignedCtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SignedCtrlPld_List{l}, err
}

func (s SignedCtrlPld_List) At(i int) SignedCtrlPld { return SignedCtrlPld{s.List.Struct(i)} }

func (s SignedCtrlPld_List) Set(i int, v SignedCtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s SignedCtrlPld_List) String() string {
	str, _ := text.MarshalList(0xc34ac578b174f099, s.List)
	return str
}

// SignedCtrlPld_Promise is a wrapper for a SignedCtrlPld promised by a client call.
type SignedCtrlPld_Promise struct{ *capnp.Pipeline }

func (p SignedCtrlPld_Promise) Struct() (SignedCtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return SignedCtrlPld{s}, err
}

func (p SignedCtrlPld_Promise) Sign() Sign_Promise {
	return Sign_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type CtrlPld struct{ capnp.Struct }
type CtrlPld_Which uint16

const (
	CtrlPld_Which_unset     CtrlPld_Which = 0
	CtrlPld_Which_pcb       CtrlPld_Which = 1
	CtrlPld_Which_ifid      CtrlPld_Which = 2
	CtrlPld_Which_certMgmt  CtrlPld_Which = 3
	CtrlPld_Which_pathMgmt  CtrlPld_Which = 4
	CtrlPld_Which_sibra     CtrlPld_Which = 5
	CtrlPld_Which_drkeyMgmt CtrlPld_Which = 6
	CtrlPld_Which_sig       CtrlPld_Which = 7
	CtrlPld_Which_extn      CtrlPld_Which = 8
	CtrlPld_Which_ack       CtrlPld_Which = 9
)

func (w CtrlPld_Which) String() string {
	const s = "unsetpcbifidcertMgmtpathMgmtsibradrkeyMgmtsigextnack"
	switch w {
	case CtrlPld_Which_unset:
		return s[0:5]
	case CtrlPld_Which_pcb:
		return s[5:8]
	case CtrlPld_Which_ifid:
		return s[8:12]
	case CtrlPld_Which_certMgmt:
		return s[12:20]
	case CtrlPld_Which_pathMgmt:
		return s[20:28]
	case CtrlPld_Which_sibra:
		return s[28:33]
	case CtrlPld_Which_drkeyMgmt:
		return s[33:42]
	case CtrlPld_Which_sig:
		return s[42:45]
	case CtrlPld_Which_extn:
		return s[45:49]
	case CtrlPld_Which_ack:
		return s[49:52]

	}
	return "CtrlPld_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CtrlPld_TypeID is the unique identifier for the type CtrlPld.
const CtrlPld_TypeID = 0x8e6af2c877489f54

func NewCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func NewRootCtrlPld(s *capnp.Segment) (CtrlPld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return CtrlPld{st}, err
}

func ReadRootCtrlPld(msg *capnp.Message) (CtrlPld, error) {
	root, err := msg.RootPtr()
	return CtrlPld{root.Struct()}, err
}

func (s CtrlPld) String() string {
	str, _ := text.Marshal(0x8e6af2c877489f54, s.Struct)
	return str
}

func (s CtrlPld) Which() CtrlPld_Which {
	return CtrlPld_Which(s.Struct.Uint16(0))
}
func (s CtrlPld) SetUnset() {
	s.Struct.SetUint16(0, 0)

}

func (s CtrlPld) Pcb() (PCB, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != pcb")
	}
	p, err := s.Struct.Ptr(0)
	return PCB{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPcb() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPcb(v PCB) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPcb sets the pcb field to a newly
// allocated PCB struct, preferring placement in s's segment.
func (s CtrlPld) NewPcb() (PCB, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPCB(s.Struct.Segment())
	if err != nil {
		return PCB{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ifid() (IFID, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != ifid")
	}
	p, err := s.Struct.Ptr(0)
	return IFID{Struct: p.Struct()}, err
}

func (s CtrlPld) HasIfid() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetIfid(v IFID) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfid sets the ifid field to a newly
// allocated IFID struct, preferring placement in s's segment.
func (s CtrlPld) NewIfid() (IFID, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewIFID(s.Struct.Segment())
	if err != nil {
		return IFID{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) CertMgmt() (CertMgmt, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != certMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return CertMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasCertMgmt() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetCertMgmt(v CertMgmt) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCertMgmt sets the certMgmt field to a newly
// allocated CertMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewCertMgmt() (CertMgmt, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewCertMgmt(s.Struct.Segment())
	if err != nil {
		return CertMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) PathMgmt() (PathMgmt, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != pathMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return PathMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasPathMgmt() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetPathMgmt(v PathMgmt) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathMgmt sets the pathMgmt field to a newly
// allocated PathMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewPathMgmt() (PathMgmt, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewPathMgmt(s.Struct.Segment())
	if err != nil {
		return PathMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sibra() (SibraPayload, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != sibra")
	}
	p, err := s.Struct.Ptr(0)
	return SibraPayload{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSibra() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSibra(v SibraPayload) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSibra sets the sibra field to a newly
// allocated SibraPayload struct, preferring placement in s's segment.
func (s CtrlPld) NewSibra() (SibraPayload, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewSibraPayload(s.Struct.Segment())
	if err != nil {
		return SibraPayload{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) DrkeyMgmt() (DRKeyMgmt, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != drkeyMgmt")
	}
	p, err := s.Struct.Ptr(0)
	return DRKeyMgmt{Struct: p.Struct()}, err
}

func (s CtrlPld) HasDrkeyMgmt() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetDrkeyMgmt(v DRKeyMgmt) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDrkeyMgmt sets the drkeyMgmt field to a newly
// allocated DRKeyMgmt struct, preferring placement in s's segment.
func (s CtrlPld) NewDrkeyMgmt() (DRKeyMgmt, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewDRKeyMgmt(s.Struct.Segment())
	if err != nil {
		return DRKeyMgmt{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Sig() (SIGCtrl, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != sig")
	}
	p, err := s.Struct.Ptr(0)
	return SIGCtrl{Struct: p.Struct()}, err
}

func (s CtrlPld) HasSig() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetSig(v SIGCtrl) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSig sets the sig field to a newly
// allocated SIGCtrl struct, preferring placement in s's segment.
func (s CtrlPld) NewSig() (SIGCtrl, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewSIGCtrl(s.Struct.Segment())
	if err != nil {
		return SIGCtrl{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Extn() (CtrlExtnDataList, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != extn")
	}
	p, err := s.Struct.Ptr(0)
	return CtrlExtnDataList{Struct: p.Struct()}, err
}

func (s CtrlPld) HasExtn() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetExtn(v CtrlExtnDataList) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExtn sets the extn field to a newly
// allocated CtrlExtnDataList struct, preferring placement in s's segment.
func (s CtrlPld) NewExtn() (CtrlExtnDataList, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewCtrlExtnDataList(s.Struct.Segment())
	if err != nil {
		return CtrlExtnDataList{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) Ack() (Ack, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != ack")
	}
	p, err := s.Struct.Ptr(0)
	return Ack{Struct: p.Struct()}, err
}

func (s CtrlPld) HasAck() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetAck(v Ack) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAck sets the ack field to a newly
// allocated Ack struct, preferring placement in s's segment.
func (s CtrlPld) NewAck() (Ack, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewAck(s.Struct.Segment())
	if err != nil {
		return Ack{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CtrlPld) ReqId() uint64 {
	return s.Struct.Uint64(8)
}

func (s CtrlPld) SetReqId(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s CtrlPld) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s CtrlPld) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CtrlPld) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// CtrlPld_List is a list of CtrlPld.
type CtrlPld_List struct{ capnp.List }

// NewCtrlPld creates a new list of CtrlPld.
func NewCtrlPld_List(s *capnp.Segment, sz int32) (CtrlPld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return CtrlPld_List{l}, err
}

func (s CtrlPld_List) At(i int) CtrlPld { return CtrlPld{s.List.Struct(i)} }

func (s CtrlPld_List) Set(i int, v CtrlPld) error { return s.List.SetStruct(i, v.Struct) }

func (s CtrlPld_List) String() string {
	str, _ := text.MarshalList(0x8e6af2c877489f54, s.List)
	return str
}

// CtrlPld_Promise is a wrapper for a CtrlPld promised by a client call.
type CtrlPld_Promise struct{ *capnp.Pipeline }

func (p CtrlPld_Promise) Struct() (CtrlPld, error) {
	s, err := p.Pipeline.Struct()
	return CtrlPld{s}, err
}

func (p CtrlPld_Promise) Pcb() PCB_Promise {
	return PCB_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ifid() IFID_Promise {
	return IFID_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) CertMgmt() CertMgmt_Promise {
	return CertMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) PathMgmt() PathMgmt_Promise {
	return PathMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sibra() SibraPayload_Promise {
	return SibraPayload_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) DrkeyMgmt() DRKeyMgmt_Promise {
	return DRKeyMgmt_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Sig() SIGCtrl_Promise {
	return SIGCtrl_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Extn() CtrlExtnDataList_Promise {
	return CtrlExtnDataList_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CtrlPld_Promise) Ack() Ack_Promise {
	return Ack_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_df42b02816bdc1bf = "x\xdaD\xd2]HTi\x1c\x06\xf0\xe7y\xe7\xdb\x0f" +
	"\xe6\x1c\xcea\xef\x16a\xd7\x0b\x95\xddE]aY\xd9" +
	"e]]Y\x15gq\xf6\x18xQ\xe9\xcc9\xe38" +
	"9N\xc73GT\x08*\x10\xef\x0a/\x122\x88\xea" +
	"\xaa\xab\"!\x88\x02+\x91\xc8\x02\xa1\xba\x90.\x82\xe8" +
	"\xa2\x9b\xe8\xc2\xa4\x0f\xd3\xea\x8dw\x98I\xe6f\xf8\xff" +
	"\xce{\x9e\xff{x\x9a\x0f\x86:DK\xe8\xfe\x8f\x80" +
	"u\x91\xa1\xb0\x1c\xbc\xd03\xbd\xbe}\xe44\x92q\x0a" +
	"ygu\xe5\xbb\x86k\x9d\xcf\xd1-\"U\x80\xf1@" +
	"\xbfe<\xd6#\xc0\xaf\x1b\xfae\x01\xca\xa5-\x7fy" +
	"\xe6^\xdf\x1a\xf48\xf7\x9f\x0e\x89\x08`\x9c2_\x19" +
	"K\xa6\xfa\xb7hNC\x96\x7f\xb6\xb4}/?\xec\xe6" +
	"\x1d\xfeb\xa7\xdc\x82\xdb\xde\xf5\x97\xef\xe5\x07\xf2\xce\x00" +
	"\x99l\x0e\x04k\xa4\x0c\x120\xfef+`\xfd\xc1\x00" +
	"\xad\x1e\x0a\xd6\xf2\x8b4\xa9\xa0\x9b?\x00V\x87\x82~" +
	"\x05\xe2\xb34)\x00\xa3\x97M\x80\xf5\x8f\x82\x01\x05\x81" +
	"O\xd2d\x000\x12\xec\x03\xac~\x05C\x0a\x82{\xd2" +
	"d\x100\x0e\x94`P\xc1\x88\x82\xd0\xae4\x19\x02\x8c" +
	"C\xa5\xf0!\x05\x8e\x82\xf0Gi2\x0c\x18)\xfe\x0f" +
	"X#\x0a\xf2\x0a\";\xd2\xa4\xbac\xae\xb4\x95\xa3\xc0" +
	"U\x10\xfd MF\x01c\xa2\xb4\xd5\x98\x02\x9f\x82z" +
	"\x15M\xc6\x00c\xb2\x14\x91W\xf3\x195\xaf\xa6I\xf5" +
	"\x8d\xa7\xd8\x09X\xae\x9a\x1fS/\x8a\xbd\x97&\xab\x01" +
	"c\xb6\x94\xe0+8A\xc1\xba\xa9B1\xe3#\x1cq" +
	"\xed45\xf929\xfb\x9b\xfd\xef\xddM\x80\xd4\xc0x" +
	"n4\xe7P\x937\x1bC;\xc6\xde\xe2\xf9\xf2X\xda" +
	"\x19\xcfOd'|\x00\xd4\xe4\xefO_\xcf_w\x17" +
	".U\xd4M\xf9c\xfb\xfa\xf0\xd1\xb9\x9a\xce\xdd\x9f*" +
	"ZW\xcc\xa5\xbd\x145\xb9\xb067\xfcn\xbde\xbb" +
	"r\xca\xf1\xc63\xb3\x89\xec\x04\xe8\xabSo\x8c\xbd\xcd" +
	"\x1b+\xcbe\x8d\x14sYj2\xfagk\xb1\xb1\xfe" +
	"\xf0\x8b\xcaz\x99\x19\xbf@M\x8e\xae\x8a\xf9\xdb\xdf\x8f" +
	"lT\"\xbc\xccd\xaf\xc3\x18\x04c\xe0q\xdfK\xd9" +
	"\x99^\x87\xb5\x10\xac\x05#){\x9c\x9a|v\xb5\xed" +
	"I\xfb\xd9+[\xdf\xaeT\xee\x93(\xf7\xc9\xcae\x0b" +
	"\x19\xa7\xcb\xf7\xe2\x95VE\x03A@\x95Jol\x02" +
	"\x92\xf5\x01&\x9b\x05u\xb2T(\xfdg5l\x080" +
	"\xd9&\x18O\xe7\x8f\xa6+\x81\xf1b.\xab\xb6\xac:" +
	"\xf9\xdf[\xe7Lb\xae\x9c\xf85\x00\x00\xff\xff2Q" +
	"\xc7\x87"

func init() {
	schemas.Register(schema_df42b02816bdc1bf,
		0x8e6af2c877489f54,
		0xc34ac578b174f099)
}
