#!/bin/bash

# This test checks whether the SIG quickly switches paths when one is close to
# expiration.
#
# The test sets up two ASes connected by two paths. The first SCIOND path reply
# only contains the first path, and it has a very short lifetime. Path replies
# after 5 seconds have passed include both paths: the first path with the short
# lifetime, and the second path with the long lifetime. Immediately after the
# short lifetime expires, the first path is taken down and a ping sent out. If
# the failover was correct, this ping should not be lost.

# TODO(JordiSubira): Remove dispatcher from schema.
# Docker topology:
#
# +---------------------------+     +---------------------------+
# | dispatcher1 network stack |     | dispatcher2 network stack |
# |    +-----------------+    |     |    +-----------------+    |
# |    |     tester1     |    |     |    |     tester2     |    |
# |    +-----------------+    |     |    +-----------------+    |
# |                           |     |                           |
# |    +-----------------+    |     |    +-----------------+    |
# |    |      sig1       |    |     |    |      sig2       |    |
# |    +-----------------+    |     |    +-----------------+    |
# |                           |     |                           |
# |    +-----------------+    |     |    +-----------------+    |
# |    |   dispatcher1   |    |     |    |   dispatcher2   |    |
# |    |     :30041      |    |     |    |     :30041      |    |
# |    +-----------------+    |     |    +-----------------+    |
# |                           |     |                           |
# |    (route via dev sig)    |     |    (route via dev sig)    |
# |                           |     |                           |
# |      242.254.100.2/24     |     |     242.254.200.2/24      |
# +------------+--------------+     +-------------+-------------+
#              |                                  |
#   +----------+------------+         +-----------+-----------+
#   |        bridge1        |         |       bridge2         |
#   |    242.254.100.1/24   |         |   242.254.200.1/24    |
#   +-+-+-------------------+         +-------------------+-+-+
#     | |                                                 | |
#     | | +---------------------------------------------+ | |
#     | +-+                    patha                    +-+ |
#     |   | 242.254.100.3:50000 <-> 242.254.200.3:50000 |   |
#     |   +---------------------------------------------+   |
#     |                                                     |
#     |   +---------------------------------------------+   |
#     +---+                    pathb                    +----
#         | 242.254.100.4:50000 <-> 242.254.200.4:50000 |
#         +---------------------------------------------+

run_test() {(set -e
    # Register with the docker daemon the docker images bazel created
    docker image load -i acceptance/sig_short_exp_time/udpproxy.tar
    docker image load -i acceptance/sig_short_exp_time/sig1.tar
    docker image load -i acceptance/sig_short_exp_time/sig2.tar

    docker-compose -f acceptance/sig_short_exp_time/docker-compose.yml up -d sig1 sig2 patha pathb

    # Set up forward route on network stack 1 and 2 through the sig tunnel
    # device. The route is a property of the network stack, and persists after
    # the container that added it has exited.
    #
    # If the route configuration fails, the test is not stopped.
    docker-compose -f acceptance/sig_short_exp_time/docker-compose.yml run --name route1 --rm tester1 ip route add 242.254.200.2/32 dev sig || true
    docker-compose -f acceptance/sig_short_exp_time/docker-compose.yml run --name route2 --rm tester2 ip route add 242.254.100.2/32 dev sig || true

    echo "Start background ping, ping every 0.2 seconds"
    docker-compose -f acceptance/sig_short_exp_time/docker-compose.yml run --name tester1 -d tester1 ping -i 0.2 242.254.200.2

    echo "Waiting 10 seconds for path A to expire..."
    sleep 10
    echo "Path A expired, simulating it by shutting down path A proxy"
    # Traffic should have switched beforehand to path b, and no pings should be lost
    docker-compose -f acceptance/sig_short_exp_time/docker-compose.yml stop patha
    sleep 1
    docker kill -s SIGINT tester1

    sleep 1
    local ping_exit_code=$(docker inspect tester1 --format='{{.State.ExitCode}}')
    if [ "$ping_exit_code" != "0" ]; then
      docker logs tester1
      echo "Test failed, ping not successful"
      return 1
    fi
    LINE=`docker logs tester1 | tail -n 2 | head -n 1`
    echo "Ping results: $LINE"

    ATTEMPTS=`echo $LINE | cut -d ' ' -f 1`
    SUCCESSES=`echo $LINE | cut -d ' ' -f 4`
    if [ $ATTEMPTS -eq $SUCCESSES ]; then
        return 0
    fi
    echo "Test failed, attempted $ATTEMPTS pings, but only $SUCCESSES succeeded"
    return 1
)}

set +e
run_test
RC=$?

# Write outputs to bazel directory
OUTPUT_DIR=$TEST_UNDECLARED_OUTPUTS_DIR
mkdir -p $OUTPUT_DIR/logs

for CNTR in sig1 sig2; do
    docker-compose -f acceptance/sig_short_exp_time/docker-compose.yml logs "$CNTR" > "$OUTPUT_DIR/logs/$CNTR.log"
done

docker-compose -f acceptance/sig_short_exp_time/docker-compose.yml down -v

exit $RC
