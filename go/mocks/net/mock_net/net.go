// Code generated by MockGen. DO NOT EDIT.
// Source: net (interfaces: Addr)

// Package mock_net is a generated GoMock package.
package mock_net

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAddr is a mock of Addr interface
type MockAddr struct {
	ctrl     *gomock.Controller
	recorder *MockAddrMockRecorder
}

// MockAddrMockRecorder is the mock recorder for MockAddr
type MockAddrMockRecorder struct {
	mock *MockAddr
}

// NewMockAddr creates a new mock instance
func NewMockAddr(ctrl *gomock.Controller) *MockAddr {
	mock := &MockAddr{ctrl: ctrl}
	mock.recorder = &MockAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAddr) EXPECT() *MockAddrMockRecorder {
	return m.recorder
}

// Network mocks base method
func (m *MockAddr) Network() string {
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(string)
	return ret0
}

// Network indicates an expected call of Network
func (mr *MockAddrMockRecorder) Network() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockAddr)(nil).Network))
}

// String mocks base method
func (m *MockAddr) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockAddrMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAddr)(nil).String))
}
