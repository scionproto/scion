// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/pkg/proto/control_plane (interfaces: ChainRenewalServiceServer,DRKeyIntraServiceServer,TrustMaterialServiceServer)

// Package mock_control_plane is a generated GoMock package.
package mock_control_plane

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	control_plane "github.com/scionproto/scion/pkg/proto/control_plane"
)

// MockChainRenewalServiceServer is a mock of ChainRenewalServiceServer interface.
type MockChainRenewalServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockChainRenewalServiceServerMockRecorder
}

// MockChainRenewalServiceServerMockRecorder is the mock recorder for MockChainRenewalServiceServer.
type MockChainRenewalServiceServerMockRecorder struct {
	mock *MockChainRenewalServiceServer
}

// NewMockChainRenewalServiceServer creates a new mock instance.
func NewMockChainRenewalServiceServer(ctrl *gomock.Controller) *MockChainRenewalServiceServer {
	mock := &MockChainRenewalServiceServer{ctrl: ctrl}
	mock.recorder = &MockChainRenewalServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainRenewalServiceServer) EXPECT() *MockChainRenewalServiceServerMockRecorder {
	return m.recorder
}

// ChainRenewal mocks base method.
func (m *MockChainRenewalServiceServer) ChainRenewal(arg0 context.Context, arg1 *control_plane.ChainRenewalRequest) (*control_plane.ChainRenewalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainRenewal", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.ChainRenewalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainRenewal indicates an expected call of ChainRenewal.
func (mr *MockChainRenewalServiceServerMockRecorder) ChainRenewal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainRenewal", reflect.TypeOf((*MockChainRenewalServiceServer)(nil).ChainRenewal), arg0, arg1)
}

// MockDRKeyIntraServiceServer is a mock of DRKeyIntraServiceServer interface.
type MockDRKeyIntraServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDRKeyIntraServiceServerMockRecorder
}

// MockDRKeyIntraServiceServerMockRecorder is the mock recorder for MockDRKeyIntraServiceServer.
type MockDRKeyIntraServiceServerMockRecorder struct {
	mock *MockDRKeyIntraServiceServer
}

// NewMockDRKeyIntraServiceServer creates a new mock instance.
func NewMockDRKeyIntraServiceServer(ctrl *gomock.Controller) *MockDRKeyIntraServiceServer {
	mock := &MockDRKeyIntraServiceServer{ctrl: ctrl}
	mock.recorder = &MockDRKeyIntraServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDRKeyIntraServiceServer) EXPECT() *MockDRKeyIntraServiceServerMockRecorder {
	return m.recorder
}

// DRKeyASHost mocks base method.
func (m *MockDRKeyIntraServiceServer) DRKeyASHost(arg0 context.Context, arg1 *control_plane.DRKeyASHostRequest) (*control_plane.DRKeyASHostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DRKeyASHost", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.DRKeyASHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DRKeyASHost indicates an expected call of DRKeyASHost.
func (mr *MockDRKeyIntraServiceServerMockRecorder) DRKeyASHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DRKeyASHost", reflect.TypeOf((*MockDRKeyIntraServiceServer)(nil).DRKeyASHost), arg0, arg1)
}

// DRKeyHostAS mocks base method.
func (m *MockDRKeyIntraServiceServer) DRKeyHostAS(arg0 context.Context, arg1 *control_plane.DRKeyHostASRequest) (*control_plane.DRKeyHostASResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DRKeyHostAS", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.DRKeyHostASResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DRKeyHostAS indicates an expected call of DRKeyHostAS.
func (mr *MockDRKeyIntraServiceServerMockRecorder) DRKeyHostAS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DRKeyHostAS", reflect.TypeOf((*MockDRKeyIntraServiceServer)(nil).DRKeyHostAS), arg0, arg1)
}

// DRKeyHostHost mocks base method.
func (m *MockDRKeyIntraServiceServer) DRKeyHostHost(arg0 context.Context, arg1 *control_plane.DRKeyHostHostRequest) (*control_plane.DRKeyHostHostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DRKeyHostHost", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.DRKeyHostHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DRKeyHostHost indicates an expected call of DRKeyHostHost.
func (mr *MockDRKeyIntraServiceServerMockRecorder) DRKeyHostHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DRKeyHostHost", reflect.TypeOf((*MockDRKeyIntraServiceServer)(nil).DRKeyHostHost), arg0, arg1)
}

// DRKeyIntraLevel1 mocks base method.
func (m *MockDRKeyIntraServiceServer) DRKeyIntraLevel1(arg0 context.Context, arg1 *control_plane.DRKeyIntraLevel1Request) (*control_plane.DRKeyIntraLevel1Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DRKeyIntraLevel1", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.DRKeyIntraLevel1Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DRKeyIntraLevel1 indicates an expected call of DRKeyIntraLevel1.
func (mr *MockDRKeyIntraServiceServerMockRecorder) DRKeyIntraLevel1(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DRKeyIntraLevel1", reflect.TypeOf((*MockDRKeyIntraServiceServer)(nil).DRKeyIntraLevel1), arg0, arg1)
}

// DRKeySecretValue mocks base method.
func (m *MockDRKeyIntraServiceServer) DRKeySecretValue(arg0 context.Context, arg1 *control_plane.DRKeySecretValueRequest) (*control_plane.DRKeySecretValueResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DRKeySecretValue", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.DRKeySecretValueResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DRKeySecretValue indicates an expected call of DRKeySecretValue.
func (mr *MockDRKeyIntraServiceServerMockRecorder) DRKeySecretValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DRKeySecretValue", reflect.TypeOf((*MockDRKeyIntraServiceServer)(nil).DRKeySecretValue), arg0, arg1)
}

// MockTrustMaterialServiceServer is a mock of TrustMaterialServiceServer interface.
type MockTrustMaterialServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTrustMaterialServiceServerMockRecorder
}

// MockTrustMaterialServiceServerMockRecorder is the mock recorder for MockTrustMaterialServiceServer.
type MockTrustMaterialServiceServerMockRecorder struct {
	mock *MockTrustMaterialServiceServer
}

// NewMockTrustMaterialServiceServer creates a new mock instance.
func NewMockTrustMaterialServiceServer(ctrl *gomock.Controller) *MockTrustMaterialServiceServer {
	mock := &MockTrustMaterialServiceServer{ctrl: ctrl}
	mock.recorder = &MockTrustMaterialServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrustMaterialServiceServer) EXPECT() *MockTrustMaterialServiceServerMockRecorder {
	return m.recorder
}

// Chains mocks base method.
func (m *MockTrustMaterialServiceServer) Chains(arg0 context.Context, arg1 *control_plane.ChainsRequest) (*control_plane.ChainsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chains", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.ChainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chains indicates an expected call of Chains.
func (mr *MockTrustMaterialServiceServerMockRecorder) Chains(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chains", reflect.TypeOf((*MockTrustMaterialServiceServer)(nil).Chains), arg0, arg1)
}

// TRC mocks base method.
func (m *MockTrustMaterialServiceServer) TRC(arg0 context.Context, arg1 *control_plane.TRCRequest) (*control_plane.TRCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TRC", arg0, arg1)
	ret0, _ := ret[0].(*control_plane.TRCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TRC indicates an expected call of TRC.
func (mr *MockTrustMaterialServiceServerMockRecorder) TRC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TRC", reflect.TypeOf((*MockTrustMaterialServiceServer)(nil).TRC), arg0, arg1)
}
