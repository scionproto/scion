// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Ack struct{ capnp.Struct }

// Ack_TypeID is the unique identifier for the type Ack.
const Ack_TypeID = 0xf0ad983ad234aedc

func NewAck(s *capnp.Segment) (Ack, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Ack{st}, err
}

func NewRootAck(s *capnp.Segment) (Ack, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Ack{st}, err
}

func ReadRootAck(msg *capnp.Message) (Ack, error) {
	root, err := msg.RootPtr()
	return Ack{root.Struct()}, err
}

func (s Ack) String() string {
	str, _ := text.Marshal(0xf0ad983ad234aedc, s.Struct)
	return str
}

func (s Ack) Err() Ack_ErrCode {
	return Ack_ErrCode(s.Struct.Uint16(0))
}

func (s Ack) SetErr(v Ack_ErrCode) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Ack) ErrDesc() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Ack) HasErrDesc() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Ack) ErrDescBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Ack) SetErrDesc(v string) error {
	return s.Struct.SetText(0, v)
}

// Ack_List is a list of Ack.
type Ack_List struct{ capnp.List }

// NewAck creates a new list of Ack.
func NewAck_List(s *capnp.Segment, sz int32) (Ack_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Ack_List{l}, err
}

func (s Ack_List) At(i int) Ack { return Ack{s.List.Struct(i)} }

func (s Ack_List) Set(i int, v Ack) error { return s.List.SetStruct(i, v.Struct) }

func (s Ack_List) String() string {
	str, _ := text.MarshalList(0xf0ad983ad234aedc, s.List)
	return str
}

// Ack_Promise is a wrapper for a Ack promised by a client call.
type Ack_Promise struct{ *capnp.Pipeline }

func (p Ack_Promise) Struct() (Ack, error) {
	s, err := p.Pipeline.Struct()
	return Ack{s}, err
}

type Ack_ErrCode uint16

// Ack_ErrCode_TypeID is the unique identifier for the type Ack_ErrCode.
const Ack_ErrCode_TypeID = 0xdf6d763cff9bd528

// Values of Ack_ErrCode.
const (
	Ack_ErrCode_ok     Ack_ErrCode = 0
	Ack_ErrCode_retry  Ack_ErrCode = 1
	Ack_ErrCode_reject Ack_ErrCode = 2
)

// String returns the enum's constant name.
func (c Ack_ErrCode) String() string {
	switch c {
	case Ack_ErrCode_ok:
		return "ok"
	case Ack_ErrCode_retry:
		return "retry"
	case Ack_ErrCode_reject:
		return "reject"

	default:
		return ""
	}
}

// Ack_ErrCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Ack_ErrCodeFromString(c string) Ack_ErrCode {
	switch c {
	case "ok":
		return Ack_ErrCode_ok
	case "retry":
		return Ack_ErrCode_retry
	case "reject":
		return Ack_ErrCode_reject

	default:
		return 0
	}
}

type Ack_ErrCode_List struct{ capnp.List }

func NewAck_ErrCode_List(s *capnp.Segment, sz int32) (Ack_ErrCode_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Ack_ErrCode_List{l.List}, err
}

func (l Ack_ErrCode_List) At(i int) Ack_ErrCode {
	ul := capnp.UInt16List{List: l.List}
	return Ack_ErrCode(ul.At(i))
}

func (l Ack_ErrCode_List) Set(i int, v Ack_ErrCode) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

const schema_c736b44d517db44a = "x\xdaL\xce1J\x03A\x18\x05\xe0\xf7fw\x8d\xc8" +
	"j\x18V\x11\x04YP\x8bX\x18\xa2\x04\x8bEP\xa3" +
	"i\x04\xd1\xc1\x13\x84q\x1a\x17M\xf8\x0d\x8a\x85\xe4\x1a" +
	"\x82\x8d\x17\xd0\"\xe4\x0e\xc1\xc2B\xc1N\x10\x0bK\xc1" +
	"\x1b\x8c$\x88\x91\xbf\xfb\xdf\xe3\xe3U\xba\xe1\x96Z\x8d" +
	"\xfa\x8b\xc0\xd1\x1d\xa31_z\xbd\xf5\x1b\x17\xa7\xef\xd0" +
	"S\xca\xbf=T_\xb2\x9b\xfbo\x80\xc9\xa3\xee&\xcf" +
	"\xba\x00$O\xfa\x00\x1cef\x82\xf4{\xbdk\xb3\xdf" +
	"[\xef#\xe2\xa0\xf2\xa1%\xf9\xd4\xb3@\xf2\xa5/\xe1" +
	"\x7f\xcf\xfa\x86\xcd\xcb\xb6\xd1:c+\xdb\xb6y\xb9." +
	"\xa9\xec4\x8f\xdd!ib*@\xcf\xcf\x01\xa4\x9eY" +
	"\x03\xa8\xf4d\x06\x04\xcd<\x15\xd7\x96\xabMq'\xce" +
	"\xb6\xff\x0c\xa4C\xc4\x84\xe4\xbf\xd5\xacu\xea2D\xcd" +
	"x\x10\x02!\x01\xbd\xbc\x00\x98\xa5\x80\xa6\xa2HNs" +
	"\xf0[\xa9\x01\xa6\x14\xd0T\x15\x0bN\x84\xc5\x91\x02\xb2" +
	"\x08v\x9c\xc8\xae;\xb7\x8c\xa1\x18\x83?\x01\x00\x00\xff" +
	"\xff\xdc\xd0S\xca"

func init() {
	schemas.Register(schema_c736b44d517db44a,
		0xdf6d763cff9bd528,
		0xf0ad983ad234aedc)
}
