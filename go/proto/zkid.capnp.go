// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ZkId struct{ capnp.Struct }

// ZkId_TypeID is the unique identifier for the type ZkId.
const ZkId_TypeID = 0xfaadb66890d8d665

func NewZkId(s *capnp.Segment) (ZkId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ZkId{st}, err
}

func NewRootZkId(s *capnp.Segment) (ZkId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ZkId{st}, err
}

func ReadRootZkId(msg *capnp.Message) (ZkId, error) {
	root, err := msg.RootPtr()
	return ZkId{root.Struct()}, err
}

func (s ZkId) String() string {
	str, _ := text.Marshal(0xfaadb66890d8d665, s.Struct)
	return str
}

func (s ZkId) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ZkId) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ZkId) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ZkId) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZkId) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ZkId) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ZkId) Addrs() (Addr_List, error) {
	p, err := s.Struct.Ptr(1)
	return Addr_List{List: p.List()}, err
}

func (s ZkId) HasAddrs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ZkId) SetAddrs(v Addr_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated Addr_List, preferring placement in s's segment.
func (s ZkId) NewAddrs(n int32) (Addr_List, error) {
	l, err := NewAddr_List(s.Struct.Segment(), n)
	if err != nil {
		return Addr_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// ZkId_List is a list of ZkId.
type ZkId_List struct{ capnp.List }

// NewZkId creates a new list of ZkId.
func NewZkId_List(s *capnp.Segment, sz int32) (ZkId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return ZkId_List{l}, err
}

func (s ZkId_List) At(i int) ZkId { return ZkId{s.List.Struct(i)} }

func (s ZkId_List) Set(i int, v ZkId) error { return s.List.SetStruct(i, v.Struct) }

func (s ZkId_List) String() string {
	str, _ := text.MarshalList(0xfaadb66890d8d665, s.List)
	return str
}

// ZkId_Promise is a wrapper for a ZkId promised by a client call.
type ZkId_Promise struct{ *capnp.Pipeline }

func (p ZkId_Promise) Struct() (ZkId, error) {
	s, err := p.Pipeline.Struct()
	return ZkId{s}, err
}

type Addr struct{ capnp.Struct }

// Addr_TypeID is the unique identifier for the type Addr.
const Addr_TypeID = 0x8982abce7c93c140

func NewAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Addr{st}, err
}

func NewRootAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Addr{st}, err
}

func ReadRootAddr(msg *capnp.Message) (Addr, error) {
	root, err := msg.RootPtr()
	return Addr{root.Struct()}, err
}

func (s Addr) String() string {
	str, _ := text.Marshal(0x8982abce7c93c140, s.Struct)
	return str
}

func (s Addr) Type() uint8 {
	return s.Struct.Uint8(0)
}

func (s Addr) SetType(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Addr) Addr() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Addr) HasAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Addr) SetAddr(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Addr) Port() uint16 {
	return s.Struct.Uint16(2)
}

func (s Addr) SetPort(v uint16) {
	s.Struct.SetUint16(2, v)
}

// Addr_List is a list of Addr.
type Addr_List struct{ capnp.List }

// NewAddr creates a new list of Addr.
func NewAddr_List(s *capnp.Segment, sz int32) (Addr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Addr_List{l}, err
}

func (s Addr_List) At(i int) Addr { return Addr{s.List.Struct(i)} }

func (s Addr_List) Set(i int, v Addr) error { return s.List.SetStruct(i, v.Struct) }

func (s Addr_List) String() string {
	str, _ := text.MarshalList(0x8982abce7c93c140, s.List)
	return str
}

// Addr_Promise is a wrapper for a Addr promised by a client call.
type Addr_Promise struct{ *capnp.Pipeline }

func (p Addr_Promise) Struct() (Addr, error) {
	s, err := p.Pipeline.Struct()
	return Addr{s}, err
}

const schema_c4f0db62ff503b7d = "x\xdal\x901K\xc3P\x14\x85\xcf\xb9\xafI,\xa6" +
	"\xa6\x0f:\xb9twp\xe8\xa8K\x0a\x16,(\xe4\x81" +
	"\x93[\xf4\x15\x0c\x05\x0dI\x17EA\xb2\xb9\x09\xfe\x0c" +
	"\x117\x9d\x05gGQ\xc4\xff\xe0\xec\x12yE(\x84" +
	"N\x07>>\xf8.\xb7{\x1d\x8b\xf6\x9e\x01\xb3\xe2\xf9" +
	"u\xfcrw\xf9v_\xdd\xc0\xac\x92\xf5\xd5vR\x1f" +
	"}\xfd\xbc\xc2c\x00\xe8a\xa5G\xf3}\x04\xeb\xc9\xfb" +
	"\xc7\xed\xc9\xd3\xc3o\xd3\x14g|V\xfa{\xbe\xce\xbc" +
	"\x98fv\xf38\xcdy\x9ao\x0d\xad-\x90\x90&T" +
	"-\xa0E@\x8f6\x00\x13+\x9a=!\xd9\xa3cc" +
	"\xc7v\x14M\"\xd4\xc2\x1e\x05\xd0\xfb\x0e\xee*\x9a\x03" +
	"a4;\xcf'\xf4!\xf4\xc1(\xb5\xb6`\x07\xc2\x0e" +
	"\x18\xe5g\xc5\x8c\x01\x84A\xa3}8\x1d\xdbf{\xb0" +
	"\xa4\xbd\xbe\xac=\xf8o[a?+mZ\xb2\x0da" +
	"\x1bT\x99e\x08a\x08\xf6\xdd\x1d%\xd7\xc0D\x91\xdd" +
	"\xc53A\x07\xff\x02\x00\x00\xff\xff\x92#K\xd7"

func init() {
	schemas.Register(schema_c4f0db62ff503b7d,
		0x8982abce7c93c140,
		0xfaadb66890d8d665)
}
