// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type ZkId struct{ capnp.Struct }

// ZkId_TypeID is the unique identifier for the type ZkId.
const ZkId_TypeID = 0xfaadb66890d8d665

func NewZkId(s *capnp.Segment) (ZkId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ZkId{st}, err
}

func NewRootZkId(s *capnp.Segment) (ZkId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ZkId{st}, err
}

func ReadRootZkId(msg *capnp.Message) (ZkId, error) {
	root, err := msg.RootPtr()
	return ZkId{root.Struct()}, err
}

func (s ZkId) String() string {
	str, _ := text.Marshal(0xfaadb66890d8d665, s.Struct)
	return str
}

func (s ZkId) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ZkId) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ZkId) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ZkId) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZkId) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ZkId) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ZkId) Addrs() (Addr_List, error) {
	p, err := s.Struct.Ptr(1)
	return Addr_List{List: p.List()}, err
}

func (s ZkId) HasAddrs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ZkId) SetAddrs(v Addr_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated Addr_List, preferring placement in s's segment.
func (s ZkId) NewAddrs(n int32) (Addr_List, error) {
	l, err := NewAddr_List(s.Struct.Segment(), n)
	if err != nil {
		return Addr_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// ZkId_List is a list of ZkId.
type ZkId_List struct{ capnp.List }

// NewZkId creates a new list of ZkId.
func NewZkId_List(s *capnp.Segment, sz int32) (ZkId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return ZkId_List{l}, err
}

func (s ZkId_List) At(i int) ZkId { return ZkId{s.List.Struct(i)} }

func (s ZkId_List) Set(i int, v ZkId) error { return s.List.SetStruct(i, v.Struct) }

func (s ZkId_List) String() string {
	str, _ := text.MarshalList(0xfaadb66890d8d665, s.List)
	return str
}

// ZkId_Promise is a wrapper for a ZkId promised by a client call.
type ZkId_Promise struct{ *capnp.Pipeline }

func (p ZkId_Promise) Struct() (ZkId, error) {
	s, err := p.Pipeline.Struct()
	return ZkId{s}, err
}

type Addr struct{ capnp.Struct }

// Addr_TypeID is the unique identifier for the type Addr.
const Addr_TypeID = 0x8982abce7c93c140

func NewAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Addr{st}, err
}

func NewRootAddr(s *capnp.Segment) (Addr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Addr{st}, err
}

func ReadRootAddr(msg *capnp.Message) (Addr, error) {
	root, err := msg.RootPtr()
	return Addr{root.Struct()}, err
}

func (s Addr) String() string {
	str, _ := text.Marshal(0x8982abce7c93c140, s.Struct)
	return str
}

func (s Addr) Type() uint8 {
	return s.Struct.Uint8(0)
}

func (s Addr) SetType(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Addr) Addr() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Addr) HasAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Addr) SetAddr(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Addr) Port() uint16 {
	return s.Struct.Uint16(2)
}

func (s Addr) SetPort(v uint16) {
	s.Struct.SetUint16(2, v)
}

// Addr_List is a list of Addr.
type Addr_List struct{ capnp.List }

// NewAddr creates a new list of Addr.
func NewAddr_List(s *capnp.Segment, sz int32) (Addr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Addr_List{l}, err
}

func (s Addr_List) At(i int) Addr { return Addr{s.List.Struct(i)} }

func (s Addr_List) Set(i int, v Addr) error { return s.List.SetStruct(i, v.Struct) }

func (s Addr_List) String() string {
	str, _ := text.MarshalList(0x8982abce7c93c140, s.List)
	return str
}

// Addr_Promise is a wrapper for a Addr promised by a client call.
type Addr_Promise struct{ *capnp.Pipeline }

func (p Addr_Promise) Struct() (Addr, error) {
	s, err := p.Pipeline.Struct()
	return Addr{s}, err
}

const schema_c4f0db62ff503b7d = "x\xdal\x90?K\xc3P\x14\xc5\xcf\xb9\xaf\x7f(\xb6" +
	"\xd64\x9d\\:\xb89\x88v\xd4%\x82\x82\x05\x85<" +
	"tr\x8b}\x01CAC\xd2E\xd1%\x9b\x9b\xe0\x17" +
	"p\x17\xe9\xe6.\x08\xe2\xa0\xa3\x08n~\x02g\x97'" +
	"\x8f\x16\xc4R\xeer\xf8q\xe0w9\xab_\xa5@\xd6" +
	"\xca\xcfK\xc0\xfe-\xcb\x15\x1b<\xde\\\xbc\xdd\x15W" +
	"\xd0s\xa4\xbd\xdc\x08\xed\xd1\xe7\xf7\x13\xca\xac\x02\xfe\x8b" +
	"W\xf8\xaf\xde8\x8d@\x1b\xbf\x7f\\\x1f?\xdc\xffL" +
	"\x97\xc5U\xa2V\xe1\xc7\xadq\x1a\xc1N\xaeo\xcf\x07" +
	"\x89Y\xe9G)O\xd2\xf5Mc2\x84\xa4\xae\xab\x12" +
	"P\"\xe0m/\x03:P\xd4\xbbB\xb2M\xc7z\x8e" +
	"m)\xeaP\xe8\x09\xdb\x14\xc0\xdbspGQ\x1f\x08" +
	"\x9b\xc3\xb34f\x05\xc2\x0a\xd8\x8c\x8c\xc9\xd8\x80\xb0\x01" +
	"6\xd3\xd3l\xc8*\x84U\xf0\x9f\xfbp\xd03\xd3\xee" +
	"\xee\x0c\xf7\xe2,ww\xe26\xc2N\x92\x9b(g\x0d" +
	"\xc2\x1a\xa8\x12\xc3:\x84u\xb0\xe3\xfe\xc89\x0f\x86\x8a" +
	"\\\xf8\x9b\x16t\xf07\x00\x00\xff\xff\xeb,RN"

func init() {
	schemas.Register(schema_c4f0db62ff503b7d,
		0x8982abce7c93c140,
		0xfaadb66890d8d665)
}
