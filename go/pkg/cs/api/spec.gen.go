// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
