// Package mgmtapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package mgmtapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
