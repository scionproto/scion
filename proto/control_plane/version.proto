option go_package = "github.com/scionproto/scion/pkg/proto/control_plane";

package proto.control_plane;

import "google/protobuf/timestamp.proto";

service VersionService {
    // Return version information about the service API.
    rpc Version(VersionRequest) returns (VersionResponse) {}
}

message VersionRequest {}

message VersionResponse {
    // API version
    required uint32 api_version = 1;
    // Map of individual components and their versions,
    //
    // List of known components / services:
    // - "segments"
    // - "drkey"
    // - "cppki"
    // - "renewal"
    //
    // Rules for updating version information:
    // - the 'api-version' must be incremented every time that
    //   any of the component's APIs changes in any way
    // - the component version should be incremented only if the
    //   API change of the component is not backwards compatible;
    //   a new API component version typically requires a new proto file.
    // - component keys can only added, not removed (TBD)
    map<string, uint32> transports = 2;
}

